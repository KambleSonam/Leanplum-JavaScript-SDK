!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Leanplum=t():e.Leanplum=t()}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=6)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={METHODS:{START:"start",STOP:"stop",ADVANCE:"advance",TRACK:"track",PAUSE_SESSION:"pauseSession",RESUME_SESSION:"resumeSession",PAUSE_STATE:"pauseState",RESUME_STATE:"resumeState",DOWNLOAD_FILE:"downloadFile",MULTI:"multi",SET_VARS:"setVars",GET_VARS:"getVars",SET_USER_ATTRIBUTES:"setUserAttributes",SET_DEVICE_ATTRIBUTES:"setDeviceAttributes",UPLOAD_FILE:"uploadFile",REGISTER_DEVICE:"registerDevice"},SDK_VERSION:"1.9.0",CLIENT:"js",PARAMS:{ACTION:"action",APP_ID:"appId",CLIENT:"client",CLIENT_KEY:"clientKey",CURRENCY_CODE:"currencyCode",DEVICE_ID:"deviceId",SDK_VERSION:"sdkVersion",USER_ID:"userId",NEW_USER_ID:"newUserId",DEV_MODE:"devMode",VERSION_NAME:"versionName",SYSTEM_NAME:"systemName",SYSTEM_VERSION:"systemVersion",BROWSER_NAME:"browserName",BROWSER_VERSION:"browserVersion",DEVICE_NAME:"deviceName",DEVICE_MODEL:"deviceModel",USER_ATTRIBUTES:"userAttributes",LOCALE:"locale",COUNTRY:"country",REGION:"region",CITY:"city",LOCATION:"location",STATE:"state",INFO:"info",EVENT:"event",VALUE:"value",FILENAME:"filename",TIME:"time",DATA:"data",VARS:"vars",FILE:"file",SIZE:"size",VARIATION:"variation",HASH:"hash",EMAIL:"email",VARIABLES:"vars",ACTION_DEFINITIONS:"actionDefinitions",PARAMS:"params",INCLUDE_DEFAULTS:"includeDefaults",INCLUDE_VARIANT_DEBUG_INFO:"includeVariantDebugInfo",NEWSFEED_MESSAGES:"newsfeedMessages",MESSAGE_ID:"messageId",WEB_PUSH_SUBSCRIPTION:"webPushSubscription"},KEYS:{IS_REGISTERED:"isRegistered",LATEST_VERSION:"latestVersion",SYNC_INBOX:"syncNewsfeed",MESSAGES:"messages",VARS:"vars",VARIANTS:"variants",VARIANT_DEBUG_INFO:"variantDebugInfo",ACTION_DEFINITIONS:"actionDefinitions",TOKEN:"token"},DEFAULT_KEYS:{COUNT:"__leanplum_unsynced",ITEM:"__leanplum_unsynced_",VARIABLES:"__leanplum_variables",VARIANTS:"__leanplum_variants",VARIANT_DEBUG_INFO:"__leanplum_variant_debug_info",ACTION_DEFINITIONS:"__leanplum_action_definitions",INBOX_MESSAGES:"__leanplum_inbox_messages",TOKEN:"__leanplum_token",DEVICE_ID:"__leanplum_device_id",USER_ID:"__leanplum_user_id",SESSION:"__leanplum_session",MESSAGE_OCCURRENCES:"__leanplum_message_occurrences",MESSAGE_CACHE:"__leanplum_message_cache",PUSH_SUBSCRIPTION:"__leanplum_push_subscription"},VALUES:{DETECT:"(detect)",DEFAULT_PUSH_ACTION:"Open action"}}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(0)),s=function(){function e(){this.argString="",this.argValues={}}return e.prototype.add=function(e,t){if(void 0===t)return this;this.argString&&(this.argString+="&");var n="";return n=t instanceof Array?JSON.stringify(t):encodeURIComponent(t),this.argString+=e+"="+n,this.argValues[e]=t,this},e.prototype.body=function(e){return e?(this._body=e,this):this._body},e.prototype.attachApiKeys=function(e,t){return this.add(i.default.PARAMS.APP_ID,e).add(i.default.PARAMS.CLIENT,i.default.CLIENT).add(i.default.PARAMS.CLIENT_KEY,t)},e.prototype.build=function(){return this.argString},e.prototype.buildDict=function(){return this.argValues},e}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={local:!0,session:!0},i={local:{},session:{}},s=function(){function e(){}return e.get=function(e,t){return void 0===t&&(t="local"),r[t]?"local"===t?localStorage[e]:sessionStorage.getItem(e):i[t][e]},e.save=function(e,t,n){if(void 0===n&&(n="local"),r[n])try{"local"===n?localStorage[e]=t:sessionStorage.setItem(e,t)}catch(s){r[n]=!1,i[n][e]=t}else i[n][e]=t},e.remove=function(e,t){if(void 0===t&&(t="local"),r[t])try{"local"===t?localStorage.removeItem(e):sessionStorage.removeItem(e)}catch(n){r[t]=!1,delete i[t][e]}else delete i[t][e]},e}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this.networkTimeoutSeconds=10,this.requestQueue=[],this.runningRequest=!1}return e.prototype.setNetworkTimeout=function(e){this.networkTimeoutSeconds=e},e.prototype.ajax=function(e,t,n,r,i,s,o){var a=this;if(s){if(this.runningRequest)return this.enqueueRequest(arguments);this.runningRequest=!0}if("undefined"!=typeof XDomainRequest)return"http:"===location.protocol&&0===t.indexOf("https:")&&(t="http:"+t.substring(6)),this.ajaxIE8(e,t,n,r,i,s,o);var u=!1,c=new XMLHttpRequest;c.onreadystatechange=function(){if(4===c.readyState){if(u)return;var e;u=!0;var t=!1;if(o)e=c.responseText;else try{e=JSON.parse(c.responseText)}catch(e){setTimeout((function(){i&&i(null,c)}),0),t=!0}t||(c.status>=200&&c.status<300?setTimeout((function(){r&&r(e,c)}),0):setTimeout((function(){i&&i(e,c)}),0)),s&&(a.runningRequest=!1,a.dequeueRequest())}},c.open(e,t,!0),c.setRequestHeader("Content-Type","text/plain"),c.send(n),setTimeout((function(){u||c.abort()}),1e3*this.networkTimeoutSeconds)},e.prototype.ajaxIE8=function(e,t,n,r,i,s,o){var a=this,u=new XDomainRequest;u.onload=function(){var e,t=!1;if(o)e=u.responseText;else try{e=JSON.parse(u.responseText)}catch(e){setTimeout((function(){i&&i(null,u)}),0),t=!0}t||setTimeout((function(){r&&r(e,u)}),0),s&&(a.runningRequest=!1,a.dequeueRequest())},u.onerror=u.ontimeout=function(){setTimeout((function(){i&&i(null,u)}),0),s&&(a.runningRequest=!1,a.dequeueRequest())},u.onprogress=function(){},u.open(e,t),u.timeout=1e3*this.networkTimeoutSeconds,u.send(n)},e.prototype.enqueueRequest=function(e){this.requestQueue.push(e)},e.prototype.dequeueRequest=function(){var e=this.requestQueue.shift();e&&this.ajax.apply(this,e)},e}();t.default=r},function(e,t,n){(function(e,n){var r="[object Arguments]",i="[object Map]",s="[object Object]",o="[object Set]",a=/^\[object .+?Constructor\]$/,u=/^(?:0|[1-9]\d*)$/,c={};c["[object Float32Array]"]=c["[object Float64Array]"]=c["[object Int8Array]"]=c["[object Int16Array]"]=c["[object Int32Array]"]=c["[object Uint8Array]"]=c["[object Uint8ClampedArray]"]=c["[object Uint16Array]"]=c["[object Uint32Array]"]=!0,c[r]=c["[object Array]"]=c["[object ArrayBuffer]"]=c["[object Boolean]"]=c["[object DataView]"]=c["[object Date]"]=c["[object Error]"]=c["[object Function]"]=c[i]=c["[object Number]"]=c[s]=c["[object RegExp]"]=c[o]=c["[object String]"]=c["[object WeakMap]"]=!1;var l="object"==typeof e&&e&&e.Object===Object&&e,d="object"==typeof self&&self&&self.Object===Object&&self,f=l||d||Function("return this")(),p=t&&!t.nodeType&&t,h=p&&"object"==typeof n&&n&&!n.nodeType&&n,v=h&&h.exports===p,g=v&&l.process,_=function(){try{return g&&g.binding&&g.binding("util")}catch(e){}}(),S=_&&_.isTypedArray;function y(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}function b(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function A(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}var m,E,I,R=Array.prototype,T=Function.prototype,M=Object.prototype,D=f["__core-js_shared__"],O=T.toString,w=M.hasOwnProperty,N=(m=/[^.]+$/.exec(D&&D.keys&&D.keys.IE_PROTO||""))?"Symbol(src)_1."+m:"",C=M.toString,P=RegExp("^"+O.call(w).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),k=v?f.Buffer:void 0,U=f.Symbol,L=f.Uint8Array,V=M.propertyIsEnumerable,j=R.splice,F=U?U.toStringTag:void 0,q=Object.getOwnPropertySymbols,H=k?k.isBuffer:void 0,K=(E=Object.keys,I=Object,function(e){return E(I(e))}),x=_e(f,"DataView"),W=_e(f,"Map"),Y=_e(f,"Promise"),B=_e(f,"Set"),G=_e(f,"WeakMap"),z=_e(Object,"create"),J=Ae(x),X=Ae(W),$=Ae(Y),Q=Ae(B),Z=Ae(G),ee=U?U.prototype:void 0,te=ee?ee.valueOf:void 0;function ne(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function re(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function ie(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function se(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new ie;++t<n;)this.add(e[t])}function oe(e){var t=this.__data__=new re(e);this.size=t.size}function ae(e,t){var n=Ie(e),r=!n&&Ee(e),i=!n&&!r&&Re(e),s=!n&&!r&&!i&&we(e),o=n||r||i||s,a=o?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],u=a.length;for(var c in e)!t&&!w.call(e,c)||o&&("length"==c||i&&("offset"==c||"parent"==c)||s&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||be(c,u))||a.push(c);return a}function ue(e,t){for(var n=e.length;n--;)if(me(e[n][0],t))return n;return-1}function ce(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":F&&F in Object(e)?function(e){var t=w.call(e,F),n=e[F];try{e[F]=void 0;var r=!0}catch(e){}var i=C.call(e);r&&(t?e[F]=n:delete e[F]);return i}(e):function(e){return C.call(e)}(e)}function le(e){return Oe(e)&&ce(e)==r}function de(e,t,n,a,u){return e===t||(null==e||null==t||!Oe(e)&&!Oe(t)?e!=e&&t!=t:function(e,t,n,a,u,c){var l=Ie(e),d=Ie(t),f=l?"[object Array]":ye(e),p=d?"[object Array]":ye(t),h=(f=f==r?s:f)==s,v=(p=p==r?s:p)==s,g=f==p;if(g&&Re(e)){if(!Re(t))return!1;l=!0,h=!1}if(g&&!h)return c||(c=new oe),l||we(e)?he(e,t,n,a,u,c):function(e,t,n,r,s,a,u){switch(n){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!a(new L(e),new L(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return me(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case i:var c=b;case o:var l=1&r;if(c||(c=A),e.size!=t.size&&!l)return!1;var d=u.get(e);if(d)return d==t;r|=2,u.set(e,t);var f=he(c(e),c(t),r,s,a,u);return u.delete(e),f;case"[object Symbol]":if(te)return te.call(e)==te.call(t)}return!1}(e,t,f,n,a,u,c);if(!(1&n)){var _=h&&w.call(e,"__wrapped__"),S=v&&w.call(t,"__wrapped__");if(_||S){var y=_?e.value():e,m=S?t.value():t;return c||(c=new oe),u(y,m,n,a,c)}}if(!g)return!1;return c||(c=new oe),function(e,t,n,r,i,s){var o=1&n,a=ve(e),u=a.length,c=ve(t).length;if(u!=c&&!o)return!1;var l=u;for(;l--;){var d=a[l];if(!(o?d in t:w.call(t,d)))return!1}var f=s.get(e);if(f&&s.get(t))return f==t;var p=!0;s.set(e,t),s.set(t,e);var h=o;for(;++l<u;){d=a[l];var v=e[d],g=t[d];if(r)var _=o?r(g,v,d,t,e,s):r(v,g,d,e,t,s);if(!(void 0===_?v===g||i(v,g,n,r,s):_)){p=!1;break}h||(h="constructor"==d)}if(p&&!h){var S=e.constructor,y=t.constructor;S==y||!("constructor"in e)||!("constructor"in t)||"function"==typeof S&&S instanceof S&&"function"==typeof y&&y instanceof y||(p=!1)}return s.delete(e),s.delete(t),p}(e,t,n,a,u,c)}(e,t,n,a,de,u))}function fe(e){return!(!De(e)||function(e){return!!N&&N in e}(e))&&(Te(e)?P:a).test(Ae(e))}function pe(e){if(n=(t=e)&&t.constructor,r="function"==typeof n&&n.prototype||M,t!==r)return K(e);var t,n,r,i=[];for(var s in Object(e))w.call(e,s)&&"constructor"!=s&&i.push(s);return i}function he(e,t,n,r,i,s){var o=1&n,a=e.length,u=t.length;if(a!=u&&!(o&&u>a))return!1;var c=s.get(e);if(c&&s.get(t))return c==t;var l=-1,d=!0,f=2&n?new se:void 0;for(s.set(e,t),s.set(t,e);++l<a;){var p=e[l],h=t[l];if(r)var v=o?r(h,p,l,t,e,s):r(p,h,l,e,t,s);if(void 0!==v){if(v)continue;d=!1;break}if(f){if(!y(t,(function(e,t){if(o=t,!f.has(o)&&(p===e||i(p,e,n,r,s)))return f.push(t);var o}))){d=!1;break}}else if(p!==h&&!i(p,h,n,r,s)){d=!1;break}}return s.delete(e),s.delete(t),d}function ve(e){return function(e,t,n){var r=t(e);return Ie(e)?r:function(e,t){for(var n=-1,r=t.length,i=e.length;++n<r;)e[i+n]=t[n];return e}(r,n(e))}(e,Ne,Se)}function ge(e,t){var n,r,i=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?i["string"==typeof t?"string":"hash"]:i.map}function _e(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return fe(n)?n:void 0}ne.prototype.clear=function(){this.__data__=z?z(null):{},this.size=0},ne.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},ne.prototype.get=function(e){var t=this.__data__;if(z){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return w.call(t,e)?t[e]:void 0},ne.prototype.has=function(e){var t=this.__data__;return z?void 0!==t[e]:w.call(t,e)},ne.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=z&&void 0===t?"__lodash_hash_undefined__":t,this},re.prototype.clear=function(){this.__data__=[],this.size=0},re.prototype.delete=function(e){var t=this.__data__,n=ue(t,e);return!(n<0)&&(n==t.length-1?t.pop():j.call(t,n,1),--this.size,!0)},re.prototype.get=function(e){var t=this.__data__,n=ue(t,e);return n<0?void 0:t[n][1]},re.prototype.has=function(e){return ue(this.__data__,e)>-1},re.prototype.set=function(e,t){var n=this.__data__,r=ue(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},ie.prototype.clear=function(){this.size=0,this.__data__={hash:new ne,map:new(W||re),string:new ne}},ie.prototype.delete=function(e){var t=ge(this,e).delete(e);return this.size-=t?1:0,t},ie.prototype.get=function(e){return ge(this,e).get(e)},ie.prototype.has=function(e){return ge(this,e).has(e)},ie.prototype.set=function(e,t){var n=ge(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},se.prototype.add=se.prototype.push=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this},se.prototype.has=function(e){return this.__data__.has(e)},oe.prototype.clear=function(){this.__data__=new re,this.size=0},oe.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},oe.prototype.get=function(e){return this.__data__.get(e)},oe.prototype.has=function(e){return this.__data__.has(e)},oe.prototype.set=function(e,t){var n=this.__data__;if(n instanceof re){var r=n.__data__;if(!W||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new ie(r)}return n.set(e,t),this.size=n.size,this};var Se=q?function(e){return null==e?[]:(e=Object(e),function(e,t){for(var n=-1,r=null==e?0:e.length,i=0,s=[];++n<r;){var o=e[n];t(o,n,e)&&(s[i++]=o)}return s}(q(e),(function(t){return V.call(e,t)})))}:function(){return[]},ye=ce;function be(e,t){return!!(t=null==t?9007199254740991:t)&&("number"==typeof e||u.test(e))&&e>-1&&e%1==0&&e<t}function Ae(e){if(null!=e){try{return O.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function me(e,t){return e===t||e!=e&&t!=t}(x&&"[object DataView]"!=ye(new x(new ArrayBuffer(1)))||W&&ye(new W)!=i||Y&&"[object Promise]"!=ye(Y.resolve())||B&&ye(new B)!=o||G&&"[object WeakMap]"!=ye(new G))&&(ye=function(e){var t=ce(e),n=t==s?e.constructor:void 0,r=n?Ae(n):"";if(r)switch(r){case J:return"[object DataView]";case X:return i;case $:return"[object Promise]";case Q:return o;case Z:return"[object WeakMap]"}return t});var Ee=le(function(){return arguments}())?le:function(e){return Oe(e)&&w.call(e,"callee")&&!V.call(e,"callee")},Ie=Array.isArray;var Re=H||function(){return!1};function Te(e){if(!De(e))return!1;var t=ce(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}function Me(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}function De(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Oe(e){return null!=e&&"object"==typeof e}var we=S?function(e){return function(t){return e(t)}}(S):function(e){return Oe(e)&&Me(e.length)&&!!c[ce(e)]};function Ne(e){return null!=(t=e)&&Me(t.length)&&!Te(t)?ae(e):pe(e);var t}n.exports=function(e,t){return de(e,t)}}).call(this,n(14),n(15)(e))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.decodeColor=function(e){var t=255&e,n=255&(e>>=8);return"rgba("+(255&(e>>=8))+","+n+","+t+","+(255&(e>>=8))/255+")"},e.encodeColor=function(e){if("number"==typeof e)return e;var t=/^rgba\((\d+),(\d+),(\d+),(\d+(\.\d+)?)\)$/.exec(e);if(t)return(255*parseInt(t[4],10)<<24)+((255&parseInt(t[1],10))<<16)+((255&parseInt(t[2],10))<<8)+(255&parseInt(t[3],10));var n=/^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(e);if(n)return(255<<24)+((255&parseInt(n[1],16))<<16)+((255&parseInt(n[2],16))<<8)+(255&parseInt(n[3],16));throw new Error('Could not parse color "'+e+'"')},e}();t.default=r},function(e,t,n){var r=n(7);e.exports=r.default},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(0)),s=r(n(8)),o=function(){function e(){}return e.setApiPath=function(t){e._lp.setApiPath(t)},e.setEmail=function(){},e.setNetworkTimeout=function(t){e._lp.setNetworkTimeout(t)},e.setAppIdForDevelopmentMode=function(t,n){e._lp.setAppIdForDevelopmentMode(t,n)},e.setAppIdForProductionMode=function(t,n){e._lp.setAppIdForProductionMode(t,n)},e.setSocketHost=function(t){e._lp.setSocketHost(t)},e.setDeviceId=function(t){e._lp.setDeviceId(t)},e.setLocale=function(t){e._lp.setLocale(t)},e.setAppVersion=function(t){e._lp.setAppVersion(t)},e.setDeviceName=function(t){e._lp.setDeviceName(t)},e.setDeviceModel=function(t){e._lp.setDeviceModel(t)},e.setRequestBatching=function(t,n){e._lp.setRequestBatching(t,n)},e.setSystemName=function(t){e._lp.setSystemName(t)},e.setSystemVersion=function(t){e._lp.setSystemVersion(t)},e.setVariables=function(t){e._lp.setVariables(t)},e.setVariantDebugInfoEnabled=function(t){e._lp.setVariantDebugInfoEnabled(t)},e.enableRichInAppMessages=function(t){e._lp.enableRichInAppMessages(t)},e.processMessageEvent=function(t,n){e._lp.processMessageEvent(t,n)},e.getVariantDebugInfo=function(){return e._lp.getVariantDebugInfo()},e.getVariables=function(){return e._lp.getVariables()},e.getVariable=function(){for(var t,n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return(t=e._lp).getVariable.apply(t,n)},e.getVariants=function(){return e._lp.getVariants()},e.inbox=function(){return e._lp.inbox()},e.addStartResponseHandler=function(t){e._lp.addStartResponseHandler(t)},e.removeStartResponseHandler=function(t){e._lp.removeStartResponseHandler(t)},e.addVariablesChangedHandler=function(t){e._lp.addVariablesChangedHandler(t)},e.removeVariablesChangedHandler=function(t){e._lp.removeVariablesChangedHandler(t)},e.forceContentUpdate=function(t){e._lp.forceContentUpdate(t)},e.useSessionLength=function(t){e._lp.useSessionLength(t)},e.start=function(t,n,r){e._lp.start(t,n,r)},e.startFromCache=function(t,n,r){e._lp.startFromCache(t,n,r)},e.stop=function(){e._lp.stop()},e.pauseSession=function(){e._lp.pauseSession()},e.resumeSession=function(){e._lp.resumeSession()},e.pauseState=function(){e._lp.pauseState()},e.resumeState=function(){e._lp.resumeState()},e.getUserId=function(){return this._lp.getUserId()},e.setUserId=function(t){e.setUserAttributes(t)},e.setUserAttributes=function(t,n){e._lp.setUserAttributes(t,n)},e.track=function(t,n,r,i){e._lp.track(t,n,r,i)},e.trackPurchase=function(t,n,r,i){void 0===i&&(i="Purchase"),e._lp.trackPurchase(t,n,r,i)},e.advanceTo=function(t,n,r){e._lp.advanceTo(t,n,r)},e.isWebPushSupported=function(){return e._lp.isWebPushSupported()},e.isWebPushSubscribed=function(){return e._lp.isWebPushSubscribed()},e.setWebPushOptions=function(t){return e._lp.setWebPushOptions(t)},e.registerForWebPush=function(t){return e._lp.registerForWebPush(t)},e.unregisterFromWebPush=function(){return e._lp.unregisterFromWebPush()},e.clearUserContent=function(){e._lp.clearUserContent()},e.defineAction=function(t){e._lp.defineAction(t)},e.applyQueue=function(t){e._lp.applyQueue(t)},e.on=function(t,n){e._lp.on(t,n)},e.off=function(t,n){e._lp.off(t,n)},e.getFileUrl=function(t){return e._lp.getFileUrl(t)},e.__destroy=function(){this._lp=new s.default(window)},e._lp=new s.default(window),e.VERSION=i.default.SDK_VERSION,e}();t.default=o},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var s=i(n(1)),o=i(n(9)),a=i(n(0)),u=i(n(10)),c=i(n(11)),l=i(n(12)),d=i(n(13)),f=i(n(2)),p=i(n(17)),h=i(n(18)),v=i(n(19)),g=n(20),_=i(n(21)),S=a.default.DEFAULT_KEYS.SESSION,y=function(){function e(e){var t=this;this.wnd=e,this._events=new v.default,this._internalState=new u.default,this._lpInbox=new c.default(this.createRequest.bind(this),this.onInboxAction.bind(this)),this._lpRequest=new l.default,this._varCache=new _.default(this.createRequest.bind(this)),this._lpSocket=new d.default(this._varCache,this.createRequest.bind(this),this._lpRequest.getLastResponse.bind(this._lpRequest),this._events),this._pushManager=new p.default(this.createRequest.bind(this)),this._messages=new h.default(this._events,this.createRequest.bind(this),this.getFileUrl.bind(this)),this._browserDetector=new o.default(e),this._events.on("navigationChange",(function(e){var n=!1;t._events.emit("openUrl",{preventDefault:function(){return n=!0},url:e}),n||t.wnd.location.assign(e)})),this._events.on("registerForPush",(function(){return t.registerForWebPush()}))}return e.prototype.setApiPath=function(e){this._lpRequest.apiPath&&(this._lpRequest.apiPath=e)},e.prototype.setNetworkTimeout=function(e){this._lpRequest.setNetworkTimeout(e),this._lpSocket.setNetworkTimeout(e)},e.prototype.setAppIdForDevelopmentMode=function(e,t){this._lpRequest.appId=e,this._lpRequest.clientKey=t,this._internalState.devMode=!0},e.prototype.setAppIdForProductionMode=function(e,t){this._lpRequest.appId=e,this._lpRequest.clientKey=t,this._internalState.devMode=!1},e.prototype.setSocketHost=function(e){this._lpSocket.setSocketHost(e)},e.prototype.setDeviceId=function(e){this._lpRequest.deviceId=e},e.prototype.setLocale=function(e){this._locale=e},e.prototype.setAppVersion=function(e){this._lpRequest.versionName=e},e.prototype.setDeviceName=function(e){this._deviceName=e},e.prototype.setDeviceModel=function(e){this._deviceModel=e},e.prototype.setRequestBatching=function(e,t){this._lpRequest.batchEnabled=e,this._lpRequest.batchCooldown=t},e.prototype.setSystemName=function(e){this._systemName=e},e.prototype.setSystemVersion=function(e){this._systemVersion=e},e.prototype.setVariables=function(e){this._varCache.setVariables(e)},e.prototype.setVariantDebugInfoEnabled=function(e){this._internalState.variantDebugInfoEnabled=e},e.prototype.enableRichInAppMessages=function(e){this._messages.enableRichInAppMessages(e)},e.prototype.processMessageEvent=function(e,t){this._messages.processMessageEvent(e,t)},e.prototype.getVariantDebugInfo=function(){return this._varCache.getVariantDebugInfo()},e.prototype.getVariables=function(){return this._varCache.getVariables()},e.prototype.getVariable=function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return(e=this._varCache).getVariable.apply(e,t)},e.prototype.getVariants=function(){return this._varCache.variants||[]},e.prototype.inbox=function(){return this._lpInbox},e.prototype.on=function(e,t){this._events.on(e,t)},e.prototype.off=function(e,t){this._events.off(e,t)},e.prototype.onInboxAction=function(e,t){var n=this;this._messages.trackMessage(e,{event:"Open"},(function(){return t&&n._messages.onAction(t)}))},e.prototype.defineAction=function(e){this._varCache.registerActionDefinition(r({kind:g.MessageKind.Template},e))},e.prototype.addStartResponseHandler=function(e){this._internalState.addStartResponseHandler(e)},e.prototype.removeStartResponseHandler=function(e){this._internalState.removeStartResponseHandler(e)},e.prototype.addVariablesChangedHandler=function(e){this._varCache.addVariablesChangedHandler(e)},e.prototype.removeVariablesChangedHandler=function(e){this._varCache.removeVariablesChangedHandler(e)},e.prototype.getFileUrl=function(e){return this._lpRequest.getFileUrl(e)},e.prototype.forceContentUpdate=function(e){var t=this,n=(new s.default).add(a.default.PARAMS.INCLUDE_DEFAULTS,!1).add(a.default.PARAMS.INCLUDE_VARIANT_DEBUG_INFO,this._internalState.variantDebugInfoEnabled);this.createRequest(a.default.METHODS.GET_VARS,n,{queued:!1,sendNow:!0,response:function(n){var r=t._lpRequest.getLastResponse(n),i=t._lpRequest.isResponseSuccess(r);i&&(t._varCache.applyDiffs(r[a.default.KEYS.VARS],r[a.default.KEYS.VARIANTS],r[a.default.KEYS.ACTION_DEFINITIONS]),t._varCache.setVariantDebugInfo(r[a.default.KEYS.VARIANT_DEBUG_INFO]),t._events.emit("messagesReceived",r[a.default.KEYS.MESSAGES])),e&&e(i)}})},e.prototype.useSessionLength=function(e){this._sessionLength=e},e.prototype.start=function(e,t,n){var r=this;if("function"==typeof e?(n=e,t={},e=null):"object"==typeof e&&null!=e?(n=t,t=e,e=null):"function"==typeof t&&(n=t,t={}),this.hasActiveSession()&&!this._internalState.devMode)return this.startFromCache(e,t,n);this._lpRequest.userId=e,n&&this.addStartResponseHandler(n),this._varCache.onUpdate=function(){r._varCache.triggerVariablesChangedHandlers()};var i=(new s.default).add(a.default.PARAMS.USER_ATTRIBUTES,JSON.stringify(t)).add(a.default.PARAMS.COUNTRY,a.default.VALUES.DETECT).add(a.default.PARAMS.REGION,a.default.VALUES.DETECT).add(a.default.PARAMS.CITY,a.default.VALUES.DETECT).add(a.default.PARAMS.LOCATION,a.default.VALUES.DETECT).add(a.default.PARAMS.SYSTEM_NAME,this._systemName||this._browserDetector.OS).add(a.default.PARAMS.SYSTEM_VERSION,(this._systemVersion||"").toString()).add(a.default.PARAMS.BROWSER_NAME,this._browserDetector.browser).add(a.default.PARAMS.BROWSER_VERSION,this._browserDetector.version.toString()).add(a.default.PARAMS.LOCALE,this._locale||a.default.VALUES.DETECT).add(a.default.PARAMS.DEVICE_NAME,this._deviceName||this._browserDetector.browser+" "+this._browserDetector.version).add(a.default.PARAMS.DEVICE_MODEL,this._deviceModel||"Web Browser").add(a.default.PARAMS.NEWSFEED_MESSAGES,this._lpInbox.messageIds()).add(a.default.PARAMS.INCLUDE_DEFAULTS,!1).add(a.default.PARAMS.INCLUDE_VARIANT_DEBUG_INFO,this._internalState.variantDebugInfoEnabled);this.createRequest(a.default.METHODS.START,i,{queued:!0,sendNow:!0,response:function(e){r._internalState.hasStarted=!0;var t=r._lpRequest.getLastResponse(e),n=r._lpRequest.isResponseSuccess(t);if(r._internalState.startSuccessful=n,n){r.updateSession();var i=t[a.default.KEYS.MESSAGES];if(t.actionDefinitions&&(i.actionDefinitions=t.actionDefinitions),r._events.emit("messagesReceived",i),t[a.default.KEYS.SYNC_INBOX]&&r._lpInbox.downloadMessages(),r._internalState.devMode){var s=t[a.default.KEYS.LATEST_VERSION];s&&console.log("A newer version of the Leanplum SDK, "+s+', is available.\nUse "npm update leanplum-sdk" or go to https://docs.leanplum.com/reference#javascript-setup to download it.'),r.connectSocket()}r._varCache.applyDiffs(t[a.default.KEYS.VARS],t[a.default.KEYS.VARIANTS],t[a.default.KEYS.ACTION_DEFINITIONS]),r._varCache.setVariantDebugInfo(t[a.default.KEYS.VARIANT_DEBUG_INFO]),r._varCache.token=t[a.default.KEYS.TOKEN]}else r._varCache.loadDiffs();r._events.emit("start",{success:n}),r._internalState.triggerStartHandlers()}})},e.prototype.startFromCache=function(e,t,n){"function"==typeof e?(n=e,t={},e=null):"object"==typeof e&&null!=e?(n=t,t=e,e=null):"function"==typeof t&&(n=t,t={}),this.updateSession(),this._lpRequest.userId=e,n&&this.addStartResponseHandler(n),this._internalState.hasStarted=!0,this._internalState.startSuccessful=!0,this._internalState.devMode&&this.connectSocket(),this._varCache.loadDiffs(),this._events.emit("resume"),this._internalState.triggerStartHandlers()},e.prototype.stop=function(){this.createRequest(a.default.METHODS.STOP,void 0,{sendNow:!0,queued:!0,response:function(){f.default.remove(S)}})},e.prototype.pauseSession=function(){this.createRequest(a.default.METHODS.PAUSE_SESSION,void 0,{sendNow:!0,queued:!0})},e.prototype.resumeSession=function(){this._events.emit("resume"),this.createRequest(a.default.METHODS.RESUME_SESSION,void 0,{sendNow:!0,queued:!0})},e.prototype.pauseState=function(){this.createRequest(a.default.METHODS.PAUSE_STATE,void 0,{queued:!0})},e.prototype.resumeState=function(){this.createRequest(a.default.METHODS.RESUME_STATE,void 0,{queued:!0})},e.prototype.getUserId=function(){return this._lpRequest.userId},e.prototype.setUserId=function(e){this.setUserAttributes(e)},e.prototype.setUserAttributes=function(e,t){if(void 0===t)if("object"==typeof e)t=e,e=void 0;else if("string"!=typeof e)return void console.log("Leanplum: setUserAttributes expects a string or an object");var n=(new s.default).add(a.default.PARAMS.USER_ATTRIBUTES,t?JSON.stringify(t):void 0).add(a.default.PARAMS.NEW_USER_ID,e);this._events.emit("setUserAttribute",t),this.createRequest(a.default.METHODS.SET_USER_ATTRIBUTES,n,{queued:!0}),e&&(this._lpRequest.userId=e,f.default.save(a.default.DEFAULT_KEYS.USER_ID,this._lpRequest.userId))},e.prototype.track=function(e,t,n,r){var i=this;"object"==typeof t&&null!=t?(r=t,n=void 0,t=void 0):"string"==typeof t?(r=n,n=t,t=void 0):"object"==typeof n&&null!=n&&(r=n,n=void 0);var o=(new s.default).add(a.default.PARAMS.EVENT,e).add(a.default.PARAMS.VALUE,t||0).add(a.default.PARAMS.INFO,n).add(a.default.PARAMS.PARAMS,JSON.stringify(r));this._events.emit("track",{eventName:e,params:r}),this.createRequest(a.default.METHODS.TRACK,o,{queued:!0,response:function(){return i.updateSession()}})},e.prototype.trackPurchase=function(e,t,n,r){void 0===r&&(r="Purchase");var i=(new s.default).add(a.default.PARAMS.EVENT,r).add(a.default.PARAMS.VALUE,e||0).add(a.default.PARAMS.PARAMS,JSON.stringify(n));t&&i.add(a.default.PARAMS.CURRENCY_CODE,t),this._events.emit("track",{eventName:r}),this.createRequest(a.default.METHODS.TRACK,i,{queued:!0})},e.prototype.advanceTo=function(e,t,n){"object"==typeof t&&null!=t&&(n=t,t=void 0);var r=(new s.default).add(a.default.PARAMS.STATE,e).add(a.default.PARAMS.INFO,t).add(a.default.PARAMS.PARAMS,JSON.stringify(n));this._events.emit("advanceState",{state:e,params:n}),this.createRequest(a.default.METHODS.ADVANCE,r,{queued:!0})},e.prototype.isWebPushSupported=function(){return this._pushManager.isWebPushSupported()},e.prototype.isWebPushSubscribed=function(){return this._pushManager.isWebPushSubscribed()},e.prototype.setWebPushOptions=function(e){this._webPushOptions=r({},e)},e.prototype.registerForWebPush=function(e){var t=this;if(this._pushManager.isWebPushSupported()){var n=this._webPushOptions||{},r=e||n.serviceWorkerUrl,i=n&&n.scope?{scope:n.scope}:null;return this._pushManager.register(r,i,(function(e){return e?Promise.resolve(!0):t._pushManager.subscribeUser()}))}return Promise.reject("Leanplum: WebPush is not supported.")},e.prototype.unregisterFromWebPush=function(){return this._pushManager.unsubscribeUser()},e.prototype.clearUserContent=function(){this._varCache.clearUserContent()},e.prototype.applyQueue=function(e){var t=this;e.forEach((function(e){return t[e.name].apply(t,e.args)}))},e.prototype.createRequest=function(e,t,n){void 0===n&&(n={}),this._lpRequest.request(e,t,r({devMode:this._internalState.devMode},n))},e.prototype.connectSocket=function(){this._lpSocket.connect({appId:this._lpRequest.appId,deviceId:this._lpRequest.deviceId})},e.prototype.hasActiveSession=function(){if(!this._sessionLength)return!1;var e=Date.now(),t=parseInt(f.default.get(S));return!isNaN(t)&&e-t<1e3*this._sessionLength},e.prototype.updateSession=function(){f.default.save(S,String(Date.now()))},e}();t.default=y},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this.browser=this.searchString(this.getBrowserData(e))||"Unknown Browser",this.version=this.searchVersion(e.navigator.userAgent)||this.searchVersion(e.navigator.appVersion)||"Unknown Version",this.OS=this.searchString(this.getOSData(e))||"Unknown OS"}return e.prototype.searchString=function(e){for(var t=0;t<e.length;t++){var n=e[t].string,r=e[t].prop;if(this.versionSearchString=e[t].versionSearch||e[t].identity,n){if(-1!==n.indexOf(e[t].subString))return e[t].identity}else if(r)return e[t].identity}},e.prototype.searchVersion=function(e){if(e){var t=e.indexOf(this.versionSearchString);if(-1!==t)return parseFloat(e.substring(t+this.versionSearchString.length+1))}},e.prototype.getBrowserData=function(e){return[{string:e.navigator.userAgent,subString:"Chrome",identity:"Chrome"},{string:e.navigator.userAgent,subString:"OmniWeb",identity:"OmniWeb",versionSearch:"OmniWeb/"},{string:e.navigator.vendor,subString:"Apple",identity:"Safari",versionSearch:"Version"},{prop:e.opera,identity:"Opera",versionSearch:"Version"},{string:e.navigator.vendor,subString:"iCab",identity:"iCab"},{string:e.navigator.vendor,subString:"KDE",identity:"Konqueror"},{string:e.navigator.userAgent,subString:"Firefox",identity:"Firefox"},{string:e.navigator.vendor,subString:"Camino",identity:"Camino"},{string:e.navigator.userAgent,subString:"Netscape",identity:"Netscape"},{string:e.navigator.userAgent,subString:"MSIE",identity:"Explorer",versionSearch:"MSIE"},{string:e.navigator.userAgent,subString:"Android",identity:"Android Browser",versionSearch:"Version"},{string:e.navigator.userAgent,subString:"Gecko",identity:"Mozilla",versionSearch:"rv"},{string:e.navigator.userAgent,subString:"Mozilla",identity:"Netscape",versionSearch:"Mozilla"}]},e.prototype.getOSData=function(e){return[{string:e.navigator.platform,subString:"Win",identity:"Windows"},{string:e.navigator.platform,subString:"Mac",identity:"Mac OS"},{string:e.navigator.userAgent,subString:"iPhone",identity:"iOS"},{string:e.navigator.userAgent,subString:"Android",identity:"Android"},{string:e.navigator.platform,subString:"Linux",identity:"Linux"}]},e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this.startHandlers=[],this.devMode=!1,this.hasStarted=!1,this.startSuccessful=!1,this.variantDebugInfoEnabled=!1}return e.prototype.addStartResponseHandler=function(e){this.startHandlers.push(e),this.hasStarted&&e(this.startSuccessful)},e.prototype.removeStartResponseHandler=function(e){var t=this.startHandlers.indexOf(e);t>=0&&this.startHandlers.splice(t,1)},e.prototype.triggerStartHandlers=function(){for(var e=0;e<this.startHandlers.length;e++)this.startHandlers[e](this.startSuccessful)},e}();t.default=r},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var s=i(n(1)),o=i(n(0)),a=i(n(2)),u=function(e){return Object.keys(e).map((function(t){return e[t]}))},c=function(){function e(e,t){this.createRequest=e,this.onAction=t,this.messageMap={},this.changeHandlers=[],this.load()}return e.prototype.downloadMessages=function(){var e=this;this.createRequest("getNewsfeedMessages",void 0,{queued:!0,sendNow:!0,response:function(t){var n=null==t?void 0:t.response[0];n&&n.newsfeedMessages&&(e.messageMap=n.newsfeedMessages,e.triggerChangeHandlers())}})},e.prototype.markAsRead=function(e){var t=this.messageMap[e];if(t&&!t.isRead){t.isRead=!0,this.triggerChangeHandlers();var n=new s.default;n.add("newsfeedMessageId",e),this.createRequest("markNewsfeedMessageAsRead",n,{})}},e.prototype.read=function(e){this.markAsRead(e);var t=this.message(e),n=e.split("##")[0],r=(null==t?void 0:t.openAction())||null;this.onAction(n,r)},e.prototype.remove=function(e){if(this.messageMap[e]){delete this.messageMap[e],this.triggerChangeHandlers();var t=new s.default;t.add("newsfeedMessageId",e),this.createRequest("deleteNewsfeedMessage",t,{})}},e.prototype.onChanged=function(e){this.changeHandlers.push(e)},e.prototype.triggerChangeHandlers=function(){this.changeHandlers.forEach((function(e){return e()})),this.save()},e.prototype.save=function(){a.default.save(o.default.DEFAULT_KEYS.INBOX_MESSAGES,JSON.stringify(this.messageMap),"session")},e.prototype.load=function(){var e=a.default.get(o.default.DEFAULT_KEYS.INBOX_MESSAGES,"session");this.messageMap=JSON.parse(e)||{}},e.prototype.count=function(){return u(this.messageMap).length},e.prototype.unreadCount=function(){return u(this.messageMap).filter((function(e){return!e.isRead})).length},e.prototype.messages=function(e){var t=[];for(var n in this.messageMap){var r=this.messageMap[n];e(r)&&t.push(l.create(n,r))}return t},e.prototype.allMessages=function(){return this.messages((function(){return!0}))},e.prototype.unreadMessages=function(){return this.messages((function(e){return!e.isRead}))},e.prototype.messageIds=function(){return Object.keys(this.messageMap)},e.prototype.message=function(e){var t=this.messageMap[e];return t?l.create(e,t):null},e}();t.default=c;var l=function(){function e(e,t,n,r,i,s,o,a){this._id=e,this._title=t,this._subtitle=n,this._data=r,this._timestamp=i,this._isRead=s,this._imageUrl=o,this._openAction=a}return e.create=function(t,n){var i,s,a,u,c,l,d,f,p,h,v,g=null===(i=n.messageData)||void 0===i?void 0:i.parentCampaignId,_=r(r({},null===(a=null===(s=n.messageData)||void 0===s?void 0:s.vars)||void 0===a?void 0:a[o.default.VALUES.DEFAULT_PUSH_ACTION]),{parentCampaignId:g});return new e(t,null===(c=null===(u=n.messageData)||void 0===u?void 0:u.vars)||void 0===c?void 0:c.Title,null===(d=null===(l=n.messageData)||void 0===l?void 0:l.vars)||void 0===d?void 0:d.Subtitle,null===(p=null===(f=n.messageData)||void 0===f?void 0:f.vars)||void 0===p?void 0:p.Data,n.deliveryTimestamp,n.isRead,null===(v=null===(h=n.messageData)||void 0===h?void 0:h.vars)||void 0===v?void 0:v.Image,_)},e.prototype.id=function(){return this._id},e.prototype.title=function(){return this._title},e.prototype.subtitle=function(){return this._subtitle},e.prototype.data=function(){return this._data},e.prototype.timestamp=function(){return this._timestamp},e.prototype.isRead=function(){return this._isRead},e.prototype.imageUrl=function(){return this._imageUrl},e.prototype.openAction=function(){return this._openAction},e}();t.LeanplumInboxMessage=l},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(1)),s=r(n(0)),o=r(n(2)),a=r(n(3)),u=function(){function e(e){void 0===e&&(e=new a.default),this.network=e,this.cooldownTimeout=null,this.lastRequestTime=void 0,this.userIdValue=void 0,this.apiPath="https://api.leanplum.com/api",this.batchCooldown=5,this.batchEnabled=!0}return Object.defineProperty(e.prototype,"userId",{get:function(){var e,t;return null!==(t=null!==(e=this.userIdValue)&&void 0!==e?e:this.loadLocal(s.default.DEFAULT_KEYS.USER_ID))&&void 0!==t?t:this.deviceId},set:function(e){this.userIdValue=e},enumerable:!0,configurable:!0}),e.prototype.request=function(e,t,n){var r=this;if(void 0===n&&(n={}),n=n||{},t=t||new i.default,this.deviceId||(this.deviceId=this.loadLocal(s.default.DEFAULT_KEYS.DEVICE_ID)),!this.deviceId){for(var o="",a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",u=0;u<16;u++)o+=a.charAt(Math.floor(Math.random()*a.length));this.deviceId=o,this.saveLocal(s.default.DEFAULT_KEYS.DEVICE_ID,o)}this.saveLocal(s.default.DEFAULT_KEYS.USER_ID,this.userId);var c=t.attachApiKeys(this.appId,this.clientKey).add(s.default.PARAMS.SDK_VERSION,s.default.SDK_VERSION).add(s.default.PARAMS.DEVICE_ID,this.deviceId).add(s.default.PARAMS.USER_ID,this.userId).add(s.default.PARAMS.ACTION,e).add(s.default.PARAMS.VERSION_NAME,this.versionName).add(s.default.PARAMS.DEV_MODE,n.devMode).add(s.default.PARAMS.TIME,((new Date).getTime()/1e3).toString()),l=n.success||n.response,d=n.error||n.response;if(!this.appId||!this.clientKey){var f="Leanplum App ID and client key are not set. Make sure you are calling setAppIdForDevelopmentMode or setAppIdForProductionMode before issuing API calls.";return console.error(f),void(d&&d(f))}if(t.body())this.network.ajax("POST",this.apiPath+"?"+c.build(),t.body(),l,d,n.queued);else{var p=n.devMode||n.sendNow||!this.batchEnabled,h=function(){var e=r.popUnsentRequests();if(e.length>0){var t=JSON.stringify({data:e}),o=(new i.default).attachApiKeys(r.appId,r.clientKey).add(s.default.PARAMS.SDK_VERSION,s.default.SDK_VERSION).add(s.default.PARAMS.ACTION,s.default.METHODS.MULTI).add(s.default.PARAMS.TIME,((new Date).getTime()/1e3).toString().toString()).build();r.network.ajax("POST",r.apiPath+"?"+o,t,l,d,n.queued)}};if(!p&&this.batchCooldown){var v=(new Date).getTime()/1e3;!this.lastRequestTime||v-this.lastRequestTime>=this.batchCooldown?(p=!0,this.lastRequestTime=v):this.cooldownTimeout||(this.cooldownTimeout=setTimeout((function(){r.cooldownTimeout=null,r.lastRequestTime=(new Date).getTime()/1e3,h()}),1e3*(this.batchCooldown-(v-this.lastRequestTime))))}this.saveRequestForLater(c.buildDict()),p&&h()}},e.prototype.getFileUrl=function(e){if(!e)return"";if(/^https?:/.test(e))return e;var t=(new i.default).attachApiKeys(this.appId,this.clientKey).add(s.default.PARAMS.SDK_VERSION,s.default.SDK_VERSION).add(s.default.PARAMS.ACTION,"downloadFile").add("filename",e);return this.apiPath+"?"+t.build()},e.prototype.setNetworkTimeout=function(e){this.network.setNetworkTimeout(e)},e.prototype.getLastResponse=function(e){var t,n,r,i=null!==(n=null===(t=null==e?void 0:e.response)||void 0===t?void 0:t.length)&&void 0!==n?n:0;return i>0?null===(r=null==e?void 0:e.response)||void 0===r?void 0:r[i-1]:null},e.prototype.isResponseSuccess=function(e){return Boolean(null==e?void 0:e.success)},e.prototype.saveRequestForLater=function(e){var t=this.loadLocal(s.default.DEFAULT_KEYS.COUNT)||0,n=s.default.DEFAULT_KEYS.ITEM+t;this.saveLocal(n,JSON.stringify(e)),t++,this.saveLocal(s.default.DEFAULT_KEYS.COUNT,t)},e.prototype.popUnsentRequests=function(){var e=[],t=this.loadLocal(s.default.DEFAULT_KEYS.COUNT)||0;this.removeLocal(s.default.DEFAULT_KEYS.COUNT);for(var n=0;n<t;n++){var r=s.default.DEFAULT_KEYS.ITEM+n;try{e.push(JSON.parse(this.loadLocal(r)))}catch(e){}this.removeLocal(r)}return e},e.prototype.loadLocal=function(e){return o.default.get(e)},e.prototype.saveLocal=function(e,t){o.default.save(e,t)},e.prototype.removeLocal=function(e){o.default.remove(e)},e}();t.default=u},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(4)),s=r(n(1)),o=r(n(0)),a=r(n(16)),u=function(){function e(e,t,n,r){this.cache=e,this.createRequest=t,this.getLastResponse=n,this.events=r,this.networkTimeoutSeconds=10,this.socketClient=null,this.socketHost="dev.leanplum.com"}return e.prototype.connect=function(e){var t=this;if(WebSocket){var n=!1;this.socketClient=new a.default,this.socketClient.setNetworkTimeout(this.networkTimeoutSeconds),this.socketClient.onopen=function(){var r;n||(console.log("Leanplum: Connected to development server."),t.socketClient.send("auth",((r={})[o.default.PARAMS.APP_ID]=e.appId,r[o.default.PARAMS.DEVICE_ID]=e.deviceId,r)),n=!0)},this.socketClient.onerror=function(e){console.log("Leanplum: Socket error",e)},this.socketClient.onmessage=this.onMessageReceived.bind(this),this.socketClient.onclose=function(){console.log("Leanplum: Disconnected from development server."),n=!1},this.socketClient.connect(this.socketHost),setInterval((function(){t.socketClient.connected||t.socketClient.connecting||t.socketClient.connect(t.socketHost)}),5e3)}else console.log("Your browser doesn't support WebSockets.")},e.prototype.setSocketHost=function(e){this.socketHost=e},e.prototype.setNetworkTimeout=function(e){var t;this.networkTimeoutSeconds=e,null===(t=this.socketClient)||void 0===t||t.setNetworkTimeout(e)},e.prototype.onMessageReceived=function(e,t){var n=this;if("updateVars"===e){var r=(new s.default).add(o.default.PARAMS.INCLUDE_DEFAULTS,!1);this.createRequest(o.default.METHODS.GET_VARS,r,{queued:!1,sendNow:!0,response:function(e){var t=n.getLastResponse(e),r=t[o.default.KEYS.VARS],s=t[o.default.KEYS.VARIANTS],a=t[o.default.KEYS.ACTION_DEFINITIONS];i.default(r,n.cache.diffs)||n.cache.applyDiffs(r,s,a)}})}else if("getVariables"===e)this.cache.sendVariables(),this.socketClient.send("getContentResponse",{updated:!0});else if("getActions"===e){var a=this.cache.sendActions();this.socketClient.send("getContentResponse",{updated:a})}else if("registerDevice"===e){var u=t[0];alert("Your device has been registered to "+u.email+".")}else if("trigger"===e){u=t[0];this.events.emit("previewRequest",u)}},e}();t.default=u},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(3)),s=function(){function e(){this.network=new i.default,this.connected=!1,this.connecting=!1,this.connected=!1,this.connecting=!1}return e.prototype.connect=function(e){var t=this;this.connecting=!0,this.network.ajax("POST","https://"+e+"/socket.io/1","",(function(n){var r=n.split(":"),i=r[0],s=parseInt(r[1])/2*1e3;t.socket=new WebSocket("wss://"+e+"/socket.io/1/websocket/"+i);var o=null;t.socket.onopen=function(){t.connected=!0,t.connecting=!1,t.onopen&&t.onopen(),o=setInterval((function(){t.socket.send("2:::")}),s)},t.socket.onclose=function(){t.connected=!1,clearInterval(o),t.onclose&&t.onclose()},t.socket.onmessage=function(e){var n=e.data.split(":"),r=parseInt(n[0]);if(2===r)t.socket.send("2::");else if(5===r){var i=n[1],s=JSON.parse(n.slice(3).join(":")),o=s.name,a=s.args;i&&t.socket.send("6:::"+i),t.onmessage&&t.onmessage(o,a)}else 7===r&&console.log("Socket error: "+e.data)},t.socket.onerror=function(e){t.socket.close(),t.onerror&&t.onerror(e)}}),null,!1,!0)},e.prototype.send=function(e,t){if(this.connected){var n=JSON.stringify({name:e,args:t});this.socket.send("5:::"+n)}else console.log("Leanplum: Socket is not connected.")},e.prototype.setNetworkTimeout=function(e){this.network.setNetworkTimeout(e)},e}();t.default=s},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function o(e){try{u(r.next(e))}catch(e){s(e)}}function a(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}u((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,i,s,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!(i=o.trys,(i=i.length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){o.label=s[1];break}if(6===s[0]&&o.label<i[1]){o.label=i[1],i=s;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(s);break}i[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=s(n(1)),a=s(n(0)),u=s(n(2)),c=function(){function e(e){this.createRequest=e,this.serviceWorkerRegistration=null}return Object.defineProperty(e.prototype,"serviceWorker",{get:function(){return window.navigator.serviceWorker},enumerable:!0,configurable:!0}),e.prototype.isWebPushSupported=function(){return Boolean(void 0!==(null===window||void 0===window?void 0:window.navigator)&&"serviceWorker"in window.navigator&&"PushManager"in window)},e.prototype.isWebPushSubscribed=function(){return r(this,void 0,void 0,(function(){var e,t,n;return i(this,(function(r){switch(r.label){case 0:return this.isWebPushSupported()?[4,this.getServiceWorkerRegistration()]:[2,!1];case 1:return(e=r.sent())?[4,e.pushManager.getSubscription()]:[2,!1];case 2:return t=r.sent(),(n=null!==t)&&this.updateNewSubscriptionOnServer(t),[2,n]}}))}))},e.prototype.register=function(e,t,n){return r(this,void 0,void 0,(function(){var r,s,o,a;return i(this,(function(i){switch(i.label){case 0:if(!this.isWebPushSupported())return console.log("Leanplum: Push messaging is not supported."),[2,n(!1)];i.label=1;case 1:return i.trys.push([1,4,,5]),r=this,[4,this.serviceWorker.register(e||"/sw.min.js",t)];case 2:return r.serviceWorkerRegistration=i.sent(),[4,this.serviceWorkerRegistration.pushManager.getSubscription()];case 3:return s=i.sent(),(o=null!==s)&&this.updateNewSubscriptionOnServer(s),[2,n(o)];case 4:return a=i.sent(),console.log("Leanplum: Service Worker Error: ",a),[2,n(!1)];case 5:return[2]}}))}))},e.prototype.subscribeUser=function(){return r(this,void 0,void 0,(function(){var e,t,n;return i(this,(function(r){switch(r.label){case 0:e=this.urlB64ToUint8Array("BInWPpWntfR39rgXSP04pqdmEdDGa50z6zqbMvxyxJCwzXIuSpSh8C888-CfJ82WELl7Xe8cjAnfCt-3vK0Ci68"),r.label=1;case 1:return r.trys.push([1,3,,4]),[4,this.serviceWorkerRegistration.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:e})];case 2:if(!(t=r.sent()))throw new Error;return this.updateNewSubscriptionOnServer(t),[3,4];case 3:throw n=r.sent(),new Error("Leanplum: Failed to subscribe the user: "+n);case 4:return[2,!0]}}))}))},e.prototype.unsubscribeUser=function(){return r(this,void 0,void 0,(function(){var e,t;return i(this,(function(n){switch(n.label){case 0:return[4,this.isWebPushSubscribed()];case 1:if(!n.sent())return[3,6];n.label=2;case 2:return n.trys.push([2,5,,6]),[4,this.serviceWorkerRegistration.pushManager.getSubscription()];case 3:if(!(e=n.sent()))throw new Error;return[4,e.unsubscribe()];case 4:return n.sent(),[3,6];case 5:throw t=n.sent(),new Error("Leanplum: Error unsubscribing: "+t);case 6:return[2]}}))}))},e.prototype.getServiceWorkerRegistration=function(){return r(this,void 0,void 0,(function(){var e;return i(this,(function(t){switch(t.label){case 0:return this.serviceWorkerRegistration?[3,2]:(e=this,[4,this.serviceWorker.getRegistration()]);case 1:e.serviceWorkerRegistration=t.sent(),t.label=2;case 2:return[2,this.serviceWorkerRegistration]}}))}))},e.prototype.urlB64ToUint8Array=function(e){for(var t=(e+"=".repeat((4-e.length%4)%4)).replace(/-/g,"+").replace(/_/g,"/"),n=this.decodeData(t),r=new Uint8Array(n.length),i=0;i<n.length;++i)r[i]=n.charCodeAt(i);return r},e.prototype.updateNewSubscriptionOnServer=function(e){if(e){var t=this.prepareSubscription(e),n=JSON.stringify(t);u.default.get(a.default.DEFAULT_KEYS.PUSH_SUBSCRIPTION)!==n&&(u.default.save(a.default.DEFAULT_KEYS.PUSH_SUBSCRIPTION,n),this.setSubscription(n))}},e.prototype.prepareSubscription=function(e){var t="getKey"in e?e.getKey("p256dh"):[],n="getKey"in e?e.getKey("auth"):[],r=this.encodeData(String.fromCharCode.apply(null,new Uint8Array(t))),i=this.encodeData(String.fromCharCode.apply(null,new Uint8Array(n)));return{endpoint:e.endpoint,key:r,auth:i}},e.prototype.setSubscription=function(e){if(e){var t=(new o.default).add(a.default.PARAMS.WEB_PUSH_SUBSCRIPTION,e);this.createRequest(a.default.METHODS.SET_DEVICE_ATTRIBUTES,t,{queued:!1,sendNow:!0})}},e.prototype.encodeData=function(e){return window.btoa(e)},e.prototype.decodeData=function(e){return window.atob(e)},e}();t.default=c},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var s=i(n(0)),o=i(n(1)),a=i(n(3)),u=i(n(4)),c=i(n(2)),l=i(n(5)),d=function(){function e(){this.session={},this.triggers={},this.occurrences={}}return e.prototype.recordOccurrence=function(e){var t=(this.session[e]||0)+1;this.session[e]=t;var n=this.occurrences[e]||[];n.push(Date.now()),this.occurrences[e]=n,this.save()},e.prototype.recordTriggerOccurrence=function(e){var t=this.triggers[e]||[];return t.push(Date.now()),this.triggers[e]=t,this.save(),t.length},e.prototype.getSessionOccurranceCount=function(e){return this.session[e]||0},e.prototype.getOccurrences=function(e){return this.occurrences[e]||[]},e.prototype.clearSession=function(){this.session={}},e.prototype.load=function(){var e=c.default.get(s.default.DEFAULT_KEYS.MESSAGE_OCCURRENCES);if(e){var t=JSON.parse(e);this.session=t.session,this.triggers=t.triggers,this.occurrences=t.occurrences}},e.prototype.save=function(){var e=s.default.DEFAULT_KEYS.MESSAGE_OCCURRENCES;c.default.save(e,JSON.stringify({session:this.session,triggers:this.triggers,occurrences:this.occurrences}))},e}(),f=function(){function e(e,t,n){var r=this;this.events=e,this.createRequest=t,this.getFileUrl=n,this._messageCache={},this.occurrenceTracker=new d,this._showRichIAM=!1,e.on("previewRequest",this.onMessagePreview.bind(this)),e.on("messagesReceived",this.onMessagesReceived.bind(this)),e.on("start",(function(){r.occurrenceTracker.load(),r.occurrenceTracker.clearSession(),r.onTrigger({trigger:"start"})})),e.on("resume",(function(){var e=s.default.DEFAULT_KEYS.MESSAGE_CACHE,t=c.default.get(e);r._messageCache=t?JSON.parse(t):r._messageCache,r.occurrenceTracker.load(),r.onTrigger({trigger:"resume"})})),e.on("track",(function(e){r.onTrigger({trigger:"event",eventName:e.eventName,params:e.params||{}})})),e.on("advanceState",(function(e){return r.onTrigger({trigger:"state",state:e.state,params:e.params||{}})})),e.on("setUserAttribute",(function(e){return r.onTrigger({trigger:"userAttribute",attributes:e})}))}return e.prototype.enableRichInAppMessages=function(e){this._showRichIAM=e},e.prototype.onTrigger=function(e){var t=this,n=this.getMessages();Object.keys(n).filter((function(r){return t.shouldShowMessage(r,n[r],e)})).slice(0,1).forEach((function(e){return t.showMessage(e,n[e])}))},e.prototype.onMessagePreview=function(e){var t=e.action,n={track:function(t){var n=t?"event '"+t+"'":"impression";console.log("Tracking "+n+" for "+e.messageId)},runActionNamed:function(e){return console.log("Running untracked action '"+e+"'")},runTrackedActionNamed:function(e){return console.log("Running tracked action '"+e+"'")}};this.handleMessage({isPreview:!0,message:this.addDefaults(r({messageId:e.messageId},t)),context:n})},e.prototype.onMessagesReceived=function(e){var t=e||{};this._messageCache=t,c.default.save(s.default.DEFAULT_KEYS.MESSAGE_CACHE,JSON.stringify(t))},e.prototype.shouldShowMessage=function(e,t,n){var r=Date.now(),i=this.matchesTrigger(t.whenTriggers,n),s=this.matchesTrigger(t.unlessTriggers,n);if(!i||s)return!1;var o=this.occurrenceTracker.recordTriggerOccurrence(e);if(!this.matchesLimits(e,t.whenLimits,o))return!1;if(t.startTime&&t.endTime&&(r<t.startTime||t.endTime<r))return!1;return!0},e.prototype.showMessage=function(e,t){var n=this,i=this.addDefaults(r({},t.vars)),s={track:function(t,r,i,s){n.occurrenceTracker.recordOccurrence(e),n.trackMessage(e,{event:t,value:r,info:i,params:s})},runActionNamed:function(t){return n.onAction(i[t],e)},runTrackedActionNamed:function(t){var r=t.replace(/ action$/,"");n.trackMessage(e,{event:r},(function(){return n.onAction(i[t],e)}))}};this.handleMessage({context:s,message:r({messageId:e},i)})},e.prototype.processMessageEvent=function(e,t){var n=document.getElementById("lp-message-"+e);if(n){var r=t.replace(/^http:\/\/leanplum\//,"").split("?"),i=r[0],s=r[1],o=(void 0===s?"":s).split("&").reduce((function(e,t){var n=t.split("="),r=n[0],i=n[1];return e[r]=decodeURIComponent(i),e}),{}),a=n.metadata,u=a.message,c=a.context;switch(i){case"loadFinished":if(n.style.visibility="visible",n.style.left="0",u["HTML Height"]>0){var l=u["HTML Width"];n.style.height=u["HTML Height"]+"px",n.style.width=l,n.style.left="calc((100% - "+l+") / 2)";var d=u["HTML Align"].toLowerCase(),f="top"===d?"bottom":"top";n.style[d]="0",n.style[f]=""}else n.style.top="0";c.track();break;case"track":c.track(o.event,parseFloat(o.value),o.parameters,o.info);break;case"runAction":case"runTrackedAction":c[i+"Named"](o.action);case"close":n.metadata=null,n.parentNode.removeChild(n)}}else console.log("message closed, skipping event processing")},e.prototype.handleMessage=function(e){var t=this;if(this._showRichIAM&&"HTML"===e.message.__name__){this.resolveFiles(e.message);var n=e.message.Template||"";(new a.default).ajax("get",n.replace("-10.html","-11.html"),"",(function(n){return t.renderRichInAppMessage(n,e)}),(function(){}),!1,!0)}else this.events.emit("showMessage",this.resolveFields(e))},e.prototype.renderRichInAppMessage=function(e,t){var n=t.message.messageId,r=JSON.stringify(t.message),i=document.createElement("iframe");i.setAttribute("id","lp-message-"+n),i.style.cssText=["border-width: 0","position: fixed","top: -100%","left: -100%","width: 100%","height: 100%","visibility: hidden","z-index: 100000"].join(";"),document.body.appendChild(i),i.metadata=t,i.contentWindow.messageId=n;var s=e.replace("##Vars##",r).replace("<body>","<body><script>window.messageId='"+n+"'<\/script>");if("srcdoc"in i)i.srcdoc=s;else{var o=i.contentWindow.document;o.open(),o.write(s),o.close()}},e.prototype.trackMessage=function(e,t,n){void 0===t&&(t={event:null}),void 0===n&&(n=function(){});var r=(new o.default).add(s.default.PARAMS.MESSAGE_ID,e),i=function(e){return void 0!==e};t.event&&r.add(s.default.PARAMS.EVENT,t.event),i(t.value)&&r.add(s.default.PARAMS.VALUE,t.value||0),i(t.info)&&r.add(s.default.PARAMS.INFO,t.info),i(t.params)&&r.add(s.default.PARAMS.PARAMS,JSON.stringify(t.params)),this.createRequest(s.default.METHODS.TRACK,r,{queued:!0,sendNow:!0,response:n})},e.prototype.onAction=function(e,t){var n=this;if(void 0===t&&(t=""),e){var r=this._messageCache;if("Chain to Existing Message"!==e.__name__){var i=function(){var r=e.__name__;"Open URL"===e.__name__?n.events.emit("navigationChange",e.URL):"Register For Push"===e.__name__?n.events.emit("registerForPush"):r&&n.showMessage(t,{messageId:t,action:r,vars:e})},s=this.messageIdFromAction(e);s?this.trackMessage(s,{event:null},i):i()}else{var o=e["Chained message"],a=r[o];"Open URL"===a.action?this.trackMessage(o,{event:"View"},(function(){return n.onAction(a.vars,o)})):"Register For Push"===a.action?this.events.emit("registerForPush"):this.showMessage(o,a)}}},e.prototype.getMessages=function(){return this._messageCache||{}},e.prototype.addDefaults=function(e){var t=this,n=(this.getMessages().actionDefinitions||{})[e.__name__],i=null==n?void 0:n.kinds;if(!n)return e;var s=function(e,n,r){void 0===r&&(r="");for(var o=0,a=Object.keys(n);o<a.length;o++){var u=a[o],c=n[u];"object"==typeof c?e[u]=s(e[u]||{},c,""+r+u+"."):void 0===e[u]&&(e[u]=c),"FILE"===i[""+r+u]&&(e[u]=t.getFileUrl(e[u]))}return e};return s(r({},e),n.values)},e.prototype.resolveFiles=function(e){var t=/^__file__/;for(var n in e){if(t.test(n))e[n.replace(t,"")]=this.getFileUrl(e[n]);else"object"==typeof e[n]&&(e[n]=this.resolveFiles(e[n]))}return e},e.prototype.resolveFields=function(e){var t=/\bcolor/i,n=/^__file__/;for(var r in e){if(n.test(r))e[r.replace(n,"")+" URL"]=this.getFileUrl(e[r]);else t.test(r)?e[r]=l.default.decodeColor(e[r]):"object"==typeof e[r]&&(e[r]=this.resolveFields(e[r]))}return e},e.prototype.messageIdFromAction=function(e){var t=this._messageCache,n=r({},e);delete n.parentCampaignId;for(var i=0,s=Object.keys(t);i<s.length;i++){var o=s[i],a=t[o];if(a.parentCampaignId===e.parentCampaignId&&u.default(a.vars,n))return o}},e.prototype.matchesTrigger=function(e,t){if(!e)return!1;var n=function(e,t){return 0===e.toString().localeCompare(t.toString(),void 0,{sensitivity:"accent"})},r=function(e,t,r){var i=e===r.noun;if("triggers"===r.verb)return i;if("triggersWithParameter"===r.verb){var s=r.objects,o=s[0],a=s[1],u=o in t&&n(a,t[o]);return i&&u}};return e.children.some((function(e){var i=e.subject;switch(t.trigger){case"start":return"start"===i||"resume"===i;case"resume":return"resume"===i;case"event":return"event"===i&&r(t.eventName,t.params,e);case"userAttribute":if("userAttribute"!==i)return!1;var s=e.noun in t.attributes;if("changes"===e.verb)return s;if("changesTo"===e.verb){if(!s)return!1;var o=t.attributes[e.noun];return e.objects.some((function(e){return null===e&&null===o||e&&o&&n(e,o)}))}break;case"state":return"state"===i&&r(t.state,t.params,e)}return!1}))},e.prototype.matchesLimits=function(e,t,n){var r=this;return!t||t.children.every((function(t){var i=t.subject,s=t.verb,o=parseInt(t.noun.toString());if("times"===i){if("limitSession"===s)return r.occurrenceTracker.getSessionOccurranceCount(e)+1===o;if("limitUser"===s)return(a=r.occurrenceTracker.getOccurrences(e).length)+1<=o;var a,u=parseInt(t.objects[0].toString())||1,c=function(e){switch(e){case"limitSecond":return 1e3;case"limitMinute":return 6e4;case"limitHour":return 36e5;case"limitDay":return 864e5}}(s)*u,l=(a=r.occurrenceTracker.getOccurrences(e)).length;return l<o||a.slice(l-o,l)[0]<Date.now()-c}return"onNthOccurrence"===i?n===o:"everyNthOccurrence"===i&&n%o==0}))},e}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this.handlers=[]}return e.prototype.on=function(e,t){this.handlers.push({eventName:e,callback:t})},e.prototype.off=function(e,t){this.handlers=this.handlers.filter((function(n){return n.eventName!==e||n.callback!==t}))},e.prototype.emit=function(e,t){this.handlers.forEach((function(n){n.eventName===e&&n.callback(t)}))},e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.Integer="integer",e.Color="color",e.Float="float",e.Decimal="decimal",e.Number="number",e.Boolean="bool",e.String="string",e.Text="text",e.HTML="html",e.File="file",e.List="list",e.Group="group",e.Action="action",e.Unknown=""}(t.ActionParameterType||(t.ActionParameterType={})),function(e){e[e.Action=2]="Action",e[e.Template=3]="Template"}(t.MessageKind||(t.MessageKind={}))},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var s=i(n(1)),o=i(n(0)),a=i(n(2)),u=i(n(5));var c=function(){function e(e){this.createRequest=e,this.actionDefinitions={},this.hasReceivedDiffs=!1,this.merged=void 0,this.variables=null,this.variablesChangedHandlers=[],this.variantDebugInfo={},this.diffs=void 0,this.token="",this.variants=[]}return e.prototype.applyDiffs=function(e,t,n){var i;this.diffs=e,this.variants=t,this.actionDefinitions=r(r({},this.actionDefinitions),(i=n)?Object.keys(i).reduce((function(e,t){e[t]=r({},i[t]);var n=i[t].kinds;return n&&(e[t].kinds=Object.keys(n).reduce((function(r,i){var s=n[i].toLowerCase();return r[i]=s,"action"===s&&(e[t].values[i]=""),r}),{})),e}),{}):i),this.hasReceivedDiffs=!0,this.merged=function e(t,n){if("number"==typeof n||"boolean"==typeof n||"string"==typeof n)return n;if(null==n)return t;var r=function(e){return function(t){if(e instanceof Array)for(var n=0;n<e.length;n++)t(e[n]);else for(var r in e)({}).hasOwnProperty.call(e,r)&&t(r)}},i=r(t),s=r(n),o=!1;if(null===t&&!(n instanceof Array))for(var a in o=null,n)if(n.hasOwnProperty(a)){if(null===o&&(o=!0),"string"!=typeof a){o=!1;break}if(a.length<3||"["!==a.charAt(0)||"]"!==a.charAt(a.length-1)){o=!1;break}}if(t instanceof Array||o){var u=[];return i((function(e){u.push(e)})),s((function(t){for(var r=parseInt(t.substring(1,t.length-1)),i=n[t];r>=u.length;)u.push(null);u[r]=e(u[r],i)})),u}var c={};return i((function(e){null!==n[e]&&void 0!==n[e]||(c[e]=t[e])})),s((function(r){c[r]=e(null===t?null:t[r]||{},n[r])})),c}(this.variables,e),this.saveDiffs(),this.onUpdate&&this.onUpdate()},e.prototype.loadDiffs=function(){try{this.applyDiffs(JSON.parse(this.loadLocal(o.default.DEFAULT_KEYS.VARIABLES)||null),JSON.parse(this.loadLocal(o.default.DEFAULT_KEYS.VARIANTS)||null),JSON.parse(this.loadLocal(o.default.DEFAULT_KEYS.ACTION_DEFINITIONS)||null)),this.token=this.loadLocal(o.default.DEFAULT_KEYS.TOKEN),this.variantDebugInfo=this.loadLocal(o.default.DEFAULT_KEYS.VARIANT_DEBUG_INFO)}catch(e){console.log("Leanplum: Invalid diffs: "+e)}},e.prototype.saveDiffs=function(){this.saveLocal(o.default.DEFAULT_KEYS.VARIABLES,JSON.stringify(this.diffs||{})),this.saveLocal(o.default.DEFAULT_KEYS.VARIANTS,JSON.stringify(this.variants||[])),this.saveLocal(o.default.DEFAULT_KEYS.ACTION_DEFINITIONS,JSON.stringify(this.actionDefinitions||{})),this.saveLocal(o.default.DEFAULT_KEYS.VARIANT_DEBUG_INFO,JSON.stringify(this.variantDebugInfo||{})),this.saveLocal(o.default.DEFAULT_KEYS.TOKEN,this.token)},e.prototype.getVariable=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this.getVariables();if(n)for(var r=0;r<e.length;r++)n=n[e[r]];return n},e.prototype.getVariables=function(){return void 0!==this.merged?this.merged:this.variables},e.prototype.setVariables=function(e){this.variables=e},e.prototype.addVariablesChangedHandler=function(e){this.variablesChangedHandlers.push(e),this.hasReceivedDiffs&&e()},e.prototype.removeVariablesChangedHandler=function(e){var t=this.variablesChangedHandlers.indexOf(e);t>=0&&this.variablesChangedHandlers.splice(t,1)},e.prototype.triggerVariablesChangedHandlers=function(){for(var e=0;e<this.variablesChangedHandlers.length;e++)this.variablesChangedHandlers[e]()},e.prototype.getVariantDebugInfo=function(){return this.variantDebugInfo},e.prototype.setVariantDebugInfo=function(e){this.variantDebugInfo=e},e.prototype.sendActions=function(){var e;return!!Object.keys(this.actionDefinitions).length&&(this.setVars(((e={})[o.default.PARAMS.ACTION_DEFINITIONS]=this.actionDefinitions,e)),!0)},e.prototype.sendVariables=function(){var e;this.setVars(((e={})[o.default.PARAMS.VARIABLES]=this.variables,e))},e.prototype.setVars=function(e){var t=(new s.default).body(JSON.stringify(e));this.createRequest(o.default.METHODS.SET_VARS,t,{sendNow:!0})},e.prototype.clearUserContent=function(){this.diffs=void 0,this.variables=null,this.variants=[],this.variantDebugInfo={},this.merged=void 0},e.prototype.registerActionDefinition=function(e){this.actionDefinitions[e.name]=function(e){return{kind:e.kind||3,options:null,values:l(e.args),kinds:d(e.args)}}(e)},e.prototype.loadLocal=function(e){return a.default.get(e)},e.prototype.saveLocal=function(e,t){a.default.save(e,t)},e}();function l(e){return e.reduce((function(e,t){return t.value instanceof Array?e[t.name]=l(t.value):"action"===t.type?e[t.name]="":"color"===t.type?e[t.name]=u.default.encodeColor(t.value):e[t.name]=t.value,e}),{})}function d(e,t){return void 0===t&&(t=""),e.reduce((function(e,n){var i,s=""+t+n.name;return n.value instanceof Array?e=r(((i={})[s]="group",i),d(n.value,s+".")):e[s]=n.type.toLowerCase(),e}),{})}t.default=c}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,