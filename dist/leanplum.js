!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Leanplum=t():e.Leanplum=t()}(self,(()=>(()=>{var e={739:function(e){e.exports=function(){"use strict";var e=0;function t(t){return"__private_"+e+++"_"+t}function i(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}const n="clevertap-prod.com",o="https:";var r=t("accountId"),s=t("region"),a=t("targetDomain"),l=t("dcSdkversion"),c=t("token");class d{constructor(){let{id:e}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:n,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";Object.defineProperty(this,r,{writable:!0,value:void 0}),Object.defineProperty(this,s,{writable:!0,value:""}),Object.defineProperty(this,a,{writable:!0,value:n}),Object.defineProperty(this,l,{writable:!0,value:""}),Object.defineProperty(this,c,{writable:!0,value:""}),this.id=e,t&&(this.region=t),i&&(this.targetDomain=i),o&&(this.token=o)}get id(){return i(this,r)[r]}set id(e){i(this,r)[r]=e}get region(){return i(this,s)[s]}set region(e){i(this,s)[s]=e}get dcSDKVersion(){return i(this,l)[l]}set dcSDKVersion(e){i(this,l)[l]=e}get targetDomain(){return i(this,a)[a]}set targetDomain(e){i(this,a)[a]=e}get token(){return i(this,c)[c]}set token(e){i(this,c)[c]=e}get finalTargetDomain(){return this.region?"".concat(this.region,".").concat(this.targetDomain):this.targetDomain===n?"".concat("eu1",".").concat(this.targetDomain):this.targetDomain}get dataPostPEURL(){return"".concat(o,"//").concat(this.finalTargetDomain,"/defineVars")}get dataPostURL(){return"".concat(o,"//").concat(this.finalTargetDomain,"/a?t=96")}get recorderURL(){return"".concat(o,"//").concat(this.finalTargetDomain,"/r?r=1")}get emailURL(){return"".concat(o,"//").concat(this.finalTargetDomain,"/e?r=1")}}const u=new RegExp("^\\s+|\\.|:|\\$|'|\"|\\\\|\\s+$","g"),h=new RegExp("^\\s+|'|\"|\\\\|\\s+$","g"),p=new RegExp("'","g"),g="clear",f="Charged ID",v="WZRK_CHARGED_ID",b="WZRK_G",m="WZRK_K",y="WZRK_CAMP",w="WZRK_CAMP_G",S="WZRK_EV",_="WZRK_META",C="WZRK_PR",k="WZRK_ARP",E="WZRK_L",A="global",I="display",O="optOut",P="useIP",T="WZRK_X",x="isOUL",R="push",M=31536e3,D="cUsY",L="wzrk_",N="wzrk_id",U="Notification Viewed",j="Notification Clicked",F="WZRK_FPU",V="WZRK_PSD",q="$incr",B="$add",z="$remove",H="$delete",K="WZRK_INBOX_CONFIG",W="WZRK_INBOX",G=1e3,Y="wzrk_fetch",J=["Stayed","UTM Visited","App Launched","Notification Sent",U,j],$=e=>"string"==typeof e||e instanceof String,Z=e=>"[object Object]"===Object.prototype.toString.call(e),Q=e=>"object"==typeof e&&e instanceof Date,X=e=>{for(const t in e)if(e.hasOwnProperty(t))return!1;return!0},ee=e=>!isNaN(parseFloat(e))&&isFinite(e),te=e=>/^-?[\d.]+(?:e-?\d+)?$/.test(e)&&"number"==typeof e,ie=e=>null!=e&&"undefined"!==e,ne=(e,t)=>{if("object"!=typeof e){let i;return $(e)?(i=oe(e,h),i.length>1024&&(i=i.substring(0,1024),t.reportError(521,i+"... length exceeded 1024 chars. Trimmed."))):i=e,i}for(const i in e)if(e.hasOwnProperty(i)){const n=ne(e[i],t);let o;o=oe(i,u),o.length>1024&&(o=o.substring(0,1024),t.reportError(520,o+"... length exceeded 1024 chars. Trimmed.")),delete e[i],e[o]=n}return e},oe=(e,t)=>e.replace(t,""),re=()=>{const e=new Date;return e.getFullYear()+""+e.getMonth()+e.getDay()},se=()=>Math.floor((new Date).getTime()/1e3),ae=e=>"$D_"+Math.round(e.getTime()/1e3),le=e=>{if(ce(e))return"$D_"+e},ce=e=>{const t=/^(\d{4})(\d{2})(\d{2})$/.exec(e);if(null==t)return!1;const i=t[3],n=t[2]-1,o=t[1],r=new Date(o,n,i);return r.getDate()==i&&r.getMonth()==n&&r.getFullYear()==o};class de{static save(e,t){return!(!e||!t)&&(this._isLocalStorageSupported()?(localStorage.setItem(e,"string"==typeof t?t:JSON.stringify(t)),!0):void 0)}static read(e){if(!e)return!1;let t=null;if(this._isLocalStorageSupported()&&(t=localStorage.getItem(e)),null!=t)try{t=JSON.parse(t)}catch(e){}return t}static remove(e){return!!e&&(this._isLocalStorageSupported()?(localStorage.removeItem(e),!0):void 0)}static removeCookie(e,t){let i=e+"=; expires=Thu, 01 Jan 1970 00:00:01 GMT;";t&&(i=i+" domain="+t+"; path=/"),document.cookie=i}static createCookie(e,t,i,n){let o="",r="";if(i){const e=new Date;e.setTime(e.getTime()+1e3*i),o="; expires="+e.toGMTString()}n&&(r="; domain="+n),t=encodeURIComponent(t),document.cookie=e+"="+t+o+r+"; path=/"}static readCookie(e){const t=e+"=",i=document.cookie.split(";");for(let e=0;e<i.length;e++){let n=i[e];for(;" "===n.charAt(0);)n=n.substring(1,n.length);if(0==n.indexOf(t))return decodeURIComponent(n.substring(t.length,n.length))}return null}static _isLocalStorageSupported(){return"localStorage"in window&&null!==window.localStorage&&"function"==typeof window.localStorage.setItem}static saveToLSorCookie(e,t){if(null!=t)try{this._isLocalStorageSupported()?this.save(e,encodeURIComponent(JSON.stringify(t))):e===b?this.createCookie(e,encodeURIComponent(t),0,window.location.hostname):this.createCookie(e,encodeURIComponent(JSON.stringify(t)),0,window.location.hostname),ue.globalCache[e]=t}catch(e){}}static readFromLSorCookie(e){let t;if(ue.globalCache.hasOwnProperty(e))return ue.globalCache[e];if(t=this._isLocalStorageSupported()?this.read(e):this.readCookie(e),null!=t&&("function"!=typeof t.trim||""!==t.trim())){let i;try{i=JSON.parse(decodeURIComponent(t))}catch(e){i=decodeURIComponent(t)}return ue.globalCache[e]=i,i}}static createBroadCookie(e,t,i,n){if(n){let r=ue.broadDomain;if(null==r){const s=n.split(".");let a="";for(let n=s.length-1;n>=0;n--){if(a=0===n?s[n]+a:"."+s[n]+a,this.readCookie(e)){var o="test_"+e+n;if(this.createCookie(o,t,10,a),!this.readCookie(o))continue;this.removeCookie(o,a)}if(this.createCookie(e,t,i,a),this.readCookie(e)==t){r=a,ue.broadDomain=r;break}}}else this.createCookie(e,t,i,r)}else this.createCookie(e,t,i,n)}static getMetaProp(e){const t=this.readFromLSorCookie(_);if(null!=t)return t[e]}static setMetaProp(e,t){if(this._isLocalStorageSupported()){let i=this.readFromLSorCookie(_);null==i&&(i={}),void 0===t?delete i[e]:i[e]=t,this.saveToLSorCookie(_,i)}}static getAndClearMetaProp(e){const t=this.getMetaProp(e);return this.setMetaProp(e,void 0),t}static setInstantDeleteFlagInK(){let e=this.readFromLSorCookie(m);null==e&&(e={}),e.flag=!0,this.saveToLSorCookie(m,e)}static backupEvent(e,t,i){let n=this.readFromLSorCookie(E);void 0===n&&(n={}),n[t]={q:e},this.saveToLSorCookie(E,n),i.debug("stored in ".concat(E," reqNo : ").concat(t," -> ").concat(e))}static removeBackup(e,t){const i=this.readFromLSorCookie(E);null!=i&&void 0!==i[e]&&(t.debug("del event: ".concat(e," data-> ").concat(i[e].q)),delete i[e],this.saveToLSorCookie(E,i))}}const ue={globalCache:{gcookie:null,REQ_N:0,RESP_N:0},LRU_CACHE:null,globalProfileMap:void 0,globalEventsMap:void 0,blockRequest:!1,isOptInRequest:!1,broadDomain:null,webPushEnabled:null,campaignDivMap:{},currentSessionId:null,wiz_counter:0,notifApi:{notifEnabledFromApi:!1},unsubGroups:[],updatedCategoryLong:null,inbox:null,isPrivacyArrPushed:!1,privacyArray:[],offline:!1,location:null,dismissSpamControl:!1,globalUnsubscribe:!0,flutterVersion:null,variableStore:{}};var he=t("keyOrder"),pe=t("deleteFromObject");class ge{constructor(e){Object.defineProperty(this,pe,{value:fe}),Object.defineProperty(this,he,{writable:!0,value:void 0}),this.max=e;let t=de.readFromLSorCookie(T);if(t){const e={};i(this,he)[he]=[],t=t.cache;for(const n in t)t.hasOwnProperty(n)&&(e[t[n][0]]=t[n][1],i(this,he)[he].push(t[n][0]));this.cache=e}else this.cache={},i(this,he)[he]=[]}get(e){const t=this.cache[e];return t&&(this.cache=i(this,pe)[pe](e,this.cache),this.cache[e]=t,i(this,he)[he].push(e)),this.saveCacheToLS(this.cache),t}set(e,t){const n=this.cache[e],o=i(this,he)[he];null!=n?this.cache=i(this,pe)[pe](e,this.cache):o.length===this.max&&(this.cache=i(this,pe)[pe](o[0],this.cache)),this.cache[e]=t,i(this,he)[he][i(this,he)[he]-1]!==e&&i(this,he)[he].push(e),this.saveCacheToLS(this.cache)}saveCacheToLS(e){const t=[],n=i(this,he)[he];for(const i in n)if(n.hasOwnProperty(i)){const o=[];o.push(n[i]),o.push(e[n[i]]),t.push(o)}de.saveToLSorCookie(T,{cache:t})}getKey(e){if(null===e)return null;const t=i(this,he)[he];for(const i in t)if(t.hasOwnProperty(i)&&this.cache[t[i]]===e)return t[i];return null}getSecondLastKey(){const e=i(this,he)[he];return null!=e&&e.length>1?e[e.length-2]:-1}getLastKey(){const e=i(this,he)[he].length;if(e)return i(this,he)[he][e-1]}}var fe=function(e,t){const n=JSON.parse(JSON.stringify(i(this,he)[he])),o={};let r;for(const i in n)n.hasOwnProperty(i)&&(n[i]!==e?o[n[i]]=t[n[i]]:r=i);return n.splice(r,1),i(this,he)[he]=JSON.parse(JSON.stringify(n)),o},ve=t("logger"),be=t("request"),me=t("device"),ye=t("session");class we{constructor(e){let{logger:t,request:n,device:o,session:r}=e;Object.defineProperty(this,ve,{writable:!0,value:void 0}),Object.defineProperty(this,be,{writable:!0,value:void 0}),Object.defineProperty(this,me,{writable:!0,value:void 0}),Object.defineProperty(this,ye,{writable:!0,value:void 0}),i(this,ve)[ve]=t,i(this,be)[be]=n,i(this,me)[me]=o,i(this,ye)[ye]=r}s(e,t,n,o,r){let s=!1,a=!1;if(window.isOULInProgress&&(n||"undefined"!==o&&o===window.oulReqN)&&(window.isOULInProgress=!1,s=!0),void 0===o&&(o=0),de.removeBackup(o,i(this,ve)[ve]),o>ue.globalCache.REQ_N)return;if(ie(i(this,me)[me].gcookie)||e&&(a=!0),!ie(i(this,me)[me].gcookie)||n||"boolean"==typeof r){const o=i(this,ye)[ye].getSessionCookieObject();if(window.isOULInProgress||o.s&&t<o.s)return;if(i(this,ve)[ve].debug("Cookie was ".concat(i(this,me)[me].gcookie," set to ").concat(e)),i(this,me)[me].gcookie=e,ie(i(this,me)[me].gcookie)||de.getAndClearMetaProp(P),e&&de._isLocalStorageSupported()){null==ue.LRU_CACHE&&(ue.LRU_CACHE=new ge(100));const t=de.readFromLSorCookie(m);let o;null!=t&&t.id&&(o=ue.LRU_CACHE.cache[t.id],n&&(o||(de.saveToLSorCookie(F,!0),ue.LRU_CACHE.set(t.id,e)))),de.saveToLSorCookie(b,e);const r=ue.LRU_CACHE.getSecondLastKey();if(de.readFromLSorCookie(F)&&-1!==r){const e=ue.LRU_CACHE.cache[r];i(this,be)[be].unregisterTokenForGuid(e)}}de.createBroadCookie(b,e,M,window.location.hostname),de.saveToLSorCookie(b,e)}de._isLocalStorageSupported()&&i(this,ye)[ye].manageSession(t);const l=i(this,ye)[ye].getSessionCookieObject();(void 0===l.s||l.s<=t)&&(l.s=t,l.t=se(),i(this,ye)[ye].setSessionCookieObject(l)),ie(i(this,me)[me].gcookie)&&(ue.blockRequest=!1),!s&&!a||i(this,be)[be].processingBackup||i(this,be)[be].processBackupEvents(),ue.globalCache.RESP_N=o}}var Se=t("logger");class _e{constructor(e){let{logger:t}=e;Object.defineProperty(this,Se,{writable:!0,value:void 0}),this.gcookie=void 0,i(this,Se)[Se]=t,this.gcookie=this.getGuid()}getGuid(){let e=null;if(ie(this.gcookie))return this.gcookie;if(de._isLocalStorageSupported()){const t=de.read(b);if(ie(t)){try{e=JSON.parse(decodeURIComponent(t))}catch(n){i(this,Se)[Se].debug("Cannot parse Gcookie from localstorage - must be encoded "+t),32===t.length?(e=t,de.saveToLSorCookie(b,t)):i(this,Se)[Se].error("Illegal guid "+t)}ie(e)&&de.createBroadCookie(b,e,M,window.location.hostname)}}return ie(e)||(e=de.readCookie(b),!ie(e)||0!==e.indexOf("%")&&0!==e.indexOf("'")&&0!==e.indexOf('"')||(e=null),ie(e)&&de.saveToLSorCookie(b,e)),e}}const Ce="This property has been ignored.",ke="CleverTap error:",Ee="".concat(ke," Incorrect embed script."),Ae="".concat(ke," Event structure not valid. ").concat(Ce),Ie="".concat(ke," Gender value should be either M or F. ").concat(Ce),Oe="".concat(ke," Employed value should be either Y or N. ").concat(Ce),Pe="".concat(ke," Married value should be either Y or N. ").concat(Ce),Te="".concat(ke," Education value should be either School, College or Graduate. ").concat(Ce),xe="".concat(ke," Age value should be a number. ").concat(Ce),Re="".concat(ke," DOB value should be a Date Object"),Me="".concat(ke," setEnum(value). value should be a string or a number"),De="".concat(ke," Phone number should be formatted as +[country code][number]");let Le;const Ne=e=>{if(Z(e)){for(var t in e)if(e.hasOwnProperty(t)){if(Z(e[t])||Array.isArray(e[t]))return!1;Q(e[t])&&(e[t]=ae(e[t]))}return!0}return!1},Ue=(e,t)=>{if(Z(e)){for(var i in e)if(e.hasOwnProperty(i))if("Items"===i){if(!Array.isArray(e[i]))return!1;for(var n in e[i].length>50&&t.reportError(522,"Charged Items exceed 50 limit. Actual count: "+e[i].length),e[i])if(e[i].hasOwnProperty(n)&&(!Z(e[i][n])||!Ne(e[i][n])))return!1}else{if(Z(e[i])||Array.isArray(e[i]))return!1;Q(e[i])&&(e[i]=ae(e[i]))}if($(e[f])||te(e[f])){const i=e[f]+"";if(void 0===Le&&(Le=de.readFromLSorCookie(v)),void 0!==Le&&Le.trim()===i.trim())return t.error("Duplicate charged Id - Dropped"+e),!1;Le=i,de.saveToLSorCookie(v,i)}return!0}return!1};var je=t("logger"),Fe=t("oldValues"),Ve=t("request"),qe=t("isPersonalisationActive"),Be=t("processEventArray");class ze extends Array{constructor(e,t){let{logger:n,request:o,isPersonalisationActive:r}=e;super(),Object.defineProperty(this,Be,{value:He}),Object.defineProperty(this,je,{writable:!0,value:void 0}),Object.defineProperty(this,Fe,{writable:!0,value:void 0}),Object.defineProperty(this,Ve,{writable:!0,value:void 0}),Object.defineProperty(this,qe,{writable:!0,value:void 0}),i(this,je)[je]=n,i(this,Fe)[Fe]=t,i(this,Ve)[Ve]=o,i(this,qe)[qe]=r}push(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return i(this,Be)[Be](t),0}_processOldValues(){i(this,Fe)[Fe]&&i(this,Be)[Be](i(this,Fe)[Fe]),i(this,Fe)[Fe]=null}getDetails(e){if(!i(this,qe)[qe]())return;if(void 0===ue.globalEventsMap&&(ue.globalEventsMap=de.readFromLSorCookie(S)),void 0===ue.globalEventsMap)return;const t=ue.globalEventsMap[e],n={};return void 0!==t?(n.firstTime=new Date(1e3*t[1]),n.lastTime=new Date(1e3*t[2]),n.count=t[0],n):void 0}}var He=function(e){if(Array.isArray(e))for(;e.length>0;){var t=e.shift();if(!$(t)){i(this,je)[je].error(Ae);continue}if(t.length>1024&&(t=t.substring(0,1024),i(this,je)[je].reportError(510,t+"... length exceeded 1024 chars. Trimmed.")),J.includes(t)){i(this,je)[je].reportError(513,t+" is a restricted system event. It cannot be used as an event name.");continue}const n={type:"event"};if(n.evtName=oe(t,u),0!==e.length){const o=e.shift();if(Z(o)){if("Charged"===t){if(!Ue(o,i(this,je)[je])){i(this,je)[je].reportError(511,"Charged event structure invalid. Not sent.");continue}}else if(!Ne(o)){i(this,je)[je].reportError(512,t+" event structure invalid. Not sent.");continue}n.evtData=o}else e.unshift(o)}i(this,Ve)[Ve].processEvent(n)}};const Ke=e=>{const t={},i=e.indexOf("?");if(i>1){const n=e.substring(i+1);let o;const r=/\+/g,s=/([^&=]+)=?([^&]*)/g,a=function(e){let t=e.replace(r," ");try{t=decodeURIComponent(t)}catch(e){}return t};for(o=s.exec(n);o;)t[a(o[1])]=a(o[2]),o=s.exec(n)}return t},We=(e,t,i)=>e+"&"+t+"="+encodeURIComponent(i),Ge=()=>window.location.hostname,Ye=(e,t)=>(t&&"function"==typeof t.debug&&t.debug("dobj:"+e),$e(e)),Je=(()=>{let e="",t=0;for(t=0;t<=25;t++)e+=String.fromCharCode(t+65);for(t=0;t<=25;t++)e+=String.fromCharCode(t+97);for(t=0;t<10;t++)e+=t;return e+"+/="})(),$e=e=>{if(null==e)return"";var t,i,n,o,r,s,a,l="",c=0;for(e=(e=>{if(null==e)return"";let t,i,n,o={},r={},s="",a="",l="",c=2,d=3,u=2,h="",p=0,g=0,f=String.fromCharCode;for(n=0;n<e.length;n+=1)if(s=e.charAt(n),Object.prototype.hasOwnProperty.call(o,s)||(o[s]=d++,r[s]=!0),a=l+s,Object.prototype.hasOwnProperty.call(o,a))l=a;else{if(Object.prototype.hasOwnProperty.call(r,l)){if(l.charCodeAt(0)<256){for(t=0;t<u;t++)p<<=1,15==g?(g=0,h+=f(p),p=0):g++;for(i=l.charCodeAt(0),t=0;t<8;t++)p=p<<1|1&i,15==g?(g=0,h+=f(p),p=0):g++,i>>=1}else{for(i=1,t=0;t<u;t++)p=p<<1|i,15==g?(g=0,h+=f(p),p=0):g++,i=0;for(i=l.charCodeAt(0),t=0;t<16;t++)p=p<<1|1&i,15==g?(g=0,h+=f(p),p=0):g++,i>>=1}c--,0==c&&(c=Math.pow(2,u),u++),delete r[l]}else for(i=o[l],t=0;t<u;t++)p=p<<1|1&i,15==g?(g=0,h+=f(p),p=0):g++,i>>=1;c--,0==c&&(c=Math.pow(2,u),u++),o[a]=d++,l=String(s)}if(""!==l){if(Object.prototype.hasOwnProperty.call(r,l)){if(l.charCodeAt(0)<256){for(t=0;t<u;t++)p<<=1,15==g?(g=0,h+=f(p),p=0):g++;for(i=l.charCodeAt(0),t=0;t<8;t++)p=p<<1|1&i,15==g?(g=0,h+=f(p),p=0):g++,i>>=1}else{for(i=1,t=0;t<u;t++)p=p<<1|i,15==g?(g=0,h+=f(p),p=0):g++,i=0;for(i=l.charCodeAt(0),t=0;t<16;t++)p=p<<1|1&i,15==g?(g=0,h+=f(p),p=0):g++,i>>=1}c--,0==c&&(c=Math.pow(2,u),u++),delete r[l]}else for(i=o[l],t=0;t<u;t++)p=p<<1|1&i,15==g?(g=0,h+=f(p),p=0):g++,i>>=1;c--,0==c&&(c=Math.pow(2,u),u++)}for(i=2,t=0;t<u;t++)p=p<<1|1&i,15==g?(g=0,h+=f(p),p=0):g++,i>>=1;for(;;){if(p<<=1,15==g){h+=f(p);break}g++}return h})(e);c<2*e.length;)c%2==0?(t=e.charCodeAt(c/2)>>8,i=255&e.charCodeAt(c/2),n=c/2+1<e.length?e.charCodeAt(c/2+1)>>8:NaN):(t=255&e.charCodeAt((c-1)/2),(c+1)/2<e.length?(i=e.charCodeAt((c+1)/2)>>8,n=255&e.charCodeAt((c+1)/2)):i=n=NaN),c+=3,o=t>>2,r=(3&t)<<4|i>>4,s=(15&i)<<2|n>>6,a=63&n,isNaN(i)?s=a=64:isNaN(n)&&(a=64),l=l+Je.charAt(o)+Je.charAt(r)+Je.charAt(s)+Je.charAt(a);return l};var Ze=t("fireRequest"),Qe=t("dropRequestDueToOptOut"),Xe=t("addUseIPToRequest"),et=t("addARPToRequest");class tt{constructor(){this.networkRetryCount=0,this.minDelayFrequency=0}static fireRequest(e,t,n,o){i(this,Ze)[Ze](e,1,t,n,o)}getDelayFrequency(){if(this.logger.debug("Network retry #"+this.networkRetryCount),this.networkRetryCount<10)return this.logger.debug(this.account.id,"Failure count is "+this.networkRetryCount+". Setting delay frequency to 1s"),this.minDelayFrequency=G,this.minDelayFrequency;if(null==this.account.region)return this.logger.debug(this.account.id,"Setting delay frequency to 1s"),G;{const e=1e3*(Math.floor(10*Math.random())+1);return this.minDelayFrequency+=e,this.minDelayFrequency<6e5?(this.logger.debug(this.account.id,"Setting delay frequency to "+this.minDelayFrequency),this.minDelayFrequency):(this.minDelayFrequency=G,this.logger.debug(this.account.id,"Setting delay frequency to "+this.minDelayFrequency),this.minDelayFrequency)}}}tt.logger=void 0,tt.device=void 0,tt.account=void 0,Object.defineProperty(tt,Ze,{value:function(e,t,n,o,r){var s,a;if(i(this,Qe)[Qe]())return void this.logger.debug("req dropped due to optout cookie: "+this.device.gcookie);if(ie(this.device.gcookie)||(ue.blockRequest=!0),r&&r===Y)!ie(this.device.gcookie)&&ue.globalCache.RESP_N<ue.globalCache.REQ_N-1&&setTimeout((()=>{this.logger.debug("retrying fire request for url: ".concat(e,", tries: ").concat(this.networkRetryCount)),i(this,Ze)[Ze](e,void 0,n,o)}),this.getDelayFrequency());else if(!ie(this.device.gcookie)&&ue.globalCache.RESP_N<ue.globalCache.REQ_N-1&&t<200)return void setTimeout((()=>{this.logger.debug("retrying fire request for url: ".concat(e,", tries: ").concat(t)),i(this,Ze)[Ze](e,t+1,n,o)}),50);if(o?window.isOULInProgress=!0:(ie(this.device.gcookie)&&(e=We(e,"gc",this.device.gcookie)),e=i(this,et)[et](e,n)),e=We(e,"tries",t),e=i(this,Xe)[Xe](e),e=We(e,"r",(new Date).getTime()),(null===(s=window.clevertap)||void 0===s?void 0:s.hasOwnProperty("plugin"))||(null===(a=window.wizrocket)||void 0===a?void 0:a.hasOwnProperty("plugin"))){const t=window.clevertap.plugin||window.wizrocket.plugin;e=We(e,"ct_pl",t)}-1!==e.indexOf("chrome-extension:")&&(e=e.replace("chrome-extension:","https:"));for(var l=document.getElementsByClassName("ct-jp-cb");l[0]&&l[0].parentNode;)l[0].parentNode.removeChild(l[0]);const c=document.createElement("script");c.setAttribute("type","text/javascript"),c.setAttribute("src",e),c.setAttribute("class","ct-jp-cb"),c.setAttribute("rel","nofollow"),c.async=!0,document.getElementsByTagName("head")[0].appendChild(c),this.logger.debug("req snt -> url: "+e)}}),Object.defineProperty(tt,Qe,{value:function(){return!ue.isOptInRequest&&ie(this.device.gcookie)&&$(this.device.gcookie)?":OO"===this.device.gcookie.slice(-3):(ue.isOptInRequest=!1,!1)}}),Object.defineProperty(tt,Xe,{value:function(e){var t=de.getMetaProp(P);return"boolean"!=typeof t&&(t=!1),We(e,P,t?"true":"false")}}),Object.defineProperty(tt,et,{value:function(e,t){if(!0===t){const t={skipResARP:!0};return We(e,"arp",Ye(JSON.stringify(t),this.logger))}return de._isLocalStorageSupported()&&void 0!==localStorage.getItem(k)&&null!==localStorage.getItem(k)?We(e,"arp",Ye(JSON.stringify(de.readFromLSorCookie(k)),this.logger)):e}});const it=()=>{let e={};if(de._isLocalStorageSupported()){let t=de.read(y);null!=t?(t=JSON.parse(decodeURIComponent(t).replace(p,'"')),t.hasOwnProperty("global")?e.wp=t:e=t):e={}}return e},nt=e=>{if(de._isLocalStorageSupported()){const t={...it(),...e},i=JSON.stringify(t);de.save(y,encodeURIComponent(i)),ot()}},ot=()=>{if(de._isLocalStorageSupported()){let i=de.read(b);if(ie(i))try{i=JSON.parse(decodeURIComponent(de.read(b)));const n=de.read(w)?JSON.parse(decodeURIComponent(de.read(w))):{};if(i&&de._isLocalStorageSupported()){var e={},t=it();Object.keys(t).forEach((o=>{const r=i in n&&Object.keys(n[i]).length&&n[i][o]?n[i][o]:{},s=t[o].global,a=re(),l=t[o][a];if(void 0!==s){const e=Object.keys(s);for(const t in e){let i=[];if(e.hasOwnProperty(t)){let n=0,o=0;const a=e[t];if("tc"===a)continue;void 0!==l&&void 0!==l[a]&&(n=l[a]),void 0!==s&&void 0!==s[a]&&(o=s[a]),i=[a,n,o],r[a]=i}}}e={...e,[o]:r}})),n[i]=e,de.save(w,encodeURIComponent(JSON.stringify(n)))}}catch(e){console.error("Invalid clevertap Id "+e)}}},rt=()=>{const e=JSON.parse(decodeURIComponent(de.read(b)));let t={};if(de._isLocalStorageSupported()){let i={};t=it();const n=de.read(w),o=n?decodeURIComponent(n):null,r=o?JSON.parse(o):null,s=e&&null!=n&&r&&r[e]&&r[e].wp?Object.values(r[e].wp):[],a=e&&null!=n&&r&&r[e]&&r[e].wi?Object.values(r[e].wi):[],l=re();let c=0,d=0;return t.wp&&t.wp[l]&&"undefined"!==t.wp[l].tc&&(c=t.wp[l].tc),t.wi&&t.wi[l]&&"undefined"!==t.wi[l].tc&&(d=t.wi[l].tc),i={wmp:c,wimp:d,tlc:s,witlc:a},i}},st=(e,t)=>{let{logger:i}=t,n=!1;if(Z(e))for(const t in e)if(e.hasOwnProperty(t)){n=!0;let o=e[t];if(null==o){delete e[t];continue}"Gender"!==t||o.match(/^M$|^F$/)||(n=!1,i.error(Ie)),"Employed"!==t||o.match(/^Y$|^N$/)||(n=!1,i.error(Oe)),"Married"!==t||o.match(/^Y$|^N$/)||(n=!1,i.error(Pe)),"Education"!==t||o.match(/^School$|^College$|^Graduate$/)||(n=!1,i.error(Te)),"Age"===t&&null!=o&&(ee(o)?e.Age=+o:(n=!1,i.error(xe))),"DOB"===t?(/^\$D_/.test(o)&&11===(o+"").length||Q(o)||(n=!1,i.error(Re)),Q(o)&&(e[t]=ae(o))):Q(o)&&(e[t]=ae(o)),"Phone"!==t||X(o)||(o.length>8&&"+"===o.charAt(0)?(o=o.substring(1,o.length),ee(o)?e.Phone=+o:(n=!1,i.error(De+". Removed."))):(n=!1,i.error(De+". Removed."))),n||delete e[t]}return n},at=e=>{const t={};t.Name=e.name,null!=e.id&&(t.FBID=e.id+""),"male"===e.gender?t.Gender="M":"female"===e.gender?t.Gender="F":t.Gender="O";null!=e.relationship_status&&(t.Married="N","Married"===e.relationship_status&&(t.Married="Y"));const i=function(e){if(null!=e){let t="",i="";for(let n=0;n<e.length;n++){const o=e[n];if(null!=o.type){const e=o.type;if("Graduate School"===e)return"Graduate";"College"===e?t="1":"High School"===e&&(i="1")}}if("1"===t)return"College";if("1"===i)return"School"}}(e.education);null!=i&&(t.Education=i);const n=null!=e.work?e.work.length:0;if(t.Employed=n>0?"Y":"N",null!=e.email&&(t.Email=e.email),null!=e.birthday){const i=e.birthday.split("/");t.DOB=le(i[2]+i[0]+i[1])}return t},lt=(e,t)=>{let{logger:i}=t;const n={};if(null!=e.displayName&&(n.Name=e.displayName),null!=e.id&&(n.GPID=e.id+""),null!=e.gender&&("male"===e.gender?n.Gender="M":"female"===e.gender?n.Gender="F":"other"===e.gender&&(n.Gender="O")),null!=e.image&&!1===e.image.isDefault&&(n.Photo=e.image.url.split("?sz")[0]),null!=e.emails)for(let t=0;t<e.emails.length;t++){const i=e.emails[t];"account"===i.type&&(n.Email=i.value)}if(null!=e.organizations){n.Employed="N";for(let t=0;t<e.organizations.length;t++)"work"===e.organizations[t].type&&(n.Employed="Y")}if(null!=e.birthday){const t=e.birthday.split("-");n.DOB=le(t[0]+t[1]+t[2])}return null!=e.relationshipStatus&&(n.Married="N","married"===e.relationshipStatus&&(n.Married="Y")),i.debug("gplus usr profile "+JSON.stringify(n)),n},ct=(e,t)=>{if(de._isLocalStorageSupported()){if(null==ue.globalProfileMap&&(ue.globalProfileMap=de.readFromLSorCookie(C),null==ue.globalProfileMap&&(ue.globalProfileMap={})),null!=e._custom){const t=e._custom;for(const i in t)t.hasOwnProperty(i)&&(e[i]=t[i]);delete e._custom}for(const i in e)if(e.hasOwnProperty(i)){if(ue.globalProfileMap.hasOwnProperty(i)&&!t)continue;ue.globalProfileMap[i]=e[i]}null!=ue.globalProfileMap._custom&&delete ue.globalProfileMap._custom,de.saveToLSorCookie(C,ue.globalProfileMap)}},dt=(e,t,i)=>{if(null!=e&&"-1"!==e&&de._isLocalStorageSupported()){const t=it();let n=t.wp[i];null==n&&(n={},t[i]=n),n[e]="dnd",nt(t)}if(null!=ue.campaignDivMap){const t=ue.campaignDivMap[e];null!=t&&(document.getElementById(t).style.display="none","intentPreview"===t&&null!=document.getElementById("intentOpacityDiv")&&(document.getElementById("intentOpacityDiv").style.display="none"))}};var ut=t("logger"),ht=t("request"),pt=t("account"),gt=t("oldValues"),ft=t("isPersonalisationActive"),vt=t("processProfileArray");class bt extends Array{constructor(e,t){let{logger:n,request:o,account:r,isPersonalisationActive:s}=e;super(),Object.defineProperty(this,vt,{value:mt}),Object.defineProperty(this,ut,{writable:!0,value:void 0}),Object.defineProperty(this,ht,{writable:!0,value:void 0}),Object.defineProperty(this,pt,{writable:!0,value:void 0}),Object.defineProperty(this,gt,{writable:!0,value:void 0}),Object.defineProperty(this,ft,{writable:!0,value:void 0}),i(this,ut)[ut]=n,i(this,ht)[ht]=o,i(this,pt)[pt]=r,i(this,gt)[gt]=t,i(this,ft)[ft]=s}push(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return i(this,vt)[vt](t),0}_processOldValues(){i(this,gt)[gt]&&i(this,vt)[vt](i(this,gt)[gt]),i(this,gt)[gt]=null}getAttribute(e){if(i(this,ft)[ft]())return null==ue.globalProfileMap&&(ue.globalProfileMap=de.readFromLSorCookie(C)),null!=ue.globalProfileMap?ue.globalProfileMap[e]:void 0}_handleIncrementDecrementValue(e,t,n){var o;if(null==ue.globalProfileMap&&(ue.globalProfileMap=de.readFromLSorCookie(C)),null!=ue.globalProfileMap||(null===(o=ue.globalProfileMap)||void 0===o?void 0:o.hasOwnProperty(e)))if(!t||"number"!=typeof t||t<=0)console.error("Value should be a number greater than 0");else{ue.globalProfileMap[e]=n===q?ue.globalProfileMap[e]+t:ue.globalProfileMap[e]-t,de.saveToLSorCookie(C,ue.globalProfileMap);let o={};const r={};o.type="profile",r[e]={[n]:t},null==r.tz&&(r.tz=(new Date).toString().match(/([A-Z]+[\+-][0-9]+)/)[1]),o.profile=r,o=i(this,ht)[ht].addSystemDataToObject(o,!0),i(this,ht)[ht].addFlags(o);const s=Ye(JSON.stringify(o),i(this,ut)[ut]);let a=i(this,pt)[pt].dataPostURL;a=We(a,"type",R),a=We(a,"d",s),i(this,ht)[ht].saveAndFireRequest(a,ue.blockRequest)}else console.error("Kindly create profile with required proprty to increment/decrement.")}_handleMultiValueSet(e,t,i){const n=[];for(let e=0;e<t.length;e++)"number"!=typeof t[e]||n.includes(t[e])?"string"!=typeof t[e]||n.includes(t[e].toLowerCase())?console.error("array supports only string or number type values"):n.push(t[e].toLowerCase()):n.push(t[e]);var o;null==ue.globalProfileMap&&(ue.globalProfileMap=null!==(o=de.readFromLSorCookie(C))&&void 0!==o?o:{}),ue.globalProfileMap[e]=n,de.saveToLSorCookie(C,ue.globalProfileMap),this.sendMultiValueData(e,t,i)}_handleMultiValueAdd(e,t,i){var n=[];if(null==ue.globalProfileMap&&(ue.globalProfileMap=de.readFromLSorCookie(C)||{}),"string"==typeof t||"number"==typeof t)ue.globalProfileMap.hasOwnProperty(e)?(n=ue.globalProfileMap[e]).push("number"==typeof t?t:t.toLowerCase()):ue.globalProfileMap[e]=t;else{ue.globalProfileMap.hasOwnProperty(e)&&(n=Array.isArray(ue.globalProfileMap[e])?ue.globalProfileMap[e]:[ue.globalProfileMap[e]]);for(var o=0;o<t.length;o++)"number"!=typeof t[o]||n.includes(t[o])?"string"!=typeof t[o]||n.includes(t[o].toLowerCase())?"number"==typeof t[o]&&n.includes(t[o])||"string"==typeof t[o]&&n.includes(t[o].toLowerCase())?console.error("Values already included"):console.error("Array supports only string or number type values"):n.push(t[o].toLowerCase()):n.push(t[o]);ue.globalProfileMap[e]=n}de.saveToLSorCookie(C,ue.globalProfileMap),this.sendMultiValueData(e,t,i)}_handleMultiValueRemove(e,t,i){var n;if(null==ue.globalProfileMap&&(ue.globalProfileMap=de.readFromLSorCookie(C)),null==ue||null===(n=ue.globalProfileMap)||void 0===n?void 0:n.hasOwnProperty(e))if("string"==typeof t||"number"==typeof t){var o=ue.globalProfileMap[e].indexOf(t);-1!==o&&ue.globalProfileMap[e].splice(o,1)}else for(var r=0;r<t.length;r++){var s=ue.globalProfileMap[e].indexOf(t[r]);-1!==s&&ue.globalProfileMap[e].splice(s,1)}else console.error("The property ".concat(e," does not exist."));de.saveToLSorCookie(C,ue.globalProfileMap),this.sendMultiValueData(e,t,i)}_handleMultiValueDelete(e,t){var i;null==ue.globalProfileMap&&(ue.globalProfileMap=de.readFromLSorCookie(C)),(null==ue||null===(i=ue.globalProfileMap)||void 0===i?void 0:i.hasOwnProperty(e))?delete ue.globalProfileMap[e]:console.error("The property ".concat(e," does not exist.")),de.saveToLSorCookie(C,ue.globalProfileMap),this.sendMultiValueData(e,null,t)}sendMultiValueData(e,t,n){let o={};const r={};o.type="profile",r[e]={[n]:n===H||t},null==r.tz&&(r.tz=(new Date).toString().match(/([A-Z]+[\+-][0-9]+)/)[1]),o.profile=r,o=i(this,ht)[ht].addSystemDataToObject(o,!0),i(this,ht)[ht].addFlags(o);const s=Ye(JSON.stringify(o),i(this,ut)[ut]);let a=i(this,pt)[pt].dataPostURL;a=We(a,"type",R),a=We(a,"d",s),i(this,ht)[ht].saveAndFireRequest(a,ue.blockRequest)}}var mt=function(e){if(Array.isArray(e)&&e.length>0)for(const t in e)if(e.hasOwnProperty(t)){const n=e[t];let o,r={};if(null!=n.Site){if(o=n.Site,X(o)||!st(o,{logger:i(this,ut)[ut]}))return}else if(null!=n.Facebook){const e=n.Facebook;X(e)||e.error||(o=at(e))}else if(null!=n["Google Plus"]){const e=n["Google Plus"];X(e)||e.error||(o=lt(e,{logger:i(this,ut)[ut]}))}if(null!=o&&!X(o)){r.type="profile",null==o.tz&&(o.tz=(new Date).toString().match(/([A-Z]+[\+-][0-9]+)/)[1]),r.profile=o,ct(o,!0),r=i(this,ht)[ht].addSystemDataToObject(r,void 0),i(this,ht)[ht].addFlags(r);const e=Ye(JSON.stringify(r),i(this,ut)[ut]);let t=i(this,pt)[pt].dataPostURL;t=We(t,"type",R),t=We(t,"d",e),i(this,ht)[ht].saveAndFireRequest(t,ue.blockRequest)}}},yt=t("request"),wt=t("logger"),St=t("account"),_t=t("session"),Ct=t("oldValues"),kt=t("device"),Et=t("processOUL"),At=t("handleCookieFromCache"),It=t("deleteUser"),Ot=t("processLoginArray");class Pt extends Array{constructor(e,t){let{request:n,account:o,session:r,logger:s,device:a}=e;super(),Object.defineProperty(this,Ot,{value:Mt}),Object.defineProperty(this,It,{value:Rt}),Object.defineProperty(this,At,{value:xt}),Object.defineProperty(this,Et,{value:Tt}),Object.defineProperty(this,yt,{writable:!0,value:void 0}),Object.defineProperty(this,wt,{writable:!0,value:void 0}),Object.defineProperty(this,St,{writable:!0,value:void 0}),Object.defineProperty(this,_t,{writable:!0,value:void 0}),Object.defineProperty(this,Ct,{writable:!0,value:void 0}),Object.defineProperty(this,kt,{writable:!0,value:void 0}),i(this,yt)[yt]=n,i(this,St)[St]=o,i(this,_t)[_t]=r,i(this,wt)[wt]=s,i(this,Ct)[Ct]=t,i(this,kt)[kt]=a}clear(){i(this,wt)[wt].debug("clear called. Reset flag has been set."),i(this,It)[It](),de.setMetaProp(g,!0)}push(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return i(this,Ot)[Ot](t),0}_processOldValues(){i(this,Ct)[Ct]&&i(this,Ot)[Ot](i(this,Ct)[Ct]),i(this,Ct)[Ct]=null}}var Tt=function(e){let t=!0;de.saveToLSorCookie(F,t);const n=e=>{let n=de.readFromLSorCookie(m);const o=de.readFromLSorCookie(b);let r;if(null==n)n={},r=e;else{r=n.id;let s=!1,a=!1;if(null==r&&(r=e[0],s=!0),null==ue.LRU_CACHE&&de._isLocalStorageSupported()&&(ue.LRU_CACHE=new ge(100)),s)null!=o&&(ue.LRU_CACHE.set(r,o),ue.blockRequest=!1);else for(const t in e)if(e.hasOwnProperty(t)){const i=e[t];if(ue.LRU_CACHE.cache[i]){r=i,a=!0;break}}if(a){r!==ue.LRU_CACHE.getLastKey()?i(this,At)[At]():(t=!1,de.saveToLSorCookie(F,t));const e=ue.LRU_CACHE.get(r);ue.LRU_CACHE.set(r,e),de.saveToLSorCookie(b,e),i(this,kt)[kt].gcookie=e;const n=ue.LRU_CACHE.getSecondLastKey();if(de.readFromLSorCookie(F)&&-1!==n){const e=ue.LRU_CACHE.cache[n];i(this,yt)[yt].unregisterTokenForGuid(e)}}else s?null!=o&&(i(this,kt)[kt].gcookie=o,de.saveToLSorCookie(b,o),t=!1):this.clear(),de.saveToLSorCookie(F,!1),r=e[0]}n.id=r,de.saveToLSorCookie(m,n)};if(Array.isArray(e)&&e.length>0)for(const o in e)if(e.hasOwnProperty(o)){const r=e[o];let s,a={};if(null!=r.Site){if(s=r.Site,X(s)||!st(s,{logger:i(this,wt)[wt]}))return}else if(null!=r.Facebook){const e=r.Facebook;X(e)||e.error||(s=at(e))}else if(null!=r["Google Plus"]){const e=r["Google Plus"];X(e)&&!e.error&&(s=lt(e,{logger:i(this,wt)[wt]}))}if(null!=s&&!X(s)){a.type="profile",null==s.tz&&(s.tz=(new Date).toString().match(/([A-Z]+[\+-][0-9]+)/)[1]),a.profile=s;const e=[];de._isLocalStorageSupported()&&(s.Identity&&e.push(s.Identity),s.Email&&e.push(s.Email),s.GPID&&e.push("GP:"+s.GPID),s.FBID&&e.push("FB:"+s.FBID),e.length>0&&n(e)),ct(s,!0),a=i(this,yt)[yt].addSystemDataToObject(a,void 0),i(this,yt)[yt].addFlags(a),t&&(a[x]=!0);const o=Ye(JSON.stringify(a),i(this,wt)[wt]);let r=i(this,St)[St].dataPostURL;r=We(r,"type",R),r=We(r,"d",o),i(this,yt)[yt].saveAndFireRequest(r,ue.blockRequest,t)}}},xt=function(){ue.blockRequest=!1,console.debug("Block request is false"),de._isLocalStorageSupported()&&(delete localStorage[C],delete localStorage[S],delete localStorage[_],delete localStorage[k],delete localStorage[y],delete localStorage[v]),de.removeCookie(y,Ge()),de.removeCookie(i(this,_t)[_t].cookieName,ue.broadDomain),de.removeCookie(k,ue.broadDomain),i(this,_t)[_t].setSessionCookieObject("")},Rt=function(){ue.blockRequest=!0,i(this,wt)[wt].debug("Block request is true"),ue.globalCache={gcookie:null,REQ_N:0,RESP_N:0},de._isLocalStorageSupported()&&(delete localStorage[b],delete localStorage[m],delete localStorage[C],delete localStorage[S],delete localStorage[_],delete localStorage[k],delete localStorage[y],delete localStorage[v]),de.removeCookie(b,ue.broadDomain),de.removeCookie(y,Ge()),de.removeCookie(m,Ge()),de.removeCookie(i(this,_t)[_t].cookieName,ue.broadDomain),de.removeCookie(k,ue.broadDomain),i(this,kt)[kt].gcookie=null,i(this,_t)[_t].setSessionCookieObject("")},Mt=function(e){if(Array.isArray(e)&&e.length>0){const t=e.pop();if(null!=t&&Z(t)&&(null!=t.Site&&Object.keys(t.Site).length>0||null!=t.Facebook&&Object.keys(t.Facebook).length>0||null!=t["Google Plus"]&&Object.keys(t["Google Plus"]).length>0)){de.setInstantDeleteFlagInK();try{i(this,Et)[Et]([t])}catch(e){i(this,wt)[wt].debug(e)}}else i(this,wt)[wt].error("Profile object is in incorrect format")}};class Dt extends HTMLElement{constructor(){super(),this._details=null,this.shadow=null,this.shadow=this.attachShadow({mode:"open"})}get details(){return this._details||""}set details(e){null===this._details&&(this._details=e,this.renderBanner())}renderBanner(){this.shadow.innerHTML=this.getBannerContent(),!1!==this.trackClick&&this.addEventListener("click",(()=>{const e=this.details.onClick;e&&(this.details.window?window.open(e,"_blank"):window.parent.location.href=e),window.clevertap.renderNotificationClicked({msgId:this.msgId,pivotId:this.pivotId})})),window.clevertap.renderNotificationViewed({msgId:this.msgId,pivotId:this.pivotId})}getBannerContent(){return'\n      <style type="text/css">\n        .banner {\n          position: relative;\n          cursor: '.concat(this.details.onClick?"pointer":"","\n        }\n        img {\n          height: ").concat(this.divHeight?this.divHeight:"auto",";\n          width: 100%;\n        }\n        .wrapper:is(.left, .right, .center) {\n          display: flex;\n          justify-content: center;\n          flex-direction: column;\n          align-items: center;\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          overflow: auto;\n          top: 0;\n        }\n        ").concat(this.details.css?this.details.css:"",'\n      </style>\n      <div class="banner">\n        <picture>\n          <source media="(min-width:480px)" srcset="').concat(this.details.desktopImageURL,'">\n          <source srcset="').concat(this.details.mobileImageURL,'">\n          <img src="').concat(this.details.desktopImageURL,'" alt="Please upload a picture" style="width:100%;" part="banner__img">\n        </picture>\n        ').concat(this.details.html?this.details.html:"","\n      </div>\n    ")}}class Lt extends HTMLElement{constructor(){super(),this._target=null,this._carousel=null,this.shadow=null,this.slides=0,this.previouslySelectedItem=-1,this.selectedItem=1,this.autoSlide=null,this.stopAutoSlideTimeout=null,this.shadow=this.attachShadow({mode:"open"}),void 0===customElements.get("ct-web-personalisation-banner")&&customElements.define("ct-web-personalisation-banner",Dt)}get target(){return this._target||""}set target(e){null===this._target&&(this._target=e,this.renderCarousel())}get details(){return this.target.display.details}get display(){return this.target.display}renderCarousel(){this.slides=this.details.length,this.shadow.innerHTML=this.getStyles();const e=this.getCarouselContent();this.display.showNavBtns&&e.insertAdjacentHTML("beforeend",this.display.navBtnsHtml),this.display.showNavArrows&&(e.insertAdjacentHTML("beforeend",this.display.leftNavArrowHtml),e.insertAdjacentHTML("beforeend",this.display.rightNavArrowHtml)),this._carousel=e,this.shadow.appendChild(e),this.setupClick(),this.updateSelectedItem(),this.startAutoSlide(),this.setupOnHover(),window.clevertap.renderNotificationViewed({msgId:this.target.wzrk_id,pivotId:this.target.wzrk_pivot})}setupClick(){this._carousel.addEventListener("click",(e=>{const t=e.target.id;if(t.startsWith("carousel__button")){const e=+t.split("-")[1];e!==this.selectedItem&&(this.previouslySelectedItem=this.selectedItem,this.selectedItem=e,this.updateSelectedItem(),this.startAutoSlide())}else if(t.startsWith("carousel__arrow"))t.endsWith("right")?this.goToNext():this.goToPrev(),this.startAutoSlide();else if(t.indexOf("-")>-1){const e=+t.split("-")[1],i=e-1;window.parent.clevertap&&window.clevertap.renderNotificationClicked({msgId:this.target.wzrk_id,pivotId:this.target.wzrk_pivot,wzrk_slideNo:e});const n=this.details[i].onClick;""!==n&&(this.details[i].window?window.open(n,"_blank"):window.location.href=n)}}))}setupOnHover(){this._carousel.addEventListener("mouseenter",(e=>{this.stopAutoSlideTimeout=setTimeout((()=>{this.autoSlide=clearInterval(this.autoSlide)}),500)})),this._carousel.addEventListener("mouseleave",(e=>{clearTimeout(this.stopAutoSlideTimeout),void 0===this.autoSlide&&this.startAutoSlide()}))}getCarouselContent(){const e=document.createElement("div");return e.setAttribute("class","carousel"),this.details.forEach(((t,i)=>{const n=document.createElement("ct-web-personalisation-banner");n.classList.add("carousel__item"),n.trackClick=!1,n.setAttribute("id","carousel__item-".concat(i+1)),n.details=t,e.appendChild(n)})),e}getStyles(){var e,t;return"\n      <style>\n      .carousel {\n        position: relative;\n      }\n\n      .carousel__item {\n        display: none;\n        background-repeat: no-repeat;\n        background-size: cover;\n      }\n\n      ct-web-personalisation-banner::part(banner__img) {\n        height: ".concat((null==this||null===(e=this.target)||void 0===e||null===(t=e.display)||void 0===t?void 0:t.divHeight)?this.target.display.divHeight:"auto",";\n        width: 100%;\n        transition: 2s;\n      }\n\n      .carousel__item--selected {\n        display: block;\n      }\n      ").concat(this.display.navBtnsCss,"\n      ").concat(this.display.navArrowsCss,"\n      </style>\n  ")}updateSelectedItem(){if(-1!==this.previouslySelectedItem){const e=this.shadow.getElementById("carousel__item-".concat(this.previouslySelectedItem)),t=this.shadow.getElementById("carousel__button-".concat(this.previouslySelectedItem));e.classList.remove("carousel__item--selected"),t&&t.classList.remove("carousel__button--selected")}const e=this.shadow.getElementById("carousel__item-".concat(this.selectedItem)),t=this.shadow.getElementById("carousel__button-".concat(this.selectedItem));e.classList.add("carousel__item--selected"),t&&t.classList.add("carousel__button--selected")}startAutoSlide(){clearInterval(this.autoSlide),this.autoSlide=setInterval((()=>{this.goToNext()}),this.display.sliderTime?1e3*this.display.sliderTime:3e3)}goToNext(){this.goTo(this.selectedItem,(this.selectedItem+1)%this.slides)}goToPrev(){this.goTo(this.selectedItem,this.selectedItem-1)}goTo(e,t){this.previouslySelectedItem=e,this.selectedItem=t,0===t&&(this.selectedItem=this.slides),this.updateSelectedItem()}}class Nt extends HTMLElement{constructor(){super(),this._target=null,this._session=null,this.shadow=null,this.popup=null,this.container=null,this.resizeObserver=null,this.shadow=this.attachShadow({mode:"open"})}get target(){return this._target||""}set target(e){null===this._target&&(this._target=e,this.renderImageOnlyPopup())}get session(){return this._session||""}set session(e){this._session=e}get msgId(){return this.target.wzrk_id}get pivotId(){return this.target.wzrk_pivot}get onClickUrl(){return this.target.display.onClickUrl}renderImageOnlyPopup(){const e=this.target.wzrk_id.split("_")[0],t=this.session.sessionId;this.shadow.innerHTML=this.getImageOnlyPopupContent(),this.popup=this.shadowRoot.getElementById("imageOnlyPopup"),this.container=this.shadowRoot.getElementById("container"),this.closeIcon=this.shadowRoot.getElementById("close"),this.popup.addEventListener("load",this.updateImageAndContainerWidth()),this.resizeObserver=new ResizeObserver((()=>this.handleResize(this.popup,this.container))),this.resizeObserver.observe(this.popup),this.closeIcon.addEventListener("click",(()=>{if(this.resizeObserver.unobserve(this.popup),document.getElementById("wzrkImageOnlyDiv").style.display="none",this.remove(),null!=e&&"-1"!==e&&de._isLocalStorageSupported()){const i=it();let n=i.wp[t];null==n&&(n={},i[t]=n),n[e]="dnd",nt(i)}})),window.clevertap.renderNotificationViewed({msgId:this.msgId,pivotId:this.pivotId}),this.onClickUrl&&this.popup.addEventListener("click",(()=>{this.target.display.window?window.open(this.onClickUrl,"_blank"):window.parent.location.href=this.onClickUrl,window.clevertap.renderNotificationClicked({msgId:this.msgId,pivotId:this.pivotId})}))}handleResize(e,t){const i=this.getRenderedImageWidth(e);t.style.setProperty("width","".concat(i,"px"))}getImageOnlyPopupContent(){return"\n        ".concat(this.target.msgContent.css,"\n        ").concat(this.target.msgContent.html,"\n      ")}updateImageAndContainerWidth(){return()=>{const e=this.getRenderedImageWidth(this.popup);this.popup.style.setProperty("width","".concat(e,"px")),this.container.style.setProperty("width","".concat(e,"px")),this.container.style.setProperty("height","auto"),this.container.style.setProperty("position","fixed"),this.popup.style.setProperty("visibility","visible"),this.closeIcon.style.setProperty("visibility","visible"),document.getElementById("wzrkImageOnlyDiv").style.visibility="visible"}}getRenderedImageWidth(e){const t=e.naturalWidth/e.naturalHeight;return e.height*t}}class Ut extends HTMLElement{constructor(e,t){super(),this.wrapper=null,this.snackBar=null,this.shadow=this.attachShadow({mode:"open"}),this.config=e,this.message=t,this.renderMessage(t)}get pivotId(){return this.message.wzrk_pivot}get campaignId(){return this.message.wzrk_id}createEl(e,t,i){const n=document.createElement(e);return n.setAttribute("id",t),n.setAttribute("part",i||t),n}renderMessage(e){switch(this.wrapper=this.createEl("div","messageWrapper"),e.templateType){case"text-only":case"text-with-icon":case"text-with-icon-and-image":{const t=this.prepareBasicMessage(e.msg[0]);this.wrapper.appendChild(t)}}const t=this.createEl("div","timeStamp");if(t.innerHTML="<span>".concat(Gt(e.id.split("_")[1]),"<span>"),!e.viewed){const e=this.createEl("span","unreadMarker");t.appendChild(e)}this.wrapper.appendChild(t),this.shadow.appendChild(this.wrapper)}prepareBasicMessage(e){const t=this.createEl("div","message");if(e.imageUrl){const i=this.addImage(e.imageUrl,"mainImg");t.appendChild(i)}const i=this.createEl("div","iconTitleDescWrapper");if(e.iconUrl){const t=this.addImage(e.iconUrl,"iconImg");i.appendChild(t)}const n=this.createEl("div","titleDescWrapper");if(e.title){const t=this.createEl("div","title");t.innerText=e.title,n.appendChild(t)}if(e.description){const t=this.createEl("div","description");t.innerText=e.description,n.appendChild(t)}if((e.title||e.description)&&i.appendChild(n),(e.iconUrl||e.title||e.description)&&t.appendChild(i),e.buttons&&e.buttons.length){const i=this.addButtons(e.buttons);t.appendChild(i)}return t}addButtons(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];const t=this.createEl("div","buttonsContainer");let i=!1;return e.forEach(((e,n)=>{const o=this.createEl("button","button-".concat(n),"button");o.innerText=e.text,n>0&&(o.style.cssText+="margin-left: 2px;"),"copy"===e.action&&(i=!0),t.appendChild(o)})),i&&this.addSnackbar(t),t}addSnackbar(e){this.snackBar=this.createEl("div","snackbar-".concat(this.campaignId),"snackbar"),this.snackBar.innerHTML=$t;const t=this.createEl("span","snackbar-msg-".concat(this.campaignId),"snackbar-msg");t.innerText="Copied to clipboard",this.snackBar.appendChild(t),e.appendChild(this.snackBar)}addImage(e,t){const i=this.createEl("div","".concat(t,"Container")),n=this.createEl("img",t);return n.setAttribute("src",e),n.setAttribute("loading","lazy"),i.appendChild(n),i}raiseClickedEvent(e,t){switch(this.message.templateType){case"text-only":case"text-with-icon":case"text-with-icon-and-image":this.raiseClickedForBasicTemplates(e,t)}}raiseClickedForBasicTemplates(e,t){const i=this.message.msg[0],n={msgId:this.campaignId,pivotId:this.pivotId};if("BUTTON"===e.tagName){const t=e.id.split("-")[1],o=i.buttons[t];n.kv={wzrk_c2a:o.text},"url"===o.action?o.openUrlInNewTab?window.open(o.url,"_blank"):window.location=o.url:"copy"===o.action&&(window.focus(),navigator.clipboard.writeText(o.clipboardText),this.snackBar.style.setProperty("display","flex","important"),setTimeout((()=>{this.snackBar.style.setProperty("display","none","important")}),2e3))}else"CT-INBOX-MESSAGE"===e.tagName&&i.onClickUrl&&(i.openUrlInNewTab?window.open(i.onClickUrl,"_blank"):window.location=i.onClickUrl);t?console.log("Notifiction clicked event will be raised at run time with payload ::",n):window.clevertap.renderNotificationClicked(n)}}class jt extends HTMLElement{constructor(e){super(),this.isInboxOpen=!1,this.isInboxFromFlutter=!1,this.selectedCategory=null,this.unviewedMessages={},this.unviewedCounter=0,this.isPreview=!1,this.inboxConfigForPreview={},this.inboxSelector=null,this.inbox=null,this.emptyInboxMsg=null,this.inboxCard=null,this.unviewedBadge=null,this.observer=null,this.selectedCategoryRef=null,this.addClickListenerOnDocument=(()=>e=>{if(e.composedPath().includes(this.inbox)){const t=e.path||e.composedPath&&e.composedPath();if(t.length){const e=t[0].id;if("closeInbox"===e)this.toggleInbox();else if(e.startsWith("category-"))this.prevCategoryRef=this.selectedCategoryRef,this.selectedCategoryRef=t[0],this.updateActiveCategory(t[0].innerText);else{const e=t.filter((e=>{var t;return(null===(t=e.id)||void 0===t?void 0:t.startsWith("button-"))||"CT-INBOX-MESSAGE"===e.tagName}));e.length&&e[e.length-1].raiseClickedEvent(e[0],this.isPreview)}}}else(this.inboxSelector.contains(e.target)||this.isInboxOpen)&&(this.isInboxFromFlutter?this.isInboxFromFlutter=!1:this.toggleInbox(e))})(),this.setBadgeStyle=e=>{null!==this.unviewedBadge&&(this.unviewedBadge.innerText=e>9?"9+":e,this.unviewedBadge.style.display=e>0?"flex":"none")},this.logger=e,this.shadow=this.attachShadow({mode:"open"})}get incomingMessages(){return[]}set incomingMessages(e){void 0===e&&(e=[]),e.length>0&&this.inbox&&this.updateInboxMessages(e)}get incomingMessagesForPreview(){return[]}set incomingMessagesForPreview(e){void 0===e&&(e=[]);const t={};e.length>0&&this.inbox&&(this.isPreview=!0,this.unviewedCounter=0,e.forEach((e=>{const i="".concat(e.wzrk_id.split("_")[0],"_").concat(Date.now());e.id=i,t[i]=e,this.unviewedMessages[i]=e,this.unviewedCounter++})),this.buildUIForMessages(t),this.updateUnviewedBadgeCounter())}connectedCallback(){this.init()}init(){this.config=this.isPreview?this.inboxConfigForPreview:de.readFromLSorCookie(K)||{},0!==Object.keys(this.config).length&&(this.inboxSelector=document.getElementById(this.config.inboxSelector),null!==this.inboxSelector&&(this.config.styles.notificationsBadge?this.addUnviewedBadge():this.unviewedBadge&&this.unviewedBadge.remove(),this.createinbox(),document.removeEventListener("click",this.addClickListenerOnDocument),document.addEventListener("click",this.addClickListenerOnDocument),this.config.categories.length&&this.updateActiveCategory(this.selectedCategoryRef.innerText),this.shadow.innerHTML=this.getInboxStyles(),this.shadow.appendChild(this.inbox)))}addMsgsToInboxFromLS(){const e=this.deleteExpiredAndGetUnexpiredMsgs(!1),t=e?Object.keys(e):[];0!==t.length&&(t.forEach((t=>{e[t].viewed||(this.unviewedMessages[t]=e[t],this.unviewedCounter++)})),this.buildUIForMessages(e),this.updateUnviewedBadgeCounter())}deleteExpiredAndGetUnexpiredMsgs(){let e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=Bt();const i=Math.floor(Date.now()/1e3);for(const n in t)if(t[n].wzrk_ttl&&t[n].wzrk_ttl>0&&t[n].wzrk_ttl<i){if(e){const e=this.shadowRoot.getElementById(t[n].id);e&&e.remove(),t[n].viewed||(this.unviewedCounter--,this.updateUnviewedBadgeCounter())}delete t[n]}return t&&t.length>0&&(t=Object.values(t).sort(((e,t)=>t.date-e.date)).reduce(((e,t)=>(e[t.id]=t,e)),{})),zt(t),t}updateInboxMessages(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];const t=this.deleteExpiredAndGetUnexpiredMsgs(),i=Date.now(),n={};e.forEach(((e,o)=>{const r="".concat(e.wzrk_id.split("_")[0],"_").concat(Date.now());e.id=r,e.date=i-o,e.viewed=0,t[r]=e,n[r]=e,this.unviewedMessages[r]=e,this.unviewedCounter++})),zt(t),this.buildUIForMessages(n),this.updateUnviewedBadgeCounter()}createEl(e,t,i){const n=document.createElement(e);return n.setAttribute("id",t),n.setAttribute("part",i||t),n}addUnviewedBadge(){this.unviewedBadge||(this.unviewedBadge=this.createEl("div","unviewedBadge"),this.unviewedBadge.style.cssText="display: none; position: absolute; height: 16px; width: 26px; border-radius: 8px; background-color: ".concat(this.config.styles.notificationsBadge.backgroundColor,"; font-size: 12px; color: ").concat(this.config.styles.notificationsBadge.textColor,"; font-weight: bold; align-items: center; justify-content: center;"),document.body.appendChild(this.unviewedBadge)),this.updateUnviewedBadgePosition(),window.addEventListener("resize",(()=>{this.updateUnviewedBadgePosition()}))}updateUnviewedBadgePosition(){const{top:e,right:t}=this.inboxSelector.getBoundingClientRect();this.unviewedBadge.style.top="".concat(e-8,"px"),this.unviewedBadge.style.left="".concat(t-8,"px")}createinbox(){this.inbox=this.createEl("div","inbox");const e=this.createEl("div","header"),t=this.createEl("div","headerTitle");t.innerText=this.config.title;const i=this.createEl("div","closeInbox");if(i.innerHTML="&times",e.appendChild(t),e.appendChild(i),this.inbox.appendChild(e),this.config.categories.length){const e=this.createCategories();this.inbox.appendChild(e)}this.inboxCard=this.createEl("div","inboxCard"),this.inbox.appendChild(this.inboxCard),this.emptyInboxMsg=this.createEl("div","emptyInboxMsg"),this.emptyInboxMsg.innerText="All messages will be displayed here.",this.inboxCard.appendChild(this.emptyInboxMsg);const n={root:this.inboxCard,rootMargin:"0px",threshold:.5};this.observer=new IntersectionObserver(((e,t)=>{this.handleMessageViewed(e)}),n),this.addMsgsToInboxFromLS()}createCategories(){const e=this.createEl("div","categoriesContainer"),t=this.createEl("div","leftArrow");t.innerHTML=Jt,t.children[0].style="transform: rotate(180deg)",t.addEventListener("click",(()=>{this.shadowRoot.getElementById("categoriesWrapper").scrollBy(-70,0)})),e.appendChild(t);const i=this.createEl("div","categoriesWrapper");["All",...this.config.categories].forEach(((e,t)=>{const n=this.createEl("div","category-".concat(t),"category");n.innerText=e,0===t&&(this.selectedCategoryRef=n),i.appendChild(n)})),e.appendChild(i);const n=this.createEl("div","rightArrow");n.innerHTML=Jt,n.addEventListener("click",(()=>{this.shadowRoot.getElementById("categoriesWrapper").scrollBy(70,0)})),e.appendChild(n);const o={root:e,threshold:.9},r=i.children[0],s=i.children[this.config.categories.length];return new IntersectionObserver((e=>{this.categoryObserverCb(t,e[0].intersectionRatio>=.9)}),o).observe(r),new IntersectionObserver((e=>{this.categoryObserverCb(n,e[0].intersectionRatio>=.9)}),o).observe(s),e}categoryObserverCb(e,t){e&&(e.style.display=t?"none":"flex")}updateActiveCategory(e){this.selectedCategory=e,this.inboxCard.scrollTop=0;let t=0;this.prevCategoryRef&&this.prevCategoryRef.setAttribute("selected","false"),this.selectedCategoryRef.setAttribute("selected","true"),this.inboxCard.childNodes.forEach((e=>{"emptyInboxMsg"!==e.getAttribute("id")&&(e.style.display="All"===this.selectedCategory||e.getAttribute("category")===this.selectedCategory?"block":"none","block"===e.style.display&&t++)})),0===t?(this.emptyInboxMsg.innerText="".concat(e," messages will be displayed here."),this.emptyInboxMsg.style.display="block"):this.emptyInboxMsg.style.display="none"}buildUIForMessages(){var e;let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!this.isPreview&&this.updateTSForRenderedMsgs(),this.inboxCard.scrollTop=0;const i=null!==(e=this.config.maxMsgsInInbox)&&void 0!==e?e:15,n=this.inboxCard.firstChild,o=Object.values(t).sort(((e,t)=>t.date-e.date)).map((e=>e.id));for(const e of o){const i=new Ut(this.config,t[e]);i.setAttribute("id",t[e].id),i.setAttribute("pivot",t[e].wzrk_pivot),i.setAttribute("part","ct-inbox-message"),this.config.categories.length>0?(i.setAttribute("category",t[e].tags[0]||""),i.style.display="All"===this.selectedCategory||t[e].category===this.selectedCategory?"block":"none"):i.style.display="block",this.inboxCard.insertBefore(i,n),this.observer.observe(i)}let r=this.inboxCard.querySelectorAll("ct-inbox-message").length;for(;r>i;){const e=this.inboxCard.querySelectorAll("ct-inbox-message");e.length>0&&e[e.length-1].remove(),r--}const s=this.inboxCard.querySelectorAll('ct-inbox-message[style*="display: block"]').length;this.emptyInboxMsg.style.display=s?"none":"block"}handleMessageViewed(e){const t=!this.isPreview;this.isInboxOpen&&e.forEach((e=>{e.isIntersecting&&this.unviewedMessages.hasOwnProperty(e.target.id)&&0===e.target.message.viewed&&(e.target.message.viewed=1,t?(window.clevertap.renderNotificationViewed({msgId:e.target.campaignId,pivotId:e.target.pivotId}),this.updateMessageInLS(e.target.id,{...e.target.message,viewed:1}),setTimeout((()=>{e.target.shadowRoot.getElementById("unreadMarker").style.display="none"}),1e3)):console.log("Notifiction viewed event will be raised at run time with payload ::",{msgId:e.target.campaignId,pivotId:e.target.pivotId}),this.unviewedCounter--,this.updateUnviewedBadgeCounter(),delete this.unviewedMessages[e.target.id])}))}updateMessageInLS(e,t){if(!this.isPreview){const i=Bt();i[e]=t,zt(i)}}toggleInbox(e){this.isInboxOpen=!this.isInboxOpen,this.isInboxFromFlutter=!!(null==e?void 0:e.rect),this.isInboxOpen?(this.inboxCard.scrollTop=0,!this.isPreview&&this.deleteExpiredAndGetUnexpiredMsgs(),this.inbox.style.display="block",this.inbox.style.zIndex="2147483647",this.config.categories.length&&(this.selectedCategoryRef.setAttribute("selected","false"),this.selectedCategoryRef=this.shadowRoot.getElementById("category-0"),this.updateActiveCategory(this.selectedCategoryRef.innerText),this.shadowRoot.getElementById("categoriesWrapper").scrollLeft-=this.shadowRoot.getElementById("categoriesWrapper").scrollWidth),this.setInboxPosition(e)):this.inbox.style.display="none"}setInboxPosition(e){const t=window.outerWidth,i=getComputedStyle(ue.inbox),n=i.getPropertyValue("--inbox-top"),o=i.getPropertyValue("--inbox-bottom"),r=i.getPropertyValue("--inbox-left"),s=i.getPropertyValue("--inbox-right");if(t>481&&!(n||o||r||s)){const t=Wt(e,this.inbox.clientHeight,this.inbox.clientWidth),i=t.xPos,n=t.yPos;this.inbox.style.top=n+"px",this.inbox.style.left=i+"px"}}updateUnviewedBadgeCounter(){if(this.isPreview)return void this.setBadgeStyle(this.unviewedCounter);let e=0;this.inboxCard.querySelectorAll("ct-inbox-message").forEach((t=>{const i=Bt();i[t.id]&&0===i[t.id].viewed&&e++})),this.setBadgeStyle(e)}updateTSForRenderedMsgs(){this.inboxCard.querySelectorAll("ct-inbox-message").forEach((e=>{const t=e.id.split("_")[1];e.shadow.getElementById("timeStamp").firstChild.innerText=Gt(t)}))}getInboxStyles(){const e=this.config.categories.length?64:16,t={panelBackgroundColor:this.config.styles.panelBackgroundColor,panelBorderColor:this.config.styles.panelBorderColor,headerBackgroundColor:this.config.styles.header.backgroundColor,headerTitleColor:this.config.styles.header.titleColor,closeIconColor:this.config.styles.closeIconColor,categoriesTabColor:this.config.styles.categories.tabColor,categoriesTitleColor:this.config.styles.categories.titleColor,selectedCategoryTabColor:this.config.styles.categories.selectedTab.tabColor,selectedCategoryTitleColor:this.config.styles.categories.selectedTab.titleColor,headerCategoryHeight:36+e};this.config.styles.categories.borderColor&&(t.categoriesBorderColor=this.config.styles.categories.borderColor),this.config.styles.categories.selectedTab.borderColor&&(t.selectedCategoryBorderColor=this.config.styles.categories.selectedTab.borderColor);const i=(e=>{let{panelBackgroundColor:t,panelBorderColor:i,headerBackgroundColor:n,headerTitleColor:o,closeIconColor:r,categoriesTabColor:s,categoriesTitleColor:a,categoriesBorderColor:l,selectedCategoryTabColor:c,selectedCategoryTitleColor:d,selectedCategoryBorderColor:u,headerCategoryHeight:h}=e;return'\n      <style id="webInboxStyles">\n        #inbox {\n          width: 100%;\n          position: fixed;\n          background-color: #fff; \n          display: none; \n          box-shadow: 0px 2px 10px 0px #d7d7d791;\n          background-color: '.concat(t,"; \n          border: 1px solid ").concat(i,";\n          top: 0;\n          left: 0;\n          height: 100%;\n          overflow: auto;\n          z-index: 1;\n          box-sizing: content-box;\n          border-radius: 4px;\n        }\n  \n        #emptyInboxMsg {\n          display: block;\n          padding: 10px;\n          text-align: center;\n          color: black;\n        }\n  \n        #header {\n          height: 36px; \n          width: 100%; \n          display: flex; \n          justify-content: center; \n          align-items: center; \n          background-color: ").concat(n,"; \n          background-color: var(--card-bg, ").concat(n,");\n          color: ").concat(o,"\n        }\n  \n        #closeInbox {\n          font-size: 20px; \n          margin-right: 12px; \n          color: ").concat(r,"; \n          cursor: pointer;\n        }\n  \n        #headerTitle {\n          font-size: 14px; \n          line-height: 20px; \n          flex-grow: 1; \n          font-weight: 700; \n          text-align: center;\n          flex-grow: 1;\n          text-align: center;\n        }\n  \n        #categoriesContainer {\n          padding: 16px 16px 0 16px; \n          height: 32px; \n          display: flex;\n          scroll-behavior: smooth;\n          position: relative;\n        }\n\n        #categoriesWrapper {\n          height: 32px; \n          overflow-x: scroll;\n          display: flex;\n          white-space: nowrap;\n          scrollbar-width: none;\n        }\n\n        #categoriesWrapper::-webkit-scrollbar {\n          display: none;\n        }\n  \n        #leftArrow, #rightArrow {\n          height: 32px;\n          align-items: center;\n          font-weight: 700;\n          position: absolute;\n          z-index: 2;\n          pointer-events: auto;\n          cursor: pointer;\n          display: none;\n        }\n\n        #leftArrow {\n          left: 0;\n          padding-left: 4px;\n          padding-right: 16px;\n          background: linear-gradient(90deg, ").concat(t," 0%, ").concat(t,"99 80%, ").concat(t,"0d 100%);\n        }\n\n        #rightArrow {\n          right: 0;\n          padding-right: 4px;\n          padding-left: 16px;\n          background: linear-gradient(-90deg, ").concat(t," 0%, ").concat(t,"99 80%, ").concat(t,'0d 100%);\n        }\n\n        [id^="category-"] {\n          display: flex; \n          flex: 1 1 0; \n          justify-content: center; \n          align-items: center; \n          font-size: 14px; \n          line-height: 20px; \n          background-color: ').concat(s,"; \n          color: ").concat(a,"; \n          cursor: pointer;\n          padding: 6px 24px;\n          margin: 0 3px;\n          border-radius: 16px;\n          border: ").concat(l?"1px solid "+l:"none",';\n        }\n\n        [id^="category-"][selected="true"] {\n          background-color: ').concat(c,"; \n          color: ").concat(d,"; \n          border: ").concat(u?"1px solid "+u:"none","\n        }\n  \n        #inboxCard {\n          padding: 0 16px 0 16px;\n          overflow-y: auto;\n          box-sizing: border-box;\n          margin-top: 16px;\n        }\n\n        @media only screen and (min-width: 480px) {\n          #inbox {\n            width: var(--inbox-width, 392px);\n            height: var(--inbox-height, 546px);\n            position: var(--inbox-position, fixed);\n            right: var(--inbox-right, unset);\n            bottom: var(--inbox-bottom, unset);\n            top: var(--inbox-top, unset);\n            left: var(--inbox-left, unset);\n          }\n  \n          #inboxCard {\n            height: calc(var(--inbox-height, 546px) - ").concat(h,"px); \n          }\n  \n        }\n      </style>\n      ")})(t),n=this.config.styles.cards;return i+(e=>{let{backgroundColor:t,borderColor:i,titleColor:n,descriptionColor:o,buttonColor:r,buttonTextColor:s,unreadMarkerColor:a}=e;return'\n    <style id="messageStyles">\n      ct-inbox-message::part(messageWrapper) {\n        margin-bottom: 16px; \n      }\n      ct-inbox-message::part(message) {\n        background-color: '.concat(t,"; \n        border: 1px solid ").concat(i,";\n        border-radius: 4px; \n        overflow: hidden;\n        min-height: 40px;\n      }\n      ct-inbox-message::part(message):hover {\n        box-shadow: 0px 4px 8px rgb(0 0 0 / 10%);\n        cursor: pointer;\n      }\n      ct-inbox-message::part(iconTitleDescWrapper) {\n        display: flex; \n        padding: 16px;\n      }\n      ct-inbox-message::part(titleDescWrapper) {\n        display: flex; \n        flex-direction: column;\n      }\n      ct-inbox-message::part(iconImgContainer) {\n        display: flex; \n        margin-right: 16px;\n      }\n      ct-inbox-message::part(mainImgContainer) {\n        line-height: 0;\n      }\n      ct-inbox-message::part(mainImg) {\n        width: 100%; \n        background: #b2b1ae;\n      }\n      ct-inbox-message::part(iconImg) {\n        height: 40px; \n        width: 40px;\n      }\n      ct-inbox-message::part(title) {\n        font-size: 14px !important; \n        line-height: 20px; \n        font-weight: 600; \n        color: ").concat(n,"\n      }\n      ct-inbox-message::part(description) {\n        font-size: 14px !important; \n        line-height: 20px; \n        font-weight: 400; \n        color: ").concat(o,"\n      }\n      ct-inbox-message::part(button) {\n        background-color: ").concat(r,"; \n        color: ").concat(s,"; \n        padding: 8px 16px; \n        font-size: 12px; \n        line-height: 16px; \n        font-weight: 600; \n        flex: 1; \n        border-radius: 0px; \n        text-transform: capitalize; \n        cursor: pointer; \n        border: none;\n      }\n      ct-inbox-message::part(buttonsContainer) {\n        display: flex;\n        position: relative;\n      }\n      ct-inbox-message::part(snackbar) {\n        position: absolute;\n        top: calc(-100% - 12px);\n        left: 50%;\n        transform: translate(-50%, 0px);\n        font-size: 14px;\n        font-weight: 400;\n        background: #FFFFFF;\n        border: 1px solid #ECEDF2;\n        box-shadow: 0px 4px 8px rgb(0 0 0 / 6%), 0px 0px 2px rgb(0 0 0 / 4%);\n        border-radius: 4px;\n        z-index: 2;\n        display: none;\n        width: max-content;\n        align-items: center;\n        padding: 8px 16px;\n        justify-content: center;\n      }\n\n      ct-inbox-message::part(snackbar-msg) {\n        color: black;\n        margin-left: 8px;\n      }\n\n      ct-inbox-message::part(timeStamp) {\n        display: flex; \n        justify-content: end; \n        align-items: center; \n        margin-top: 4px; \n        font-size: 12px !important; \n        line-height: 16px; \n        color: black;\n      }\n      ct-inbox-message::part(unreadMarker) {\n        height: 8px; \n        width: 8px; \n        border-radius: 50%; \n        background-color: ").concat(a,"; \n        margin-left: 8px;\n      }\n      @media only screen and (min-width: 420px) {\n        ct-inbox-message::part(mainImg) {\n          height: 180px;\n        }\n      }\n    </style>\n  ")})({backgroundColor:n.backgroundColor,borderColor:n.borderColor,titleColor:n.titleColor,descriptionColor:n.descriptionColor,buttonColor:n.buttonColor,buttonTextColor:n.buttonTextColor,unreadMarkerColor:n.unreadMarkerColor})}}const Ft=e=>{e.inbox_preview?ue.inbox.incomingMessagesForPreview=e.inbox_notifs:ue.inbox.incomingMessages=e},Vt=e=>{Kt(),ue.inbox=new jt({logger:e}),document.body.appendChild(ue.inbox)},qt=e=>{const t=de.readFromLSorCookie(W)||{};if(Object.keys(t).length>0&&Object.keys(t)[0].includes("_")){const i={};return i[e]=t,de.saveToLSorCookie(W,i),i}return t},Bt=()=>{const e=JSON.parse(decodeURIComponent(de.read(b)));if(!ie(e))return{};const t=qt(e);return t.hasOwnProperty(e)?t[e]:{}},zt=e=>{const t=JSON.parse(decodeURIComponent(de.read(b)));if(!ie(t))return;const i={...qt(t),[t]:e};de.saveToLSorCookie(W,i)},Ht=e=>new Promise(((t,i)=>{if("complete"===document.readyState)Vt(e),t();else{const i=de.readFromLSorCookie(K)||{},n=()=>{null===ue.inbox&&Vt(e),t()};window.addEventListener("load",(()=>{if(document.getElementById(i.inboxSelector))n();else{let o=0;if(o<20){const r=setInterval((()=>{document.getElementById(i.inboxSelector)?(n(),clearInterval(r),t()):o>=20&&(clearInterval(r),e.debug("Failed to add inbox")),o++}),500)}}}))}})),Kt=()=>{void 0===customElements.get("ct-web-inbox")&&(customElements.define("ct-web-inbox",jt),customElements.define("ct-inbox-message",Ut))},Wt=(e,t,i)=>{const n=document.scrollingElement.scrollLeft,o=document.scrollingElement.scrollTop,r=window.innerWidth+n,s=window.innerHeight+o,a=e.rect||e.target.getBoundingClientRect(),l=a.x+n,c=a.y+o,d=a.left+n,u=a.right+n,h=a.top+o,p=a.bottom,g=a.height,f=l+a.width/2;let v,b,m=!1;const y=16;if(p+t<=s){const e=s-(p+t);b=e>=y?p+y:p+e}else if(h-t>=o){const e=h-t;b=e>=y?h-t-y:h-t-e}else m=!0,b=c+g/2-t/2,b<o?b=o:b+t>s&&(b=s-t);if(m){const e=u+i;if(e<=r)v=u+(e+y<=r?y:r-e);else{const e=d-i;v=e-(e-y>=n?y:e-n)}}else v=f-i/2,v<n?v=d+i<=r?d:n:v+i>r&&(v=u-i>=n?u-i:r-i);return{xPos:v,yPos:b}},Gt=e=>{const t=Date.now();let i=Math.floor((t-e)/6e4);return i<5?"Just now":i<60?"".concat(i," minute").concat(i>1?"s":""," ago"):(i=Math.floor(i/60),i<24?"".concat(i," hour").concat(i>1?"s":""," ago"):(i=Math.floor(i/24),"".concat(i," day").concat(i>1?"s":""," ago")))},Yt=()=>Object.keys(de.readFromLSorCookie(K)||{}).length>0,Jt='<svg width="6" height="10" viewBox="0 0 6 10" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path fill-rule="evenodd" clip-rule="evenodd" d="M0.258435 9.74751C-0.0478584 9.44825 -0.081891 8.98373 0.156337 8.64775L0.258435 8.52836L3.87106 5L0.258435 1.47164C-0.0478588 1.17239 -0.0818914 0.707867 0.156337 0.371887L0.258435 0.252494C0.564728 -0.0467585 1.04018 -0.0800085 1.38407 0.152743L1.50627 0.252494L5.74156 4.39042C6.04786 4.68968 6.08189 5.1542 5.84366 5.49018L5.74156 5.60957L1.50627 9.74751C1.16169 10.0842 0.603015 10.0842 0.258435 9.74751Z" fill="#63698F"/>\n</svg>\n',$t='<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path fill-rule="evenodd" clip-rule="evenodd" d="M16 8C16 3.58172 12.4183 0 8 0C3.58172 0 0 3.58172 0 8C0 12.4183 3.58172 16 8 16C12.4183 16 16 12.4183 16 8ZM9.6839 5.93602C9.97083 5.55698 10.503 5.48833 10.8725 5.78269C11.2135 6.0544 11.2968 6.54044 11.0819 6.91173L11.0219 7.00198L8.09831 10.864C7.80581 11.2504 7.26654 11.3086 6.90323 11.0122L6.82822 10.9433L5.04597 9.10191C4.71635 8.76136 4.71826 8.21117 5.05023 7.87303C5.35666 7.5609 5.83722 7.53855 6.16859 7.80482L6.24814 7.87739L7.35133 9.01717L9.6839 5.93602Z" fill="#03A387"/>\n</svg>\n',Zt="https://web-native-display-campaign.clevertap.com/production/lib-overlay/style.css",Qt=e=>{if(e.data&&function(e){try{const t=new URL(e);return Boolean(t)}catch(e){return!1}}(e.data.originUrl)){{const t=new URL(e.data.originUrl).origin;if(e.origin!==t)return}var t,i;"Dashboard"===e.data.message?Xt(e.data.url,null!==(t=e.data.variant)&&void 0!==t?t:null,null!==(i=e.data.details)&&void 0!==i?i:{}):"Overlay"===e.data.message&&ni(e.data,!0)}},Xt=(e,t,i)=>{"loading"===document.readyState?document.addEventListener("DOMContentLoaded",(()=>ii(e,t,i))):ii(e,t,i)};let ei,ti=!1;function ii(e,t,i){var n;ti||(document.body.innerHTML="",ei=document.createElement("div"),ei.id="overlayDiv",ei.style.position="relative",ei.style.display="flex",document.body.appendChild(ei),function(e,t,i,n){return new Promise(((o,r)=>{var s=document.createElement("script");s.type="module",s.src=e,s.onload=function(){"function"==typeof window.Overlay?(window.Overlay({id:"#overlayDiv",url:t,variant:i,details:n}),o()):r(new Error("ContentLayout not found in overlay.js"))},s.onerror=function(e){r(e)},document.head.appendChild(s)}))}("https://web-native-display-campaign.clevertap.com/production/lib-overlay/overlay.js",e,t,i).then((()=>{console.log("Overlay script loaded successfully."),ti=!0})).catch((e=>{console.error("Error loading overlay script:",e)})),(n=document.createElement("link")).rel="stylesheet",n.type="text/css",n.href=Zt,document.head.appendChild(n),function(){const e={kitId:"eqj6nom",scriptTimeout:3e3,async:!0},t=document.documentElement,i=setTimeout((function(){t.className=t.className.replace(/\bwf-loading\b/g,"")+" wf-inactive"}),e.scriptTimeout),n=document.createElement("script");let o=!1;const r=document.getElementsByTagName("script")[0];let s;t.className+=" wf-loading",n.src="https://use.typekit.net/"+e.kitId+".js",n.async=!0,n.onload=n.onreadystatechange=function(){if(s=this.readyState,!(o||s&&"complete"!==s&&"loaded"!==s)){o=!0,clearTimeout(i);try{Typekit.load(e)}catch(e){}}},r.parentNode.insertBefore(n,r)}())}const ni=(e,t)=>{const i=t?e.details[0]:e.display.details[0],n=Object.keys(i)[0],o=i[n];let r=!1;if(n!==window.location.href.split("?")[0])return;const s=(t,i)=>{o[i].html?t.outerHTML=o[i].html:o[i].json?function(e,t){const i={};i.msgId=e.wzrk_id,e.wzrk_pivot&&(i.pivotId=e.wzrk_pivot),null!=t.json&&(i.json=t.json);const n=new CustomEvent("CT_web_native_display_buider",{detail:i});document.dispatchEvent(n)}(e,o[i]):((e,t)=>{if(void 0!==t.style&&Object.keys(t.style).forEach((i=>{e.style.setProperty(i,t.style[i])})),void 0!==t.underline){const i=e.style.textDecoration;t.underline?e.style.textDecoration="".concat(i," underline").trim():e.style.textDecoration=i.replace("underline","").trim()}if(void 0!==t.text&&(e.innerText=t.text),void 0!==t.clickDetails){const i=t.clickDetails.clickUrl;e.onclick=t.clickDetails.newTab?()=>window.open(i,"_blank").focus():()=>{window.location.href=i}}if(void 0!==t.imgURL&&"img"===e.tagName.toLowerCase()&&(e.src=t.imgURL),void 0!==t.elementCss){const e=document.createElement("style");e.innerHTML=t.elementCss,document.head.appendChild(e)}})(t,o[i].form)};Object.keys(o).forEach((e=>{const t=document.querySelector(e);t?(s(t,e),r=!0):(e=>{let t=0;const i=setInterval((()=>{const n=document.querySelector(e);n?(s(n,e),clearInterval(i)):++t>=20&&(console.log("No element present on DOM with selector '".concat(e,"'.")),clearInterval(i))}),500)})(e)})),r&&!t&&window.clevertap.renderNotificationViewed({msgId:e.wzrk_id,pivotId:e.wzrk_pivot})};const oi=(e,t)=>{let{device:i,session:n,request:o,logger:r}=t;const s=i,a=n,l=o,c=r;let d=0;const u=t=>{const i=t.wzrk_id.split("_")[0],n=re(),o=(e,t,i)=>{let n=0,o=0;null!=e[t]&&(n=e[t]),n++,null!=e.tc&&(o=e.tc),i<0&&o++,e.tc=o,e[t]=n};if(de._isLocalStorageSupported()){delete sessionStorage[y];var r={};const e=it();r=3===t.display.wtarget_type&&e.hasOwnProperty("wi")?e.wi:0!==t.display.wtarget_type&&1!==t.display.wtarget_type||!e.hasOwnProperty("wp")?{}:e.wp,e.hasOwnProperty("global")&&(r.wp=e),null==t[I].wmc&&(t[I].wmc=1),null==t[I].wimc&&(t[I].wimc=1);var d=-1;let o=-1,s=-1,l=-1,c=-1,g=-1,f=-1;null!=t[I].efc&&(d=parseInt(t[I].efc,10)),null!=t[I].mdc&&(o=parseInt(t[I].mdc,10)),null!=t[I].tdc&&(s=parseInt(t[I].tdc,10)),null!=t[I].tlc&&(l=parseInt(t[I].tlc,10)),null!=t[I].wmp&&(c=parseInt(t[I].wmp,10)),null!=t[I].wmc&&(g=parseInt(t[I].wmc,10)),null!=t[I].wimc&&(f=parseInt(t[I].wimc,10));var u=r[a.sessionId];if(u){const e=u[i],n=u.tc;if("dnd"===e&&!ue.dismissSpamControl)return!1;if(3===t[I].wtarget_type){if(f>0&&n>=f&&d<0)return!1}else if(g>0&&n>=g&&d<0)return!1;if(o>0&&e>=o)return!1}else u={},r[a.sessionId]=u;var h=r[n];if(null!=h){const e=h[i],t=h.tc;if(c>0&&t>=c&&d<0)return!1;if(s>0&&e>=s)return!1}else h={},r[n]=h;var p=r[A];if(null!=p){const e=p[i];if(l>0&&e>=l)return!1}else p={},r[A]=p}if(null!=t[I].delay&&t[I].delay>0){const i=t[I].delay;return t[I].delay=0,setTimeout(oi,1e3*i,e,{device:s,session:a,request:l,logger:c}),!1}o(u,i,d),o(h,i,d),o(p,i,d);let g="wp";3===t[I].wtarget_type&&(g="wi");const f={};f[a.sessionId]=u,f[n]=h,f[A]=p,nt({[g]:f})},h=()=>{const e=s.getGuid(),t=a.getSessionCookieObject();return"&t=wc&d="+encodeURIComponent($e(e+"|"+t.p+"|"+t.s))},p=(e,t)=>{const i=window.parent[e];"function"==typeof i&&(null!=t.display.kv?i(t.display.kv):i())},g=(e,t,i,n,o)=>{f(t),((e,t,i,n,o)=>{if(""!==e&&null!=e){let n,r;o?n=i:null!==i&&(r=i.getElementsByClassName("jsCT_CTA"),null!=r&&1===r.length&&(n=r[0]));const s=t.display.jsFunc,l=t.display.preview;null==l&&(e+=h()),null!=n&&(n.onclick=()=>{if(null!=s)return null==l&&tt.fireRequest(e),p(s,t),void dt("-1",0,a.sessionId);1===t.display.window?window.open(e,"_blank"):window.location=e})}})(e,t,i,0,o)},f=e=>{const t={type:"event"};t.evtName=U,t.evtData={[N]:e.wzrk_id},e.wzrk_pivot&&(t.evtData={...t.evtData,wzrk_pivot:e.wzrk_pivot}),l.processEvent(t)},v=e=>{var t;void 0===customElements.get("ct-web-personalisation-banner")&&customElements.define("ct-web-personalisation-banner",Dt);const i=null!==(t=e.display.divId)&&void 0!==t?t:e.display.divSelector,n=document.createElement("ct-web-personalisation-banner");n.msgId=e.wzrk_id,n.pivotId=e.wzrk_pivot,n.divHeight=e.display.divHeight,n.details=e.display.details[0];const o=e.display.divId?document.getElementById(i):document.querySelector(i);o.innerHTML="",o.appendChild(n)},m=e=>{var t;void 0===customElements.get("ct-web-personalisation-carousel")&&customElements.define("ct-web-personalisation-carousel",Lt);const i=null!==(t=e.display.divId)&&void 0!==t?t:e.display.divSelector,n=document.createElement("ct-web-personalisation-carousel");n.target=e;const o=e.display.divId?document.getElementById(i):document.querySelector(i);o.innerHTML="",o.appendChild(n)},_=e=>{const t=e.wzrk_id.split("_")[0],i=e.display;if(2===i.wtarget_type&&1===e.msgContent.type){const t={};t.msgId=e.wzrk_id,e.wzrk_pivot&&(t.pivotId=e.wzrk_pivot),null!=e.msgContent.kv&&(t.kv=e.msgContent.kv);const i=new CustomEvent("CT_web_native_display",{detail:t});return void document.dispatchEvent(i)}if(1===i.layout)return T(void 0,e);if(3===i.layout){const t="wzrkImageOnlyDiv";if(!1===u(e))return;if(ue.dismissSpamControl&&null!=document.getElementById(t)&&document.getElementById(t).remove(),null!=document.getElementById(t)||null!=document.getElementById("intentPreview"))return;const i=document.createElement("div");return i.id=t,document.body.appendChild(i),void 0===customElements.get("ct-web-popup-imageonly")&&customElements.define("ct-web-popup-imageonly",Nt),(e=>{const t=document.createElement("ct-web-popup-imageonly");t.session=a,t.target=e;const i=document.getElementById("wzrkImageOnlyDiv");i.innerHTML="",i.style.visibility="hidden",i.appendChild(t)})(e)}if(!1===u(e))return;const n="wizParDiv"+i.layout;if(ue.dismissSpamControl&&null!=document.getElementById(n)&&document.getElementById(n).remove(),null!=document.getElementById(n))return;ue.campaignDivMap[t]=n;const o=2===i.layout,r=document.createElement("div");r.id=n;const s=window.innerHeight,l=window.innerWidth;let c=!1;if(o)r.setAttribute("style",i.iFrameStyle);else{var d=10;let e=5*l/100,t=d+5*s/100,n=30*l/100+20,o="width:30%;";(/mobile/i.test(navigator.userAgent)||/mini/i.test(navigator.userAgent))&&!1===/iPad/i.test(navigator.userAgent)?(n=85*l/100+20,e=5*l/100,t=5*s/100,o="width:80%;"):("ontouchstart"in window||/tablet/i.test(navigator.userAgent))&&(n=50*l/100+20,e=5*l/100,t=5*s/100,o="width:50%;"),null==i.proto?(c=!0,r.setAttribute("style","display:block;overflow:hidden; bottom:"+t+"px !important;width:"+n+"px !important;right:"+e+"px !important;position:fixed;z-index:2147483647;")):r.setAttribute("style",o+i.iFrameStyle)}document.body.appendChild(r);const h=document.createElement("iframe"),p=!1===i.br?"0":"8";h.frameborder="0px",h.marginheight="0px",h.marginwidth="0px",h.scrolling="no",h.id="wiz-iframe";const f=e.display.onClick;let v,b="";if(""!==f&&null!=f&&(b="cursor:pointer;"),i.preview&&i["custom-editor"]&&(h.sandbox="allow-scripts allow-popups allow-popups-to-escape-sandbox"),1===e.msgContent.type)v=e.msgContent.html,v=v.replace(/##campaignId##/g,t),v=v.replace(/##campaignId_batchId##/g,e.wzrk_id);else{const i='<style type="text/css">body{margin:0;padding:0;}#contentDiv.wzrk{overflow:hidden;padding:0;text-align:center;'+b+"}#contentDiv.wzrk td{padding:15px 10px;}.wzrkPPtitle{font-weight: bold;font-size: 16px;font-family:arial;padding-bottom:10px;word-break: break-word;}.wzrkPPdscr{font-size: 14px;font-family:arial;line-height:16px;word-break: break-word;display:inline-block;}.PL15{padding-left:15px;}.wzrkPPwarp{margin:20px 20px 0 5px;padding:0px;border-radius: "+p+"px;box-shadow: 1px 1px 5px #888888;}a.wzrkClose{cursor:pointer;position: absolute;top: 11px;right: 11px;z-index: 2147483647;font-size:19px;font-family:arial;font-weight:bold;text-decoration: none;width: 25px;/*height: 25px;*/text-align: center; -webkit-appearance: none; line-height: 25px;background: #353535;border: #fff 2px solid;border-radius: 100%;box-shadow: #777 2px 2px 2px;color:#fff;}a:hover.wzrkClose{background-color:#d1914a !important;color:#fff !important; -webkit-appearance: none;}td{vertical-align:top;}td.imgTd{border-top-left-radius:8px;border-bottom-left-radius:8px;}</style>";let o,r,s,a,l;"dark"===e.display.theme?(o="#2d2d2e",r="#eaeaea",s="#353535",a="#353535",l="#ffffff"):(o="#ffffff",r="#000000",a="#f4f4f4",s="#a5a6a6",l="#ffffff");const c=e.msgContent.title,d=e.msgContent.description;let u="";null!=e.msgContent.imageUrl&&""!==e.msgContent.imageUrl&&(u="<td class='imgTd' style='background-color:"+a+"'><img src='"+e.msgContent.imageUrl+"' height='60' width='60'></td>"),v=i+"<div class='wzrkPPwarp' style='color:"+r+";background-color:"+o+";'><a href='javascript:void(0);' onclick=parent.$WZRK_WR.closeIframe("+t+",'"+n+"'); class='wzrkClose' style='background-color:"+s+";color:"+l+"'>&times;</a><div id='contentDiv' class='wzrk'><table cellpadding='0' cellspacing='0' border='0'><tr>"+u+"<td style='vertical-align:top;'><div class='wzrkPPtitle' style='color:"+r+"'>"+c+"</div><div class='wzrkPPdscr' style='color:"+r+"'>"+d+"<div></td></tr></table></div>"}h.setAttribute("style","z-index: 2147483647; display:block; width: 100% !important; border:0px !important; border-color:none !important;"),r.appendChild(h);const m=new Event("CT_campaign_rendered");document.dispatchEvent(m),i["custom-editor"]&&(v=C(e,v)),h.srcdoc=v;const y=()=>{d=document.getElementById("wiz-iframe").contentDocument.getElementById("contentDiv").scrollHeight,!0===i["custom-editor"]||o||(d+=25),document.getElementById("wiz-iframe").contentDocument.body.style.margin="0px",document.getElementById("wiz-iframe").style.height=d+"px"},w=navigator.userAgent.toLowerCase();if(-1!==w.indexOf("safari"))if(w.indexOf("chrome")>-1)h.onload=()=>{y();const t=document.getElementById("wiz-iframe").contentDocument.getElementById("contentDiv");g(f,e,t,0,c)};else{let t=h.contentDocument||h.contentWindow;t.document&&(t=t.document);const i=setInterval((()=>{if("complete"===t.readyState){clearInterval(i),y();const t=document.getElementById("wiz-iframe").contentDocument.getElementById("contentDiv");g(f,e,t,0,c)}}),300)}else h.onload=()=>{y();const t=document.getElementById("wiz-iframe").contentDocument.getElementById("contentDiv");g(f,e,t,0,c)}},C=(e,t)=>{const i="<script>\n      const ct__camapignId = '".concat(e.wzrk_id,"';\n      const ct__formatVal = (v) => {\n          return v && v.trim().substring(0, 20);\n      }\n      const ct__parentOrigin =  window.parent.origin;\n      document.body.addEventListener('click', (event) => {\n        const elem = event.target.closest?.('a[wzrk_c2a], button[wzrk_c2a]');\n        if (elem) {\n            const {innerText, id, name, value, href} = elem;\n            const clickAttr = elem.getAttribute('onclick') || elem.getAttribute('click');\n            const onclickURL = clickAttr?.match(/(window.open)[(](\"|')(.*)(\"|',)/)?.[3] || clickAttr?.match(/(location.href *= *)(\"|')(.*)(\"|')/)?.[3];\n            const props = {innerText, id, name, value};\n            let msgCTkv = Object.keys(props).reduce((acc, c) => {\n                const formattedVal = ct__formatVal(props[c]);\n                formattedVal && (acc['wzrk_click_' + c] = formattedVal);\n                return acc;\n            }, {});\n            if(onclickURL) { msgCTkv['wzrk_click_' + 'url'] = onclickURL; }\n            if(href) { msgCTkv['wzrk_click_' + 'c2a'] = href; }\n            const notifData = { msgId: ct__camapignId, msgCTkv, pivotId: '").concat(e.wzrk_pivot,"' };\n            window.parent.clevertap.renderNotificationClicked(notifData);\n        }\n      });\n      <\/script>\n    ");return t.replace(/(<\s*\/\s*body)/,"".concat(i,"\n$1"))};let E=!1;const O=e=>{let t=e.display.onClick;if(window.clevertap.hasOwnProperty("notificationCallback")&&void 0!==window.clevertap.notificationCallback&&"function"==typeof window.clevertap.notificationCallback){const i=window.clevertap.notificationCallback;if(!E){const n={};n.msgContent=e.msgContent,n.msgId=e.wzrk_id,e.wzrk_pivot&&(n.pivotId=e.wzrk_pivot),null!=e.display.kv&&(n.kv=e.display.kv),window.clevertap.raiseNotificationClicked=()=>{if(""!==t&&null!=t){const i=e.display.jsFunc;if(t+=h(),null!=i)return tt.fireRequest(t),void p(i,e);1===e.display.window?window.open(t,"_blank"):window.location=t}},window.clevertap.raiseNotificationViewed=()=>{f(e)},i(n),E=!0}}else if(window.clevertap.popupCurrentWzrkId=e.wzrk_id,_(e),window.clevertap.hasOwnProperty("popupCallbacks")&&void 0!==window.clevertap.popupCallbacks&&"function"==typeof window.clevertap.popupCallbacks[e.wzrk_id]){const t=window.clevertap.popupCallbacks[e.wzrk_id],o={};o.msgContent=e.msgContent,o.msgId=e.wzrk_id,e.wzrk_pivot&&(o.pivotId=e.wzrk_pivot);var i=[];for(var n in e)if(n.startsWith(L)&&n!==N){const t={[n]:e[n]};i.push(t)}i.length>0&&(o.msgCTkv=i),null!=e.display.kv&&(o.kv=e.display.kv),window.clevertap.raisePopupNotificationClicked=t=>{if(!t||!t.msgId)return;const i={type:"event"};if(i.evtName=j,i.evtData={[N]:t.msgId},e.wzrk_pivot&&(i.evtData={...i.evtData,wzrk_pivot:t.pivotId}),t.msgCTkv)for(var n of t.msgCTkv)i.evtData={...i.evtData,...n};l.processEvent(i)},t(o)}};let P;const T=(e,t)=>{let i;if(null!=e&&e.clientY>0)return;if(i=null==t?P:t,ue.dismissSpamControl&&0===i.display.wtarget_type&&null!=document.getElementById("intentPreview")&&null!=document.getElementById("intentOpacityDiv")&&(document.getElementById("intentPreview").remove(),document.getElementById("intentOpacityDiv").remove()),null!=document.getElementById("intentPreview")||null!=document.getElementById("wzrkImageOnlyDiv"))return;if(null==i.display.layout&&(/mobile/i.test(navigator.userAgent)||/mini/i.test(navigator.userAgent)||/iPad/i.test(navigator.userAgent)||"ontouchstart"in window||/tablet/i.test(navigator.userAgent)))return;if(!1===u(i))return;const n=i.wzrk_id.split("_")[0];ue.campaignDivMap[n]="intentPreview";let o=!1;const r=document.createElement("div");r.id="intentOpacityDiv";const s=i.display.opacity||.7,a="rgba(0,0,0,".concat(s,")");r.setAttribute("style","position: fixed;top: 0;bottom: 0;left: 0;width: 100%;height: 100%;z-index: 2147483646;background: ".concat(a,";")),document.body.appendChild(r);const l=document.createElement("div");l.id="intentPreview",null==i.display.proto?(o=!0,l.setAttribute("style","display:block;overflow:hidden;top:55% !important;left:50% !important;position:fixed;z-index:2147483647;width:600px !important;height:600px !important;margin:-300px 0 0 -300px !important;")):l.setAttribute("style",i.display.iFrameStyle),document.body.appendChild(l);const c=document.createElement("iframe"),d=!1===i.display.br?"0":"8";c.frameborder="0px",c.marginheight="0px",c.marginwidth="0px",c.scrolling="no",c.id="wiz-iframe-intent";const h=i.display.onClick;let p,f="";if(""!==h&&null!=h&&(f="cursor:pointer;"),i.display.preview&&i.display["custom-editor"]&&(c.sandbox="allow-scripts allow-popups allow-popups-to-escape-sandbox"),1===i.msgContent.type)p=i.msgContent.html,p=p.replace(/##campaignId##/g,n),p=p.replace(/##campaignId_batchId##/g,i.wzrk_id);else{const e='<style type="text/css">body{margin:0;padding:0;}#contentDiv.wzrk{overflow:hidden;padding:0 0 20px 0;text-align:center;'+f+"}#contentDiv.wzrk td{padding:15px 10px;}.wzrkPPtitle{font-weight: bold;font-size: 24px;font-family:arial;word-break: break-word;padding-top:20px;}.wzrkPPdscr{font-size: 14px;font-family:arial;line-height:16px;word-break: break-word;display:inline-block;padding:20px 20px 0 20px;line-height:20px;}.PL15{padding-left:15px;}.wzrkPPwarp{margin:20px 20px 0 5px;padding:0px;border-radius: "+d+"px;box-shadow: 1px 1px 5px #888888;}a.wzrkClose{cursor:pointer;position: absolute;top: 11px;right: 11px;z-index: 2147483647;font-size:19px;font-family:arial;font-weight:bold;text-decoration: none;width: 25px;/*height: 25px;*/text-align: center; -webkit-appearance: none; line-height: 25px;background: #353535;border: #fff 2px solid;border-radius: 100%;box-shadow: #777 2px 2px 2px;color:#fff;}a:hover.wzrkClose{background-color:#d1914a !important;color:#fff !important; -webkit-appearance: none;}#contentDiv .button{padding-top:20px;}#contentDiv .button a{font-size: 14px;font-weight:bold;font-family:arial;text-align:center;display:inline-block;text-decoration:none;padding:0 30px;height:40px;line-height:40px;background:#ea693b;color:#fff;border-radius:4px;-webkit-border-radius:4px;-moz-border-radius:4px;}</style>";let t,o,r,s;"dark"===i.display.theme?(t="#2d2d2e",o="#eaeaea",r="#353535",s="#ffffff"):(t="#ffffff",o="#000000",r="#a5a6a6",s="#ffffff");const a=i.msgContent.title,l=i.msgContent.description;let c="";null!=i.msgContent.ctaText&&""!==i.msgContent.ctaText&&(c="<div class='button'><a href='#'>"+i.msgContent.ctaText+"</a></div>");let u="";null!=i.msgContent.imageUrl&&""!==i.msgContent.imageUrl&&(u="<div style='padding-top:20px;'><img src='"+i.msgContent.imageUrl+"' width='500' alt="+a+" /></div>"),p=e+"<div class='wzrkPPwarp' style='color:"+o+";background-color:"+t+";'><a href='javascript:void(0);' onclick=parent.$WZRK_WR.closeIframe("+n+",'intentPreview'); class='wzrkClose' style='background-color:"+r+";color:"+s+"'>&times;</a><div id='contentDiv' class='wzrk'><div class='wzrkPPtitle' style='color:"+o+"'>"+a+"</div><div class='wzrkPPdscr' style='color:"+o+"'>"+l+"</div>"+u+c+"</div></div>"}c.setAttribute("style","z-index: 2147483647; display:block; height: 100% !important; width: 100% !important;min-height:80px !important;border:0px !important; border-color:none !important;"),l.appendChild(c);const v=new Event("CT_campaign_rendered");document.dispatchEvent(v),i.display["custom-editor"]&&(p=C(i,p)),c.srcdoc=p,c.onload=()=>{const e=document.getElementById("wiz-iframe-intent").contentDocument.getElementById("contentDiv");g(h,i,e,0,o)}};if(!document.body)return void(d<6&&(d++,setTimeout(oi,1e3,e,{device:s,session:a,request:l,logger:c})));const R=e=>{Object.keys(e).map((t=>{var i,n;e[t].display.divId?(i=e[t].display.divId,n=document.getElementById(i)):(i=e[t].display.divSelector,n=document.querySelector(i)),null!==n&&(2===e[t].msgContent.type?v(e[t]):m(e[t]),delete e[t])}))};if(null!=e.inapp_notifs){const t={};for(let i=0;i<e.inapp_notifs.length;i++){const n=e.inapp_notifs[i];null==n.display.wtarget_type||0===n.display.wtarget_type?O(n):1===n.display.wtarget_type?(P=n,window.document.body.onmouseleave=T):2===n.display.wtarget_type&&(2===n.msgContent.type||3===n.msgContent.type?null!==(n.display.divId?document.getElementById(n.display.divId):document.querySelector(n.display.divSelector))?2===n.msgContent.type?v(n):m(n):t[n.wzrk_id.split("_")[0]]=n:4===n.msgContent.type?ni(n,!1):O(n))}Object.keys(t).length&&("complete"===document.readyState?R(t):(e=>{window.addEventListener("load",(()=>{let t=0;if(t<20){const i=setInterval((()=>{R(e),0!==Object.keys(e).length&&20!==t||(clearInterval(i),e={}),t++}),500)}}))})(t))}const M=()=>{if(e.inbox_preview)Ft(e);else if(e.inbox_notifs){const t=[];for(let i=0;i<e.inbox_notifs.length;i++)!1!==u(e.inbox_notifs[i])&&t.push(e.inbox_notifs[i]);Ft(t)}};if((e.webInboxSetting||null!=e.inbox_notifs)&&(Yt()&&Kt(),null===ue.inbox?(e.webInboxSetting&&function(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const i=de.readFromLSorCookie(K)||{};t?(ue.inbox.inboxConfigForPreview=e,ue.inbox.isPreview=!0,ue.inbox&&ue.inbox.init()):JSON.stringify(i)!==JSON.stringify(e)&&(de.saveToLSorCookie(K,e),ue.inbox&&ue.inbox.init())}(e.webInboxSetting),Ht(c).then((()=>{M()})).catch((e=>{}))):M()),e.vars)return void ue.variableStore.mergeVariables(e.vars);const D=(e,t)=>{const i=it(),n=i[t].global;if(null!=n&&t)for(const i in e)if(e.hasOwnProperty(i)&&(delete n[e[i]],de.read(w))){const n=JSON.parse(decodeURIComponent(de.read(w))),o=JSON.parse(decodeURIComponent(de.read(b)));n[o]&&n[o][t]&&n[o][t][e[i]]&&(delete n[o][t][e[i]],de.save(w,encodeURIComponent(JSON.stringify(n))))}nt(i)};if(de._isLocalStorageSupported())try{if(null!=e.evpr){const t=e.evpr.events,i=e.evpr.profile,n=e.evpr.expires_in,o=se();de.setMetaProp("lsTime",o),de.setMetaProp("exTs",n),(e=>{if(null!=ue.globalEventsMap||(ue.globalEventsMap=de.readFromLSorCookie(S),null!=ue.globalEventsMap)){for(const t in e)if(e.hasOwnProperty(t)){const i=ue.globalEventsMap[t],n=e[t];null!=ue.globalEventsMap[t]?null!=n[0]&&n[0]>i[0]&&(ue.globalEventsMap[t]=n):ue.globalEventsMap[t]=n}}else ue.globalEventsMap=e})(t),de.saveToLSorCookie(S,ue.globalEventsMap),null==ue.globalProfileMap?ct(i,!0):ct(i,!1)}null!=e.arp&&(e=>{if(null!=e.skipResARP&&e.skipResARP)return console.debug("Update ARP Request rejected",e),null;const t=!0===e[x];if(de._isLocalStorageSupported())try{let i=de.readFromLSorCookie(k);if(null==i||t){i={};for(const t in e)e.hasOwnProperty(t)&&(-1===e[t]?delete i[t]:i[t]=e[t]);de.saveToLSorCookie(k,i)}}catch(e){console.error("Unable to parse ARP JSON: "+e)}})(e.arp),null!=e.inapp_stale&&e.inapp_stale.length>0&&D(e.inapp_stale,"wp"),null!=e.inbox_stale&&e.inbox_stale.length>0&&D(e.inbox_stale,"wi")}catch(e){c.error("Unable to persist evrp/arp: "+e)}};var ri=t("isPersonalisationActive");class si{constructor(e){let{isPersonalisationActive:t}=e;Object.defineProperty(this,ri,{writable:!0,value:void 0}),i(this,ri)[ri]=t}getTotalVisits(){if(!i(this,ri)[ri]())return;let e=de.getMetaProp("sc");return null==e&&(e=1),e}getLastVisit(){if(!i(this,ri)[ri]())return;const e=de.getMetaProp("ps");return null!=e?new Date(1e3*e):void 0}}const ai=1,li=2,ci=3,di=4;var ui=t("logLevel"),hi=t("log"),pi=t("isLegacyDebug");class gi{constructor(e){Object.defineProperty(this,pi,{get:vi,set:void 0}),Object.defineProperty(this,hi,{value:fi}),Object.defineProperty(this,ui,{writable:!0,value:void 0}),this.wzrkError={},i(this,ui)[ui]=null==e?e:li,this.wzrkError={}}get logLevel(){return i(this,ui)[ui]}set logLevel(e){i(this,ui)[ui]=e}error(e){i(this,ui)[ui]>=ai&&i(this,hi)[hi]("error",e)}info(e){i(this,ui)[ui]>=li&&i(this,hi)[hi]("log",e)}debug(e){(i(this,ui)[ui]>=ci||i(this,pi)[pi])&&i(this,hi)[hi]("debug",e)}debugPE(e){i(this,ui)[ui]>=di&&i(this,hi)[hi]("debug_pe",e)}reportError(e,t){this.wzrkError.c=e,this.wzrkError.d=t,this.error("".concat(ke," ").concat(e,": ").concat(t))}}var fi=function(e,t){if(window.console)try{const i=(new Date).getTime();console[e]("CleverTap [".concat(i,"]: ").concat(t))}catch(e){}},vi=function(){return"undefined"!=typeof sessionStorage&&""===sessionStorage.WZRK_D},bi=t("logger"),mi=t("sessionId"),yi=t("isPersonalisationActive");class wi{constructor(e){let{logger:t,isPersonalisationActive:n}=e;Object.defineProperty(this,bi,{writable:!0,value:void 0}),Object.defineProperty(this,mi,{writable:!0,value:void 0}),Object.defineProperty(this,yi,{writable:!0,value:void 0}),this.cookieName=void 0,this.scookieObj=void 0,this.sessionId=de.getMetaProp("cs"),i(this,bi)[bi]=t,i(this,yi)[yi]=n}get sessionId(){return i(this,mi)[mi]}set sessionId(e){i(this,mi)[mi]=e}getSessionCookieObject(){let e=de.readCookie(this.cookieName),t={};if(null!=e)if(e=e.replace(p,'"'),t=JSON.parse(e),Z(t)){if(void 0!==t.t){const e=t.t;se()-e>1260&&(t={})}}else t={};return this.scookieObj=t,t}setSessionCookieObject(e){const t=JSON.stringify(e);de.createBroadCookie(this.cookieName,t,1200,Ge())}manageSession(e){if(void 0===this.sessionId||this.sessionId!==e){const t=de.getMetaProp("cs");if(void 0===t)de.setMetaProp("ps",e),de.setMetaProp("cs",e),de.setMetaProp("sc",1);else if(t!==e){de.setMetaProp("ps",t),de.setMetaProp("cs",e);let i=de.getMetaProp("sc");void 0===i&&(i=0),de.setMetaProp("sc",i+1)}this.sessionId=e}}getTimeElapsed(){if(!i(this,yi)[yi]())return;null!=this.scookieObj&&(this.scookieObj=this.getSessionCookieObject());const e=this.scookieObj.s;if(null!=e){const t=se();return Math.floor(t-e)}}getPageCount(){if(i(this,yi)[yi]())return null!=this.scookieObj&&(this.scookieObj=this.getSessionCookieObject()),this.scookieObj.p}}let Si=0,_i=0;var Ci=t("logger"),ki=t("account"),Ei=t("device"),Ai=t("session"),Ii=t("isPersonalisationActive"),Oi=t("clearCookie"),Pi=t("addToLocalEventMap");class Ti{constructor(e){let{logger:t,account:n,device:o,session:r,isPersonalisationActive:s}=e;Object.defineProperty(this,Pi,{value:xi}),Object.defineProperty(this,Ci,{writable:!0,value:void 0}),Object.defineProperty(this,ki,{writable:!0,value:void 0}),Object.defineProperty(this,Ei,{writable:!0,value:void 0}),Object.defineProperty(this,Ai,{writable:!0,value:void 0}),Object.defineProperty(this,Ii,{writable:!0,value:void 0}),Object.defineProperty(this,Oi,{writable:!0,value:!1}),this.processingBackup=!1,i(this,Ci)[Ci]=t,i(this,ki)[ki]=n,i(this,Ei)[Ei]=o,i(this,Ai)[Ai]=r,i(this,Ii)[Ii]=s,tt.logger=t,tt.device=o,tt.account=n}processBackupEvents(){const e=de.readFromLSorCookie(E);if(null!=e){this.processingBackup=!0;for(const t in e)if(e.hasOwnProperty(t)){const n=e[t];void 0===n.fired&&(i(this,Ci)[Ci].debug("Processing backup event : "+n.q),void 0!==n.q&&tt.fireRequest(n.q),n.fired=!0)}de.saveToLSorCookie(E,e),this.processingBackup=!1}}addSystemDataToObject(e,t){void 0===t&&(e=ne(e,i(this,Ci)[Ci])),X(i(this,Ci)[Ci].wzrkError)||(e.wzrk_error=i(this,Ci)[Ci].wzrkError,i(this,Ci)[Ci].wzrkError={}),e.id=i(this,ki)[ki].id,ie(i(this,Ei)[Ei].gcookie)&&(e.g=i(this,Ei)[Ei].gcookie);const n=i(this,Ai)[Ai].getSessionCookieObject();e.s=n.s,e.pg=void 0===n.p?1:n.p;let o=document.location.protocol;return o=o.replace(":",""),e.af={...e.af,lib:"web-sdk-v1.9.2",protocol:o,...ue.flutterVersion},sessionStorage.hasOwnProperty("WZRK_D")&&(e.debug=!0),e}addFlags(e){if(i(this,Oi)[Oi]=de.getAndClearMetaProp(g),void 0!==i(this,Oi)[Oi]&&i(this,Oi)[Oi]&&(e.rc=!0,i(this,Ci)[Ci].debug("reset cookie sent in request and cleared from meta for future requests.")),i(this,Ii)[Ii]()){const t=de.getMetaProp("lsTime"),i=de.getMetaProp("exTs");if(void 0===t||void 0===i)return void(e.dsync=!0);t+i<se()&&(e.dsync=!0)}}saveAndFireRequest(e,t,n,o){const r=se(),s=(e=We(e,"rn",++ue.globalCache.REQ_N))+"&i="+r+"&sn="+Si;de.backupEvent(s,ue.globalCache.REQ_N,i(this,Ci)[Ci]),ue.offline||(t&&(void 0===i(this,Oi)[Oi]||!i(this,Oi)[Oi])||window.isOULInProgress?i(this,Ci)[Ci].debug("Not fired due to override - ".concat(ue.blockRequest," or clearCookie - ").concat(i(this,Oi)[Oi]," or OUL request in progress - ").concat(window.isOULInProgress)):(r===_i?Si++:(_i=r,Si=0),window.oulReqN=ue.globalCache.REQ_N,tt.fireRequest(s,!1,n,o)))}unregisterTokenForGuid(e){const t=de.readFromLSorCookie(V);if(t){const t={type:"data"};ie(e)&&(t.g=e),t.action="unregister",t.id=i(this,ki)[ki].id;const n=i(this,Ai)[Ai].getSessionCookieObject();t.s=n.s;const o=Ye(JSON.stringify(t),i(this,Ci)[Ci]);let r=i(this,ki)[ki].dataPostURL;r=We(r,"type","data"),r=We(r,"d",o),tt.fireRequest(r,!0),de.saveToLSorCookie(F,!1)}this.registerToken(t)}registerToken(e){if(!e)return;e=this.addSystemDataToObject(e,!0),e=JSON.stringify(e);let t=i(this,ki)[ki].dataPostURL;t=We(t,"type","data"),t=We(t,"d",Ye(e,i(this,Ci)[Ci])),tt.fireRequest(t),de.save("WZRK_WPR","ok")}processEvent(e){i(this,Pi)[Pi](e.evtName),e=this.addSystemDataToObject(e,void 0),this.addFlags(e),e[y]=rt();const t=Ye(JSON.stringify(e),i(this,Ci)[Ci]);let n=i(this,ki)[ki].dataPostURL;n=We(n,"type",R),n=We(n,"d",t),this.saveAndFireRequest(n,ue.blockRequest,!1,e.evtName)}post(e,t){return fetch(e,{method:"post",headers:{"Content-Type":"application/json"},body:t}).then((e=>{if(e.ok)return e.json();throw e})).then((e=>(i(this,Ci)[Ci].debug("Sync data successful",e),e))).catch((e=>{throw i(this,Ci)[Ci].debug("Error in syncing variables",e),e}))}}var xi=function(e){if(de._isLocalStorageSupported()){void 0===ue.globalEventsMap&&(ue.globalEventsMap=de.readFromLSorCookie(S),void 0===ue.globalEventsMap&&(ue.globalEventsMap={}));const t=se();let i=ue.globalEventsMap[e];void 0!==i?(i[2]=t,i[0]++):(i=[],i.push(1),i.push(t),i.push(t)),ue.globalEventsMap[e]=i,de.saveToLSorCookie(S,ue.globalEventsMap)}},Ri=t("request"),Mi=t("account"),Di=t("oldValues"),Li=t("logger"),Ni=t("processPrivacyArray");class Ui extends Array{constructor(e,t){let{request:n,account:o,logger:r}=e;super(),Object.defineProperty(this,Ni,{value:ji}),Object.defineProperty(this,Ri,{writable:!0,value:void 0}),Object.defineProperty(this,Mi,{writable:!0,value:void 0}),Object.defineProperty(this,Di,{writable:!0,value:void 0}),Object.defineProperty(this,Li,{writable:!0,value:void 0}),i(this,Li)[Li]=r,i(this,Ri)[Ri]=n,i(this,Mi)[Mi]=o,i(this,Di)[Di]=t}push(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return ue.isPrivacyArrPushed?i(this,Ni)[Ni](ue.privacyArray.length>0?ue.privacyArray:t):ue.privacyArray.push(...t),0}_processOldValues(){i(this,Di)[Di]&&i(this,Ni)[Ni](i(this,Di)[Di]),i(this,Di)[Di]=null}}var ji=function(e){if(Array.isArray(e)&&e.length>0){const n=e.reduce(((e,t)=>({...e,...t})),{});let o={};const r={};var t=!1;if(n.hasOwnProperty(O)&&"boolean"==typeof(t=n[O])&&(r.ct_optout=t,ue.isOptInRequest=!t),n.hasOwnProperty(P)){const e=n[P],t="boolean"==typeof e&&e;de.setMetaProp(P,t)}if(!X(r)){o.type="profile",o.profile=r,o=i(this,Ri)[Ri].addSystemDataToObject(o,void 0);const n=Ye(JSON.stringify(o),i(this,Li)[Li]);let s=i(this,Mi)[Mi].dataPostURL;s=We(s,"type",R),s=We(s,"d",n),s=We(s,O,t?"true":"false"),i(this,Ri)[Ri].saveAndFireRequest(s,ue.blockRequest),e.splice(0,e.length)}}},Fi=t("oldValues"),Vi=t("logger"),qi=t("request"),Bi=t("account"),zi=t("wizAlertJSPath"),Hi=t("fcmPublicKey"),Ki=t("setUpWebPush"),Wi=t("setUpWebPushNotifications"),Gi=t("setApplicationServerKey"),Yi=t("setUpSafariNotifications"),Ji=t("setUpChromeFirefoxNotifications"),$i=t("addWizAlertJS"),Zi=t("removeWizAlertJS"),Qi=t("handleNotificationRegistration");class Xi extends Array{constructor(e,t){let{logger:n,session:o,request:r,account:s}=e;super(),Object.defineProperty(this,Qi,{value:ln}),Object.defineProperty(this,Zi,{value:an}),Object.defineProperty(this,$i,{value:sn}),Object.defineProperty(this,Ji,{value:rn}),Object.defineProperty(this,Yi,{value:on}),Object.defineProperty(this,Gi,{value:nn}),Object.defineProperty(this,Wi,{value:tn}),Object.defineProperty(this,Ki,{value:en}),Object.defineProperty(this,Fi,{writable:!0,value:void 0}),Object.defineProperty(this,Vi,{writable:!0,value:void 0}),Object.defineProperty(this,qi,{writable:!0,value:void 0}),Object.defineProperty(this,Bi,{writable:!0,value:void 0}),Object.defineProperty(this,zi,{writable:!0,value:void 0}),Object.defineProperty(this,Hi,{writable:!0,value:void 0}),i(this,zi)[zi]="https://d2r1yp2w7bby2u.cloudfront.net/js/wzrk_dialog.min.js",i(this,Hi)[Hi]=null,i(this,Fi)[Fi]=t,i(this,Vi)[Vi]=n,i(this,qi)[qi]=r,i(this,Bi)[Bi]=s}push(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return i(this,Ki)[Ki](t),0}_processOldValues(){i(this,Fi)[Fi]&&i(this,Ki)[Ki](i(this,Fi)[Fi]),i(this,Fi)[Fi]=null}_enableWebPush(e,t){ue.webPushEnabled=e,null!=t&&i(this,Gi)[Gi](t),ue.webPushEnabled&&ue.notifApi.notifEnabledFromApi?i(this,Qi)[Qi](ue.notifApi.displayArgs):!ue.webPushEnabled&&ue.notifApi.notifEnabledFromApi&&i(this,Vi)[Vi].error("Ensure that web push notifications are fully enabled and integrated before requesting them")}}var en=function(e){ue.webPushEnabled&&e.length>0?i(this,Qi)[Qi](e):null==ue.webPushEnabled&&e.length>0?(ue.notifApi.notifEnabledFromApi=!0,ue.notifApi.displayArgs=e.slice()):!1===ue.webPushEnabled&&e.length>0&&i(this,Vi)[Vi].error("Make sure push notifications are fully enabled and integrated")},tn=function(e,t,n,o){-1!==navigator.userAgent.indexOf("Chrome")||-1!==navigator.userAgent.indexOf("Firefox")?i(this,Ji)[Ji](e,t):-1!==navigator.userAgent.indexOf("Safari")&&i(this,Yi)[Yi](e,n,o)},nn=function(e){i(this,Hi)[Hi]=e},on=function(e,t,n){void 0===t&&i(this,Vi)[Vi].error("Ensure that APNS Web Push ID is supplied"),void 0===n&&i(this,Vi)[Vi].error("Ensure that APNS Web Push service path is supplied"),"safari"in window&&"pushNotification"in window.safari&&window.safari.pushNotification.requestPermission(n,t,{},(e=>{if("granted"===e.permission){const t=JSON.parse(JSON.stringify(e));t.endpoint=e.deviceToken,t.browser="Safari",de.saveToLSorCookie(V,t),i(this,qi)[qi].registerToken(t),i(this,Vi)[Vi].info("Safari Web Push registered. Device Token: "+e.deviceToken)}else"denied"===e.permission&&i(this,Vi)[Vi].info("Error subscribing to Safari web push")}))},rn=function(e,t){let n="";"serviceWorker"in navigator&&navigator.serviceWorker.register(t).then((e=>"undefined"!=typeof __wzrk_account_id?new Promise((t=>setTimeout((()=>t(e)),5e3))):(n=e.scope,/^(\.?)(\/?)([^/]*).js$/.test(t)?navigator.serviceWorker.ready:-1!==navigator.userAgent.indexOf("Chrome")?new Promise((t=>setTimeout((()=>t(e)),5e3))):navigator.serviceWorker.getRegistrations()))).then((t=>{-1!==navigator.userAgent.indexOf("Firefox")&&Array.isArray(t)&&(t=t.filter((e=>e.scope===n))[0]);const o={userVisibleOnly:!0};null!=i(this,Hi)[Hi]&&(o.applicationServerKey=(e=>{let t=(e+"=".repeat((4-e.length%4)%4)).replace(/\-/g,"+").replace(/_/g,"/"),i=window.atob(t),n=[];for(let e=0;e<i.length;e++)n.push(i.charCodeAt(e));return new Uint8Array(n)})(i(this,Hi)[Hi])),t.pushManager.subscribe(o).then((t=>{i(this,Vi)[Vi].info("Service Worker registered. Endpoint: "+t.endpoint);const n=JSON.parse(JSON.stringify(t));-1!==navigator.userAgent.indexOf("Chrome")?(n.endpoint=n.endpoint.split("/").pop(),n.browser="Chrome"):-1!==navigator.userAgent.indexOf("Firefox")&&(n.endpoint=n.endpoint.split("/").pop(),n.browser="Firefox"),de.saveToLSorCookie(V,n),i(this,qi)[qi].registerToken(n),void 0!==e&&"function"==typeof e&&e()})).catch((e=>{i(this,Vi)[Vi].error("Error subscribing: "+e),t.pushManager.getSubscription().then((e=>{null!==e&&e.unsubscribe().then((e=>{i(this,Vi)[Vi].info("Unsubscription successful")})).catch((e=>{i(this,Vi)[Vi].error("Error unsubscribing: "+e)}))}))}))})).catch((e=>{i(this,Vi)[Vi].error("error registering service worker: "+e)}))},sn=function(){const e=document.createElement("script");return e.setAttribute("type","text/javascript"),e.setAttribute("id","wzrk-alert-js"),e.setAttribute("src",i(this,zi)[zi]),document.getElementsByTagName("body")[0].appendChild(e),e},an=function(){const e=document.getElementById("wzrk-alert-js");e.parentNode.removeChild(e)},ln=function(e){let t,n,o,r,s,a,l,c,d,u,h,p,g,f,v;if(1===e.length){if(Z(e[0])){const i=e[0];t=i.titleText,n=i.bodyText,o=i.okButtonText,r=i.rejectButtonText,s=i.okButtonColor,a=i.skipDialog,l=i.askAgainTimeInSeconds,c=i.okCallback,d=i.rejectCallback,u=i.subscriptionCallback,h=i.serviceWorkerPath,p=i.httpsPopupPath,g=i.httpsIframePath,f=i.apnsWebPushId,v=i.apnsWebPushServiceUrl}}else t=e[0],n=e[1],o=e[2],r=e[3],s=e[4],a=e[5],l=e[6];if(null==a&&(a=!1),null==h&&(h="/clevertap_sw.js"),void 0===navigator.serviceWorker)return;const b=null!=p&&null!=g;if("https:"!==window.location.protocol&&"localhost"!==document.location.hostname&&!b)return void i(this,Vi)[Vi].error("Make sure you are https or localhost to register for notifications");if(-1!==navigator.userAgent.indexOf("Chrome")){const e=navigator.userAgent.match(/Chrome\/(\d+)/);if(null==e||parseInt(e[1],10)<50)return}else if(-1!==navigator.userAgent.indexOf("Firefox")){const e=navigator.userAgent.match(/Firefox\/(\d+)/);if(null==e||parseInt(e[1],10)<50)return}else{if(-1===navigator.userAgent.indexOf("Safari"))return;{const e=navigator.userAgent.match(/Safari\/(\d+)/);if(null==e||parseInt(e[1],10)<50)return}}if(!b){if(null==Notification)return;if("granted"===Notification.permission)return void i(this,Wi)[Wi](u,h,f,v);if("denied"===Notification.permission)return;if(a)return void i(this,Wi)[Wi](u,h,f,v)}if(!(t&&n&&o&&r))return void i(this,Vi)[Vi].error("Missing input parameters; please specify title, body, ok button and cancel button text");null!=s&&s.match(/^#[a-f\d]{6}$/i)||(s="#f28046");const m=(new Date).getTime()/1e3;if(null==de.getMetaProp("notif_last_time"))de.setMetaProp("notif_last_time",m);else{if(null==l&&(l=604800),m-de.getMetaProp("notif_last_time")<l)return;de.setMetaProp("notif_last_time",m)}if(b){const e=document.createElement("iframe");e.setAttribute("style","display:none;"),e.setAttribute("src",g),document.body.appendChild(e),window.addEventListener("message",(e=>{if(null!=e.data){let a={};try{a=JSON.parse(e.data)}catch(e){return}null!=a.state&&"ct"===a.from&&"not"===a.state&&(i(this,$i)[$i]().onload=()=>{window.wzrkPermissionPopup.wizAlert({title:t,body:n,confirmButtonText:o,confirmButtonColor:s,rejectButtonText:r},(e=>{e?("function"==typeof c&&c(),window.open(p)):"function"==typeof d&&d(),i(this,Zi)[Zi]()}))})}}),!1)}else i(this,$i)[$i]().onload=()=>{window.wzrkPermissionPopup.wizAlert({title:t,body:n,confirmButtonText:o,confirmButtonColor:s,rejectButtonText:r},(e=>{e?("function"==typeof c&&c(),i(this,Wi)[Wi](u,h,f,v)):"function"==typeof d&&d(),i(this,Zi)[Zi]()}))}},cn=t("variableStore");class dn{constructor(e){let{variableStore:t}=e;Object.defineProperty(this,cn,{writable:!0,value:void 0}),this.name=null,this.defaultValue=null,this.value=null,this.type=null,this.hadStarted=!1,this.valueChangedCallbacks=[],i(this,cn)[cn]=t}getValue(){return this.value}getdefaultValue(){return this.defaultValue}static define(e,t,i){if(!e||"string"!=typeof e)return console.error("Empty or invalid name parameter provided."),null;if(e.startsWith(".")||e.endsWith("."))return console.error("Variable name starts or ends with a `.` which is not allowed: "+e),null;const n=typeof t;if("string"!==n&&"number"!==n&&"boolean"!==n)return console.error("Only primitive types (string, number, boolean) are accepted as value"),null;const o=i.getVariable(e);if(o)return o;const r=new dn({variableStore:i});try{r.name=e,r.defaultValue=t,r.value=t,r.type=n,i.registerVariable(r),r.update(t)}catch(e){console.error(e)}return r}update(e){const t=this.value;this.value=e,null===e&&null===t||null!==e&&e===t&&this.hadStarted||i(this,cn)[cn].hasVarsRequestCompleted()&&(this.hadStarted=!0,this.triggerValueChanged())}triggerValueChanged(){this.valueChangedCallbacks.forEach((e=>{e(this)}))}addValueChangedCallback(e){e?(this.valueChangedCallbacks.push(e),i(this,cn)[cn].hasVarsRequestCompleted()&&e(this)):console.log("Invalid callback parameter provided.")}removeValueChangedCallback(e){const t=this.valueChangedCallbacks.indexOf(e);-1!==t&&this.valueChangedCallbacks.splice(t,1)}clearStartFlag(){this.hadStarted=!1}}var un=t("logger"),hn=t("account"),pn=t("request"),gn=t("event"),fn=t("variables"),vn=t("remoteVariables"),bn=t("fetchCallback"),mn=t("variablesChangedCallbacks"),yn=t("oneTimeVariablesChangedCallbacks"),wn=t("hasVarsRequestCompleted"),Sn=t("runVariablesChangedCallback");class _n{constructor(e){let{logger:t,request:n,account:o,event:r}=e;Object.defineProperty(this,Sn,{value:Cn}),Object.defineProperty(this,un,{writable:!0,value:void 0}),Object.defineProperty(this,hn,{writable:!0,value:void 0}),Object.defineProperty(this,pn,{writable:!0,value:void 0}),Object.defineProperty(this,gn,{writable:!0,value:void 0}),Object.defineProperty(this,fn,{writable:!0,value:void 0}),Object.defineProperty(this,vn,{writable:!0,value:void 0}),Object.defineProperty(this,bn,{writable:!0,value:void 0}),Object.defineProperty(this,mn,{writable:!0,value:void 0}),Object.defineProperty(this,yn,{writable:!0,value:void 0}),Object.defineProperty(this,wn,{writable:!0,value:!1}),i(this,un)[un]=t,i(this,hn)[hn]=o,i(this,pn)[pn]=n,i(this,gn)[gn]=r,i(this,fn)[fn]={},i(this,vn)[vn]={},i(this,mn)[mn]=[],i(this,yn)[yn]=[],ue.variableStore=this}registerVariable(e){const{name:t}=e;i(this,fn)[fn][t]=e,console.log("registerVariable",i(this,fn)[fn])}getVariable(e){return i(this,fn)[fn][e]}hasVarsRequestCompleted(){return i(this,wn)[wn]}syncVariables(e,t){if(!i(this,hn)[hn].token){const e="Account token is missing.";return i(this,un)[un].error(e),Promise.reject(new Error(e))}const n={type:"varsPayload",vars:{}};for(const e in i(this,fn)[fn])n.vars[e]={defaultValue:i(this,fn)[fn][e].defaultValue,type:i(this,fn)[fn][e].type};if(0===Object.keys(n.vars).length){const e="No variables are defined.";return i(this,un)[un].error(e),Promise.reject(new Error(e))}let o={};o=i(this,pn)[pn].addSystemDataToObject(o,void 0),o.tk=i(this,hn)[hn].token,o.type="meta";const r=JSON.stringify([o,n]),s=i(this,hn)[hn].dataPostPEURL;return i(this,pn)[pn].post(s,r).then((t=>(e&&"function"==typeof e&&e(t),t))).catch((e=>{throw t&&"function"==typeof t&&t(e),400===e.status?i(this,un)[un].error("Invalid sync payload or clear the existing draft"):401===e.status?i(this,un)[un].error("This is not a test profile"):i(this,un)[un].error("Sync variable failed"),e}))}fetchVariables(e){i(this,gn)[gn].push(Y,{t:4}),e&&"function"==typeof e&&(i(this,bn)[bn]=e)}mergeVariables(e){console.log("msg vars is ",e),i(this,wn)[wn]=!0,de.saveToLSorCookie("WZRK_PE",e),i(this,vn)[vn]=e;for(const t in i(this,fn)[fn])e.hasOwnProperty(t)&&i(this,fn)[fn][t].update(e[t]);i(this,bn)[bn]&&i(this,bn)[bn](),i(this,Sn)[Sn]()}addVariablesChangedCallback(e){e&&"function"==typeof e?(i(this,mn)[mn].push(e),this.hasVarsRequestCompleted()&&e()):i(this,un)[un].error("callback is not a function")}addOneTimeVariablesChangedCallback(e){e&&"function"==typeof e&&(this.hasVarsRequestCompleted()?e():i(this,yn)[yn].push(e))}removeVariablesChangedCallback(e){const t=i(this,mn)[mn].indexOf(e);-1!==t&&i(this,mn)[mn].splice(t,1)}removeOneTimeVariablesChangedCallback(e){const t=i(this,yn)[yn].indexOf(e);-1!==t&&i(this,yn)[yn].splice(t,1)}}var Cn=function(){for(var e of i(this,mn)[mn])e();for(var t of i(this,yn)[yn])t();i(this,yn)[yn].length=0},kn=t("logger"),En=t("api"),An=t("onloadcalled"),In=t("device"),On=t("session"),Pn=t("account"),Tn=t("request"),xn=t("variableStore"),Rn=t("isSpa"),Mn=t("previousUrl"),Dn=t("boundCheckPageChanged"),Ln=t("dismissSpamControl"),Nn=t("processOldValues"),Un=t("debounce"),jn=t("checkPageChanged"),Fn=t("pingRequest"),Vn=t("isPingContinuous"),qn=t("overrideDSyncFlag"),Bn=t("sendLocationData");var zn=function(){this.onUserLogin._processOldValues(),this.privacy._processOldValues(),this.event._processOldValues(),this.profile._processOldValues(),this.notifications._processOldValues()},Hn=function(e){let t,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:300;return function(){clearTimeout(t),t=setTimeout(e,i)}},Kn=function(){i(this,Un)[Un]((()=>{i(this,Mn)[Mn]!==location.href&&this.pageChanged()}))()},Wn=function(){let e=i(this,Pn)[Pn].dataPostURL,t={};t=i(this,Tn)[Tn].addSystemDataToObject(t,void 0),e=We(e,"type","ping"),e=We(e,"d",Ye(JSON.stringify(t),i(this,kn)[kn])),i(this,Tn)[Tn].saveAndFireRequest(e,ue.blockRequest)},Gn=function(){return void 0!==window.wzrk_d&&"continuous"===window.wzrk_d.ping},Yn=function(e){this._isPersonalisationActive()&&(e.dsync=!0)},Jn=function(e){let t={af:{}};const n={};t.type="profile",null==n.tz&&(n.tz=(new Date).toString().match(/([A-Z]+[\+-][0-9]+)/)[1]),t.profile=n,e&&Object.keys(e).forEach((i=>{t.af[i]=e[i]})),ue.location&&(t.af={...t.af,...ue.location}),t=i(this,Tn)[Tn].addSystemDataToObject(t,!0),i(this,Tn)[Tn].addFlags(t);const o=Ye(JSON.stringify(t),i(this,kn)[kn]);let r=i(this,Pn)[Pn].dataPostURL;r=We(r,"type",R),r=We(r,"d",o),i(this,Tn)[Tn].saveAndFireRequest(r,ue.blockRequest)};const $n=new class{get spa(){return i(this,Rn)[Rn]}set spa(e){const t=!0===e;i(this,Rn)[Rn]!==t&&1===i(this,An)[An]&&(t?document.addEventListener("click",i(this,Dn)[Dn]):document.removeEventListener("click",i(this,Dn)[Dn])),i(this,Rn)[Rn]=t}get dismissSpamControl(){return i(this,Ln)[Ln]}set dismissSpamControl(e){const t=!0===e;i(this,Ln)[Ln]=t,ue.dismissSpamControl=t}constructor(){var e,t,n,o,r;let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Object.defineProperty(this,Bn,{value:Jn}),Object.defineProperty(this,qn,{value:Yn}),Object.defineProperty(this,Vn,{value:Gn}),Object.defineProperty(this,Fn,{value:Wn}),Object.defineProperty(this,jn,{value:Kn}),Object.defineProperty(this,Un,{value:Hn}),Object.defineProperty(this,Nn,{value:zn}),Object.defineProperty(this,kn,{writable:!0,value:void 0}),Object.defineProperty(this,En,{writable:!0,value:void 0}),Object.defineProperty(this,An,{writable:!0,value:void 0}),Object.defineProperty(this,In,{writable:!0,value:void 0}),Object.defineProperty(this,On,{writable:!0,value:void 0}),Object.defineProperty(this,Pn,{writable:!0,value:void 0}),Object.defineProperty(this,Tn,{writable:!0,value:void 0}),Object.defineProperty(this,xn,{writable:!0,value:void 0}),Object.defineProperty(this,Rn,{writable:!0,value:void 0}),Object.defineProperty(this,Mn,{writable:!0,value:void 0}),Object.defineProperty(this,Dn,{writable:!0,value:i(this,jn)[jn].bind(this)}),Object.defineProperty(this,Ln,{writable:!0,value:void 0}),this.enablePersonalization=void 0,this.popupCallbacks={},this.popupCurrentWzrkId="",i(this,An)[An]=0,this._isPersonalisationActive=this._isPersonalisationActive.bind(this),this.raiseNotificationClicked=()=>{},i(this,kn)[kn]=new gi(li),i(this,Pn)[Pn]=new d(null===(e=s.account)||void 0===e?void 0:e[0],s.region||(null===(t=s.account)||void 0===t?void 0:t[1]),s.targetDomain||(null===(n=s.account)||void 0===n?void 0:n[2]),s.token||(null===(o=s.account)||void 0===o?void 0:o[3])),i(this,In)[In]=new _e({logger:i(this,kn)[kn]}),i(this,Ln)[Ln]=s.dismissSpamControl||!1,this.shpfyProxyPath=s.shpfyProxyPath||"",i(this,On)[On]=new wi({logger:i(this,kn)[kn],isPersonalisationActive:this._isPersonalisationActive}),i(this,Tn)[Tn]=new Ti({logger:i(this,kn)[kn],account:i(this,Pn)[Pn],device:i(this,In)[In],session:i(this,On)[On],isPersonalisationActive:this._isPersonalisationActive}),this.enablePersonalization=s.enablePersonalization||!1,this.event=new ze({logger:i(this,kn)[kn],request:i(this,Tn)[Tn],isPersonalisationActive:this._isPersonalisationActive},s.event),this.profile=new bt({logger:i(this,kn)[kn],request:i(this,Tn)[Tn],account:i(this,Pn)[Pn],isPersonalisationActive:this._isPersonalisationActive},s.profile),this.onUserLogin=new Pt({request:i(this,Tn)[Tn],account:i(this,Pn)[Pn],session:i(this,On)[On],logger:i(this,kn)[kn],device:i(this,In)[In]},s.onUserLogin),this.privacy=new Ui({request:i(this,Tn)[Tn],account:i(this,Pn)[Pn],logger:i(this,kn)[kn]},s.privacy),this.notifications=new Xi({logger:i(this,kn)[kn],request:i(this,Tn)[Tn],account:i(this,Pn)[Pn]},s.notifications),i(this,xn)[xn]=new _n({logger:i(this,kn)[kn],request:i(this,Tn)[Tn],account:i(this,Pn)[Pn],event:this.event}),i(this,En)[En]=new we({logger:i(this,kn)[kn],request:i(this,Tn)[Tn],device:i(this,In)[In],session:i(this,On)[On]}),this.spa=s.spa,this.dismissSpamControl=s.dismissSpamControl,this.user=new si({isPersonalisationActive:this._isPersonalisationActive}),this.session={getTimeElapsed:()=>i(this,On)[On].getTimeElapsed(),getPageCount:()=>i(this,On)[On].getPageCount()},this.logout=()=>{i(this,kn)[kn].debug("logout called"),de.setInstantDeleteFlagInK()},this.clear=()=>{this.onUserLogin.clear()},this.getCleverTapID=()=>i(this,In)[In].getGuid(),this.getAccountID=()=>i(this,Pn)[Pn].id,this.getSCDomain=()=>i(this,Pn)[Pn].finalTargetDomain,this.setLibrary=(e,t)=>{ue.flutterVersion={[e]:t}},this.setSCSDKVersion=e=>{i(this,Pn)[Pn].scSDKVersion=e;const t={};t.af={scv:"sc-sdk-v"+i(this,Pn)[Pn].scSDKVersion};let n=i(this,Pn)[Pn].dataPostURL;n=We(n,"type","page"),n=We(n,"d",Ye(JSON.stringify(t),i(this,kn)[kn])),i(this,Tn)[Tn].saveAndFireRequest(n,ue.blockRequest)},Yt()&&(Kt(),Ht(i(this,kn)[kn])),this.getInboxMessageCount=()=>{const e=Bt();return Object.keys(e).length},this.getInboxMessageUnreadCount=()=>{if(ue.inbox)return ue.inbox.unviewedCounter;i(this,kn)[kn].debug("No unread messages")},this.getAllInboxMessages=()=>Bt(),this.getUnreadInboxMessages=()=>{if(ue.inbox)return ue.inbox.unviewedMessages;i(this,kn)[kn].debug("No unread messages")},this.getInboxMessageForId=e=>{const t=Bt();if((null!==e||""!==e)&&t.hasOwnProperty(e))return t[e];i(this,kn)[kn].error("No message available for message Id "+e)},this.deleteInboxMessage=e=>{const t=Bt();if(null===e&&""===e||!t.hasOwnProperty(e))i(this,kn)[kn].error("No message available for message Id "+e);else{const i=document.querySelector("ct-web-inbox").shadowRoot.getElementById(e);0===t[e].viewed&&(ue.inbox.unviewedCounter--,delete ue.inbox.unviewedMessages[e],document.getElementById("unviewedBadge").innerText=ue.inbox.unviewedCounter,document.getElementById("unviewedBadge").style.display=ue.inbox.unviewedCounter>0?"flex":"none"),i&&i.remove(),delete t[e],zt(t)}},this.markReadInboxMessage=e=>{const t=ue.inbox.unviewedMessages,n=Bt();if(null===e&&""===e||!t.hasOwnProperty(e))i(this,kn)[kn].error("No message available for message Id "+e);else{const t=document.querySelector("ct-web-inbox").shadowRoot.getElementById(e);if(null!==t&&(t.shadowRoot.getElementById("unreadMarker").style.display="none"),n[e].viewed=1,document.getElementById("unviewedBadge")){var o=parseInt(document.getElementById("unviewedBadge").innerText)-1;document.getElementById("unviewedBadge").innerText=o,document.getElementById("unviewedBadge").style.display=o>0?"flex":"none"}window.clevertap.renderNotificationViewed({msgId:n[e].wzrk_id,pivotId:n[e].pivotId}),ue.inbox.unviewedCounter--,delete ue.inbox.unviewedMessages[e],zt(n)}},this.markReadInboxMessagesForIds=e=>{if(Array.isArray(e))for(var t=0;t<e.length;t++)this.markReadInboxMessage(e[t])},this.markReadAllInboxMessage=()=>{const e=ue.inbox.unviewedMessages,t=Bt();Object.keys(e).length>0?(Object.keys(e).forEach((e=>{const i=document.querySelector("ct-web-inbox").shadowRoot.getElementById(e);null!==i&&(i.shadowRoot.getElementById("unreadMarker").style.display="none"),t[e].viewed=1,window.clevertap.renderNotificationViewed({msgId:t[e].wzrk_id,pivotId:t[e].wzrk_pivot})})),document.getElementById("unviewedBadge").innerText=0,document.getElementById("unviewedBadge").style.display="none",zt(t),ue.inbox.unviewedCounter=0,ue.inbox.unviewedMessages={}):i(this,kn)[kn].debug("All messages are already read")},this.toggleInbox=e=>{var t;return null===(t=ue.inbox)||void 0===t?void 0:t.toggleInbox(e)},this.renderNotificationViewed=e=>{a(U,e)},this.renderNotificationClicked=e=>{a(j,e)};const a=(e,t)=>{if(!t||!t.msgId)return;const n={type:"event"};if(n.evtName=e,n.evtData={[N]:t.msgId},t.pivotId&&(n.evtData={...n.evtData,wzrk_pivot:t.pivotId}),t.wzrk_slideNo&&(n.evtData={...n.evtData,wzrk_slideNo:t.wzrk_slideNo}),t.kv&&null!==t.kv&&void 0!==t.kv)for(const e in t.kv)e.startsWith(L)&&(n.evtData={...n.evtData,[e]:t.kv[e]});if(t.msgCTkv&&null!==t.msgCTkv&&void 0!==t.msgCTkv)for(const e in t.msgCTkv)e.startsWith(L)&&(n.evtData={...n.evtData,[e]:t.msgCTkv[e]});i(this,Tn)[Tn].processEvent(n)};this.setLogLevel=e=>{i(this,kn)[kn].logLevel=Number(e),3===e?sessionStorage.WZRK_D="":delete sessionStorage.WZRK_D},this.handleIncrementValue=(e,t)=>{this.profile._handleIncrementDecrementValue(e,t,q)},this.handleDecrementValue=(e,t)=>{this.profile._handleIncrementDecrementValue(e,t,"$decr")},this.setMultiValuesForKey=(e,t)=>{Array.isArray(t)?this.profile._handleMultiValueSet(e,t,"$set"):console.error("setMultiValuesForKey should be called with a value of type array")},this.addMultiValueForKey=(e,t)=>{"string"==typeof t||"number"==typeof t?this.profile._handleMultiValueAdd(e,t,B):console.error("addMultiValueForKey should be called with a value of type string or number.")},this.addMultiValuesForKey=(e,t)=>{Array.isArray(t)?this.profile._handleMultiValueAdd(e,t,B):console.error("addMultiValuesForKey should be called with a value of type array.")},this.removeMultiValueForKey=(e,t)=>{"string"==typeof t||"number"==typeof t?this.profile._handleMultiValueRemove(e,t,z):console.error("removeMultiValueForKey should be called with a value of type string or number.")},this.removeMultiValuesForKey=(e,t)=>{Array.isArray(t)?this.profile._handleMultiValueRemove(e,t,z):console.error("removeMultiValuesForKey should be called with a value of type array.")},this.removeValueForKey=e=>{this.profile._handleMultiValueDelete(e,H)};const l=(e,t,n)=>{((e,t,i,n,o)=>{const r=Ke(location.href),s=r.e,a=r.p,l=r.page_type;if(void 0!==s){const r={};r.id=n.id,r.unsubGroups=ue.unsubGroups,ue.updatedCategoryLong&&(r[D]=ue.updatedCategoryLong);let c=n.emailURL;i&&(c=We(c,"fetchGroups",i)),t&&(c=We(c,"encoded",t)),c=We(c,"e",s),c=We(c,"d",Ye(JSON.stringify(r),o)),a&&(c=We(c,"p",a)),"-1"!==e&&(c=We(c,"sub",e)),l&&(ue.globalUnsubscribe=l===A,c=We(c,"page_type",l)),tt.fireRequest(c)}})(e,t,n,i(this,Pn)[Pn],i(this,kn)[kn])};function c(e){var t=e.coords.latitude,n=e.coords.longitude;ue.location={Latitude:t,Longitude:n},i(this,Bn)[Bn]({Latitude:t,Longitude:n})}function u(e){switch(e.code){case e.PERMISSION_DENIED:console.log("User denied the request for Geolocation.");break;case e.POSITION_UNAVAILABLE:console.log("Location information is unavailable.");break;case e.TIMEOUT:console.log("The request to get user location timed out.");break;case e.UNKNOWN_ERROR:console.log("An unknown error occurred.")}}this.getLocation=function(e,t){if(e&&"number"!=typeof e||t&&"number"!=typeof t)console.log("Latitude and Longitude must be of number type");else if(e&&t){if(e<=-90||e>90)return void console.log("A vaid latitude must range between -90 and 90");if(t<=-180||t>180)return void console.log("A valid longitude must range between -180 and 180");ue.location={Latitude:e,Longitude:t},i(this,Bn)[Bn]({Latitude:e,Longitude:t})}else navigator.geolocation?navigator.geolocation.getCurrentPosition(c.bind(this),u):console.log("Geolocation is not supported by this browser.")};const h=i(this,En)[En];h.logout=this.logout,h.clear=this.clear,h.closeIframe=(e,t)=>{dt(e,0,i(this,On)[On].sessionId)},h.enableWebPush=(e,t)=>{this.notifications._enableWebPush(e,t)},h.tr=e=>{oi(e,{device:i(this,In)[In],session:i(this,On)[On],request:i(this,Tn)[Tn],logger:i(this,kn)[kn]})},h.setEnum=e=>{((e,t)=>{if($(e)||te(e))return"$E_"+e;t.error(Me)})(e,i(this,kn)[kn])},h.is_onloadcalled=()=>1===i(this,An)[An],h.subEmail=e=>{l("1",e)},h.getEmail=(e,t)=>{l("-1",e,t)},h.unSubEmail=e=>{l("0",e)},h.unsubEmailGroups=e=>{ue.unsubGroups=[];const t=document.getElementsByClassName("ct-unsub-group-input-item");for(let e=0;e<t.length;e++){const i=t[e];if(i.name){const e={name:i.name,isUnsubscribed:i.checked};ue.unsubGroups.push(e)}}l("2",e)},h.setSubscriptionGroups=e=>{ue.unsubGroups=e},h.getSubscriptionGroups=()=>ue.unsubGroups,h.changeSubscriptionGroups=(e,t)=>{h.setSubscriptionGroups(t),l("2",e)},h.isGlobalUnsubscribe=()=>ue.globalUnsubscribe,h.setIsGlobalUnsubscribe=e=>{ue.globalUnsubscribe=e},h.setUpdatedCategoryLong=e=>{e[D]&&(ue.updatedCategoryLong=e[D])},window.$CLTP_WR=window.$WZRK_WR=h,(null===(r=s.account)||void 0===r?void 0:r[0].id)&&this.init()}init(e,t,n,o){if(1===i(this,An)[An])return;if(((e,t)=>{const i=window.location.search,n=window.opener;if("?ctBuilder"===i)return e.debug("open in visual builder mode"),window.addEventListener("message",Qt,!1),void(n&&n.postMessage({message:"builder",originUrl:window.location.href},"*"));"?ctBuilderPreview"===i&&(window.addEventListener("message",Qt,!1),n&&n.postMessage({message:"preview",originUrl:window.location.href},"*")),"?ctBuilderSDKCheck"===i&&n&&n.postMessage({message:"SDKVersion",accountId:t,originUrl:window.location.href,sdkVersion:"1.9.2"},"*")})(i(this,kn)[kn],e),de.removeCookie("WZRK_P",window.location.hostname),!i(this,Pn)[Pn].id){if(!e)return void i(this,kn)[kn].error(Ee);i(this,Pn)[Pn].id=e}i(this,On)[On].cookieName="WZRK_S_"+i(this,Pn)[Pn].id,t&&(i(this,Pn)[Pn].region=t),n&&(i(this,Pn)[Pn].targetDomain=n),o&&(i(this,Pn)[Pn].token=o);const r=location.href,s=Ke(r.toLowerCase());if(void 0!==s.e&&"0"==s.wzrk_ex)return;ue.isPrivacyArrPushed=!0,ue.privacyArray.length>0&&this.privacy.push(ue.privacyArray),i(this,Nn)[Nn](),this.pageChanged();const a=setInterval((()=>{i(this,In)[In].gcookie&&(clearInterval(a),i(this,Tn)[Tn].processBackupEvents())}),3e3);i(this,Rn)[Rn]?document.addEventListener("click",i(this,Dn)[Dn]):document.removeEventListener("click",i(this,Dn)[Dn]),i(this,An)[An]=1}pageChanged(){const e=window.location.href,t=Ke(e.toLowerCase()),n=i(this,On)[On].getSessionCookieObject();let o=void 0===n.p?0:n.p;n.p=++o,i(this,On)[On].setSessionCookieObject(n);let r={},s=(e=>{if(""===e)return"";var t=document.createElement("a");return t.href=e,t.hostname})(document.referrer);if(window.location.hostname!==s){const e=120;""!==s&&(s=s.length>e?s.substring(0,e):s,r.referrer=s);let i=t.utm_source||t.wzrk_source;void 0!==i&&(i=i.length>e?i.substring(0,e):i,r.us=i);let n=t.utm_medium||t.wzrk_medium;void 0!==n&&(n=n.length>e?n.substring(0,e):n,r.um=n);let o=t.utm_campaign||t.wzrk_campaign;if(void 0!==o&&(o=o.length>e?o.substring(0,e):o,r.uc=o),void 0!==t.wzrk_medium){const e=t.wzrk_medium;e.match(/^email$|^social$|^search$/)&&(r.wm=e)}}r=i(this,Tn)[Tn].addSystemDataToObject(r,void 0),r.cpg=e,r[y]=rt();let a=i(this,Pn)[Pn].dataPostURL;i(this,Tn)[Tn].addFlags(r),1===parseInt(r.pg)&&i(this,qn)[qn](r),a=We(a,"type","page"),a=We(a,"d",Ye(JSON.stringify(r),i(this,kn)[kn])),i(this,Tn)[Tn].saveAndFireRequest(a,ue.blockRequest),1===parseInt(r.pg)&&this.event.push(Y,{t:4}),i(this,Mn)[Mn]=e,setTimeout((()=>{o<=3&&i(this,Fn)[Fn](),i(this,Vn)[Vn]()&&setInterval((()=>{i(this,Fn)[Fn]()}),3e5)}),12e4)}_isPersonalisationActive(){return de._isLocalStorageSupported()&&this.enablePersonalization}set popupCallback(e){this.popupCallbacks[this.popupCurrentWzrkId]=e}setOffline(e){"boolean"==typeof e?(ue.offline=e,e||i(this,Tn)[Tn].processBackupEvents()):console.error("setOffline should be called with a value of type boolean")}getSDKVersion(){return"web-sdk-v1.9.2"}defineVariable(e,t){return dn.define(e,t,i(this,xn)[xn])}syncVariables(e,t){if(4===i(this,kn)[kn].logLevel)return i(this,xn)[xn].syncVariables(e,t);{const e="App log level is not set to 4";return i(this,kn)[kn].error(e),Promise.reject(new Error(e))}}fetchVariables(e){i(this,xn)[xn].fetchVariables(e)}addVariablesChangedCallback(e){i(this,xn)[xn].addVariablesChangedCallback(e)}addOneTimeVariablesChangedCallback(e){i(this,xn)[xn].addOneTimeVariablesChangedCallback(e)}}(window.clevertap);return window.clevertap=window.wizrocket=$n,$n}()},307:(e,t,i)=>{e=i.nmd(e);var n="__lodash_hash_undefined__",o=9007199254740991,r="[object Arguments]",s="[object Array]",a="[object Boolean]",l="[object Date]",c="[object Error]",d="[object Function]",u="[object Map]",h="[object Number]",p="[object Object]",g="[object Promise]",f="[object RegExp]",v="[object Set]",b="[object String]",m="[object WeakMap]",y="[object ArrayBuffer]",w="[object DataView]",S=/^\[object .+?Constructor\]$/,_=/^(?:0|[1-9]\d*)$/,C={};C["[object Float32Array]"]=C["[object Float64Array]"]=C["[object Int8Array]"]=C["[object Int16Array]"]=C["[object Int32Array]"]=C["[object Uint8Array]"]=C["[object Uint8ClampedArray]"]=C["[object Uint16Array]"]=C["[object Uint32Array]"]=!0,C[r]=C[s]=C[y]=C[a]=C[w]=C[l]=C[c]=C[d]=C[u]=C[h]=C[p]=C[f]=C[v]=C[b]=C[m]=!1;var k="object"==typeof i.g&&i.g&&i.g.Object===Object&&i.g,E="object"==typeof self&&self&&self.Object===Object&&self,A=k||E||Function("return this")(),I=t&&!t.nodeType&&t,O=I&&e&&!e.nodeType&&e,P=O&&O.exports===I,T=P&&k.process,x=function(){try{return T&&T.binding&&T.binding("util")}catch(e){}}(),R=x&&x.isTypedArray;function M(e,t){for(var i=-1,n=null==e?0:e.length;++i<n;)if(t(e[i],i,e))return!0;return!1}function D(e){var t=-1,i=Array(e.size);return e.forEach((function(e,n){i[++t]=[n,e]})),i}function L(e){var t=-1,i=Array(e.size);return e.forEach((function(e){i[++t]=e})),i}var N,U,j,F=Array.prototype,V=Function.prototype,q=Object.prototype,B=A["__core-js_shared__"],z=V.toString,H=q.hasOwnProperty,K=(N=/[^.]+$/.exec(B&&B.keys&&B.keys.IE_PROTO||""))?"Symbol(src)_1."+N:"",W=q.toString,G=RegExp("^"+z.call(H).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Y=P?A.Buffer:void 0,J=A.Symbol,$=A.Uint8Array,Z=q.propertyIsEnumerable,Q=F.splice,X=J?J.toStringTag:void 0,ee=Object.getOwnPropertySymbols,te=Y?Y.isBuffer:void 0,ie=(U=Object.keys,j=Object,function(e){return U(j(e))}),ne=Oe(A,"DataView"),oe=Oe(A,"Map"),re=Oe(A,"Promise"),se=Oe(A,"Set"),ae=Oe(A,"WeakMap"),le=Oe(Object,"create"),ce=Re(ne),de=Re(oe),ue=Re(re),he=Re(se),pe=Re(ae),ge=J?J.prototype:void 0,fe=ge?ge.valueOf:void 0;function ve(e){var t=-1,i=null==e?0:e.length;for(this.clear();++t<i;){var n=e[t];this.set(n[0],n[1])}}function be(e){var t=-1,i=null==e?0:e.length;for(this.clear();++t<i;){var n=e[t];this.set(n[0],n[1])}}function me(e){var t=-1,i=null==e?0:e.length;for(this.clear();++t<i;){var n=e[t];this.set(n[0],n[1])}}function ye(e){var t=-1,i=null==e?0:e.length;for(this.__data__=new me;++t<i;)this.add(e[t])}function we(e){var t=this.__data__=new be(e);this.size=t.size}function Se(e,t){for(var i=e.length;i--;)if(Me(e[i][0],t))return i;return-1}function _e(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":X&&X in Object(e)?function(e){var t=H.call(e,X),i=e[X];try{e[X]=void 0;var n=!0}catch(e){}var o=W.call(e);return n&&(t?e[X]=i:delete e[X]),o}(e):function(e){return W.call(e)}(e)}function Ce(e){return Ve(e)&&_e(e)==r}function ke(e,t,i,n,o){return e===t||(null==e||null==t||!Ve(e)&&!Ve(t)?e!=e&&t!=t:function(e,t,i,n,o,d){var g=Le(e),m=Le(t),S=g?s:Te(e),_=m?s:Te(t),C=(S=S==r?p:S)==p,k=(_=_==r?p:_)==p,E=S==_;if(E&&Ne(e)){if(!Ne(t))return!1;g=!0,C=!1}if(E&&!C)return d||(d=new we),g||qe(e)?Ee(e,t,i,n,o,d):function(e,t,i,n,o,r,s){switch(i){case w:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case y:return!(e.byteLength!=t.byteLength||!r(new $(e),new $(t)));case a:case l:case h:return Me(+e,+t);case c:return e.name==t.name&&e.message==t.message;case f:case b:return e==t+"";case u:var d=D;case v:var p=1&n;if(d||(d=L),e.size!=t.size&&!p)return!1;var g=s.get(e);if(g)return g==t;n|=2,s.set(e,t);var m=Ee(d(e),d(t),n,o,r,s);return s.delete(e),m;case"[object Symbol]":if(fe)return fe.call(e)==fe.call(t)}return!1}(e,t,S,i,n,o,d);if(!(1&i)){var A=C&&H.call(e,"__wrapped__"),I=k&&H.call(t,"__wrapped__");if(A||I){var O=A?e.value():e,P=I?t.value():t;return d||(d=new we),o(O,P,i,n,d)}}return!!E&&(d||(d=new we),function(e,t,i,n,o,r){var s=1&i,a=Ae(e),l=a.length;if(l!=Ae(t).length&&!s)return!1;for(var c=l;c--;){var d=a[c];if(!(s?d in t:H.call(t,d)))return!1}var u=r.get(e);if(u&&r.get(t))return u==t;var h=!0;r.set(e,t),r.set(t,e);for(var p=s;++c<l;){var g=e[d=a[c]],f=t[d];if(n)var v=s?n(f,g,d,t,e,r):n(g,f,d,e,t,r);if(!(void 0===v?g===f||o(g,f,i,n,r):v)){h=!1;break}p||(p="constructor"==d)}if(h&&!p){var b=e.constructor,m=t.constructor;b==m||!("constructor"in e)||!("constructor"in t)||"function"==typeof b&&b instanceof b&&"function"==typeof m&&m instanceof m||(h=!1)}return r.delete(e),r.delete(t),h}(e,t,i,n,o,d))}(e,t,i,n,ke,o))}function Ee(e,t,i,n,o,r){var s=1&i,a=e.length,l=t.length;if(a!=l&&!(s&&l>a))return!1;var c=r.get(e);if(c&&r.get(t))return c==t;var d=-1,u=!0,h=2&i?new ye:void 0;for(r.set(e,t),r.set(t,e);++d<a;){var p=e[d],g=t[d];if(n)var f=s?n(g,p,d,t,e,r):n(p,g,d,e,t,r);if(void 0!==f){if(f)continue;u=!1;break}if(h){if(!M(t,(function(e,t){if(s=t,!h.has(s)&&(p===e||o(p,e,i,n,r)))return h.push(t);var s}))){u=!1;break}}else if(p!==g&&!o(p,g,i,n,r)){u=!1;break}}return r.delete(e),r.delete(t),u}function Ae(e){return function(e,t,i){var n=t(e);return Le(e)?n:function(e,t){for(var i=-1,n=t.length,o=e.length;++i<n;)e[o+i]=t[i];return e}(n,i(e))}(e,Be,Pe)}function Ie(e,t){var i,n,o=e.__data__;return("string"==(n=typeof(i=t))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==i:null===i)?o["string"==typeof t?"string":"hash"]:o.map}function Oe(e,t){var i=function(e,t){return null==e?void 0:e[t]}(e,t);return function(e){return!(!Fe(e)||function(e){return!!K&&K in e}(e))&&(Ue(e)?G:S).test(Re(e))}(i)?i:void 0}ve.prototype.clear=function(){this.__data__=le?le(null):{},this.size=0},ve.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},ve.prototype.get=function(e){var t=this.__data__;if(le){var i=t[e];return i===n?void 0:i}return H.call(t,e)?t[e]:void 0},ve.prototype.has=function(e){var t=this.__data__;return le?void 0!==t[e]:H.call(t,e)},ve.prototype.set=function(e,t){var i=this.__data__;return this.size+=this.has(e)?0:1,i[e]=le&&void 0===t?n:t,this},be.prototype.clear=function(){this.__data__=[],this.size=0},be.prototype.delete=function(e){var t=this.__data__,i=Se(t,e);return!(i<0||(i==t.length-1?t.pop():Q.call(t,i,1),--this.size,0))},be.prototype.get=function(e){var t=this.__data__,i=Se(t,e);return i<0?void 0:t[i][1]},be.prototype.has=function(e){return Se(this.__data__,e)>-1},be.prototype.set=function(e,t){var i=this.__data__,n=Se(i,e);return n<0?(++this.size,i.push([e,t])):i[n][1]=t,this},me.prototype.clear=function(){this.size=0,this.__data__={hash:new ve,map:new(oe||be),string:new ve}},me.prototype.delete=function(e){var t=Ie(this,e).delete(e);return this.size-=t?1:0,t},me.prototype.get=function(e){return Ie(this,e).get(e)},me.prototype.has=function(e){return Ie(this,e).has(e)},me.prototype.set=function(e,t){var i=Ie(this,e),n=i.size;return i.set(e,t),this.size+=i.size==n?0:1,this},ye.prototype.add=ye.prototype.push=function(e){return this.__data__.set(e,n),this},ye.prototype.has=function(e){return this.__data__.has(e)},we.prototype.clear=function(){this.__data__=new be,this.size=0},we.prototype.delete=function(e){var t=this.__data__,i=t.delete(e);return this.size=t.size,i},we.prototype.get=function(e){return this.__data__.get(e)},we.prototype.has=function(e){return this.__data__.has(e)},we.prototype.set=function(e,t){var i=this.__data__;if(i instanceof be){var n=i.__data__;if(!oe||n.length<199)return n.push([e,t]),this.size=++i.size,this;i=this.__data__=new me(n)}return i.set(e,t),this.size=i.size,this};var Pe=ee?function(e){return null==e?[]:(e=Object(e),function(t,i){for(var n=-1,o=null==t?0:t.length,r=0,s=[];++n<o;){var a=t[n];l=a,Z.call(e,l)&&(s[r++]=a)}var l;return s}(ee(e)))}:function(){return[]},Te=_e;function xe(e,t){return!!(t=null==t?o:t)&&("number"==typeof e||_.test(e))&&e>-1&&e%1==0&&e<t}function Re(e){if(null!=e){try{return z.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function Me(e,t){return e===t||e!=e&&t!=t}(ne&&Te(new ne(new ArrayBuffer(1)))!=w||oe&&Te(new oe)!=u||re&&Te(re.resolve())!=g||se&&Te(new se)!=v||ae&&Te(new ae)!=m)&&(Te=function(e){var t=_e(e),i=t==p?e.constructor:void 0,n=i?Re(i):"";if(n)switch(n){case ce:return w;case de:return u;case ue:return g;case he:return v;case pe:return m}return t});var De=Ce(function(){return arguments}())?Ce:function(e){return Ve(e)&&H.call(e,"callee")&&!Z.call(e,"callee")},Le=Array.isArray,Ne=te||function(){return!1};function Ue(e){if(!Fe(e))return!1;var t=_e(e);return t==d||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}function je(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=o}function Fe(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Ve(e){return null!=e&&"object"==typeof e}var qe=R?function(e){return function(t){return e(t)}}(R):function(e){return Ve(e)&&je(e.length)&&!!C[_e(e)]};function Be(e){return null!=(t=e)&&je(t.length)&&!Ue(t)?function(e,t){var i=Le(e),n=!i&&De(e),o=!i&&!n&&Ne(e),r=!i&&!n&&!o&&qe(e),s=i||n||o||r,a=s?function(e,t){for(var i=-1,n=Array(e);++i<e;)n[i]=t(i);return n}(e.length,String):[],l=a.length;for(var c in e)!t&&!H.call(e,c)||s&&("length"==c||o&&("offset"==c||"parent"==c)||r&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||xe(c,l))||a.push(c);return a}(e):function(e){if(i=(t=e)&&t.constructor,t!==("function"==typeof i&&i.prototype||q))return ie(e);var t,i,n=[];for(var o in Object(e))H.call(e,o)&&"constructor"!=o&&n.push(o);return n}(e);var t}e.exports=function(e,t){return ke(e,t)}},600:function(e,t,i){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(i(749)),r=function(){function e(){this.argString="",this.argValues={}}return e.prototype.add=function(e,t){if(void 0===t)return this;this.argString&&(this.argString+="&");var i;return i=t instanceof Array?JSON.stringify(t):encodeURIComponent(t),this.argString+="".concat(e,"=").concat(i),this.argValues[e]=t,this},e.prototype.body=function(e){return e?(this._body=e,this):this._body},e.prototype.attachApiKeys=function(e,t){return this.add(o.default.PARAMS.APP_ID,e).add(o.default.PARAMS.CLIENT,o.default.CLIENT).add(o.default.PARAMS.CLIENT_KEY,t)},e.prototype.build=function(){return this.argString},e.prototype.buildDict=function(){return this.argValues},e}();t.default=r},266:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){this.browser=this.searchString(this.getBrowserData(e))||"Unknown Browser",this.version=this.searchVersion(e.navigator.userAgent)||this.searchVersion(e.navigator.appVersion)||"Unknown Version",this.OS=this.searchString(this.getOSData(e))||"Unknown OS"}return e.prototype.searchString=function(e){for(var t=0;t<e.length;t++){var i=e[t].string,n=e[t].prop;if(this.versionSearchString=e[t].versionSearch||e[t].identity,i){if(-1!==i.indexOf(e[t].subString))return e[t].identity}else if(n)return e[t].identity}},e.prototype.searchVersion=function(e){if(e){var t=e.indexOf(this.versionSearchString);if(-1!==t)return parseFloat(e.substring(t+this.versionSearchString.length+1))}},e.prototype.getBrowserData=function(e){return[{string:e.navigator.userAgent,subString:"Chrome",identity:"Chrome"},{string:e.navigator.userAgent,subString:"OmniWeb",identity:"OmniWeb",versionSearch:"OmniWeb/"},{string:e.navigator.userAgent,subString:"CriOS",identity:"Chrome",versionSearch:"CriOS"},{string:e.navigator.userAgent,subString:"FxiOS",identity:"Firefox",versionSearch:"FxiOS"},{string:e.navigator.vendor,subString:"Apple",identity:"Safari",versionSearch:"Version"},{prop:e.opera,identity:"Opera",versionSearch:"Version"},{string:e.navigator.vendor,subString:"iCab",identity:"iCab"},{string:e.navigator.vendor,subString:"KDE",identity:"Konqueror"},{string:e.navigator.userAgent,subString:"Firefox",identity:"Firefox"},{string:e.navigator.vendor,subString:"Camino",identity:"Camino"},{string:e.navigator.userAgent,subString:"Netscape",identity:"Netscape"},{string:e.navigator.userAgent,subString:"MSIE",identity:"Explorer",versionSearch:"MSIE"},{string:e.navigator.userAgent,subString:"Android",identity:"Android Browser",versionSearch:"Version"},{string:e.navigator.userAgent,subString:"Gecko",identity:"Mozilla",versionSearch:"rv"},{string:e.navigator.userAgent,subString:"Mozilla",identity:"Netscape",versionSearch:"Mozilla"}]},e.prototype.getOSData=function(e){return[{string:e.navigator.platform,subString:"Win",identity:"Windows"},{string:e.navigator.platform,subString:"Mac",identity:"Mac OS"},{string:e.navigator.platform,subString:"iPad",identity:"iOS"},{string:e.navigator.userAgent,subString:"iPhone",identity:"iOS"},{string:e.navigator.userAgent,subString:"Android",identity:"Android"},{string:e.navigator.platform,subString:"Linux",identity:"Linux"}]},e}();t.default=i},749:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={METHODS:{START:"start",STOP:"stop",ADVANCE:"advance",TRACK:"track",PAUSE_SESSION:"pauseSession",RESUME_SESSION:"resumeSession",PAUSE_STATE:"pauseState",RESUME_STATE:"resumeState",DOWNLOAD_FILE:"downloadFile",MULTI:"multi",SET_VARS:"setVars",GET_VARS:"getVars",SET_USER_ATTRIBUTES:"setUserAttributes",SET_DEVICE_ATTRIBUTES:"setDeviceAttributes",UPLOAD_FILE:"uploadFile",REGISTER_DEVICE:"registerDevice"},SDK_VERSION:"1.9.1-develop.2",CLIENT:"js",PARAMS:{ACTION:"action",APP_ID:"appId",CLIENT:"client",CLIENT_KEY:"clientKey",CT:"ct",CURRENCY_CODE:"currencyCode",DEVICE_ID:"deviceId",SDK_VERSION:"sdkVersion",USER_ID:"userId",NEW_USER_ID:"newUserId",DEV_MODE:"devMode",VERSION_NAME:"versionName",SYSTEM_NAME:"systemName",SYSTEM_VERSION:"systemVersion",BROWSER_NAME:"browserName",BROWSER_VERSION:"browserVersion",DEVICE_NAME:"deviceName",DEVICE_MODEL:"deviceModel",USER_ATTRIBUTES:"userAttributes",LOCALE:"locale",COUNTRY:"country",REGION:"region",CITY:"city",LOCATION:"location",STATE:"state",INFO:"info",EVENT:"event",VALUE:"value",FILENAME:"filename",TIME:"time",DATA:"data",VARS:"vars",FILE:"file",SIZE:"size",VARIATION:"variation",HASH:"hash",EMAIL:"email",VARIABLES:"vars",ACTION_DEFINITIONS:"actionDefinitions",PARAMS:"params",INCLUDE_DEFAULTS:"includeDefaults",INCLUDE_VARIANT_DEBUG_INFO:"includeVariantDebugInfo",NEWSFEED_MESSAGES:"newsfeedMessages",MESSAGE_ID:"messageId",WEB_PUSH_SUBSCRIPTION:"webPushSubscription"},KEYS:{IS_REGISTERED:"isRegistered",LATEST_VERSION:"latestVersion",SYNC_INBOX:"syncNewsfeed",MESSAGES:"messages",VARS:"vars",VARIANTS:"variants",VARIANT_DEBUG_INFO:"variantDebugInfo",ACTION_DEFINITIONS:"actionDefinitions",TOKEN:"token"},DEFAULT_KEYS:{COUNT:"__leanplum_unsynced",ITEM:"__leanplum_unsynced_",VARIABLES:"__leanplum_variables",VARIANTS:"__leanplum_variants",VARIANT_DEBUG_INFO:"__leanplum_variant_debug_info",ACTION_DEFINITIONS:"__leanplum_action_definitions",HOST_CONFIG:"__leanplum_hosts",INBOX_MESSAGES:"__leanplum_inbox_messages",TOKEN:"__leanplum_token",DEVICE_ID:"__leanplum_device_id",USER_ID:"__leanplum_user_id",SESSION:"__leanplum_session",MESSAGE_OCCURRENCES:"__leanplum_message_occurrences",MESSAGE_CACHE:"__leanplum_message_cache",MIGRATION_STATE:"__leanplum_migration_state",PUSH_SUBSCRIPTION:"__leanplum_push_subscription"},VALUES:{DETECT:"(detect)",DEFAULT_PUSH_ACTION:"Open action"}}},565:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){this.handlers=[]}return e.prototype.on=function(e,t){this.handlers.push({eventName:e,callback:t})},e.prototype.off=function(e,t){this.handlers=this.handlers.filter((function(i){return i.eventName!==e||i.callback!==t}))},e.prototype.emit=function(e,t){this.handlers.forEach((function(i){i.eventName===e&&i.callback(t)}))},e}();t.default=i},157:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){this.startHandlers=[],this.devMode=!1,this.hasStarted=!1,this.startSuccessful=!1,this.variantDebugInfoEnabled=!1}return e.prototype.addStartResponseHandler=function(e){this.startHandlers.push(e),this.hasStarted&&e(this.startSuccessful)},e.prototype.removeStartResponseHandler=function(e){var t=this.startHandlers.indexOf(e);t>=0&&this.startHandlers.splice(t,1)},e.prototype.triggerStartHandlers=function(){for(var e=0;e<this.startHandlers.length;e++)this.startHandlers[e](this.startSuccessful)},e}();t.default=i},876:function(e,t,i){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(i(749)),r=n(i(642)),s=function(){function e(){}return e.setApiPath=function(t){e._lp.setApiPath(t)},e.setEmail=function(){},e.setNetworkTimeout=function(t){e._lp.setNetworkTimeout(t)},e.setAppIdForDevelopmentMode=function(t,i){e._lp.setAppIdForDevelopmentMode(t,i)},e.setAppIdForProductionMode=function(t,i){e._lp.setAppIdForProductionMode(t,i)},e.setSocketHost=function(t){e._lp.setSocketHost(t)},e.setDeviceId=function(t){e._lp.setDeviceId(t)},e.setLocale=function(t){e._lp.setLocale(t)},e.setAppVersion=function(t){e._lp.setAppVersion(t)},e.setDeviceName=function(t){e._lp.setDeviceName(t)},e.setDeviceModel=function(t){e._lp.setDeviceModel(t)},e.setRequestBatching=function(t,i){e._lp.setRequestBatching(t,i)},e.setSystemName=function(t){e._lp.setSystemName(t)},e.setSystemVersion=function(t){e._lp.setSystemVersion(t)},e.setVariables=function(t){e._lp.setVariables(t)},e.setVariantDebugInfoEnabled=function(t){e._lp.setVariantDebugInfoEnabled(t)},e.enableRichInAppMessages=function(t){e._lp.enableRichInAppMessages(t)},e.processMessageEvent=function(t,i){e._lp.processMessageEvent(t,i)},e.getVariantDebugInfo=function(){return e._lp.getVariantDebugInfo()},e.getVariables=function(){return e._lp.getVariables()},e.getVariable=function(){for(var t,i=[],n=0;n<arguments.length;n++)i[n]=arguments[n];return(t=e._lp).getVariable.apply(t,i)},e.getVariants=function(){return e._lp.getVariants()},e.inbox=function(){return e._lp.inbox()},e.addStartResponseHandler=function(t){e._lp.addStartResponseHandler(t)},e.removeStartResponseHandler=function(t){e._lp.removeStartResponseHandler(t)},e.addVariablesChangedHandler=function(t){e._lp.addVariablesChangedHandler(t)},e.removeVariablesChangedHandler=function(t){e._lp.removeVariablesChangedHandler(t)},e.forceContentUpdate=function(t){e._lp.forceContentUpdate(t)},e.useSessionLength=function(t){e._lp.useSessionLength(t)},e.start=function(t,i,n){e._lp.start(t,i,n)},e.startFromCache=function(t,i,n){e._lp.startFromCache(t,i,n)},e.stop=function(){e._lp.stop()},e.pauseSession=function(){e._lp.pauseSession()},e.resumeSession=function(){e._lp.resumeSession()},e.pauseState=function(){e._lp.pauseState()},e.resumeState=function(){e._lp.resumeState()},e.getUserId=function(){return this._lp.getUserId()},e.setUserId=function(t){e.setUserAttributes(t)},e.setUserAttributes=function(t,i){e._lp.setUserAttributes(t,i)},e.track=function(t,i,n,o){e._lp.track(t,i,n,o)},e.trackPurchase=function(t,i,n,o){void 0===o&&(o="Purchase"),e._lp.trackPurchase(t,i,n,o)},e.advanceTo=function(t,i,n){e._lp.advanceTo(t,i,n)},e.isWebPushSupported=function(){return e._lp.isWebPushSupported()},e.isWebPushSubscribed=function(){return e._lp.isWebPushSubscribed()},e.setWebPushOptions=function(t){return e._lp.setWebPushOptions(t)},e.registerForWebPush=function(t){return e._lp.registerForWebPush(t)},e.unregisterFromWebPush=function(){return e._lp.unregisterFromWebPush()},e.clearUserContent=function(){e._lp.clearUserContent()},e.defineAction=function(t){e._lp.defineAction(t)},e.applyQueue=function(t){e._lp.applyQueue(t)},e.on=function(t,i){e._lp.on(t,i)},e.off=function(t,i){e._lp.off(t,i)},e.getFileUrl=function(t){return e._lp.getFileUrl(t)},e.__destroy=function(){this._lp=new r.default(window)},e._lp=new r.default(window),e.VERSION=o.default.SDK_VERSION,e}();t.default=s},234:function(e,t,i){"use strict";var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,i=1,n=arguments.length;i<n;i++)for(var o in t=arguments[i])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},n.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.LeanplumInboxMessage=void 0;var r=o(i(600)),s=o(i(749)),a=o(i(88)),l=function(e){return Object.keys(e).map((function(t){return e[t]}))},c=function(){function e(e,t){this.createRequest=e,this.onAction=t,this.messageMap={},this.changeHandlers=[],this.load()}return e.prototype.downloadMessages=function(){var e=this;this.createRequest("getNewsfeedMessages",void 0,{queued:!0,sendNow:!0,response:function(t){var i=null==t?void 0:t.response[0];i&&i.newsfeedMessages&&(e.messageMap=i.newsfeedMessages,e.triggerChangeHandlers())}})},e.prototype.markAsRead=function(e){var t=this.messageMap[e];if(t&&!t.isRead){t.isRead=!0,this.triggerChangeHandlers();var i=new r.default;i.add("newsfeedMessageId",e),this.createRequest("markNewsfeedMessageAsRead",i,{})}},e.prototype.read=function(e){this.markAsRead(e);var t=this.message(e),i=e.split("##")[0],n=(null==t?void 0:t.openAction())||null;this.onAction(i,n)},e.prototype.remove=function(e){if(this.messageMap[e]){delete this.messageMap[e],this.triggerChangeHandlers();var t=new r.default;t.add("newsfeedMessageId",e),this.createRequest("deleteNewsfeedMessage",t,{})}},e.prototype.onChanged=function(e){var t=this;return this.changeHandlers.push(e),function(){return t.changeHandlers=t.changeHandlers.filter((function(t){return t!==e}))}},e.prototype.triggerChangeHandlers=function(){this.changeHandlers.forEach((function(e){return e()})),this.save()},e.prototype.save=function(){a.default.save(s.default.DEFAULT_KEYS.INBOX_MESSAGES,JSON.stringify(this.messageMap),"session")},e.prototype.load=function(){var e=a.default.get(s.default.DEFAULT_KEYS.INBOX_MESSAGES,"session");try{this.messageMap=JSON.parse(e)||{}}catch(e){this.messageMap={}}},e.prototype.count=function(){return l(this.messageMap).length},e.prototype.unreadCount=function(){return l(this.messageMap).filter((function(e){return!e.isRead})).length},e.prototype.messages=function(e){var t=[];for(var i in this.messageMap){var n=this.messageMap[i];e(n)&&t.push(d.create(i,n))}return t},e.prototype.allMessages=function(){return this.messages((function(){return!0}))},e.prototype.unreadMessages=function(){return this.messages((function(e){return!e.isRead}))},e.prototype.messageIds=function(){return Object.keys(this.messageMap)},e.prototype.message=function(e){var t=this.messageMap[e];return t?d.create(e,t):null},e}();t.default=c;var d=function(){function e(e,t,i,n,o,r,s,a){this._id=e,this._title=t,this._subtitle=i,this._data=n,this._timestamp=o,this._isRead=r,this._imageUrl=s,this._openAction=a}return e.create=function(t,i){var o,r,a,l,c,d,u,h,p,g,f,v=null===(o=i.messageData)||void 0===o?void 0:o.parentCampaignId,b=n(n({},null===(a=null===(r=i.messageData)||void 0===r?void 0:r.vars)||void 0===a?void 0:a[s.default.VALUES.DEFAULT_PUSH_ACTION]),{parentCampaignId:v});return new e(t,null===(c=null===(l=i.messageData)||void 0===l?void 0:l.vars)||void 0===c?void 0:c.Title,null===(u=null===(d=i.messageData)||void 0===d?void 0:d.vars)||void 0===u?void 0:u.Subtitle,null===(p=null===(h=i.messageData)||void 0===h?void 0:h.vars)||void 0===p?void 0:p.Data,i.deliveryTimestamp,i.isRead,null===(f=null===(g=i.messageData)||void 0===g?void 0:g.vars)||void 0===f?void 0:f.Image,b)},e.prototype.id=function(){return this._id},e.prototype.title=function(){return this._title},e.prototype.subtitle=function(){return this._subtitle},e.prototype.data=function(){return this._data},e.prototype.timestamp=function(){return this._timestamp},e.prototype.isRead=function(){return this._isRead},e.prototype.imageUrl=function(){return this._imageUrl},e.prototype.openAction=function(){return this._openAction},e}();t.LeanplumInboxMessage=d},642:function(e,t,i){"use strict";var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,i=1,n=arguments.length;i<n;i++)for(var o in t=arguments[i])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},n.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=o(i(600)),s=o(i(266)),a=o(i(749)),l=o(i(157)),c=o(i(234)),d=o(i(343)),u=o(i(34)),h=o(i(88)),p=o(i(95)),g=o(i(14)),f=o(i(565)),v=o(i(316)),b=i(772),m=i(205),y=o(i(816)),w=a.default.DEFAULT_KEYS.SESSION,S=function(){function e(e){var t=this;this.wnd=e,this._migration=new v.default(this.createRequest.bind(this)),this._events=new f.default,this._internalState=new l.default,this._lpInbox=new c.default(this.createRequest.bind(this),this.onInboxAction.bind(this)),this._lpRequest=new d.default(this._events),this._varCache=new y.default(this.createRequest.bind(this)),this._lpSocket=new u.default(this._varCache,this.createRequest.bind(this),this._lpRequest.getLastResponse.bind(this._lpRequest),this._events),this._pushManager=new p.default(this.createRequest.bind(this)),this._messages=new g.default(this._events,this.createRequest.bind(this),this.getFileUrl.bind(this)),this._browserDetector=new s.default(e),this._events.on("navigationChange",(function(e){var i=!1;t._events.emit("openUrl",{preventDefault:function(){return i=!0},url:e}),i||t.wnd.location.assign(e)})),this._events.on("registerForPush",(function(){return t.registerForWebPush()})),this._events.on("updateDevServerHost",(function(e){return t.setSocketHost(e)})),this._events.on("migrateStateReceived",(function(e){return t._migration.verifyState(e)}))}return e.prototype.setApiPath=function(e){this._lpRequest.apiPath&&(this._lpRequest.apiPath=e)},e.prototype.setNetworkTimeout=function(e){this._lpRequest.setNetworkTimeout(e),this._lpSocket.setNetworkTimeout(e)},e.prototype.setAppIdForDevelopmentMode=function(e,t){this._lpRequest.appId=e,this._lpRequest.clientKey=t,this._internalState.devMode=!0},e.prototype.setAppIdForProductionMode=function(e,t){this._lpRequest.appId=e,this._lpRequest.clientKey=t,this._internalState.devMode=!1},e.prototype.setSocketHost=function(e){this._lpSocket.setSocketHost(e)},e.prototype.setDeviceId=function(e){this._lpRequest.deviceId=e},e.prototype.setLocale=function(e){this._locale=e},e.prototype.setAppVersion=function(e){this._lpRequest.versionName=e},e.prototype.setDeviceName=function(e){this._deviceName=e},e.prototype.setDeviceModel=function(e){this._deviceModel=e},e.prototype.setRequestBatching=function(e,t){this._lpRequest.batchEnabled=e,this._lpRequest.batchCooldown=t},e.prototype.setSystemName=function(e){this._systemName=e},e.prototype.setSystemVersion=function(e){this._systemVersion=e},e.prototype.setVariables=function(e){this._varCache.setVariables(e)},e.prototype.setVariantDebugInfoEnabled=function(e){this._internalState.variantDebugInfoEnabled=e},e.prototype.enableRichInAppMessages=function(e){this._messages.enableRichInAppMessages(e)},e.prototype.processMessageEvent=function(e,t){this._messages.processMessageEvent(e,t)},e.prototype.getVariantDebugInfo=function(){return this._varCache.getVariantDebugInfo()},e.prototype.getVariables=function(){return this._varCache.getVariables()},e.prototype.getVariable=function(){for(var e,t=[],i=0;i<arguments.length;i++)t[i]=arguments[i];return(e=this._varCache).getVariable.apply(e,t)},e.prototype.getVariants=function(){return this._varCache.variants||[]},e.prototype.inbox=function(){return this._lpInbox},e.prototype.on=function(e,t){this._events.on(e,t)},e.prototype.off=function(e,t){this._events.off(e,t)},e.prototype.onInboxAction=function(e,t){var i=this;this._messages.trackMessage(e,{event:"Open"},(function(){return t&&i._messages.onAction(t)}))},e.prototype.defineAction=function(e){this._varCache.registerActionDefinition(n({kind:b.MessageKind.Template},e))},e.prototype.addStartResponseHandler=function(e){this._internalState.addStartResponseHandler(e)},e.prototype.removeStartResponseHandler=function(e){this._internalState.removeStartResponseHandler(e)},e.prototype.addVariablesChangedHandler=function(e){this._varCache.addVariablesChangedHandler(e)},e.prototype.removeVariablesChangedHandler=function(e){this._varCache.removeVariablesChangedHandler(e)},e.prototype.getFileUrl=function(e){return this._lpRequest.getFileUrl(e)},e.prototype.forceContentUpdate=function(e){var t=this,i=(new r.default).add(a.default.PARAMS.INCLUDE_DEFAULTS,!1).add(a.default.PARAMS.INCLUDE_VARIANT_DEBUG_INFO,this._internalState.variantDebugInfoEnabled);this.createRequest(a.default.METHODS.GET_VARS,i,{queued:!1,sendNow:!0,response:function(i){var n=t._lpRequest.getLastResponse(i),o=t._lpRequest.isResponseSuccess(n);o&&(t._varCache.applyDiffs(n[a.default.KEYS.VARS],n[a.default.KEYS.VARIANTS],n[a.default.KEYS.ACTION_DEFINITIONS]),t._varCache.setVariantDebugInfo(n[a.default.KEYS.VARIANT_DEBUG_INFO]),t._events.emit("messagesReceived",n[a.default.KEYS.MESSAGES])),e&&e(o)}})},e.prototype.useSessionLength=function(e){this._sessionLength=e},e.prototype.start=function(e,t,i){var n=this;if("function"==typeof e?(i=e,t={},e=null):"object"==typeof e&&null!=e?(i=t,t=e,e=null):"function"==typeof t&&(i=t,t={}),this.hasActiveSession()&&!this._internalState.devMode)return this.startFromCache(e,t,i);this._migration.getState((function(o){o===m.MigrationState.DUPLICATE?n._ct=n._migration.initCleverTap():o===m.MigrationState.CLEVERTAP&&(n._ct=n._migration.initCleverTap(),n.migratePushToken(),Object.values(a.default.DEFAULT_KEYS).filter((function(e){return![a.default.DEFAULT_KEYS.USER_ID,a.default.DEFAULT_KEYS.DEVICE_ID,a.default.DEFAULT_KEYS.TOKEN,a.default.DEFAULT_KEYS.MIGRATION_STATE].includes(e)})).forEach((function(e){return h.default.remove(e)})),n._messages.cleanup()),n._lpRequest.userId=e,e&&n._migration.identity.setUserId(e),i&&n.addStartResponseHandler(i),n._varCache.onUpdate=function(){n._varCache.triggerVariablesChangedHandlers()};var s=(new r.default).add(a.default.PARAMS.USER_ATTRIBUTES,JSON.stringify(t)).add(a.default.PARAMS.COUNTRY,a.default.VALUES.DETECT).add(a.default.PARAMS.REGION,a.default.VALUES.DETECT).add(a.default.PARAMS.CITY,a.default.VALUES.DETECT).add(a.default.PARAMS.LOCATION,a.default.VALUES.DETECT).add(a.default.PARAMS.SYSTEM_NAME,n._systemName||n._browserDetector.OS).add(a.default.PARAMS.SYSTEM_VERSION,(n._systemVersion||"").toString()).add(a.default.PARAMS.BROWSER_NAME,n._browserDetector.browser).add(a.default.PARAMS.BROWSER_VERSION,n._browserDetector.version.toString()).add(a.default.PARAMS.LOCALE,n._locale||a.default.VALUES.DETECT).add(a.default.PARAMS.DEVICE_NAME,n._deviceName||"".concat(n._browserDetector.browser," ").concat(n._browserDetector.version)).add(a.default.PARAMS.DEVICE_MODEL,n._deviceModel||"Web Browser").add(a.default.PARAMS.NEWSFEED_MESSAGES,n._lpInbox.messageIds()).add(a.default.PARAMS.INCLUDE_DEFAULTS,!1).add(a.default.PARAMS.INCLUDE_VARIANT_DEBUG_INFO,n._internalState.variantDebugInfoEnabled);n.createRequest(a.default.METHODS.START,s,{queued:!0,sendNow:!0,response:function(e){n._internalState.hasStarted=!0;var t=n._lpRequest.getLastResponse(e),i=n._lpRequest.isResponseSuccess(t);if(n._internalState.startSuccessful=i,i){n.updateSession();var o=t[a.default.KEYS.MESSAGES];if(t.actionDefinitions&&(o.actionDefinitions=t.actionDefinitions),n._events.emit("messagesReceived",o),t[a.default.KEYS.SYNC_INBOX]&&n._lpInbox.downloadMessages(),n._internalState.devMode){var r=t[a.default.KEYS.LATEST_VERSION];r&&console.log("A newer version of the Leanplum SDK, ".concat(r,', is available.\n  Use "npm update leanplum-sdk" or go to https://docs.leanplum.com/reference#javascript-setup to download it.')),n.connectSocket()}n._varCache.applyDiffs(t[a.default.KEYS.VARS],t[a.default.KEYS.VARIANTS],t[a.default.KEYS.ACTION_DEFINITIONS]),n._varCache.setVariantDebugInfo(t[a.default.KEYS.VARIANT_DEBUG_INFO]),n._varCache.token=t[a.default.KEYS.TOKEN]}else n._varCache.loadDiffs();n._events.emit("start",{success:i}),n._internalState.triggerStartHandlers()}})}))},e.prototype.startFromCache=function(e,t,i){var n=this;"function"==typeof e?(i=e,t={},e=null):"object"==typeof e&&null!=e?(i=t,t=e,e=null):"function"==typeof t&&(i=t,t={}),this.updateSession(),this._lpRequest.userId=e,i&&this.addStartResponseHandler(i),this._internalState.hasStarted=!0,this._internalState.startSuccessful=!0,this._migration.getState((function(e){e!==m.MigrationState.DUPLICATE&&e!==m.MigrationState.CLEVERTAP||(n._ct=n._migration.initCleverTap())})),this._internalState.devMode&&this.connectSocket(),this._varCache.loadDiffs(),this._events.emit("resume"),this._internalState.triggerStartHandlers()},e.prototype.stop=function(){this.createRequest(a.default.METHODS.STOP,void 0,{sendNow:!0,queued:!0,response:function(){h.default.remove(w)}})},e.prototype.pauseSession=function(){this.createRequest(a.default.METHODS.PAUSE_SESSION,void 0,{sendNow:!0,queued:!0})},e.prototype.resumeSession=function(){this._events.emit("resume"),this.createRequest(a.default.METHODS.RESUME_SESSION,void 0,{sendNow:!0,queued:!0})},e.prototype.pauseState=function(){this.createRequest(a.default.METHODS.PAUSE_STATE,void 0,{queued:!0})},e.prototype.resumeState=function(){this.createRequest(a.default.METHODS.RESUME_STATE,void 0,{queued:!0})},e.prototype.getUserId=function(){return this._lpRequest.userId},e.prototype.setUserId=function(e){this.setUserAttributes(e)},e.prototype.setUserAttributes=function(e,t){if(void 0===t)if("object"==typeof e)t=e,e=void 0;else if("string"!=typeof e)return void console.log("Leanplum: setUserAttributes expects a string or an object");var i=(new r.default).add(a.default.PARAMS.USER_ATTRIBUTES,t?JSON.stringify(t):void 0).add(a.default.PARAMS.NEW_USER_ID,e);this._events.emit("setUserAttribute",t),this.createRequest(a.default.METHODS.SET_USER_ATTRIBUTES,i,{queued:!0}),e&&(this._lpRequest.userId=e,h.default.save(a.default.DEFAULT_KEYS.USER_ID,this._lpRequest.userId))},e.prototype.track=function(e,t,i,n){var o=this;"object"==typeof t&&null!=t?(n=t,i=void 0,t=void 0):"string"==typeof t?(n=i,i=t,t=void 0):"object"==typeof i&&null!=i&&(n=i,i=void 0);var s=(new r.default).add(a.default.PARAMS.EVENT,e).add(a.default.PARAMS.VALUE,t||0).add(a.default.PARAMS.INFO,i).add(a.default.PARAMS.PARAMS,JSON.stringify(n));this._events.emit("track",{eventName:e,params:n}),this.createRequest(a.default.METHODS.TRACK,s,{queued:!0,response:function(){return o.updateSession()}})},e.prototype.trackPurchase=function(e,t,i,n){void 0===n&&(n="Purchase");var o=(new r.default).add(a.default.PARAMS.EVENT,n).add(a.default.PARAMS.VALUE,e||0).add(a.default.PARAMS.PARAMS,JSON.stringify(i));t&&o.add(a.default.PARAMS.CURRENCY_CODE,t),this._events.emit("track",{eventName:n}),this.createRequest(a.default.METHODS.TRACK,o,{queued:!0,isPurchase:!0})},e.prototype.advanceTo=function(e,t,i){"object"==typeof t&&null!=t&&(i=t,t=void 0);var n=(new r.default).add(a.default.PARAMS.STATE,e).add(a.default.PARAMS.INFO,t).add(a.default.PARAMS.PARAMS,JSON.stringify(i));this._events.emit("advanceState",{state:e,params:i}),this.createRequest(a.default.METHODS.ADVANCE,n,{queued:!0})},e.prototype.isWebPushSupported=function(){return this._pushManager.isWebPushSupported()},e.prototype.isWebPushSubscribed=function(){var e,t=(null===(e=this._webPushOptions)||void 0===e?void 0:e.clientUrl)||"";return this._pushManager.isWebPushSubscribed(t)},e.prototype.setWebPushOptions=function(e){this._webPushOptions=n({},e)},e.prototype.registerForWebPush=function(e){var t=this;if(this._pushManager.isWebPushSupported()){var i=this._webPushOptions||{},n=e||i.serviceWorkerUrl,o=i&&i.scope?{scope:i.scope}:null;return this._pushManager.register(n,o,(function(e){return e?Promise.resolve(!0):t._pushManager.subscribeUser()}))}return Promise.reject("Leanplum: WebPush is not supported.")},e.prototype.unregisterFromWebPush=function(){var e,t=(null===(e=this._webPushOptions)||void 0===e?void 0:e.clientUrl)||"";return this._pushManager.unsubscribeUser(t)},e.prototype.clearUserContent=function(){this._varCache.clearUserContent()},e.prototype.applyQueue=function(e){var t=this;e.forEach((function(e){return t[e.name].apply(t,e.args)}))},e.prototype.createRequest=function(e,t,i){void 0===i&&(i={}),this._migration.duplicateRequest(e,t,i)||this._lpRequest.request(e,t,n({devMode:this._internalState.devMode},i))},e.prototype.connectSocket=function(){this._lpSocket.connect({appId:this._lpRequest.appId,deviceId:this._lpRequest.deviceId})},e.prototype.hasActiveSession=function(){if(!this._sessionLength)return!1;var e=Date.now(),t=parseInt(h.default.get(w));return!isNaN(t)&&e-t<1e3*this._sessionLength},e.prototype.updateSession=function(){h.default.save(w,String(Date.now()))},e.prototype.migratePushToken=function(){var e=this;h.default.get(a.default.DEFAULT_KEYS.PUSH_SUBSCRIPTION)&&this.isWebPushSubscribed().then((function(t){var i;if(t){e._pushManager.unsubscribeUser();var o=null===(i=e._webPushOptions)||void 0===i?void 0:i.serviceWorkerUrl,r=o?{serviceWorkerPath:o}:{};e._ct&&e._ct.notifications.push(n({titleText:"",bodyText:"",okButtonText:"",rejectButtonText:""},r))}}))},e}();t.default=S},343:function(e,t,i){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(i(600)),r=n(i(749)),s=n(i(88)),a=n(i(967)),l=function(){function e(e,t){void 0===t&&(t=new a.default),this.events=e,this.network=t,this.cooldownTimeout=null,this.lastRequestTime=void 0,this.userIdValue=void 0,this.apiPath="https://api.leanplum.com/api",this.batchCooldown=5,this.batchEnabled=!0,this.loadHostConfig()}return Object.defineProperty(e.prototype,"userId",{get:function(){var e,t;return null!==(t=null!==(e=this.userIdValue)&&void 0!==e?e:this.loadLocal(r.default.DEFAULT_KEYS.USER_ID))&&void 0!==t?t:this.deviceId},set:function(e){this.userIdValue=e},enumerable:!1,configurable:!0}),e.prototype.request=function(e,t,i){var n=this;if(void 0===i&&(i={}),i=i||{},t=t||new o.default,this.deviceId||(this.deviceId=this.loadLocal(r.default.DEFAULT_KEYS.DEVICE_ID)),!this.deviceId){for(var s="",a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",l=0;l<16;l++)s+=a.charAt(Math.floor(Math.random()*a.length));this.deviceId=s,this.saveLocal(r.default.DEFAULT_KEYS.DEVICE_ID,s)}this.saveLocal(r.default.DEFAULT_KEYS.USER_ID,this.userId);var c=t.attachApiKeys(this.appId,this.clientKey).add(r.default.PARAMS.SDK_VERSION,r.default.SDK_VERSION).add(r.default.PARAMS.DEVICE_ID,this.deviceId).add(r.default.PARAMS.USER_ID,this.userId).add(r.default.PARAMS.ACTION,e).add(r.default.PARAMS.VERSION_NAME,this.versionName).add(r.default.PARAMS.DEV_MODE,i.devMode).add(r.default.PARAMS.TIME,((new Date).getTime()/1e3).toString()),d=i.success||i.response,u=i.error||i.response;if(!this.appId||!this.clientKey){var h="Leanplum App ID and client key are not set. Make sure you are calling setAppIdForDevelopmentMode or setAppIdForProductionMode before issuing API calls.";return console.error(h),void(u&&u(h))}if(t.body())this.sendRequest("?".concat(c.build()),t.body(),d,u,i.queued);else{var p=i.devMode||i.sendNow||!this.batchEnabled,g=function(){var e=n.popUnsentRequests();if(e.length>0){var t=JSON.stringify({data:e}),s=(new o.default).attachApiKeys(n.appId,n.clientKey).add(r.default.PARAMS.SDK_VERSION,r.default.SDK_VERSION).add(r.default.PARAMS.ACTION,r.default.METHODS.MULTI).add(r.default.PARAMS.TIME,((new Date).getTime()/1e3).toString().toString()).build();n.sendRequest("?".concat(s),t,d,u,i.queued)}};if(!p&&this.batchCooldown){var f=(new Date).getTime()/1e3;!this.lastRequestTime||f-this.lastRequestTime>=this.batchCooldown?(p=!0,this.lastRequestTime=f):this.cooldownTimeout||(this.cooldownTimeout=setTimeout((function(){n.cooldownTimeout=null,n.lastRequestTime=(new Date).getTime()/1e3,g()}),1e3*(this.batchCooldown-(f-this.lastRequestTime))))}this.saveRequestForLater(c.buildDict()),p&&g()}},e.prototype.getFileUrl=function(e){if(!e)return"";if(/^https?:/.test(e))return e;var t=(new o.default).attachApiKeys(this.appId,this.clientKey).add(r.default.PARAMS.SDK_VERSION,r.default.SDK_VERSION).add(r.default.PARAMS.ACTION,"downloadFile").add("filename",e);return"".concat(this.apiPath,"?").concat(t.build())},e.prototype.setNetworkTimeout=function(e){this.network.setNetworkTimeout(e)},e.prototype.getLastResponse=function(e){var t,i,n,o=null!==(i=null===(t=null==e?void 0:e.response)||void 0===t?void 0:t.length)&&void 0!==i?i:0;return o>0?null===(n=null==e?void 0:e.response)||void 0===n?void 0:n[o-1]:null},e.prototype.getFirstResponse=function(e){var t,i,n;return(null!==(i=null===(t=null==e?void 0:e.response)||void 0===t?void 0:t.length)&&void 0!==i?i:0)>0?null===(n=null==e?void 0:e.response)||void 0===n?void 0:n[0]:null},e.prototype.isResponseSuccess=function(e){return Boolean(null==e?void 0:e.success)},e.prototype.saveRequestForLater=function(e){var t=this.loadLocal(r.default.DEFAULT_KEYS.COUNT)||0,i=r.default.DEFAULT_KEYS.ITEM+t;this.saveLocal(i,JSON.stringify(e)),t++,this.saveLocal(r.default.DEFAULT_KEYS.COUNT,t)},e.prototype.sendRequest=function(e,t,i,n,o){var s=this;this.network.ajax("POST","".concat(this.apiPath).concat(e),t,(function(a){var l,c=s.getFirstResponse(a),d=(null===(l=a.migrateState)||void 0===l?void 0:l.sha256)||c.sha256;if(/\bgetMigrateState\b/.test(t)||s.events.emit("migrateStateReceived",d),!c.success&&c.apiHost){var u=c.apiHost,h=c.apiPath,p=c.devServerHost;s.saveLocal(r.default.DEFAULT_KEYS.HOST_CONFIG,JSON.stringify({apiHost:u,apiPath:h,devServerHost:p})),s.apiPath="https://".concat(u,"/").concat(h),s.sendRequest(e,t,i,n,o),s.events.emit("updateDevServerHost",p)}else i&&i(a)}),n,o)},e.prototype.popUnsentRequests=function(){var e=[],t=this.loadLocal(r.default.DEFAULT_KEYS.COUNT)||0;this.removeLocal(r.default.DEFAULT_KEYS.COUNT);for(var i=0;i<t;i++){var n=r.default.DEFAULT_KEYS.ITEM+i;try{e.push(JSON.parse(this.loadLocal(n)))}catch(e){}this.removeLocal(n)}return e},e.prototype.loadHostConfig=function(){var e=JSON.parse(this.loadLocal(r.default.DEFAULT_KEYS.HOST_CONFIG)||"null");if(e){var t=e.apiHost,i=e.apiPath,n=e.devServerHost;this.apiPath="https://".concat(t,"/").concat(i),this.events.emit("updateDevServerHost",n)}},e.prototype.loadLocal=function(e){return s.default.get(e)},e.prototype.saveLocal=function(e,t){s.default.save(e,t)},e.prototype.removeLocal=function(e){s.default.remove(e)},e}();t.default=l},34:function(e,t,i){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(i(307)),r=n(i(600)),s=n(i(749)),a=n(i(897)),l=function(){function e(e,t,i,n){this.cache=e,this.createRequest=t,this.getLastResponse=i,this.events=n,this.networkTimeoutSeconds=10,this.socketClient=null,this.socketHost="dev.leanplum.com",this.auth=null}return e.prototype.connect=function(e){var t=this;if(WebSocket){this.auth=e;var i=!1;this.socketClient=new a.default,this.socketClient.setNetworkTimeout(this.networkTimeoutSeconds),this.socketClient.onopen=function(){var n;i||(console.log("Leanplum: Connected to development server."),t.socketClient.send("auth",((n={})[s.default.PARAMS.APP_ID]=e.appId,n[s.default.PARAMS.DEVICE_ID]=e.deviceId,n)),i=!0)},this.socketClient.onerror=function(e){console.log("Leanplum: Socket error",e)},this.socketClient.onmessage=this.onMessageReceived.bind(this),this.socketClient.onclose=function(){console.log("Leanplum: Disconnected from development server."),i=!1},this.socketClient.connect(this.socketHost),setInterval((function(){t.socketClient.connected||t.socketClient.connecting||t.socketClient.connect(t.socketHost)}),5e3)}else console.log("Your browser doesn't support WebSockets.")},e.prototype.setSocketHost=function(e){this.socketHost=e,this.socketClient.connected&&(this.socketClient.disconnect(),this.connect(this.auth))},e.prototype.setNetworkTimeout=function(e){var t;this.networkTimeoutSeconds=e,null===(t=this.socketClient)||void 0===t||t.setNetworkTimeout(e)},e.prototype.onMessageReceived=function(e,t){var i=this;if("updateVars"===e){var n=(new r.default).add(s.default.PARAMS.INCLUDE_DEFAULTS,!1);this.createRequest(s.default.METHODS.GET_VARS,n,{queued:!1,sendNow:!0,response:function(e){var t=i.getLastResponse(e),n=t[s.default.KEYS.VARS],r=t[s.default.KEYS.VARIANTS],a=t[s.default.KEYS.ACTION_DEFINITIONS];(0,o.default)(n,i.cache.diffs)||i.cache.applyDiffs(n,r,a)}})}else if("getVariables"===e)this.cache.sendVariables(),this.socketClient.send("getContentResponse",{updated:!0});else if("getActions"===e){var a=this.cache.sendActions();this.socketClient.send("getContentResponse",{updated:a})}else if("registerDevice"===e){var l=t[0];alert("Your device has been registered to ".concat(l.email,"."))}else"trigger"===e&&(l=t[0],this.events.emit("previewRequest",l))},e}();t.default=l},14:function(e,t,i){"use strict";var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,i=1,n=arguments.length;i<n;i++)for(var o in t=arguments[i])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},n.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=o(i(749)),s=o(i(600)),a=o(i(967)),l=o(i(307)),c=o(i(88)),d=o(i(375)),u=function(){function e(){this.session={},this.triggers={},this.occurrences={}}return e.prototype.recordOccurrence=function(e){var t=(this.session[e]||0)+1;this.session[e]=t;var i=this.occurrences[e]||[];i.push(Date.now()),this.occurrences[e]=i,this.save()},e.prototype.recordTriggerOccurrence=function(e){var t=this.triggers[e]||[];return t.push(Date.now()),this.triggers[e]=t,this.save(),t.length},e.prototype.getSessionOccurranceCount=function(e){return this.session[e]||0},e.prototype.getOccurrences=function(e){return this.occurrences[e]||[]},e.prototype.clearSession=function(){this.session={}},e.prototype.load=function(){var e=c.default.get(r.default.DEFAULT_KEYS.MESSAGE_OCCURRENCES);if(e){var t=h(e);t&&(this.session=t.session,this.triggers=t.triggers,this.occurrences=t.occurrences)}},e.prototype.save=function(){var e=r.default.DEFAULT_KEYS.MESSAGE_OCCURRENCES;c.default.save(e,JSON.stringify({session:this.session,triggers:this.triggers,occurrences:this.occurrences}))},e}(),h=function(e){try{return JSON.parse(e)}catch(e){return}},p=function(){function e(e,t,i){var n=this;this.events=e,this.createRequest=t,this.getFileUrl=i,this._messageCache={},this.occurrenceTracker=new u,this._showRichIAM=!1,e.on("previewRequest",this.onMessagePreview.bind(this)),e.on("messagesReceived",this.onMessagesReceived.bind(this)),e.on("start",(function(){n.occurrenceTracker.load(),n.occurrenceTracker.clearSession(),n.onTrigger({trigger:"start"})})),e.on("resume",(function(){var e=r.default.DEFAULT_KEYS.MESSAGE_CACHE,t=h(c.default.get(e));n._messageCache=t||n._messageCache,n.occurrenceTracker.load(),n.onTrigger({trigger:"resume"})})),e.on("track",(function(e){n.onTrigger({trigger:"event",eventName:e.eventName,params:e.params||{}})})),e.on("advanceState",(function(e){return n.onTrigger({trigger:"state",state:e.state,params:e.params||{}})})),e.on("setUserAttribute",(function(e){return n.onTrigger({trigger:"userAttribute",attributes:e})}))}return e.prototype.cleanup=function(){c.default.remove(r.default.DEFAULT_KEYS.MESSAGE_CACHE),this._messageCache={},this.onTrigger=function(){}},e.prototype.enableRichInAppMessages=function(e){this._showRichIAM=e},e.prototype.onTrigger=function(e){var t=this,i=this.getMessages();Object.keys(i).filter((function(n){return t.shouldShowMessage(n,i[n],e)})).slice(0,1).forEach((function(e){return t.showMessage(e,i[e])}))},e.prototype.onMessagePreview=function(e){var t=e.action,i={track:function(t){var i=t?"event '".concat(t,"'"):"impression";console.log("Tracking ".concat(i," for ").concat(e.messageId))},runActionNamed:function(e){return console.log("Running untracked action '".concat(e,"'"))},runTrackedActionNamed:function(e){return console.log("Running tracked action '".concat(e,"'"))}};this.handleMessage({isPreview:!0,message:this.addDefaults(n({messageId:e.messageId},t)),context:i})},e.prototype.onMessagesReceived=function(e){var t=e||{};this._messageCache=t,c.default.save(r.default.DEFAULT_KEYS.MESSAGE_CACHE,JSON.stringify(t))},e.prototype.shouldShowMessage=function(e,t,i){var n=Date.now(),o=this.matchesTrigger(t.whenTriggers,i),r=this.matchesTrigger(t.unlessTriggers,i);if(!o||r)return!1;var s=this.occurrenceTracker.recordTriggerOccurrence(e);return!!this.matchesLimits(e,t.whenLimits,s)&&!(t.startTime&&t.endTime&&(n<t.startTime||t.endTime<n))},e.prototype.showMessage=function(e,t){var i=this,o=this.addDefaults(n({},t.vars)),r={track:function(t,n,o,r){i.occurrenceTracker.recordOccurrence(e),i.trackMessage(e,{event:t,value:n,info:o,params:r})},runActionNamed:function(t){return i.onAction(o[t],e)},runTrackedActionNamed:function(t){var n=t.replace(/ action$/,"");i.trackMessage(e,{event:n},(function(){return i.onAction(o[t],e)}))}};this.handleMessage({context:r,message:n({messageId:e},o)})},e.prototype.processMessageEvent=function(e,t){var i=document.getElementById("lp-message-".concat(e));if(i){var n=t.replace(/^http:\/\/leanplum\//,"").split("?"),o=n[0],r=n[1],s=(void 0===r?"":r).split("&").reduce((function(e,t){var i=t.split("="),n=i[0],o=i[1];return e[n]=decodeURIComponent(o),e}),{}),a=i.metadata,l=a.message,c=a.context;switch(o){case"loadFinished":if(i.style.visibility="visible",i.style.left="0",l["HTML Height"]>0){var d=l["HTML Width"];i.style.height="".concat(l["HTML Height"],"px"),i.style.width=d,i.style.left="calc((100% - ".concat(d,") / 2)");var u=l["HTML Align"].toLowerCase(),p="top"===u?"bottom":"top";i.style[u]="0",i.style[p]=""}else i.style.top="0";i.contentWindow.focus(),c.track();break;case"track":c.track(s.event,parseFloat(s.value),s.info,h(s.parameters));break;case"runAction":case"runTrackedAction":c["".concat(o,"Named")](s.action);case"close":i.metadata=null,i.parentNode.removeChild(i)}}else console.log("message closed, skipping event processing")},e.prototype.handleMessage=function(e){var t=this;if(this._showRichIAM&&"HTML"===e.message.__name__){this.resolveFiles(e.message);var i=e.message.Template||"";(new a.default).ajax("get",i.replace("-10.html","-11.html"),"",(function(i){return t.renderRichInAppMessage(i,e)}),(function(){}),!1,!0)}else this.events.emit("showMessage",this.resolveFields(e))},e.prototype.renderRichInAppMessage=function(e,t){var i=t.message.messageId,n=JSON.stringify(t.message),o=document.createElement("iframe");o.setAttribute("id","lp-message-".concat(i)),o.setAttribute("title","Popup"),o.setAttribute("aria-modal","true"),o.style.cssText=["border-width: 0","position: fixed","top: -100%","left: -100%","width: 100%","height: 100%","visibility: hidden","z-index: 100000"].join(";"),document.body.insertBefore(o,document.body.firstChild),o.metadata=t,o.contentWindow.messageId=i;var r=e.replace("##Vars##",n).replace("<body>","<body><script>window.messageId='".concat(i,"'<\/script>"));if("srcdoc"in o)o.srcdoc=r;else{var s=o.contentWindow.document;s.open(),s.write(r),s.close()}},e.prototype.trackMessage=function(e,t,i){void 0===t&&(t={event:null}),void 0===i&&(i=function(){});var n=(new s.default).add(r.default.PARAMS.MESSAGE_ID,e),o=function(e){return void 0!==e};t.event&&n.add(r.default.PARAMS.EVENT,t.event),o(t.value)&&n.add(r.default.PARAMS.VALUE,t.value||0),o(t.info)&&n.add(r.default.PARAMS.INFO,t.info),o(t.params)&&n.add(r.default.PARAMS.PARAMS,JSON.stringify(t.params)),this.createRequest(r.default.METHODS.TRACK,n,{queued:!0,sendNow:!0,response:i})},e.prototype.onAction=function(e,t){var i=this;if(void 0===t&&(t=""),e){var n=this._messageCache;if("Chain to Existing Message"!==e.__name__){var o=function(){var n=e.__name__;"Open URL"===e.__name__?i.events.emit("navigationChange",e.URL):"Register For Push"===e.__name__?i.events.emit("registerForPush"):n&&i.showMessage(t,{messageId:t,action:n,vars:e})},r=this.messageIdFromAction(e);r?this.trackMessage(r,{event:null},o):o()}else{var s=e["Chained message"],a=n[s];"Open URL"===a.action?this.trackMessage(s,{event:"View"},(function(){return i.onAction(a.vars,s)})):"Register For Push"===a.action?this.events.emit("registerForPush"):this.showMessage(s,a)}}},e.prototype.getMessages=function(){return this._messageCache||{}},e.prototype.addDefaults=function(e){var t=this,i=(this.getMessages().actionDefinitions||{})[e.__name__],o=null==i?void 0:i.kinds;if(!i)return e;var r=function(e,i,n){void 0===n&&(n="");for(var s=0,a=Object.keys(i);s<a.length;s++){var l=a[s],c=i[l];"object"==typeof c?e[l]=r(e[l]||{},c,"".concat(n).concat(l,".")):void 0===e[l]&&(e[l]=c),"FILE"===o["".concat(n).concat(l)]&&(e[l]=t.getFileUrl(e[l]))}return e};return r(n({},e),i.values)},e.prototype.resolveFiles=function(e){var t=/^__file__/;for(var i in e)t.test(i)?e[i.replace(t,"")]=this.getFileUrl(e[i]):"object"==typeof e[i]&&(e[i]=this.resolveFiles(e[i]));return e},e.prototype.resolveFields=function(e){var t=/\bcolor/i,i=/^__file__/;for(var n in e)i.test(n)?e[n.replace(i,"")+" URL"]=this.getFileUrl(e[n]):t.test(n)?e[n]=d.default.decodeColor(e[n]):"object"==typeof e[n]&&(e[n]=this.resolveFields(e[n]));return e},e.prototype.messageIdFromAction=function(e){var t=this._messageCache,i=n({},e);delete i.parentCampaignId;for(var o=0,r=Object.keys(t);o<r.length;o++){var s=r[o],a=t[s];if(a.parentCampaignId===e.parentCampaignId&&(0,l.default)(a.vars,i))return s}},e.prototype.matchesTrigger=function(e,t){if(!e)return!1;var i=function(e,t){return void 0===t&&(t=""),0===e.toString().localeCompare(t.toString(),void 0,{sensitivity:"accent"})},n=function(e,t,n){var o=e===n.noun;if("triggers"===n.verb)return o;if("triggersWithParameter"===n.verb){var r=n.objects,s=r[0],a=r[1],l=s in t&&i(a,t[s]);return o&&l}};return e.children.some((function(e){var o=e.subject;switch(t.trigger){case"start":return"start"===o||"resume"===o;case"resume":return"resume"===o;case"event":return"event"===o&&n(t.eventName,t.params,e);case"userAttribute":if("userAttribute"!==o)return!1;var r=e.noun in t.attributes;if("changes"===e.verb)return r;if("changesTo"===e.verb){if(!r)return!1;var s=t.attributes[e.noun];return e.objects.some((function(e){return null===e&&null===s||e&&s&&i(e,s)}))}break;case"state":return"state"===o&&n(t.state,t.params,e)}return!1}))},e.prototype.matchesLimits=function(e,t,i){var n=this;return!t||t.children.every((function(t){var o=t.subject,r=t.verb,s=parseInt(t.noun.toString());if("times"===o){if("limitSession"===r)return n.occurrenceTracker.getSessionOccurranceCount(e)+1===s;if("limitUser"===r)return(a=n.occurrenceTracker.getOccurrences(e).length)+1<=s;var a,l=parseInt(t.objects[0].toString())||1,c=function(e){switch(e){case"limitSecond":return 1e3;case"limitMinute":return 6e4;case"limitHour":return 36e5;case"limitDay":return 864e5}}(r)*l,d=(a=n.occurrenceTracker.getOccurrences(e)).length;return d<s||a.slice(d-s,d)[0]<Date.now()-c}return"onNthOccurrence"===o?i===s:"everyNthOccurrence"===o&&i%s==0}))},e}();t.default=p},316:function(e,t,i){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.IdentityManager=t.IdentityState=void 0;var o,r=n(i(739)),s=i(205),a=n(i(88)),l=n(i(749)),c=n(i(600)),d=function(){},u=function(e){switch(null==e?void 0:e.sdk){case"lp":return s.MigrationState.LEANPLUM;case"lp+ct":return s.MigrationState.DUPLICATE;case"ct":return s.MigrationState.CLEVERTAP;default:return s.MigrationState.UNKNOWN}},h=function(){function e(e){var t;this.createRequest=e,this.response=null,this._fetching=null;var i=a.default.get(l.default.DEFAULT_KEYS.MIGRATION_STATE),n=a.default.get(l.default.DEFAULT_KEYS.DEVICE_ID),o=null!==(t=a.default.get(l.default.DEFAULT_KEYS.USER_ID))&&void 0!==t?t:n;this.identity=new p(o,n),i&&(this.response=JSON.parse(i))}return e.prototype.getState=function(e){void 0===e&&(e=d);var t=this.response,i=u(this.response);t&&i!==s.MigrationState.UNKNOWN?e(i):this.getMigrationState(e)},e.prototype.verifyState=function(e){var t,i=this;e&&(null===(t=this.response)||void 0===t?void 0:t.sha256)!==e&&this.getMigrationState((function(e){e!==s.MigrationState.DUPLICATE&&e!==s.MigrationState.CLEVERTAP||(i.initCleverTap(),i.identity.isAnonymous||r.default.onUserLogin.push({Site:i.identity.profile}))}))},e.prototype.initCleverTap=function(){var e,t=null===(e=this.response)||void 0===e?void 0:e.ct;if(t)return r.default.init(t.accountId,t.regionCode,"",t.token),r.default},e.prototype.duplicateRequest=function(e,t,i){var n=u(this.response);if(n===s.MigrationState.LEANPLUM)return!1;t||(t=new c.default),n===s.MigrationState.DUPLICATE&&t.add(l.default.PARAMS.CT,!0);var o=(null==t?void 0:t.buildDict())||{},a=o[l.default.PARAMS.USER_ID];switch(a&&this.identity.setUserId(a),e){case l.default.METHODS.START:this.identity.isAnonymous||r.default.onUserLogin.push({Site:this.identity.profile});break;case l.default.METHODS.TRACK:this.eventPush(o,i);break;case l.default.METHODS.ADVANCE:o.event="state_".concat(o.state),this.eventPush(o,i);break;case l.default.METHODS.SET_USER_ATTRIBUTES:this.profilePush(o)}return n===s.MigrationState.CLEVERTAP},e.prototype.profilePush=function(e){var t=e[l.default.PARAMS.NEW_USER_ID],i=this.mapAttributes(this.convertArrays(JSON.parse(e.userAttributes||"{}")));t?(this.identity.setUserId(t),Object.assign(i,this.identity.profile),r.default.onUserLogin.push({Site:i})):r.default.profile.push({Site:i})},e.prototype.eventPush=function(e,t){var i=e[l.default.PARAMS.MESSAGE_ID],n=t.isPurchase?"Charged":e.event;if(n&&!i){var o={};if(e.params){var s=this.convertArrays(JSON.parse(e.params));Object.assign(o,s)}e.value&&Object.assign(o,{value:e.value}),e.info&&Object.assign(o,{info:e.info}),t.isPurchase&&e.currencyCode&&Object.assign(o,{currencyCode:e.currencyCode}),r.default.event.push(n,o)}},e.prototype.convertArrays=function(e){return Object.keys(e).reduce((function(t,i){if(Array.isArray(e[i])){var n=e[i];t[i]="[".concat(n.join(","),"]")}else t[i]=e[i];return t}),{})},e.prototype.mapAttributes=function(e){var t,i,n=null===(i=null===(t=this.response)||void 0===t?void 0:t.ct)||void 0===i?void 0:i.attributeMappings;return n?Object.keys(e).reduce((function(t,i){return n[i]?t[n[i]]=e[i]:t[i]=e[i],t}),{}):e},e.prototype.getMigrationState=function(e){var t=this;null===this._fetching&&(this._fetching=new Promise((function(e){return t.createRequest("getMigrateState",new c.default,{sendNow:!0,response:function(i){var n,o=null===(n=null==i?void 0:i.response)||void 0===n?void 0:n[0],r=u(o);r&&r!==s.MigrationState.UNKNOWN&&(a.default.save(l.default.DEFAULT_KEYS.MIGRATION_STATE,JSON.stringify(o)),t.response=o),e(r)}})}))),this._fetching.then(e).then((function(){return t._fetching=null}))},e}();t.default=h,function(e){e.ANONYMOUS="anonymous",e.IDENTIFIED="identified"}(o=t.IdentityState||(t.IdentityState={}));var p=function(){function e(e,t){this.userId=e,this.deviceId=t,this.state=o.ANONYMOUS,this.identify()}return e.prototype.setUserId=function(e){this.state===o.ANONYMOUS&&(this.state=o.IDENTIFIED),this.userId=e},e.prototype.identify=function(){this.isAnonymous?this.state=o.ANONYMOUS:this.identifyNonAnonymous()},e.prototype.identifyNonAnonymous=function(){this.state=o.IDENTIFIED},Object.defineProperty(e.prototype,"profile",{get:function(){return{Identity:this.userId}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isAnonymous",{get:function(){return this.userId===this.deviceId},enumerable:!1,configurable:!0}),e}();t.IdentityManager=p},967:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){this.networkTimeoutSeconds=10,this.requestQueue=[],this.runningRequest=!1}return e.prototype.setNetworkTimeout=function(e){this.networkTimeoutSeconds=e},e.prototype.ajax=function(e,t,i,n,o,r,s){var a=this;if(r){if(this.runningRequest)return this.enqueueRequest(arguments);this.runningRequest=!0}if("undefined"!=typeof XDomainRequest)return"http:"===location.protocol&&0===t.indexOf("https:")&&(t="http:".concat(t.substring(6))),this.ajaxIE8(e,t,i,n,o,r,s);var l=!1,c=new XMLHttpRequest;c.onreadystatechange=function(){if(4===c.readyState){if(l)return;var e;l=!0;var t=!1;if(s)e=c.responseText;else try{e=JSON.parse(c.responseText)}catch(e){setTimeout((function(){o&&o(null,c)}),0),t=!0}t||(c.status>=200&&c.status<300?setTimeout((function(){n&&n(e,c)}),0):setTimeout((function(){o&&o(e,c)}),0)),r&&(a.runningRequest=!1,a.dequeueRequest())}};var d=!1;c.onerror=c.ontimeout=function(){0===c.status&&(d=!0,a.requestQueue.splice(0,a.requestQueue.length))},d||(c.open(e,t,!0),c.setRequestHeader("Content-Type","text/plain"),c.send(i),setTimeout((function(){l||c.abort()}),1e3*this.networkTimeoutSeconds))},e.prototype.ajaxIE8=function(e,t,i,n,o,r,s){var a=this,l=new XDomainRequest;l.onload=function(){var e,t=!1;if(s)e=l.responseText;else try{e=JSON.parse(l.responseText)}catch(e){setTimeout((function(){o&&o(null,l)}),0),t=!0}t||setTimeout((function(){n&&n(e,l)}),0),r&&(a.runningRequest=!1,a.dequeueRequest())},l.onerror=l.ontimeout=function(){setTimeout((function(){o&&o(null,l)}),0),r&&(a.runningRequest=!1,a.dequeueRequest())},l.onprogress=function(){},l.open(e,t),l.timeout=1e3*this.networkTimeoutSeconds,l.send(i)},e.prototype.enqueueRequest=function(e){this.requestQueue.push(e)},e.prototype.dequeueRequest=function(){var e=this.requestQueue.shift();e&&this.ajax.apply(this,e)},e}();t.default=i},95:function(e,t,i){"use strict";var n=this&&this.__awaiter||function(e,t,i,n){return new(i||(i=Promise))((function(o,r){function s(e){try{l(n.next(e))}catch(e){r(e)}}function a(e){try{l(n.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,a)}l((n=n.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var i,n,o,r,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(a){return function(l){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;r&&(r=0,a[0]&&(s=0)),s;)try{if(i=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],n=0}finally{i=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var s=r(i(600)),a=r(i(749)),l=r(i(88)),c=function(){function e(e){this.createRequest=e,this.serviceWorkerRegistration=null}return Object.defineProperty(e.prototype,"serviceWorker",{get:function(){return window.navigator.serviceWorker},enumerable:!1,configurable:!0}),e.prototype.isWebPushSupported=function(){return Boolean(void 0!==(null===window||void 0===window?void 0:window.navigator)&&"serviceWorker"in window.navigator&&"PushManager"in window)},e.prototype.isWebPushSubscribed=function(e){return void 0===e&&(e=""),n(this,void 0,Promise,(function(){var t,i,n;return o(this,(function(o){switch(o.label){case 0:return this.isWebPushSupported()?[4,this.getServiceWorkerRegistration(e)]:[2,!1];case 1:return(t=o.sent())?[4,t.pushManager.getSubscription()]:[2,!1];case 2:return i=o.sent(),(n=null!==i)&&this.updateNewSubscriptionOnServer(i),[2,n]}}))}))},e.prototype.register=function(e,t,i){return n(this,void 0,Promise,(function(){var n,r,s,a;return o(this,(function(o){switch(o.label){case 0:if(!this.isWebPushSupported())return console.log("Leanplum: Push messaging is not supported."),[2,i(!1)];o.label=1;case 1:return o.trys.push([1,4,,5]),n=this,[4,this.serviceWorker.register(e||"/sw.min.js",t)];case 2:return n.serviceWorkerRegistration=o.sent(),[4,this.serviceWorkerRegistration.pushManager.getSubscription()];case 3:return r=o.sent(),(s=null!==r)&&this.updateNewSubscriptionOnServer(r),[2,i(s)];case 4:return a=o.sent(),console.log("Leanplum: Service Worker Error: ",a),[2,i(!1)];case 5:return[2]}}))}))},e.prototype.subscribeUser=function(){return n(this,void 0,Promise,(function(){var e,t,i;return o(this,(function(n){switch(n.label){case 0:e=this.urlB64ToUint8Array("BInWPpWntfR39rgXSP04pqdmEdDGa50z6zqbMvxyxJCwzXIuSpSh8C888-CfJ82WELl7Xe8cjAnfCt-3vK0Ci68"),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,this.serviceWorkerRegistration.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:e})];case 2:if(!(t=n.sent()))throw new Error;return this.updateNewSubscriptionOnServer(t),[3,4];case 3:throw i=n.sent(),new Error("Leanplum: Failed to subscribe the user: ".concat(i));case 4:return[2,!0]}}))}))},e.prototype.unsubscribeUser=function(e){return void 0===e&&(e=""),n(this,void 0,Promise,(function(){var t,i;return o(this,(function(n){switch(n.label){case 0:return[4,this.isWebPushSubscribed(e)];case 1:if(!n.sent())return[3,6];n.label=2;case 2:return n.trys.push([2,5,,6]),[4,this.serviceWorkerRegistration.pushManager.getSubscription()];case 3:if(!(t=n.sent()))throw new Error;return[4,t.unsubscribe()];case 4:return n.sent(),[3,6];case 5:throw i=n.sent(),new Error("Leanplum: Error unsubscribing: ".concat(i));case 6:return[2]}}))}))},e.prototype.getServiceWorkerRegistration=function(e){return void 0===e&&(e=""),n(this,void 0,Promise,(function(){var t;return o(this,(function(i){switch(i.label){case 0:return this.serviceWorkerRegistration?[3,2]:(t=this,[4,this.serviceWorker.getRegistration(e)]);case 1:t.serviceWorkerRegistration=i.sent(),i.label=2;case 2:return[2,this.serviceWorkerRegistration]}}))}))},e.prototype.urlB64ToUint8Array=function(e){for(var t=(e+"=".repeat((4-e.length%4)%4)).replace(/-/g,"+").replace(/_/g,"/"),i=this.decodeData(t),n=new Uint8Array(i.length),o=0;o<i.length;++o)n[o]=i.charCodeAt(o);return n},e.prototype.updateNewSubscriptionOnServer=function(e){if(e){var t=this.prepareSubscription(e),i=JSON.stringify(t);l.default.get(a.default.DEFAULT_KEYS.PUSH_SUBSCRIPTION)!==i&&(l.default.save(a.default.DEFAULT_KEYS.PUSH_SUBSCRIPTION,i),this.setSubscription(i))}},e.prototype.prepareSubscription=function(e){var t="getKey"in e?e.getKey("p256dh"):[],i="getKey"in e?e.getKey("auth"):[],n=this.encodeData(String.fromCharCode.apply(null,new Uint8Array(t))),o=this.encodeData(String.fromCharCode.apply(null,new Uint8Array(i)));return{endpoint:e.endpoint,key:n,auth:o}},e.prototype.setSubscription=function(e){if(e){var t=(new s.default).add(a.default.PARAMS.WEB_PUSH_SUBSCRIPTION,e);this.createRequest(a.default.METHODS.SET_DEVICE_ATTRIBUTES,t,{queued:!1,sendNow:!0})}},e.prototype.encodeData=function(e){return window.btoa(e)},e.prototype.decodeData=function(e){return window.atob(e)},e}();t.default=c},897:function(e,t,i){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(i(967)),r=function(){function e(){this.network=new o.default,this.connected=!1,this.connecting=!1,this.connected=!1,this.connecting=!1}return e.prototype.connect=function(e){var t=this;this.connecting=!0,this.network.ajax("POST","https://".concat(e,"/socket.io/1"),"",(function(i){var n=i.split(":"),o=n[0],r=parseInt(n[1])/2*1e3;t.socket=new WebSocket("wss://".concat(e,"/socket.io/1/websocket/").concat(o));var s=null;t.socket.onopen=function(){t.connected=!0,t.connecting=!1,t.onopen&&t.onopen(),s=setInterval((function(){t.socket.send("2:::")}),r)},t.socket.onclose=function(){t.connected=!1,clearInterval(s),t.onclose&&t.onclose()},t.socket.onmessage=function(e){var i=e.data.split(":"),n=parseInt(i[0]);if(2===n)t.socket.send("2::");else if(5===n){var o=i[1],r=JSON.parse(i.slice(3).join(":")),s=r.name,a=r.args;o&&t.socket.send("6:::".concat(o)),t.onmessage&&t.onmessage(s,a)}else 7===n&&console.log("Socket error: ".concat(e.data))},t.socket.onerror=function(e){t.socket.close(),t.onerror&&t.onerror(e)}}),null,!1,!0)},e.prototype.disconnect=function(){this.socket.close(),this.connected=!1,this.connecting=!1},e.prototype.send=function(e,t){if(this.connected){var i=JSON.stringify({name:e,args:t});this.socket.send("5:::".concat(i))}else console.log("Leanplum: Socket is not connected.")},e.prototype.setNetworkTimeout=function(e){this.network.setNetworkTimeout(e)},e}();t.default=r},88:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i={local:!0,session:!0},n={local:{},session:{}},o=function(){function e(){}return e.get=function(e,t){if(void 0===t&&(t="local"),!i[t])return n[t][e];try{return"local"===t?localStorage[e]:sessionStorage.getItem(e)}catch(o){return i[t]=!1,n[t][e]}},e.save=function(e,t,o){if(void 0===o&&(o="local"),i[o])try{"local"===o?localStorage[e]=t:sessionStorage.setItem(e,t)}catch(r){i[o]=!1,n[o][e]=t}else n[o][e]=t},e.remove=function(e,t){if(void 0===t&&(t="local"),i[t])try{"local"===t?localStorage.removeItem(e):sessionStorage.removeItem(e)}catch(o){i[t]=!1,delete n[t][e]}else delete n[t][e]},e}();t.default=o},375:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){}return e.decodeColor=function(e){var t=255&e,i=255&(e>>=8),n=255&(e>>=8),o=(255&(e>>=8))/255;return"rgba(".concat(n,",").concat(i,",").concat(t,",").concat(o,")")},e.encodeColor=function(e){if("number"==typeof e)return e;var t=/^rgba\((\d+),(\d+),(\d+),(\d+(\.\d+)?)\)$/.exec(e);if(t)return(255*parseInt(t[4],10)<<24)+((255&parseInt(t[1],10))<<16)+((255&parseInt(t[2],10))<<8)+(255&parseInt(t[3],10));var i=/^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(e);if(i)return(255<<24)+((255&parseInt(i[1],16))<<16)+((255&parseInt(i[2],16))<<8)+(255&parseInt(i[3],16));throw new Error('Could not parse color "'.concat(e,'"'))},e}();t.default=i},816:function(e,t,i){"use strict";var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,i=1,n=arguments.length;i<n;i++)for(var o in t=arguments[i])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},n.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=o(i(600)),s=o(i(749)),a=o(i(88)),l=o(i(375)),c=function(){function e(e){this.createRequest=e,this.actionDefinitions={},this.hasReceivedDiffs=!1,this.merged=void 0,this.variables=null,this.variablesChangedHandlers=[],this.variantDebugInfo={},this.diffs=void 0,this.token="",this.variants=[]}return e.prototype.applyDiffs=function(e,t,i){var o;this.diffs=e,this.variants=t,this.actionDefinitions=n(n({},this.actionDefinitions),(o=i)?Object.keys(o).reduce((function(e,t){e[t]=n({},o[t]);var i=o[t].kinds;return i&&(e[t].kinds=Object.keys(i).reduce((function(n,o){var r=i[o].toLowerCase();return n[o]=r,"action"===r&&(e[t].values[o]=""),n}),{})),e}),{}):o),this.hasReceivedDiffs=!0,this.merged=h(this.variables,e),this.saveDiffs(),this.onUpdate&&this.onUpdate()},e.prototype.loadDiffs=function(){try{this.applyDiffs(JSON.parse(this.loadLocal(s.default.DEFAULT_KEYS.VARIABLES)||null),JSON.parse(this.loadLocal(s.default.DEFAULT_KEYS.VARIANTS)||null),JSON.parse(this.loadLocal(s.default.DEFAULT_KEYS.ACTION_DEFINITIONS)||null)),this.token=this.loadLocal(s.default.DEFAULT_KEYS.TOKEN),this.variantDebugInfo=this.loadLocal(s.default.DEFAULT_KEYS.VARIANT_DEBUG_INFO)}catch(e){console.log("Leanplum: Invalid diffs: ".concat(e))}},e.prototype.saveDiffs=function(){this.saveLocal(s.default.DEFAULT_KEYS.VARIABLES,JSON.stringify(this.diffs||{})),this.saveLocal(s.default.DEFAULT_KEYS.VARIANTS,JSON.stringify(this.variants||[])),this.saveLocal(s.default.DEFAULT_KEYS.ACTION_DEFINITIONS,JSON.stringify(this.actionDefinitions||{})),this.saveLocal(s.default.DEFAULT_KEYS.VARIANT_DEBUG_INFO,JSON.stringify(this.variantDebugInfo||{})),this.saveLocal(s.default.DEFAULT_KEYS.TOKEN,this.token)},e.prototype.getVariable=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var i=this.getVariables();if(i)for(var n=0;n<e.length;n++)i=i[e[n]];return i},e.prototype.getVariables=function(){return void 0!==this.merged?this.merged:this.variables},e.prototype.setVariables=function(e){this.variables=e},e.prototype.addVariablesChangedHandler=function(e){this.variablesChangedHandlers.push(e),this.hasReceivedDiffs&&e()},e.prototype.removeVariablesChangedHandler=function(e){var t=this.variablesChangedHandlers.indexOf(e);t>=0&&this.variablesChangedHandlers.splice(t,1)},e.prototype.triggerVariablesChangedHandlers=function(){for(var e=0;e<this.variablesChangedHandlers.length;e++)this.variablesChangedHandlers[e]()},e.prototype.getVariantDebugInfo=function(){return this.variantDebugInfo},e.prototype.setVariantDebugInfo=function(e){this.variantDebugInfo=e},e.prototype.sendActions=function(){var e;return!!Object.keys(this.actionDefinitions).length&&(this.setVars(((e={})[s.default.PARAMS.ACTION_DEFINITIONS]=this.actionDefinitions,e)),!0)},e.prototype.sendVariables=function(){var e;this.setVars(((e={})[s.default.PARAMS.VARIABLES]=this.variables,e))},e.prototype.setVars=function(e){var t=(new r.default).body(JSON.stringify(e));this.createRequest(s.default.METHODS.SET_VARS,t,{sendNow:!0})},e.prototype.clearUserContent=function(){this.diffs=void 0,this.variables=null,this.variants=[],this.variantDebugInfo={},this.merged=void 0},e.prototype.registerActionDefinition=function(e){this.actionDefinitions[e.name]=function(e){return{kind:e.kind||3,options:null,values:d(e.args),kinds:u(e.args)}}(e)},e.prototype.loadLocal=function(e){return a.default.get(e)},e.prototype.saveLocal=function(e,t){a.default.save(e,t)},e}();function d(e){return e.reduce((function(e,t){return t.value instanceof Array?e[t.name]=d(t.value):"action"===t.type?e[t.name]="":"color"===t.type?e[t.name]=l.default.encodeColor(t.value):e[t.name]=t.value,e}),{})}function u(e,t){return void 0===t&&(t=""),e.reduce((function(e,i){var o,r="".concat(t).concat(i.name);return i.value instanceof Array?e=n(((o={})[r]="group",o),u(i.value,"".concat(r,"."))):e[r]=i.type.toLowerCase(),e}),{})}function h(e,t){if("number"==typeof t||"boolean"==typeof t||"string"==typeof t)return t;if(null==t)return e;var i=function(e){return function(t){if(e instanceof Array)for(var i=0;i<e.length;i++)t(e[i]);else for(var n in e)({}).hasOwnProperty.call(e,n)&&t(n)}},n=i(e),o=i(t),r=!1;if(null===e&&!(t instanceof Array))for(var s in r=null,t)if(t.hasOwnProperty(s)){if(null===r&&(r=!0),"string"!=typeof s){r=!1;break}if(s.length<3||"["!==s.charAt(0)||"]"!==s.charAt(s.length-1)){r=!1;break}}if(e instanceof Array||r){var a=[];return n((function(e){a.push(e)})),o((function(e){for(var i=parseInt(e.substring(1,e.length-1)),n=t[e];i>=a.length;)a.push(null);a[i]=h(a[i],n)})),a}var l={};return n((function(i){null!==t[i]&&void 0!==t[i]||(l[i]=e[i])})),o((function(i){l[i]=h(null===e?null:e[i]||{},t[i])})),l}t.default=c},804:(e,t,i)=>{var n=i(876);e.exports=n.default},205:(e,t)=>{"use strict";var i;Object.defineProperty(t,"__esModule",{value:!0}),t.MigrationState=void 0,(i=t.MigrationState||(t.MigrationState={})).UNKNOWN="unknown",i.LEANPLUM="lp",i.DUPLICATE="lp+ct",i.CLEVERTAP="ct"},772:(e,t)=>{"use strict";var i,n;Object.defineProperty(t,"__esModule",{value:!0}),t.MessageKind=t.ActionParameterType=void 0,(n=t.ActionParameterType||(t.ActionParameterType={})).Integer="integer",n.Color="color",n.Float="float",n.Decimal="decimal",n.Number="number",n.Boolean="bool",n.String="string",n.Text="text",n.HTML="html",n.File="file",n.List="list",n.Group="group",n.Action="action",n.Unknown="",(i=t.MessageKind||(t.MessageKind={}))[i.Action=2]="Action",i[i.Template=3]="Template"}},t={};function i(n){var o=t[n];if(void 0!==o)return o.exports;var r=t[n]={id:n,loaded:!1,exports:{}};return e[n].call(r.exports,r,r.exports,i),r.loaded=!0,r.exports}return i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),i(804)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RSxHQUM1QyxRQUFxQjN0RSxJQUFqQjR0RSxFQUNILE9BQU9BLEVBQWF2dkUsUUFHckIsSUFBSUMsRUFBU212RSxFQUF5QkUsR0FBWSxDQUNqRGp2RSxHQUFJaXZFLEVBQ0pFLFFBQVEsRUFDUnh2RSxRQUFTLENBQUMsR0FVWCxPQU5BeXZFLEVBQW9CSCxHQUFVeHVFLEtBQUtiLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNxdkUsR0FHM0VwdkUsRUFBT3V2RSxRQUFTLEVBR1R2dkUsRUFBT0QsT0FDZixDLE9DekJBcXZFLEVBQW9CeHNELEVBQUksV0FDdkIsR0FBMEIsaUJBQWY2c0QsV0FBeUIsT0FBT0EsV0FDM0MsSUFDQyxPQUFPMXRFLE1BQVEsSUFBSSs5QyxTQUFTLGNBQWIsRUFHaEIsQ0FGRSxNQUFPNzJDLEdBQ1IsR0FBc0IsaUJBQVhvQixPQUFxQixPQUFPQSxNQUN4QyxDQUNBLENBUHVCLEdDQXhCK2tFLEVBQW9CTSxJQUFPMXZFLElBQzFCQSxFQUFPMnZFLE1BQVEsR0FDVjN2RSxFQUFPOHhCLFdBQVU5eEIsRUFBTzh4QixTQUFXLElBQ2pDOXhCLEdDQWtCb3ZFLEVBQW9CLEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9MZWFucGx1bS93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9ub2RlX21vZHVsZXMvY2xldmVydGFwLXdlYi1zZGsvY2xldmVydGFwLmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC5pc2VxdWFsL2luZGV4LmpzIiwid2VicGFjazovL0xlYW5wbHVtLy4vc3JjL0FyZ3NCdWlsZGVyLnRzIiwid2VicGFjazovL0xlYW5wbHVtLy4vc3JjL0Jyb3dzZXJEZXRlY3Rvci50cyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL3NyYy9Db25zdGFudHMudHMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9zcmMvRXZlbnRFbWl0dGVyLnRzIiwid2VicGFjazovL0xlYW5wbHVtLy4vc3JjL0ludGVybmFsU3RhdGUudHMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9zcmMvTGVhbnBsdW0udHMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9zcmMvTGVhbnBsdW1JbmJveC50cyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL3NyYy9MZWFucGx1bUludGVybmFsLnRzIiwid2VicGFjazovL0xlYW5wbHVtLy4vc3JjL0xlYW5wbHVtUmVxdWVzdC50cyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL3NyYy9MZWFucGx1bVNvY2tldC50cyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL3NyYy9NZXNzYWdlcy50cyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL3NyYy9NaWdyYXRpb25NYW5hZ2VyLnRzIiwid2VicGFjazovL0xlYW5wbHVtLy4vc3JjL05ldHdvcmsudHMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9zcmMvUHVzaE1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9zcmMvU29ja2V0SW9DbGllbnQudHMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9zcmMvU3RvcmFnZU1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9zcmMvVmFsdWVUcmFuc2Zvcm1zLnRzIiwid2VicGFjazovL0xlYW5wbHVtLy4vc3JjL1ZhckNhY2hlLnRzIiwid2VicGFjazovL0xlYW5wbHVtLy4vc3JjL2J1bmRsZXMvbGVhbnBsdW0uZnVsbC50cyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL3NyYy90eXBlcy9pbnRlcm5hbC50cyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL3NyYy90eXBlcy9wdWJsaWMudHMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9MZWFucGx1bS93ZWJwYWNrL3J1bnRpbWUvbm9kZSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovL0xlYW5wbHVtL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJMZWFucGx1bVwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJMZWFucGx1bVwiXSA9IGZhY3RvcnkoKTtcbn0pKHNlbGYsICgpID0+IHtcbnJldHVybiAiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gIChnbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogZ2xvYmFsIHx8IHNlbGYsIGdsb2JhbC5jbGV2ZXJ0YXAgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGlkID0gMDtcblxuICBmdW5jdGlvbiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShuYW1lKSB7XG4gICAgcmV0dXJuIFwiX19wcml2YXRlX1wiICsgaWQrKyArIFwiX1wiICsgbmFtZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZShyZWNlaXZlciwgcHJpdmF0ZUtleSkge1xuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlY2VpdmVyLCBwcml2YXRlS2V5KSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byB1c2UgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlY2VpdmVyO1xuICB9XG5cbiAgY29uc3QgVEFSR0VUX0RPTUFJTiA9ICdjbGV2ZXJ0YXAtcHJvZC5jb20nO1xuICBjb25zdCBUQVJHRVRfUFJPVE9DT0wgPSAnaHR0cHM6JztcbiAgY29uc3QgREVGQVVMVF9SRUdJT04gPSAnZXUxJztcblxuICB2YXIgX2FjY291bnRJZCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiYWNjb3VudElkXCIpO1xuXG4gIHZhciBfcmVnaW9uID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJyZWdpb25cIik7XG5cbiAgdmFyIF90YXJnZXREb21haW4gPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInRhcmdldERvbWFpblwiKTtcblxuICB2YXIgX2RjU2RrdmVyc2lvbiA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiZGNTZGt2ZXJzaW9uXCIpO1xuXG4gIHZhciBfdG9rZW4gPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInRva2VuXCIpO1xuXG4gIGNsYXNzIEFjY291bnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgbGV0IHtcbiAgICAgICAgaWRcbiAgICAgIH0gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgbGV0IHJlZ2lvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyc7XG4gICAgICBsZXQgdGFyZ2V0RG9tYWluID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBUQVJHRVRfRE9NQUlOO1xuICAgICAgbGV0IHRva2VuID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiAnJztcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfYWNjb3VudElkLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfcmVnaW9uLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogJydcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF90YXJnZXREb21haW4sIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiBUQVJHRVRfRE9NQUlOXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfZGNTZGt2ZXJzaW9uLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogJydcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF90b2tlbiwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6ICcnXG4gICAgICB9KTtcbiAgICAgIHRoaXMuaWQgPSBpZDtcblxuICAgICAgaWYgKHJlZ2lvbikge1xuICAgICAgICB0aGlzLnJlZ2lvbiA9IHJlZ2lvbjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRhcmdldERvbWFpbikge1xuICAgICAgICB0aGlzLnRhcmdldERvbWFpbiA9IHRhcmdldERvbWFpbjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgaWQoKSB7XG4gICAgICByZXR1cm4gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9hY2NvdW50SWQpW19hY2NvdW50SWRdO1xuICAgIH1cblxuICAgIHNldCBpZChhY2NvdW50SWQpIHtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWNjb3VudElkKVtfYWNjb3VudElkXSA9IGFjY291bnRJZDtcbiAgICB9XG5cbiAgICBnZXQgcmVnaW9uKCkge1xuICAgICAgcmV0dXJuIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVnaW9uKVtfcmVnaW9uXTtcbiAgICB9XG5cbiAgICBzZXQgcmVnaW9uKHJlZ2lvbikge1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZWdpb24pW19yZWdpb25dID0gcmVnaW9uO1xuICAgIH1cblxuICAgIGdldCBkY1NES1ZlcnNpb24oKSB7XG4gICAgICByZXR1cm4gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9kY1Nka3ZlcnNpb24pW19kY1Nka3ZlcnNpb25dO1xuICAgIH1cblxuICAgIHNldCBkY1NES1ZlcnNpb24oZGNTREtWZXJzaW9uKSB7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2RjU2RrdmVyc2lvbilbX2RjU2RrdmVyc2lvbl0gPSBkY1NES1ZlcnNpb247XG4gICAgfVxuXG4gICAgZ2V0IHRhcmdldERvbWFpbigpIHtcbiAgICAgIHJldHVybiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3RhcmdldERvbWFpbilbX3RhcmdldERvbWFpbl07XG4gICAgfVxuXG4gICAgc2V0IHRhcmdldERvbWFpbih0YXJnZXREb21haW4pIHtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfdGFyZ2V0RG9tYWluKVtfdGFyZ2V0RG9tYWluXSA9IHRhcmdldERvbWFpbjtcbiAgICB9XG5cbiAgICBnZXQgdG9rZW4oKSB7XG4gICAgICByZXR1cm4gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF90b2tlbilbX3Rva2VuXTtcbiAgICB9XG5cbiAgICBzZXQgdG9rZW4odG9rZW4pIHtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfdG9rZW4pW190b2tlbl0gPSB0b2tlbjtcbiAgICB9XG5cbiAgICBnZXQgZmluYWxUYXJnZXREb21haW4oKSB7XG4gICAgICBpZiAodGhpcy5yZWdpb24pIHtcbiAgICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHRoaXMucmVnaW9uLCBcIi5cIikuY29uY2F0KHRoaXMudGFyZ2V0RG9tYWluKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLnRhcmdldERvbWFpbiA9PT0gVEFSR0VUX0RPTUFJTikge1xuICAgICAgICAgIHJldHVybiBcIlwiLmNvbmNhdChERUZBVUxUX1JFR0lPTiwgXCIuXCIpLmNvbmNhdCh0aGlzLnRhcmdldERvbWFpbik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy50YXJnZXREb21haW47XG4gICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IGRhdGFQb3N0UEVVUkwoKSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoVEFSR0VUX1BST1RPQ09MLCBcIi8vXCIpLmNvbmNhdCh0aGlzLmZpbmFsVGFyZ2V0RG9tYWluLCBcIi9kZWZpbmVWYXJzXCIpO1xuICAgIH1cblxuICAgIGdldCBkYXRhUG9zdFVSTCgpIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChUQVJHRVRfUFJPVE9DT0wsIFwiLy9cIikuY29uY2F0KHRoaXMuZmluYWxUYXJnZXREb21haW4sIFwiL2E/dD05NlwiKTtcbiAgICB9XG5cbiAgICBnZXQgcmVjb3JkZXJVUkwoKSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoVEFSR0VUX1BST1RPQ09MLCBcIi8vXCIpLmNvbmNhdCh0aGlzLmZpbmFsVGFyZ2V0RG9tYWluLCBcIi9yP3I9MVwiKTtcbiAgICB9XG5cbiAgICBnZXQgZW1haWxVUkwoKSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoVEFSR0VUX1BST1RPQ09MLCBcIi8vXCIpLmNvbmNhdCh0aGlzLmZpbmFsVGFyZ2V0RG9tYWluLCBcIi9lP3I9MVwiKTtcbiAgICB9XG5cbiAgfVxuXG4gIGNvbnN0IHVuc3VwcG9ydGVkS2V5Q2hhclJlZ2V4ID0gbmV3IFJlZ0V4cCgnXlxcXFxzK3xcXFxcXFwufFxcOnxcXFxcXFwkfFxcJ3xcXFwifFxcXFxcXFxcfFxcXFxzKyQnLCAnZycpO1xuICBjb25zdCB1bnN1cHBvcnRlZFZhbHVlQ2hhclJlZ2V4ID0gbmV3IFJlZ0V4cChcIl5cXFxccyt8XFwnfFxcXCJ8XFxcXFxcXFx8XFxcXHMrJFwiLCAnZycpO1xuICBjb25zdCBzaW5nbGVRdW90ZVJlZ2V4ID0gbmV3IFJlZ0V4cCgnXFwnJywgJ2cnKTtcbiAgY29uc3QgQ0xFQVIgPSAnY2xlYXInO1xuICBjb25zdCBDSEFSR0VEX0lEID0gJ0NoYXJnZWQgSUQnO1xuICBjb25zdCBDSEFSR0VESURfQ09PS0lFX05BTUUgPSAnV1pSS19DSEFSR0VEX0lEJztcbiAgY29uc3QgR0NPT0tJRV9OQU1FID0gJ1daUktfRyc7XG4gIGNvbnN0IEtDT09LSUVfTkFNRSA9ICdXWlJLX0snO1xuICBjb25zdCBDQU1QX0NPT0tJRV9OQU1FID0gJ1daUktfQ0FNUCc7XG4gIGNvbnN0IENBTVBfQ09PS0lFX0cgPSAnV1pSS19DQU1QX0cnOyAvLyBjb29raWUgZm9yIHN0b3JpbmcgY2FtcGFpZ24gZGV0YWlscyBhZ2FpbnN0IGd1aWRcblxuICBjb25zdCBTQ09PS0lFX1BSRUZJWCA9ICdXWlJLX1MnO1xuICBjb25zdCBTQ09PS0lFX0VYUF9USU1FX0lOX1NFQ1MgPSA2MCAqIDIwOyAvLyAyMCBtaW5zXG5cbiAgY29uc3QgRVZfQ09PS0lFID0gJ1daUktfRVYnO1xuICBjb25zdCBNRVRBX0NPT0tJRSA9ICdXWlJLX01FVEEnO1xuICBjb25zdCBQUl9DT09LSUUgPSAnV1pSS19QUic7XG4gIGNvbnN0IEFSUF9DT09LSUUgPSAnV1pSS19BUlAnO1xuICBjb25zdCBMQ09PS0lFX05BTUUgPSAnV1pSS19MJztcbiAgY29uc3QgR0xPQkFMID0gJ2dsb2JhbCc7IC8vIHVzZWQgZm9yIGVtYWlsIHVuc3Vic2NyaWJlIGFsc29cbiAgY29uc3QgRElTUExBWSA9ICdkaXNwbGF5JztcbiAgY29uc3QgV0VCUFVTSF9MU19LRVkgPSAnV1pSS19XUFInO1xuICBjb25zdCBPUFRPVVRfS0VZID0gJ29wdE91dCc7XG4gIGNvbnN0IENUX09QVE9VVF9LRVkgPSAnY3Rfb3B0b3V0JztcbiAgY29uc3QgT1BUT1VUX0NPT0tJRV9FTkRTV0lUSCA9ICc6T08nO1xuICBjb25zdCBVU0VJUF9LRVkgPSAndXNlSVAnO1xuICBjb25zdCBMUlVfQ0FDSEUgPSAnV1pSS19YJztcbiAgY29uc3QgTFJVX0NBQ0hFX1NJWkUgPSAxMDA7XG4gIGNvbnN0IElTX09VTCA9ICdpc09VTCc7XG4gIGNvbnN0IEVWVF9QVVNIID0gJ3B1c2gnO1xuICBjb25zdCBFVlRfUElORyA9ICdwaW5nJztcbiAgY29uc3QgQ09PS0lFX0VYUElSWSA9IDg2NDAwICogMzY1OyAvLyAxIFllYXIgaW4gc2Vjb25kc1xuXG4gIGNvbnN0IE1BWF9UUklFUyA9IDIwMDsgLy8gQVBJIHRyaWVzXG5cbiAgY29uc3QgRklSU1RfUElOR19GUkVRX0lOX01JTExJUyA9IDIgKiA2MCAqIDEwMDA7IC8vIDIgbWluc1xuXG4gIGNvbnN0IENPTlRJTlVPVVNfUElOR19GUkVRX0lOX01JTExJUyA9IDUgKiA2MCAqIDEwMDA7IC8vIDUgbWluc1xuXG4gIGNvbnN0IEdST1VQX1NVQlNDUklQVElPTl9SRVFVRVNUX0lEID0gJzInO1xuICBjb25zdCBjYXRlZ29yeUxvbmdLZXkgPSAnY1VzWSc7XG4gIGNvbnN0IFdaUktfUFJFRklYID0gJ3d6cmtfJztcbiAgY29uc3QgV1pSS19JRCA9ICd3enJrX2lkJztcbiAgY29uc3QgTk9USUZJQ0FUSU9OX1ZJRVdFRCA9ICdOb3RpZmljYXRpb24gVmlld2VkJztcbiAgY29uc3QgTk9USUZJQ0FUSU9OX0NMSUNLRUQgPSAnTm90aWZpY2F0aW9uIENsaWNrZWQnO1xuICBjb25zdCBGSVJFX1BVU0hfVU5SRUdJU1RFUkVEID0gJ1daUktfRlBVJztcbiAgY29uc3QgUFVTSF9TVUJTQ1JJUFRJT05fREFUQSA9ICdXWlJLX1BTRCc7IC8vIFBVU0ggU1VCU0NSSVBUSU9OIERBVEEgRk9SIFJFR0lTVEVSL1VOUkVHSVNURVIgVE9LRU5cblxuICBjb25zdCBDT01NQU5EX0lOQ1JFTUVOVCA9ICckaW5jcic7XG4gIGNvbnN0IENPTU1BTkRfREVDUkVNRU5UID0gJyRkZWNyJztcbiAgY29uc3QgQ09NTUFORF9TRVQgPSAnJHNldCc7XG4gIGNvbnN0IENPTU1BTkRfQUREID0gJyRhZGQnO1xuICBjb25zdCBDT01NQU5EX1JFTU9WRSA9ICckcmVtb3ZlJztcbiAgY29uc3QgQ09NTUFORF9ERUxFVEUgPSAnJGRlbGV0ZSc7XG4gIGNvbnN0IFdFQklOQk9YX0NPTkZJRyA9ICdXWlJLX0lOQk9YX0NPTkZJRyc7XG4gIGNvbnN0IFdFQklOQk9YID0gJ1daUktfSU5CT1gnO1xuICBjb25zdCBNQVhfSU5CT1hfTVNHID0gMTU7XG4gIGNvbnN0IFZBUklBQkxFUyA9ICdXWlJLX1BFJztcbiAgY29uc3QgUFVTSF9ERUxBWV9NUyA9IDEwMDA7XG4gIGNvbnN0IE1BWF9ERUxBWV9GUkVRVUVOQ1kgPSAxMDAwICogNjAgKiAxMDtcbiAgY29uc3QgV1pSS19GRVRDSCA9ICd3enJrX2ZldGNoJztcbiAgY29uc3QgU1lTVEVNX0VWRU5UUyA9IFsnU3RheWVkJywgJ1VUTSBWaXNpdGVkJywgJ0FwcCBMYXVuY2hlZCcsICdOb3RpZmljYXRpb24gU2VudCcsIE5PVElGSUNBVElPTl9WSUVXRUQsIE5PVElGSUNBVElPTl9DTElDS0VEXTtcblxuICBjb25zdCBpc1N0cmluZyA9IGlucHV0ID0+IHtcbiAgICByZXR1cm4gdHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyB8fCBpbnB1dCBpbnN0YW5jZW9mIFN0cmluZztcbiAgfTtcbiAgY29uc3QgaXNPYmplY3QgPSBpbnB1dCA9PiB7XG4gICAgLy8gVE9ETzogcmVmaW5lXG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xuICB9O1xuICBjb25zdCBpc0RhdGVPYmplY3QgPSBpbnB1dCA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcgJiYgaW5wdXQgaW5zdGFuY2VvZiBEYXRlO1xuICB9O1xuICBjb25zdCBpc09iamVjdEVtcHR5ID0gb2JqID0+IHtcbiAgICBmb3IgKGNvbnN0IHByb3AgaW4gb2JqKSB7XG4gICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcbiAgY29uc3QgaXNDb252ZXJ0aWJsZVRvTnVtYmVyID0gbiA9PiB7XG4gICAgcmV0dXJuICFpc05hTihwYXJzZUZsb2F0KG4pKSAmJiBpc0Zpbml0ZShuKTtcbiAgfTtcbiAgY29uc3QgaXNOdW1iZXIgPSBuID0+IHtcbiAgICByZXR1cm4gL14tP1tcXGQuXSsoPzplLT9cXGQrKT8kLy50ZXN0KG4pICYmIHR5cGVvZiBuID09PSAnbnVtYmVyJztcbiAgfTtcbiAgY29uc3QgaXNWYWx1ZVZhbGlkID0gdmFsdWUgPT4ge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuICBjb25zdCByZW1vdmVVbnN1cHBvcnRlZENoYXJzID0gKG8sIGxvZ2dlcikgPT4ge1xuICAgIC8vIGtleXMgY2FuJ3QgYmUgZ3JlYXRlciB0aGFuIDEwMjQgY2hhcnMsIHZhbHVlcyBjYW4ndCBiZSBncmVhdGVyIHRoYW4gMTAyNCBjaGFyc1xuICAgIGlmICh0eXBlb2YgbyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIG8pIHtcbiAgICAgICAgaWYgKG8uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIGNvbnN0IHNhbml0aXplZFZhbCA9IHJlbW92ZVVuc3VwcG9ydGVkQ2hhcnMob1trZXldLCBsb2dnZXIpO1xuICAgICAgICAgIGxldCBzYW5pdGl6ZWRLZXk7XG4gICAgICAgICAgc2FuaXRpemVkS2V5ID0gc2FuaXRpemUoa2V5LCB1bnN1cHBvcnRlZEtleUNoYXJSZWdleCk7XG5cbiAgICAgICAgICBpZiAoc2FuaXRpemVkS2V5Lmxlbmd0aCA+IDEwMjQpIHtcbiAgICAgICAgICAgIHNhbml0aXplZEtleSA9IHNhbml0aXplZEtleS5zdWJzdHJpbmcoMCwgMTAyNCk7XG4gICAgICAgICAgICBsb2dnZXIucmVwb3J0RXJyb3IoNTIwLCBzYW5pdGl6ZWRLZXkgKyAnLi4uIGxlbmd0aCBleGNlZWRlZCAxMDI0IGNoYXJzLiBUcmltbWVkLicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRlbGV0ZSBvW2tleV07XG4gICAgICAgICAgb1tzYW5pdGl6ZWRLZXldID0gc2FuaXRpemVkVmFsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCB2YWw7XG5cbiAgICAgIGlmIChpc1N0cmluZyhvKSkge1xuICAgICAgICB2YWwgPSBzYW5pdGl6ZShvLCB1bnN1cHBvcnRlZFZhbHVlQ2hhclJlZ2V4KTtcblxuICAgICAgICBpZiAodmFsLmxlbmd0aCA+IDEwMjQpIHtcbiAgICAgICAgICB2YWwgPSB2YWwuc3Vic3RyaW5nKDAsIDEwMjQpO1xuICAgICAgICAgIGxvZ2dlci5yZXBvcnRFcnJvcig1MjEsIHZhbCArICcuLi4gbGVuZ3RoIGV4Y2VlZGVkIDEwMjQgY2hhcnMuIFRyaW1tZWQuJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IG87XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG87XG4gIH07XG4gIGNvbnN0IHNhbml0aXplID0gKGlucHV0LCByZWdleCkgPT4ge1xuICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKHJlZ2V4LCAnJyk7XG4gIH07XG5cbiAgY29uc3QgZ2V0VG9kYXkgPSAoKSA9PiB7XG4gICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICAgIHJldHVybiB0b2RheS5nZXRGdWxsWWVhcigpICsgJycgKyB0b2RheS5nZXRNb250aCgpICsgJycgKyB0b2RheS5nZXREYXkoKTtcbiAgfTtcbiAgY29uc3QgZ2V0Tm93ID0gKCkgPT4ge1xuICAgIHJldHVybiBNYXRoLmZsb29yKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMCk7XG4gIH07XG4gIGNvbnN0IGNvbnZlcnRUb1daUktEYXRlID0gZGF0ZU9iaiA9PiB7XG4gICAgcmV0dXJuICckRF8nICsgTWF0aC5yb3VuZChkYXRlT2JqLmdldFRpbWUoKSAvIDEwMDApO1xuICB9O1xuICBjb25zdCBzZXREYXRlID0gZHQgPT4ge1xuICAgIC8vIGV4cGVjdGluZyAgeXl5eW1tZGQgZm9ybWF0IGVpdGhlciBhcyBhIG51bWJlciBvciBhIHN0cmluZ1xuICAgIGlmIChpc0RhdGVWYWxpZChkdCkpIHtcbiAgICAgIHJldHVybiAnJERfJyArIGR0O1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaXNEYXRlVmFsaWQgPSBkYXRlID0+IHtcbiAgICBjb25zdCBtYXRjaGVzID0gL14oXFxkezR9KShcXGR7Mn0pKFxcZHsyfSkkLy5leGVjKGRhdGUpO1xuICAgIGlmIChtYXRjaGVzID09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBkID0gbWF0Y2hlc1szXTtcbiAgICBjb25zdCBtID0gbWF0Y2hlc1syXSAtIDE7XG4gICAgY29uc3QgeSA9IG1hdGNoZXNbMV07XG4gICAgY29uc3QgY29tcG9zZWREYXRlID0gbmV3IERhdGUoeSwgbSwgZCk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblxuICAgIHJldHVybiBjb21wb3NlZERhdGUuZ2V0RGF0ZSgpID09IGQgJiYgY29tcG9zZWREYXRlLmdldE1vbnRoKCkgPT0gbSAmJiBjb21wb3NlZERhdGUuZ2V0RnVsbFllYXIoKSA9PSB5O1xuICB9O1xuXG4gIGNsYXNzIFN0b3JhZ2VNYW5hZ2VyIHtcbiAgICBzdGF0aWMgc2F2ZShrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoIWtleSB8fCAhdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faXNMb2NhbFN0b3JhZ2VTdXBwb3J0ZWQoKSkge1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyB2YWx1ZSA6IEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyByZWFkKGtleSkge1xuICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBsZXQgZGF0YSA9IG51bGw7XG5cbiAgICAgIGlmICh0aGlzLl9pc0xvY2FsU3RvcmFnZVN1cHBvcnRlZCgpKSB7XG4gICAgICAgIGRhdGEgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YSAhPSBudWxsKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIHN0YXRpYyByZW1vdmUoa2V5KSB7XG4gICAgICBpZiAoIWtleSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9pc0xvY2FsU3RvcmFnZVN1cHBvcnRlZCgpKSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyByZW1vdmVDb29raWUobmFtZSwgZG9tYWluKSB7XG4gICAgICBsZXQgY29va2llU3RyID0gbmFtZSArICc9OyBleHBpcmVzPVRodSwgMDEgSmFuIDE5NzAgMDA6MDA6MDEgR01UOyc7XG5cbiAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgY29va2llU3RyID0gY29va2llU3RyICsgJyBkb21haW49JyArIGRvbWFpbiArICc7IHBhdGg9Lyc7XG4gICAgICB9XG5cbiAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZVN0cjtcbiAgICB9XG5cbiAgICBzdGF0aWMgY3JlYXRlQ29va2llKG5hbWUsIHZhbHVlLCBzZWNvbmRzLCBkb21haW4pIHtcbiAgICAgIGxldCBleHBpcmVzID0gJyc7XG4gICAgICBsZXQgZG9tYWluU3RyID0gJyc7XG5cbiAgICAgIGlmIChzZWNvbmRzKSB7XG4gICAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyBzZWNvbmRzICogMTAwMCk7XG4gICAgICAgIGV4cGlyZXMgPSAnOyBleHBpcmVzPScgKyBkYXRlLnRvR01UU3RyaW5nKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgZG9tYWluU3RyID0gJzsgZG9tYWluPScgKyBkb21haW47XG4gICAgICB9XG5cbiAgICAgIHZhbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbiAgICAgIGRvY3VtZW50LmNvb2tpZSA9IG5hbWUgKyAnPScgKyB2YWx1ZSArIGV4cGlyZXMgKyBkb21haW5TdHIgKyAnOyBwYXRoPS8nO1xuICAgIH1cblxuICAgIHN0YXRpYyByZWFkQ29va2llKG5hbWUpIHtcbiAgICAgIGNvbnN0IG5hbWVFUSA9IG5hbWUgKyAnPSc7XG4gICAgICBjb25zdCBjYSA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpO1xuXG4gICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBjYS5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgIGxldCBjID0gY2FbaWR4XTtcblxuICAgICAgICB3aGlsZSAoYy5jaGFyQXQoMCkgPT09ICcgJykge1xuICAgICAgICAgIGMgPSBjLnN1YnN0cmluZygxLCBjLmxlbmd0aCk7XG4gICAgICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXG5cbiAgICAgICAgaWYgKGMuaW5kZXhPZihuYW1lRVEpID09IDApIHtcbiAgICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGMuc3Vic3RyaW5nKG5hbWVFUS5sZW5ndGgsIGMubGVuZ3RoKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgc3RhdGljIF9pc0xvY2FsU3RvcmFnZVN1cHBvcnRlZCgpIHtcbiAgICAgIHJldHVybiAnbG9jYWxTdG9yYWdlJyBpbiB3aW5kb3cgJiYgd2luZG93LmxvY2FsU3RvcmFnZSAhPT0gbnVsbCAmJiB0eXBlb2Ygd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtID09PSAnZnVuY3Rpb24nO1xuICAgIH1cblxuICAgIHN0YXRpYyBzYXZlVG9MU29yQ29va2llKHByb3BlcnR5LCB2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBpZiAodGhpcy5faXNMb2NhbFN0b3JhZ2VTdXBwb3J0ZWQoKSkge1xuICAgICAgICAgIHRoaXMuc2F2ZShwcm9wZXJ0eSwgZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHZhbHVlKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChwcm9wZXJ0eSA9PT0gR0NPT0tJRV9OQU1FKSB7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvb2tpZShwcm9wZXJ0eSwgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSwgMCwgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb29raWUocHJvcGVydHksIGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeSh2YWx1ZSkpLCAwLCB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgICRjdC5nbG9iYWxDYWNoZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuXG4gICAgc3RhdGljIHJlYWRGcm9tTFNvckNvb2tpZShwcm9wZXJ0eSkge1xuICAgICAgbGV0IGRhdGE7XG5cbiAgICAgIGlmICgkY3QuZ2xvYmFsQ2FjaGUuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgICAgIHJldHVybiAkY3QuZ2xvYmFsQ2FjaGVbcHJvcGVydHldO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faXNMb2NhbFN0b3JhZ2VTdXBwb3J0ZWQoKSkge1xuICAgICAgICBkYXRhID0gdGhpcy5yZWFkKHByb3BlcnR5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEgPSB0aGlzLnJlYWRDb29raWUocHJvcGVydHkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YSAhPT0gbnVsbCAmJiBkYXRhICE9PSB1bmRlZmluZWQgJiYgISh0eXBlb2YgZGF0YS50cmltID09PSAnZnVuY3Rpb24nICYmIGRhdGEudHJpbSgpID09PSAnJykpIHtcbiAgICAgICAgbGV0IHZhbHVlO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFsdWUgPSBKU09OLnBhcnNlKGRlY29kZVVSSUNvbXBvbmVudChkYXRhKSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIHZhbHVlID0gZGVjb2RlVVJJQ29tcG9uZW50KGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgJGN0Lmdsb2JhbENhY2hlW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGNyZWF0ZUJyb2FkQ29va2llKG5hbWUsIHZhbHVlLCBzZWNvbmRzLCBkb21haW4pIHtcbiAgICAgIC8vIHNldHMgY29va2llIG9uIHRoZSBiYXNlIGRvbWFpbi4gZS5nLiBpZiBkb21haW4gaXMgYmF6LmZvby5iYXIuY29tLCBzZXQgY29va2llIG9uIFwiLmJhci5jb21cIlxuICAgICAgLy8gVG8gdXBkYXRlIGFuIGV4aXN0aW5nIFwiYnJvYWQgZG9tYWluXCIgY29va2llLCB3ZSBuZWVkIHRvIGtub3cgd2hhdCBkb21haW4gaXQgd2FzIGFjdHVhbGx5IHNldCBvbi5cbiAgICAgIC8vIHNpbmNlIGEgcmV0cmlldmVkIGNvb2tpZSBuZXZlciB0ZWxscyB3aGljaCBkb21haW4gaXQgd2FzIHNldCBvbiwgd2UgbmVlZCB0byBzZXQgYW5vdGhlciB0ZXN0IGNvb2tpZVxuICAgICAgLy8gdG8gZmluZCBvdXQgd2hpY2ggXCJicm9hZGVzdFwiIGRvbWFpbiB0aGUgY29va2llIHdhcyBzZXQgb24uIFRoZW4gZGVsZXRlIHRoZSB0ZXN0IGNvb2tpZSwgYW5kIHVzZSB0aGF0IGRvbWFpblxuICAgICAgLy8gZm9yIHVwZGF0aW5nIHRoZSBhY3R1YWwgY29va2llLlxuICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICBsZXQgYnJvYWREb21haW4gPSAkY3QuYnJvYWREb21haW47XG5cbiAgICAgICAgaWYgKGJyb2FkRG9tYWluID09IG51bGwpIHtcbiAgICAgICAgICAvLyBpZiB3ZSBkb24ndCBrbm93IHRoZSBicm9hZERvbWFpbiB5ZXQsIHRoZW4gZmluZCBvdXRcbiAgICAgICAgICBjb25zdCBkb21haW5QYXJ0cyA9IGRvbWFpbi5zcGxpdCgnLicpO1xuICAgICAgICAgIGxldCB0ZXN0QnJvYWREb21haW4gPSAnJztcblxuICAgICAgICAgIGZvciAobGV0IGlkeCA9IGRvbWFpblBhcnRzLmxlbmd0aCAtIDE7IGlkeCA+PSAwOyBpZHgtLSkge1xuICAgICAgICAgICAgaWYgKGlkeCA9PT0gMCkge1xuICAgICAgICAgICAgICB0ZXN0QnJvYWREb21haW4gPSBkb21haW5QYXJ0c1tpZHhdICsgdGVzdEJyb2FkRG9tYWluO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGVzdEJyb2FkRG9tYWluID0gJy4nICsgZG9tYWluUGFydHNbaWR4XSArIHRlc3RCcm9hZERvbWFpbjtcbiAgICAgICAgICAgIH0gLy8gb25seSBuZWVkZWQgaWYgdGhlIGNvb2tpZSBhbHJlYWR5IGV4aXN0cyBhbmQgbmVlZHMgdG8gYmUgdXBkYXRlZC4gU2VlIG5vdGUgYWJvdmUuXG5cblxuICAgICAgICAgICAgaWYgKHRoaXMucmVhZENvb2tpZShuYW1lKSkge1xuICAgICAgICAgICAgICAvLyBubyBndWFyYW50ZWUgdGhhdCBicm93c2VyIHdpbGwgZGVsZXRlIGNvb2tpZSwgaGVuY2UgY3JlYXRlIHNob3J0IGxpdmVkIGNvb2tpZXNcbiAgICAgICAgICAgICAgdmFyIHRlc3RDb29raWVOYW1lID0gJ3Rlc3RfJyArIG5hbWUgKyBpZHg7XG4gICAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29va2llKHRlc3RDb29raWVOYW1lLCB2YWx1ZSwgMTAsIHRlc3RCcm9hZERvbWFpbik7IC8vIHNlbGYtZGVzdHJ1Y3QgYWZ0ZXIgMTAgc2Vjb25kc1xuXG4gICAgICAgICAgICAgIGlmICghdGhpcy5yZWFkQ29va2llKHRlc3RDb29raWVOYW1lKSkge1xuICAgICAgICAgICAgICAgIC8vIGlmIHRlc3QgY29va2llIG5vdCBzZXQsIHRoZW4gdGhlIGFjdHVhbCBjb29raWUgd291bGRuJ3QgaGF2ZSBiZWVuIHNldCBvbiB0aGlzIGRvbWFpbiBlaXRoZXIuXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZWxzZSBpZiBjb29raWUgc2V0LCB0aGVuIGRlbGV0ZSB0aGUgdGVzdCBhbmQgdGhlIG9yaWdpbmFsIGNvb2tpZVxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQ29va2llKHRlc3RDb29raWVOYW1lLCB0ZXN0QnJvYWREb21haW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29va2llKG5hbWUsIHZhbHVlLCBzZWNvbmRzLCB0ZXN0QnJvYWREb21haW4pO1xuICAgICAgICAgICAgY29uc3QgdGVtcENvb2tpZSA9IHRoaXMucmVhZENvb2tpZShuYW1lKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXG4gICAgICAgICAgICBpZiAodGVtcENvb2tpZSA9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICBicm9hZERvbWFpbiA9IHRlc3RCcm9hZERvbWFpbjtcbiAgICAgICAgICAgICAgJGN0LmJyb2FkRG9tYWluID0gYnJvYWREb21haW47XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNyZWF0ZUNvb2tpZShuYW1lLCB2YWx1ZSwgc2Vjb25kcywgYnJvYWREb21haW4pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNyZWF0ZUNvb2tpZShuYW1lLCB2YWx1ZSwgc2Vjb25kcywgZG9tYWluKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0TWV0YVByb3AocHJvcGVydHkpIHtcbiAgICAgIGNvbnN0IG1ldGFPYmogPSB0aGlzLnJlYWRGcm9tTFNvckNvb2tpZShNRVRBX0NPT0tJRSk7XG5cbiAgICAgIGlmIChtZXRhT2JqICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG1ldGFPYmpbcHJvcGVydHldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBzZXRNZXRhUHJvcChwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLl9pc0xvY2FsU3RvcmFnZVN1cHBvcnRlZCgpKSB7XG4gICAgICAgIGxldCB3enJrTWV0YU9iaiA9IHRoaXMucmVhZEZyb21MU29yQ29va2llKE1FVEFfQ09PS0lFKTtcblxuICAgICAgICBpZiAod3pya01ldGFPYmogPT0gbnVsbCkge1xuICAgICAgICAgIHd6cmtNZXRhT2JqID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGRlbGV0ZSB3enJrTWV0YU9ialtwcm9wZXJ0eV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd3pya01ldGFPYmpbcHJvcGVydHldID0gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNhdmVUb0xTb3JDb29raWUoTUVUQV9DT09LSUUsIHd6cmtNZXRhT2JqKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0QW5kQ2xlYXJNZXRhUHJvcChwcm9wZXJ0eSkge1xuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmdldE1ldGFQcm9wKHByb3BlcnR5KTtcbiAgICAgIHRoaXMuc2V0TWV0YVByb3AocHJvcGVydHksIHVuZGVmaW5lZCk7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgc3RhdGljIHNldEluc3RhbnREZWxldGVGbGFnSW5LKCkge1xuICAgICAgbGV0IGsgPSB0aGlzLnJlYWRGcm9tTFNvckNvb2tpZShLQ09PS0lFX05BTUUpO1xuXG4gICAgICBpZiAoayA9PSBudWxsKSB7XG4gICAgICAgIGsgPSB7fTtcbiAgICAgIH1cblxuICAgICAgay5mbGFnID0gdHJ1ZTtcbiAgICAgIHRoaXMuc2F2ZVRvTFNvckNvb2tpZShLQ09PS0lFX05BTUUsIGspO1xuICAgIH1cblxuICAgIHN0YXRpYyBiYWNrdXBFdmVudChkYXRhLCByZXFObywgbG9nZ2VyKSB7XG4gICAgICBsZXQgYmFja3VwQXJyID0gdGhpcy5yZWFkRnJvbUxTb3JDb29raWUoTENPT0tJRV9OQU1FKTtcblxuICAgICAgaWYgKHR5cGVvZiBiYWNrdXBBcnIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGJhY2t1cEFyciA9IHt9O1xuICAgICAgfVxuXG4gICAgICBiYWNrdXBBcnJbcmVxTm9dID0ge1xuICAgICAgICBxOiBkYXRhXG4gICAgICB9O1xuICAgICAgdGhpcy5zYXZlVG9MU29yQ29va2llKExDT09LSUVfTkFNRSwgYmFja3VwQXJyKTtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhcInN0b3JlZCBpbiBcIi5jb25jYXQoTENPT0tJRV9OQU1FLCBcIiByZXFObyA6IFwiKS5jb25jYXQocmVxTm8sIFwiIC0+IFwiKS5jb25jYXQoZGF0YSkpO1xuICAgIH1cblxuICAgIHN0YXRpYyByZW1vdmVCYWNrdXAocmVzcE5vLCBsb2dnZXIpIHtcbiAgICAgIGNvbnN0IGJhY2t1cE1hcCA9IHRoaXMucmVhZEZyb21MU29yQ29va2llKExDT09LSUVfTkFNRSk7XG5cbiAgICAgIGlmICh0eXBlb2YgYmFja3VwTWFwICE9PSAndW5kZWZpbmVkJyAmJiBiYWNrdXBNYXAgIT09IG51bGwgJiYgdHlwZW9mIGJhY2t1cE1hcFtyZXNwTm9dICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBsb2dnZXIuZGVidWcoXCJkZWwgZXZlbnQ6IFwiLmNvbmNhdChyZXNwTm8sIFwiIGRhdGEtPiBcIikuY29uY2F0KGJhY2t1cE1hcFtyZXNwTm9dLnEpKTtcbiAgICAgICAgZGVsZXRlIGJhY2t1cE1hcFtyZXNwTm9dO1xuICAgICAgICB0aGlzLnNhdmVUb0xTb3JDb29raWUoTENPT0tJRV9OQU1FLCBiYWNrdXBNYXApO1xuICAgICAgfVxuICAgIH1cblxuICB9XG4gIGNvbnN0ICRjdCA9IHtcbiAgICBnbG9iYWxDYWNoZToge1xuICAgICAgZ2Nvb2tpZTogbnVsbCxcbiAgICAgIFJFUV9OOiAwLFxuICAgICAgUkVTUF9OOiAwXG4gICAgfSxcbiAgICBMUlVfQ0FDSEU6IG51bGwsXG4gICAgZ2xvYmFsUHJvZmlsZU1hcDogdW5kZWZpbmVkLFxuICAgIGdsb2JhbEV2ZW50c01hcDogdW5kZWZpbmVkLFxuICAgIGJsb2NrUmVxdWVzdDogZmFsc2UsXG4gICAgaXNPcHRJblJlcXVlc3Q6IGZhbHNlLFxuICAgIGJyb2FkRG9tYWluOiBudWxsLFxuICAgIHdlYlB1c2hFbmFibGVkOiBudWxsLFxuICAgIGNhbXBhaWduRGl2TWFwOiB7fSxcbiAgICBjdXJyZW50U2Vzc2lvbklkOiBudWxsLFxuICAgIHdpel9jb3VudGVyOiAwLFxuICAgIC8vIHRvIGtlZXAgdHJhY2sgb2YgbnVtYmVyIG9mIHRpbWVzIHdlIGxvYWQgdGhlIGJvZHlcbiAgICBub3RpZkFwaToge1xuICAgICAgbm90aWZFbmFibGVkRnJvbUFwaTogZmFsc2VcbiAgICB9LFxuICAgIC8vIGhlbHBlciB2YXJpYWJsZSB0byBoYW5kbGUgcmFjZSBjb25kaXRpb24gYW5kIGNoZWNrIHdoZW4gbm90aWZpY2F0aW9ucyB3ZXJlIGNhbGxlZFxuICAgIHVuc3ViR3JvdXBzOiBbXSxcbiAgICB1cGRhdGVkQ2F0ZWdvcnlMb25nOiBudWxsLFxuICAgIGluYm94OiBudWxsLFxuICAgIGlzUHJpdmFjeUFyclB1c2hlZDogZmFsc2UsXG4gICAgcHJpdmFjeUFycmF5OiBbXSxcbiAgICBvZmZsaW5lOiBmYWxzZSxcbiAgICBsb2NhdGlvbjogbnVsbCxcbiAgICBkaXNtaXNzU3BhbUNvbnRyb2w6IGZhbHNlLFxuICAgIGdsb2JhbFVuc3Vic2NyaWJlOiB0cnVlLFxuICAgIGZsdXR0ZXJWZXJzaW9uOiBudWxsLFxuICAgIHZhcmlhYmxlU3RvcmU6IHt9IC8vIGRvbWFpbjogd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lLCB1cmwgLT4gZ2V0SG9zdE5hbWUoKVxuICAgIC8vIGdjb29raWU6IC0+IGRldmljZVxuXG4gIH07XG5cbiAgdmFyIF9rZXlPcmRlciA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwia2V5T3JkZXJcIik7XG5cbiAgdmFyIF9kZWxldGVGcm9tT2JqZWN0ID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJkZWxldGVGcm9tT2JqZWN0XCIpO1xuXG4gIGNsYXNzIExSVUNhY2hlIHtcbiAgICBjb25zdHJ1Y3RvcihtYXgpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfZGVsZXRlRnJvbU9iamVjdCwge1xuICAgICAgICB2YWx1ZTogX2RlbGV0ZUZyb21PYmplY3QyXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfa2V5T3JkZXIsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgdGhpcy5tYXggPSBtYXg7XG4gICAgICBsZXQgbHJ1Q2FjaGUgPSBTdG9yYWdlTWFuYWdlci5yZWFkRnJvbUxTb3JDb29raWUoTFJVX0NBQ0hFKTtcblxuICAgICAgaWYgKGxydUNhY2hlKSB7XG4gICAgICAgIGNvbnN0IHRlbXBMcnVDYWNoZSA9IHt9O1xuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2tleU9yZGVyKVtfa2V5T3JkZXJdID0gW107XG4gICAgICAgIGxydUNhY2hlID0gbHJ1Q2FjaGUuY2FjaGU7XG5cbiAgICAgICAgZm9yIChjb25zdCBlbnRyeSBpbiBscnVDYWNoZSkge1xuICAgICAgICAgIGlmIChscnVDYWNoZS5oYXNPd25Qcm9wZXJ0eShlbnRyeSkpIHtcbiAgICAgICAgICAgIHRlbXBMcnVDYWNoZVtscnVDYWNoZVtlbnRyeV1bMF1dID0gbHJ1Q2FjaGVbZW50cnldWzFdO1xuXG4gICAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2tleU9yZGVyKVtfa2V5T3JkZXJdLnB1c2gobHJ1Q2FjaGVbZW50cnldWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNhY2hlID0gdGVtcExydUNhY2hlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jYWNoZSA9IHt9O1xuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2tleU9yZGVyKVtfa2V5T3JkZXJdID0gW107XG4gICAgICB9XG4gICAgfVxuXG4gICAgZ2V0KGtleSkge1xuICAgICAgY29uc3QgaXRlbSA9IHRoaXMuY2FjaGVba2V5XTtcblxuICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgdGhpcy5jYWNoZSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfZGVsZXRlRnJvbU9iamVjdClbX2RlbGV0ZUZyb21PYmplY3RdKGtleSwgdGhpcy5jYWNoZSk7XG4gICAgICAgIHRoaXMuY2FjaGVba2V5XSA9IGl0ZW07XG5cbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9rZXlPcmRlcilbX2tleU9yZGVyXS5wdXNoKGtleSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2F2ZUNhY2hlVG9MUyh0aGlzLmNhY2hlKTtcbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cblxuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICBjb25zdCBpdGVtID0gdGhpcy5jYWNoZVtrZXldO1xuXG4gICAgICBjb25zdCBhbGxLZXlzID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9rZXlPcmRlcilbX2tleU9yZGVyXTtcblxuICAgICAgaWYgKGl0ZW0gIT0gbnVsbCkge1xuICAgICAgICB0aGlzLmNhY2hlID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9kZWxldGVGcm9tT2JqZWN0KVtfZGVsZXRlRnJvbU9iamVjdF0oa2V5LCB0aGlzLmNhY2hlKTtcbiAgICAgIH0gZWxzZSBpZiAoYWxsS2V5cy5sZW5ndGggPT09IHRoaXMubWF4KSB7XG4gICAgICAgIHRoaXMuY2FjaGUgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2RlbGV0ZUZyb21PYmplY3QpW19kZWxldGVGcm9tT2JqZWN0XShhbGxLZXlzWzBdLCB0aGlzLmNhY2hlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jYWNoZVtrZXldID0gdmFsdWU7XG5cbiAgICAgIGlmIChfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2tleU9yZGVyKVtfa2V5T3JkZXJdW19jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfa2V5T3JkZXIpW19rZXlPcmRlcl0gLSAxXSAhPT0ga2V5KSB7XG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfa2V5T3JkZXIpW19rZXlPcmRlcl0ucHVzaChrZXkpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNhdmVDYWNoZVRvTFModGhpcy5jYWNoZSk7XG4gICAgfVxuXG4gICAgc2F2ZUNhY2hlVG9MUyhjYWNoZSkge1xuICAgICAgY29uc3Qgb2JqVG9BcnJheSA9IFtdO1xuXG4gICAgICBjb25zdCBhbGxLZXlzID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9rZXlPcmRlcilbX2tleU9yZGVyXTtcblxuICAgICAgZm9yIChjb25zdCBpbmRleCBpbiBhbGxLZXlzKSB7XG4gICAgICAgIGlmIChhbGxLZXlzLmhhc093blByb3BlcnR5KGluZGV4KSkge1xuICAgICAgICAgIGNvbnN0IHRlbXAgPSBbXTtcbiAgICAgICAgICB0ZW1wLnB1c2goYWxsS2V5c1tpbmRleF0pO1xuICAgICAgICAgIHRlbXAucHVzaChjYWNoZVthbGxLZXlzW2luZGV4XV0pO1xuICAgICAgICAgIG9ialRvQXJyYXkucHVzaCh0ZW1wKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBTdG9yYWdlTWFuYWdlci5zYXZlVG9MU29yQ29va2llKExSVV9DQUNIRSwge1xuICAgICAgICBjYWNoZTogb2JqVG9BcnJheVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0S2V5KHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGFsbEtleXMgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2tleU9yZGVyKVtfa2V5T3JkZXJdO1xuXG4gICAgICBmb3IgKGNvbnN0IGluZGV4IGluIGFsbEtleXMpIHtcbiAgICAgICAgaWYgKGFsbEtleXMuaGFzT3duUHJvcGVydHkoaW5kZXgpKSB7XG4gICAgICAgICAgaWYgKHRoaXMuY2FjaGVbYWxsS2V5c1tpbmRleF1dID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGFsbEtleXNbaW5kZXhdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBnZXRTZWNvbmRMYXN0S2V5KCkge1xuICAgICAgY29uc3Qga2V5c0FyciA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfa2V5T3JkZXIpW19rZXlPcmRlcl07XG5cbiAgICAgIGlmIChrZXlzQXJyICE9IG51bGwgJiYga2V5c0Fyci5sZW5ndGggPiAxKSB7XG4gICAgICAgIHJldHVybiBrZXlzQXJyW2tleXNBcnIubGVuZ3RoIC0gMl07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICBnZXRMYXN0S2V5KCkge1xuICAgICAgY29uc3Qga2V5c0xlbmd0aCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfa2V5T3JkZXIpW19rZXlPcmRlcl0ubGVuZ3RoO1xuXG4gICAgICBpZiAoa2V5c0xlbmd0aCkge1xuICAgICAgICByZXR1cm4gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9rZXlPcmRlcilbX2tleU9yZGVyXVtrZXlzTGVuZ3RoIC0gMV07XG4gICAgICB9XG4gICAgfVxuXG4gIH1cblxuICB2YXIgX2RlbGV0ZUZyb21PYmplY3QyID0gZnVuY3Rpb24gX2RlbGV0ZUZyb21PYmplY3QyKGtleSwgb2JqKSB7XG4gICAgY29uc3QgYWxsS2V5cyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9rZXlPcmRlcilbX2tleU9yZGVyXSkpO1xuICAgIGNvbnN0IG5ld0NhY2hlID0ge307XG4gICAgbGV0IGluZGV4VG9EZWxldGU7XG5cbiAgICBmb3IgKGNvbnN0IGluZGV4IGluIGFsbEtleXMpIHtcbiAgICAgIGlmIChhbGxLZXlzLmhhc093blByb3BlcnR5KGluZGV4KSkge1xuICAgICAgICBpZiAoYWxsS2V5c1tpbmRleF0gIT09IGtleSkge1xuICAgICAgICAgIG5ld0NhY2hlW2FsbEtleXNbaW5kZXhdXSA9IG9ialthbGxLZXlzW2luZGV4XV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5kZXhUb0RlbGV0ZSA9IGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgYWxsS2V5cy5zcGxpY2UoaW5kZXhUb0RlbGV0ZSwgMSk7XG4gICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9rZXlPcmRlcilbX2tleU9yZGVyXSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYWxsS2V5cykpO1xuICAgIHJldHVybiBuZXdDYWNoZTtcbiAgfTtcblxuICB2YXIgX2xvZ2dlciA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwibG9nZ2VyXCIpO1xuXG4gIHZhciBfcmVxdWVzdCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwicmVxdWVzdFwiKTtcblxuICB2YXIgX2RldmljZSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiZGV2aWNlXCIpO1xuXG4gIHZhciBfc2Vzc2lvbiA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwic2Vzc2lvblwiKTtcblxuICBjbGFzcyBDbGV2ZXJUYXBBUEkge1xuICAgIGNvbnN0cnVjdG9yKF9yZWYpIHtcbiAgICAgIGxldCB7XG4gICAgICAgIGxvZ2dlcixcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgZGV2aWNlLFxuICAgICAgICBzZXNzaW9uXG4gICAgICB9ID0gX3JlZjtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfbG9nZ2VyLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfcmVxdWVzdCwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX2RldmljZSwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX3Nlc3Npb24sIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIpW19sb2dnZXJdID0gbG9nZ2VyO1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0KVtfcmVxdWVzdF0gPSByZXF1ZXN0O1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9kZXZpY2UpW19kZXZpY2VdID0gZGV2aWNlO1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXNzaW9uKVtfc2Vzc2lvbl0gPSBzZXNzaW9uO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBnbG9iYWwgZ2Nvb2tpZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzZXNzaW9uXG4gICAgICogQHBhcmFtIHtib29sZWFufSByZXN1bWUgc2VudCB0cnVlIGluIGNhc2Ugb2YgYW4gT1VMIHJlcXVlc3QgZnJvbSBjbGllbnQgc2lkZSwgd2hpY2ggaXMgcmV0dXJuZWQgYXMgaXQgaXMgYnkgc2VydmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJlc3BOdW1iZXIgdGhlIGluZGV4IG9mIHRoZSByZXF1ZXN0IGluIGJhY2t1cG1hbmFnZXJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9wdE91dFJlc3BvbnNlXG4gICAgICogQHJldHVybnNcbiAgICAgKi9cblxuXG4gICAgcyhnbG9iYWwsIHNlc3Npb24sIHJlc3VtZSwgcmVzcE51bWJlciwgb3B0T3V0UmVzcG9uc2UpIHtcbiAgICAgIGxldCBvdWxSZXEgPSBmYWxzZTtcbiAgICAgIGxldCBuZXdHdWlkID0gZmFsc2U7IC8vIGZvciBhIHNjZW5hcmlvIHdoZW4gT1VMIHJlcXVlc3QgaXMgdHJ1ZSBmcm9tIGNsaWVudCBzaWRlXG4gICAgICAvLyBidXQgcmVzdW1lIGlzIHJldHVybmVkIGFzIGZhbHNlIGZyb20gc2VydmVyIGVuZFxuICAgICAgLy8gd2UgbWFpbnRhbiBhIE91bFJlcU4gdmFyIGluIHRoZSB3aW5kb3cgb2JqZWN0XG4gICAgICAvLyBhbmQgY29tcGFyZSB3aXRoIHJlc3BOdW1iZXIgdG8gZGV0ZXJtaW5lIHRoZSByZXNwb25zZSBvZiBhbiBPVUwgcmVxdWVzdFxuXG4gICAgICBpZiAod2luZG93LmlzT1VMSW5Qcm9ncmVzcykge1xuICAgICAgICBpZiAocmVzdW1lIHx8IHJlc3BOdW1iZXIgIT09ICd1bmRlZmluZWQnICYmIHJlc3BOdW1iZXIgPT09IHdpbmRvdy5vdWxSZXFOKSB7XG4gICAgICAgICAgd2luZG93LmlzT1VMSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICAgIG91bFJlcSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gY2FsbCBiYWNrIGZ1bmN0aW9uIHVzZWQgdG8gc3RvcmUgZ2xvYmFsIGFuZCBzZXNzaW9uIGlkcyBmb3IgdGhlIHVzZXJcblxuXG4gICAgICBpZiAodHlwZW9mIHJlc3BOdW1iZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJlc3BOdW1iZXIgPSAwO1xuICAgICAgfVxuXG4gICAgICBTdG9yYWdlTWFuYWdlci5yZW1vdmVCYWNrdXAocmVzcE51bWJlciwgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIpW19sb2dnZXJdKTtcblxuICAgICAgaWYgKHJlc3BOdW1iZXIgPiAkY3QuZ2xvYmFsQ2FjaGUuUkVRX04pIHtcbiAgICAgICAgLy8gcmVxdWVzdCBmb3Igc29tZSBvdGhlciB1c2VyIHNvIGlnbm9yZVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNWYWx1ZVZhbGlkKF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfZGV2aWNlKVtfZGV2aWNlXS5nY29va2llKSkge1xuICAgICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgICAgbmV3R3VpZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFpc1ZhbHVlVmFsaWQoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9kZXZpY2UpW19kZXZpY2VdLmdjb29raWUpIHx8IHJlc3VtZSB8fCB0eXBlb2Ygb3B0T3V0UmVzcG9uc2UgPT09ICdib29sZWFuJykge1xuICAgICAgICBjb25zdCBzZXNzaW9uT2JqID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXNzaW9uKVtfc2Vzc2lvbl0uZ2V0U2Vzc2lvbkNvb2tpZU9iamVjdCgpO1xuICAgICAgICAvKiAgSWYgdGhlIHJlY2VpdmVkIHNlc3Npb24gaXMgbGVzcyB0aGFuIHRoZSBzZXNzaW9uIGluIHRoZSBjb29raWUsXG4gICAgICAgICAgICB0aGVuIGRvbid0IHVwZGF0ZSBndWlkIGFzIGl0IHdpbGwgYmUgcmVzcG9uc2UgZm9yIG9sZCByZXF1ZXN0XG4gICAgICAgICovXG5cblxuICAgICAgICBpZiAod2luZG93LmlzT1VMSW5Qcm9ncmVzcyB8fCBzZXNzaW9uT2JqLnMgJiYgc2Vzc2lvbiA8IHNlc3Npb25PYmoucykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyKVtfbG9nZ2VyXS5kZWJ1ZyhcIkNvb2tpZSB3YXMgXCIuY29uY2F0KF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfZGV2aWNlKVtfZGV2aWNlXS5nY29va2llLCBcIiBzZXQgdG8gXCIpLmNvbmNhdChnbG9iYWwpKTtcblxuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2RldmljZSlbX2RldmljZV0uZ2Nvb2tpZSA9IGdsb2JhbDtcblxuICAgICAgICBpZiAoIWlzVmFsdWVWYWxpZChfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2RldmljZSlbX2RldmljZV0uZ2Nvb2tpZSkpIHtcbiAgICAgICAgICAvLyBjbGVhciB1c2VJUCBtZXRhIHByb3BcbiAgICAgICAgICBTdG9yYWdlTWFuYWdlci5nZXRBbmRDbGVhck1ldGFQcm9wKFVTRUlQX0tFWSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZ2xvYmFsICYmIFN0b3JhZ2VNYW5hZ2VyLl9pc0xvY2FsU3RvcmFnZVN1cHBvcnRlZCgpKSB7XG4gICAgICAgICAgaWYgKCRjdC5MUlVfQ0FDSEUgPT0gbnVsbCkge1xuICAgICAgICAgICAgJGN0LkxSVV9DQUNIRSA9IG5ldyBMUlVDYWNoZShMUlVfQ0FDSEVfU0laRSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3Qga0lkRnJvbUxTID0gU3RvcmFnZU1hbmFnZXIucmVhZEZyb21MU29yQ29va2llKEtDT09LSUVfTkFNRSk7XG4gICAgICAgICAgbGV0IGd1aWRGcm9tTFJVQ2FjaGU7XG5cbiAgICAgICAgICBpZiAoa0lkRnJvbUxTICE9IG51bGwgJiYga0lkRnJvbUxTLmlkKSB7XG4gICAgICAgICAgICBndWlkRnJvbUxSVUNhY2hlID0gJGN0LkxSVV9DQUNIRS5jYWNoZVtrSWRGcm9tTFMuaWRdO1xuXG4gICAgICAgICAgICBpZiAocmVzdW1lKSB7XG4gICAgICAgICAgICAgIGlmICghZ3VpZEZyb21MUlVDYWNoZSkge1xuICAgICAgICAgICAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNhdmVUb0xTb3JDb29raWUoRklSRV9QVVNIX1VOUkVHSVNURVJFRCwgdHJ1ZSk7IC8vIHJlcGxhY2UgbG9naW4gaWRlbnRpdHkgaW4gT1VMIHJlcXVlc3RcbiAgICAgICAgICAgICAgICAvLyB3aXRoIHRoZSBnY29va2llIHJldHVybmVkIGluIGV4Y2hhbmdlXG5cbiAgICAgICAgICAgICAgICAkY3QuTFJVX0NBQ0hFLnNldChrSWRGcm9tTFMuaWQsIGdsb2JhbCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBTdG9yYWdlTWFuYWdlci5zYXZlVG9MU29yQ29va2llKEdDT09LSUVfTkFNRSwgZ2xvYmFsKTsgLy8gbGFzdGsgcHJvdmlkZXMgdGhlIGd1aWRcblxuICAgICAgICAgIGNvbnN0IGxhc3RLID0gJGN0LkxSVV9DQUNIRS5nZXRTZWNvbmRMYXN0S2V5KCk7XG5cbiAgICAgICAgICBpZiAoU3RvcmFnZU1hbmFnZXIucmVhZEZyb21MU29yQ29va2llKEZJUkVfUFVTSF9VTlJFR0lTVEVSRUQpICYmIGxhc3RLICE9PSAtMSkge1xuICAgICAgICAgICAgY29uc3QgbGFzdEdVSUQgPSAkY3QuTFJVX0NBQ0hFLmNhY2hlW2xhc3RLXTsgLy8gZmlyZSB0aGUgcmVxdWVzdCBkaXJlY3RseSB2aWEgZmlyZVJlcXVlc3QgdG8gdW5yZWdpc3RlciB0aGUgdG9rZW5cbiAgICAgICAgICAgIC8vIHRoZW4gb3RoZXIgcmVxdWVzdHMgd2l0aCB0aGUgdXBkYXRlZCBndWlkIHNob3VsZCBmb2xsb3dcblxuICAgICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0KVtfcmVxdWVzdF0udW5yZWdpc3RlclRva2VuRm9yR3VpZChsYXN0R1VJRCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgU3RvcmFnZU1hbmFnZXIuY3JlYXRlQnJvYWRDb29raWUoR0NPT0tJRV9OQU1FLCBnbG9iYWwsIENPT0tJRV9FWFBJUlksIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSk7XG4gICAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNhdmVUb0xTb3JDb29raWUoR0NPT0tJRV9OQU1FLCBnbG9iYWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAoU3RvcmFnZU1hbmFnZXIuX2lzTG9jYWxTdG9yYWdlU3VwcG9ydGVkKCkpIHtcbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXNzaW9uKVtfc2Vzc2lvbl0ubWFuYWdlU2Vzc2lvbihzZXNzaW9uKTtcbiAgICAgIH0gLy8gc2Vzc2lvbiBjb29raWVcblxuXG4gICAgICBjb25zdCBvYmogPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3Nlc3Npb24pW19zZXNzaW9uXS5nZXRTZXNzaW9uQ29va2llT2JqZWN0KCk7IC8vIGZvciB0aGUgcmFjZS1jb25kaXRpb24gd2hlcmUgdHdvIHJlc3BvbnNlcyBjb21lIGJhY2sgd2l0aCBkaWZmZXJlbnQgc2Vzc2lvbiBpZHMuIGRvbid0IHdyaXRlIHRoZSBvbGRlciBzZXNzaW9uIGlkLlxuXG5cbiAgICAgIGlmICh0eXBlb2Ygb2JqLnMgPT09ICd1bmRlZmluZWQnIHx8IG9iai5zIDw9IHNlc3Npb24pIHtcbiAgICAgICAgb2JqLnMgPSBzZXNzaW9uO1xuICAgICAgICBvYmoudCA9IGdldE5vdygpOyAvLyB0aW1lIG9mIGxhc3QgcmVzcG9uc2UgZnJvbSBzZXJ2ZXJcblxuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3Nlc3Npb24pW19zZXNzaW9uXS5zZXRTZXNzaW9uQ29va2llT2JqZWN0KG9iaik7XG4gICAgICB9IC8vIHNldCBibG9ja1JlcXVlc3QgdG8gZmFsc2Ugb25seSBpZiB0aGUgZGV2aWNlIGhhcyBhIHZhbGlkIGdjb29raWVcblxuXG4gICAgICBpZiAoaXNWYWx1ZVZhbGlkKF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfZGV2aWNlKVtfZGV2aWNlXS5nY29va2llKSkge1xuICAgICAgICAkY3QuYmxvY2tSZXF1ZXN0ID0gZmFsc2U7XG4gICAgICB9IC8vIG9ubHkgcHJvY2VzcyB0aGUgYmFja3VwIGV2ZW50cyBhZnRlciBhbiBPVUwgcmVxdWVzdCBvciBhIG5ldyBndWlkIGlzIHJlY2lldmVkXG5cblxuICAgICAgaWYgKChvdWxSZXEgfHwgbmV3R3VpZCkgJiYgIV9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdClbX3JlcXVlc3RdLnByb2Nlc3NpbmdCYWNrdXApIHtcbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0KVtfcmVxdWVzdF0ucHJvY2Vzc0JhY2t1cEV2ZW50cygpO1xuICAgICAgfVxuXG4gICAgICAkY3QuZ2xvYmFsQ2FjaGUuUkVTUF9OID0gcmVzcE51bWJlcjtcbiAgICB9XG5cbiAgfVxuXG4gIHZhciBfbG9nZ2VyJDEgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImxvZ2dlclwiKTtcblxuICBjbGFzcyBEZXZpY2VNYW5hZ2VyIHtcbiAgICBjb25zdHJ1Y3RvcihfcmVmKSB7XG4gICAgICBsZXQge1xuICAgICAgICBsb2dnZXJcbiAgICAgIH0gPSBfcmVmO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9sb2dnZXIkMSwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICB0aGlzLmdjb29raWUgPSB2b2lkIDA7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQxKVtfbG9nZ2VyJDFdID0gbG9nZ2VyO1xuICAgICAgdGhpcy5nY29va2llID0gdGhpcy5nZXRHdWlkKCk7XG4gICAgfVxuXG4gICAgZ2V0R3VpZCgpIHtcbiAgICAgIGxldCBndWlkID0gbnVsbDtcblxuICAgICAgaWYgKGlzVmFsdWVWYWxpZCh0aGlzLmdjb29raWUpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdjb29raWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChTdG9yYWdlTWFuYWdlci5faXNMb2NhbFN0b3JhZ2VTdXBwb3J0ZWQoKSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IFN0b3JhZ2VNYW5hZ2VyLnJlYWQoR0NPT0tJRV9OQU1FKTtcblxuICAgICAgICBpZiAoaXNWYWx1ZVZhbGlkKHZhbHVlKSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBndWlkID0gSlNPTi5wYXJzZShkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQxKVtfbG9nZ2VyJDFdLmRlYnVnKCdDYW5ub3QgcGFyc2UgR2Nvb2tpZSBmcm9tIGxvY2Fsc3RvcmFnZSAtIG11c3QgYmUgZW5jb2RlZCAnICsgdmFsdWUpOyAvLyBhc3N1bW1pbmcgZ3VpZHMgYXJlIG9mIHNpemUgMzIuIHN1cHBvcnRpbmcgYm90aCBmb3JtYXRzLlxuICAgICAgICAgICAgLy8gZ3VpZCBjYW4gaGF2ZSBlbmNvZGVkVVJJQ29tcG9uZW50IG9yIGJlIHdpdGhvdXQgaXQuXG4gICAgICAgICAgICAvLyAxLjU2ZTQwNzhlZDE1NzQ5OTI4YzA0MjQ3OWVjMmI0ZDQ3IC0gYnJlYWtzIG9uIEpTT04ucGFyc2UoZGVjb2RlVVJJQ29tcG9uZW50KCkpXG4gICAgICAgICAgICAvLyAyLiUyMjU2ZTQwNzhlZDE1NzQ5OTI4YzA0MjQ3OWVjMmI0ZDQ3JTIyXG5cblxuICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMzIpIHtcbiAgICAgICAgICAgICAgZ3VpZCA9IHZhbHVlO1xuICAgICAgICAgICAgICBTdG9yYWdlTWFuYWdlci5zYXZlVG9MU29yQ29va2llKEdDT09LSUVfTkFNRSwgdmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkMSlbX2xvZ2dlciQxXS5lcnJvcignSWxsZWdhbCBndWlkICcgKyB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSAvLyBQZXJzaXN0IHRvIGNvb2tpZSBzdG9yYWdlIGlmIG5vdCBwcmVzZW50IHRoZXJlLlxuXG5cbiAgICAgICAgICBpZiAoaXNWYWx1ZVZhbGlkKGd1aWQpKSB7XG4gICAgICAgICAgICBTdG9yYWdlTWFuYWdlci5jcmVhdGVCcm9hZENvb2tpZShHQ09PS0lFX05BTUUsIGd1aWQsIENPT0tJRV9FWFBJUlksIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNWYWx1ZVZhbGlkKGd1aWQpKSB7XG4gICAgICAgIGd1aWQgPSBTdG9yYWdlTWFuYWdlci5yZWFkQ29va2llKEdDT09LSUVfTkFNRSk7XG5cbiAgICAgICAgaWYgKGlzVmFsdWVWYWxpZChndWlkKSAmJiAoZ3VpZC5pbmRleE9mKCclJykgPT09IDAgfHwgZ3VpZC5pbmRleE9mKCdcXCcnKSA9PT0gMCB8fCBndWlkLmluZGV4T2YoJ1wiJykgPT09IDApKSB7XG4gICAgICAgICAgZ3VpZCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNWYWx1ZVZhbGlkKGd1aWQpKSB7XG4gICAgICAgICAgU3RvcmFnZU1hbmFnZXIuc2F2ZVRvTFNvckNvb2tpZShHQ09PS0lFX05BTUUsIGd1aWQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBndWlkO1xuICAgIH1cblxuICB9XG5cbiAgY29uc3QgREFUQV9OT1RfU0VOVF9URVhUID0gJ1RoaXMgcHJvcGVydHkgaGFzIGJlZW4gaWdub3JlZC4nO1xuICBjb25zdCBDTEVWRVJUQVBfRVJST1JfUFJFRklYID0gJ0NsZXZlclRhcCBlcnJvcjonOyAvLyBGb3JtZXJseSB3enJrX2Vycm9yX3R4dFxuXG4gIGNvbnN0IEVNQkVEX0VSUk9SID0gXCJcIi5jb25jYXQoQ0xFVkVSVEFQX0VSUk9SX1BSRUZJWCwgXCIgSW5jb3JyZWN0IGVtYmVkIHNjcmlwdC5cIik7XG4gIGNvbnN0IEVWRU5UX0VSUk9SID0gXCJcIi5jb25jYXQoQ0xFVkVSVEFQX0VSUk9SX1BSRUZJWCwgXCIgRXZlbnQgc3RydWN0dXJlIG5vdCB2YWxpZC4gXCIpLmNvbmNhdChEQVRBX05PVF9TRU5UX1RFWFQpO1xuICBjb25zdCBHRU5ERVJfRVJST1IgPSBcIlwiLmNvbmNhdChDTEVWRVJUQVBfRVJST1JfUFJFRklYLCBcIiBHZW5kZXIgdmFsdWUgc2hvdWxkIGJlIGVpdGhlciBNIG9yIEYuIFwiKS5jb25jYXQoREFUQV9OT1RfU0VOVF9URVhUKTtcbiAgY29uc3QgRU1QTE9ZRURfRVJST1IgPSBcIlwiLmNvbmNhdChDTEVWRVJUQVBfRVJST1JfUFJFRklYLCBcIiBFbXBsb3llZCB2YWx1ZSBzaG91bGQgYmUgZWl0aGVyIFkgb3IgTi4gXCIpLmNvbmNhdChEQVRBX05PVF9TRU5UX1RFWFQpO1xuICBjb25zdCBNQVJSSUVEX0VSUk9SID0gXCJcIi5jb25jYXQoQ0xFVkVSVEFQX0VSUk9SX1BSRUZJWCwgXCIgTWFycmllZCB2YWx1ZSBzaG91bGQgYmUgZWl0aGVyIFkgb3IgTi4gXCIpLmNvbmNhdChEQVRBX05PVF9TRU5UX1RFWFQpO1xuICBjb25zdCBFRFVDQVRJT05fRVJST1IgPSBcIlwiLmNvbmNhdChDTEVWRVJUQVBfRVJST1JfUFJFRklYLCBcIiBFZHVjYXRpb24gdmFsdWUgc2hvdWxkIGJlIGVpdGhlciBTY2hvb2wsIENvbGxlZ2Ugb3IgR3JhZHVhdGUuIFwiKS5jb25jYXQoREFUQV9OT1RfU0VOVF9URVhUKTtcbiAgY29uc3QgQUdFX0VSUk9SID0gXCJcIi5jb25jYXQoQ0xFVkVSVEFQX0VSUk9SX1BSRUZJWCwgXCIgQWdlIHZhbHVlIHNob3VsZCBiZSBhIG51bWJlci4gXCIpLmNvbmNhdChEQVRBX05PVF9TRU5UX1RFWFQpO1xuICBjb25zdCBET0JfRVJST1IgPSBcIlwiLmNvbmNhdChDTEVWRVJUQVBfRVJST1JfUFJFRklYLCBcIiBET0IgdmFsdWUgc2hvdWxkIGJlIGEgRGF0ZSBPYmplY3RcIik7XG4gIGNvbnN0IEVOVU1fRk9STUFUX0VSUk9SID0gXCJcIi5jb25jYXQoQ0xFVkVSVEFQX0VSUk9SX1BSRUZJWCwgXCIgc2V0RW51bSh2YWx1ZSkuIHZhbHVlIHNob3VsZCBiZSBhIHN0cmluZyBvciBhIG51bWJlclwiKTtcbiAgY29uc3QgUEhPTkVfRk9STUFUX0VSUk9SID0gXCJcIi5jb25jYXQoQ0xFVkVSVEFQX0VSUk9SX1BSRUZJWCwgXCIgUGhvbmUgbnVtYmVyIHNob3VsZCBiZSBmb3JtYXR0ZWQgYXMgK1tjb3VudHJ5IGNvZGVdW251bWJlcl1cIik7XG5cbiAgbGV0IF9nbG9iYWxDaGFyZ2VkSWQ7XG5cbiAgY29uc3QgaXNFdmVudFN0cnVjdHVyZUZsYXQgPSBldmVudE9iaiA9PiB7XG4gICAgLy8gRXZlbnRzIGNhbm5vdCBoYXZlIG5lc3RlZCBzdHJ1Y3R1cmUgb3IgQXJyYXlzXG4gICAgaWYgKGlzT2JqZWN0KGV2ZW50T2JqKSkge1xuICAgICAgZm9yICh2YXIga2V5IGluIGV2ZW50T2JqKSB7XG4gICAgICAgIGlmIChldmVudE9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KGV2ZW50T2JqW2tleV0pIHx8IEFycmF5LmlzQXJyYXkoZXZlbnRPYmpba2V5XSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzRGF0ZU9iamVjdChldmVudE9ialtrZXldKSkge1xuICAgICAgICAgICAgZXZlbnRPYmpba2V5XSA9IGNvbnZlcnRUb1daUktEYXRlKGV2ZW50T2JqW2tleV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG4gIGNvbnN0IGlzQ2hhcmdlZEV2ZW50U3RydWN0dXJlVmFsaWQgPSAoY2hhcmdlZE9iaiwgbG9nZ2VyKSA9PiB7XG4gICAgaWYgKGlzT2JqZWN0KGNoYXJnZWRPYmopKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gY2hhcmdlZE9iaikge1xuICAgICAgICBpZiAoY2hhcmdlZE9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ0l0ZW1zJykge1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGNoYXJnZWRPYmpba2V5XSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY2hhcmdlZE9ialtrZXldLmxlbmd0aCA+IDUwKSB7XG4gICAgICAgICAgICAgIGxvZ2dlci5yZXBvcnRFcnJvcig1MjIsICdDaGFyZ2VkIEl0ZW1zIGV4Y2VlZCA1MCBsaW1pdC4gQWN0dWFsIGNvdW50OiAnICsgY2hhcmdlZE9ialtrZXldLmxlbmd0aCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIGl0ZW1LZXkgaW4gY2hhcmdlZE9ialtrZXldKSB7XG4gICAgICAgICAgICAgIGlmIChjaGFyZ2VkT2JqW2tleV0uaGFzT3duUHJvcGVydHkoaXRlbUtleSkpIHtcbiAgICAgICAgICAgICAgICAvLyBzaW5jZSBkZWZhdWx0IGFycmF5IGltcGxlbWVudGF0aW9uIGNvdWxkIGJlIG92ZXJyaWRkZW4gLSBlLmcuIFRlYWJveCBzaXRlXG4gICAgICAgICAgICAgICAgaWYgKCFpc09iamVjdChjaGFyZ2VkT2JqW2tleV1baXRlbUtleV0pIHx8ICFpc0V2ZW50U3RydWN0dXJlRmxhdChjaGFyZ2VkT2JqW2tleV1baXRlbUtleV0pKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpc09iamVjdChjaGFyZ2VkT2JqW2tleV0pIHx8IEFycmF5LmlzQXJyYXkoY2hhcmdlZE9ialtrZXldKSkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzRGF0ZU9iamVjdChjaGFyZ2VkT2JqW2tleV0pKSB7XG4gICAgICAgICAgICAgIGNoYXJnZWRPYmpba2V5XSA9IGNvbnZlcnRUb1daUktEYXRlKGNoYXJnZWRPYmpba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1N0cmluZyhjaGFyZ2VkT2JqW0NIQVJHRURfSURdKSB8fCBpc051bWJlcihjaGFyZ2VkT2JqW0NIQVJHRURfSURdKSkge1xuICAgICAgICAvLyBzYXZlIGNoYXJnZWQgSWRcbiAgICAgICAgY29uc3QgY2hhcmdlZElkID0gY2hhcmdlZE9ialtDSEFSR0VEX0lEXSArICcnOyAvLyBjYXN0aW5nIGNoYXJnZWRJZCB0byBzdHJpbmdcblxuICAgICAgICBpZiAodHlwZW9mIF9nbG9iYWxDaGFyZ2VkSWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgX2dsb2JhbENoYXJnZWRJZCA9IFN0b3JhZ2VNYW5hZ2VyLnJlYWRGcm9tTFNvckNvb2tpZShDSEFSR0VESURfQ09PS0lFX05BTUUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBfZ2xvYmFsQ2hhcmdlZElkICE9PSAndW5kZWZpbmVkJyAmJiBfZ2xvYmFsQ2hhcmdlZElkLnRyaW0oKSA9PT0gY2hhcmdlZElkLnRyaW0oKSkge1xuICAgICAgICAgIC8vIGRyb3AgZXZlbnQtIGR1cGxpY2F0ZSBjaGFyZ2VkIGlkXG4gICAgICAgICAgbG9nZ2VyLmVycm9yKCdEdXBsaWNhdGUgY2hhcmdlZCBJZCAtIERyb3BwZWQnICsgY2hhcmdlZE9iaik7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgX2dsb2JhbENoYXJnZWRJZCA9IGNoYXJnZWRJZDtcbiAgICAgICAgU3RvcmFnZU1hbmFnZXIuc2F2ZVRvTFNvckNvb2tpZShDSEFSR0VESURfQ09PS0lFX05BTUUsIGNoYXJnZWRJZCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gLy8gaWYgb2JqZWN0IChjaGFyZ2VkT2JqZWN0KVxuXG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgdmFyIF9sb2dnZXIkMiA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwibG9nZ2VyXCIpO1xuXG4gIHZhciBfb2xkVmFsdWVzID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJvbGRWYWx1ZXNcIik7XG5cbiAgdmFyIF9yZXF1ZXN0JDEgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInJlcXVlc3RcIik7XG5cbiAgdmFyIF9pc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiaXNQZXJzb25hbGlzYXRpb25BY3RpdmVcIik7XG5cbiAgdmFyIF9wcm9jZXNzRXZlbnRBcnJheSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwicHJvY2Vzc0V2ZW50QXJyYXlcIik7XG5cbiAgY2xhc3MgRXZlbnRIYW5kbGVyIGV4dGVuZHMgQXJyYXkge1xuICAgIGNvbnN0cnVjdG9yKF9yZWYsIHZhbHVlcykge1xuICAgICAgbGV0IHtcbiAgICAgICAgbG9nZ2VyLFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBpc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZVxuICAgICAgfSA9IF9yZWY7XG4gICAgICBzdXBlcigpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9wcm9jZXNzRXZlbnRBcnJheSwge1xuICAgICAgICB2YWx1ZTogX3Byb2Nlc3NFdmVudEFycmF5MlxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX2xvZ2dlciQyLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfb2xkVmFsdWVzLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfcmVxdWVzdCQxLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfaXNQZXJzb25hbGlzYXRpb25BY3RpdmUsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkMilbX2xvZ2dlciQyXSA9IGxvZ2dlcjtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfb2xkVmFsdWVzKVtfb2xkVmFsdWVzXSA9IHZhbHVlcztcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdCQxKVtfcmVxdWVzdCQxXSA9IHJlcXVlc3Q7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlKVtfaXNQZXJzb25hbGlzYXRpb25BY3RpdmVdID0gaXNQZXJzb25hbGlzYXRpb25BY3RpdmU7XG4gICAgfVxuXG4gICAgcHVzaCgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBldmVudHNBcnIgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGV2ZW50c0Fycltfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9wcm9jZXNzRXZlbnRBcnJheSlbX3Byb2Nlc3NFdmVudEFycmF5XShldmVudHNBcnIpO1xuXG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICBfcHJvY2Vzc09sZFZhbHVlcygpIHtcbiAgICAgIGlmIChfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX29sZFZhbHVlcylbX29sZFZhbHVlc10pIHtcbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9wcm9jZXNzRXZlbnRBcnJheSlbX3Byb2Nlc3NFdmVudEFycmF5XShfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX29sZFZhbHVlcylbX29sZFZhbHVlc10pO1xuICAgICAgfVxuXG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX29sZFZhbHVlcylbX29sZFZhbHVlc10gPSBudWxsO1xuICAgIH1cblxuICAgIGdldERldGFpbHMoZXZ0TmFtZSkge1xuICAgICAgaWYgKCFfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlKVtfaXNQZXJzb25hbGlzYXRpb25BY3RpdmVdKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mICRjdC5nbG9iYWxFdmVudHNNYXAgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICRjdC5nbG9iYWxFdmVudHNNYXAgPSBTdG9yYWdlTWFuYWdlci5yZWFkRnJvbUxTb3JDb29raWUoRVZfQ09PS0lFKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiAkY3QuZ2xvYmFsRXZlbnRzTWFwID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGV2dE9iaiA9ICRjdC5nbG9iYWxFdmVudHNNYXBbZXZ0TmFtZV07XG4gICAgICBjb25zdCByZXNwT2JqID0ge307XG5cbiAgICAgIGlmICh0eXBlb2YgZXZ0T2JqICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXNwT2JqLmZpcnN0VGltZSA9IG5ldyBEYXRlKGV2dE9ialsxXSAqIDEwMDApO1xuICAgICAgICByZXNwT2JqLmxhc3RUaW1lID0gbmV3IERhdGUoZXZ0T2JqWzJdICogMTAwMCk7XG4gICAgICAgIHJlc3BPYmouY291bnQgPSBldnRPYmpbMF07XG4gICAgICAgIHJldHVybiByZXNwT2JqO1xuICAgICAgfVxuICAgIH1cblxuICB9XG5cbiAgdmFyIF9wcm9jZXNzRXZlbnRBcnJheTIgPSBmdW5jdGlvbiBfcHJvY2Vzc0V2ZW50QXJyYXkyKGV2ZW50c0Fycikge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50c0FycikpIHtcbiAgICAgIHdoaWxlIChldmVudHNBcnIubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgZXZlbnROYW1lID0gZXZlbnRzQXJyLnNoaWZ0KCk7XG5cbiAgICAgICAgaWYgKCFpc1N0cmluZyhldmVudE5hbWUpKSB7XG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkMilbX2xvZ2dlciQyXS5lcnJvcihFVkVOVF9FUlJPUik7XG5cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudE5hbWUubGVuZ3RoID4gMTAyNCkge1xuICAgICAgICAgIGV2ZW50TmFtZSA9IGV2ZW50TmFtZS5zdWJzdHJpbmcoMCwgMTAyNCk7XG5cbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQyKVtfbG9nZ2VyJDJdLnJlcG9ydEVycm9yKDUxMCwgZXZlbnROYW1lICsgJy4uLiBsZW5ndGggZXhjZWVkZWQgMTAyNCBjaGFycy4gVHJpbW1lZC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChTWVNURU1fRVZFTlRTLmluY2x1ZGVzKGV2ZW50TmFtZSkpIHtcbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQyKVtfbG9nZ2VyJDJdLnJlcG9ydEVycm9yKDUxMywgZXZlbnROYW1lICsgJyBpcyBhIHJlc3RyaWN0ZWQgc3lzdGVtIGV2ZW50LiBJdCBjYW5ub3QgYmUgdXNlZCBhcyBhbiBldmVudCBuYW1lLicpO1xuXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkYXRhID0ge307XG4gICAgICAgIGRhdGEudHlwZSA9ICdldmVudCc7XG4gICAgICAgIGRhdGEuZXZ0TmFtZSA9IHNhbml0aXplKGV2ZW50TmFtZSwgdW5zdXBwb3J0ZWRLZXlDaGFyUmVnZXgpO1xuXG4gICAgICAgIGlmIChldmVudHNBcnIubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgY29uc3QgZXZlbnRPYmogPSBldmVudHNBcnIuc2hpZnQoKTtcblxuICAgICAgICAgIGlmICghaXNPYmplY3QoZXZlbnRPYmopKSB7XG4gICAgICAgICAgICAvLyBwdXQgaXQgYmFjayBpZiBpdCBpcyBub3QgYW4gb2JqZWN0XG4gICAgICAgICAgICBldmVudHNBcnIudW5zaGlmdChldmVudE9iaik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGNoZWNrIENoYXJnZWQgRXZlbnQgdnMuIG90aGVyIGV2ZW50cy5cbiAgICAgICAgICAgIGlmIChldmVudE5hbWUgPT09ICdDaGFyZ2VkJykge1xuICAgICAgICAgICAgICBpZiAoIWlzQ2hhcmdlZEV2ZW50U3RydWN0dXJlVmFsaWQoZXZlbnRPYmosIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDIpW19sb2dnZXIkMl0pKSB7XG4gICAgICAgICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkMilbX2xvZ2dlciQyXS5yZXBvcnRFcnJvcig1MTEsICdDaGFyZ2VkIGV2ZW50IHN0cnVjdHVyZSBpbnZhbGlkLiBOb3Qgc2VudC4nKTtcblxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoIWlzRXZlbnRTdHJ1Y3R1cmVGbGF0KGV2ZW50T2JqKSkge1xuICAgICAgICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDIpW19sb2dnZXIkMl0ucmVwb3J0RXJyb3IoNTEyLCBldmVudE5hbWUgKyAnIGV2ZW50IHN0cnVjdHVyZSBpbnZhbGlkLiBOb3Qgc2VudC4nKTtcblxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRhdGEuZXZ0RGF0YSA9IGV2ZW50T2JqO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdCQxKVtfcmVxdWVzdCQxXS5wcm9jZXNzRXZlbnQoZGF0YSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGdldFVSTFBhcmFtcyA9IHVybCA9PiB7XG4gICAgY29uc3QgdXJsUGFyYW1zID0ge307XG4gICAgY29uc3QgaWR4ID0gdXJsLmluZGV4T2YoJz8nKTtcblxuICAgIGlmIChpZHggPiAxKSB7XG4gICAgICBjb25zdCB1cmkgPSB1cmwuc3Vic3RyaW5nKGlkeCArIDEpO1xuICAgICAgbGV0IG1hdGNoO1xuICAgICAgY29uc3QgcGwgPSAvXFwrL2c7IC8vIFJlZ2V4IGZvciByZXBsYWNpbmcgYWRkaXRpb24gc3ltYm9sIHdpdGggYSBzcGFjZVxuXG4gICAgICBjb25zdCBzZWFyY2ggPSAvKFteJj1dKyk9PyhbXiZdKikvZztcblxuICAgICAgY29uc3QgZGVjb2RlID0gZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgbGV0IHJlcGxhY2VtZW50ID0gcy5yZXBsYWNlKHBsLCAnICcpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSBkZWNvZGVVUklDb21wb25lbnQocmVwbGFjZW1lbnQpO1xuICAgICAgICB9IGNhdGNoIChlKSB7Ly8gZWF0XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVwbGFjZW1lbnQ7XG4gICAgICB9O1xuXG4gICAgICBtYXRjaCA9IHNlYXJjaC5leGVjKHVyaSk7XG5cbiAgICAgIHdoaWxlIChtYXRjaCkge1xuICAgICAgICB1cmxQYXJhbXNbZGVjb2RlKG1hdGNoWzFdKV0gPSBkZWNvZGUobWF0Y2hbMl0pO1xuICAgICAgICBtYXRjaCA9IHNlYXJjaC5leGVjKHVyaSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHVybFBhcmFtcztcbiAgfTtcbiAgY29uc3QgZ2V0RG9tYWluID0gdXJsID0+IHtcbiAgICBpZiAodXJsID09PSAnJykgcmV0dXJuICcnO1xuICAgIHZhciBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIGEuaHJlZiA9IHVybDtcbiAgICByZXR1cm4gYS5ob3N0bmFtZTtcbiAgfTtcbiAgY29uc3QgYWRkVG9VUkwgPSAodXJsLCBrLCB2KSA9PiB7XG4gICAgcmV0dXJuIHVybCArICcmJyArIGsgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodik7XG4gIH07XG4gIGNvbnN0IGdldEhvc3ROYW1lID0gKCkgPT4ge1xuICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWU7XG4gIH07XG5cbiAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgY29uc3QgdXJsQmFzZTY0VG9VaW50OEFycmF5ID0gYmFzZTY0U3RyaW5nID0+IHtcbiAgICBsZXQgcGFkZGluZyA9ICc9Jy5yZXBlYXQoKDQgLSBiYXNlNjRTdHJpbmcubGVuZ3RoICUgNCkgJSA0KTtcbiAgICBsZXQgYmFzZTY0ID0gKGJhc2U2NFN0cmluZyArIHBhZGRpbmcpLnJlcGxhY2UoL1xcLS9nLCAnKycpLnJlcGxhY2UoL18vZywgJy8nKTtcbiAgICBsZXQgcmF3RGF0YSA9IHdpbmRvdy5hdG9iKGJhc2U2NCk7XG4gICAgbGV0IHByb2Nlc3NlZERhdGEgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmF3RGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgcHJvY2Vzc2VkRGF0YS5wdXNoKHJhd0RhdGEuY2hhckNvZGVBdChpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHByb2Nlc3NlZERhdGEpO1xuICB9O1xuICBjb25zdCBjb21wcmVzc0RhdGEgPSAoZGF0YU9iamVjdCwgbG9nZ2VyKSA9PiB7XG4gICAgbG9nZ2VyICYmIHR5cGVvZiBsb2dnZXIuZGVidWcgPT09ICdmdW5jdGlvbicgJiYgbG9nZ2VyLmRlYnVnKCdkb2JqOicgKyBkYXRhT2JqZWN0KTtcbiAgICByZXR1cm4gY29tcHJlc3NUb0Jhc2U2NChkYXRhT2JqZWN0KTtcbiAgfTtcbiAgY29uc3QgY29tcHJlc3MgPSB1bmNvbXByZXNzZWQgPT4ge1xuICAgIGlmICh1bmNvbXByZXNzZWQgPT0gbnVsbCkgcmV0dXJuICcnO1xuICAgIGxldCBpLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgY29udGV4dF9kaWN0aW9uYXJ5ID0ge30sXG4gICAgICAgIGNvbnRleHRfZGljdGlvbmFyeVRvQ3JlYXRlID0ge30sXG4gICAgICAgIGNvbnRleHRfYyA9ICcnLFxuICAgICAgICBjb250ZXh0X3djID0gJycsXG4gICAgICAgIGNvbnRleHRfdyA9ICcnLFxuICAgICAgICBjb250ZXh0X2VubGFyZ2VJbiA9IDIsXG4gICAgICAgIC8vIENvbXBlbnNhdGUgZm9yIHRoZSBmaXJzdCBlbnRyeSB3aGljaCBzaG91bGQgbm90IGNvdW50XG4gICAgY29udGV4dF9kaWN0U2l6ZSA9IDMsXG4gICAgICAgIGNvbnRleHRfbnVtQml0cyA9IDIsXG4gICAgICAgIGNvbnRleHRfZGF0YV9zdHJpbmcgPSAnJyxcbiAgICAgICAgY29udGV4dF9kYXRhX3ZhbCA9IDAsXG4gICAgICAgIGNvbnRleHRfZGF0YV9wb3NpdGlvbiA9IDAsXG4gICAgICAgIGlpLFxuICAgICAgICBmID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcblxuICAgIGZvciAoaWkgPSAwOyBpaSA8IHVuY29tcHJlc3NlZC5sZW5ndGg7IGlpICs9IDEpIHtcbiAgICAgIGNvbnRleHRfYyA9IHVuY29tcHJlc3NlZC5jaGFyQXQoaWkpO1xuXG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjb250ZXh0X2RpY3Rpb25hcnksIGNvbnRleHRfYykpIHtcbiAgICAgICAgY29udGV4dF9kaWN0aW9uYXJ5W2NvbnRleHRfY10gPSBjb250ZXh0X2RpY3RTaXplKys7XG4gICAgICAgIGNvbnRleHRfZGljdGlvbmFyeVRvQ3JlYXRlW2NvbnRleHRfY10gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0X3djID0gY29udGV4dF93ICsgY29udGV4dF9jO1xuXG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbnRleHRfZGljdGlvbmFyeSwgY29udGV4dF93YykpIHtcbiAgICAgICAgY29udGV4dF93ID0gY29udGV4dF93YztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoY29udGV4dF9kaWN0aW9uYXJ5VG9DcmVhdGUsIGNvbnRleHRfdykpIHtcbiAgICAgICAgICBpZiAoY29udGV4dF93LmNoYXJDb2RlQXQoMCkgPCAyNTYpIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb250ZXh0X251bUJpdHM7IGkrKykge1xuICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfdmFsID0gY29udGV4dF9kYXRhX3ZhbCA8PCAxO1xuXG4gICAgICAgICAgICAgIGlmIChjb250ZXh0X2RhdGFfcG9zaXRpb24gPT0gMTUpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfcG9zaXRpb24gPSAwO1xuICAgICAgICAgICAgICAgIGNvbnRleHRfZGF0YV9zdHJpbmcgKz0gZihjb250ZXh0X2RhdGFfdmFsKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfdmFsID0gMDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfcG9zaXRpb24rKztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YWx1ZSA9IGNvbnRleHRfdy5jaGFyQ29kZUF0KDApO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgODsgaSsrKSB7XG4gICAgICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSBjb250ZXh0X2RhdGFfdmFsIDw8IDEgfCB2YWx1ZSAmIDE7XG5cbiAgICAgICAgICAgICAgaWYgKGNvbnRleHRfZGF0YV9wb3NpdGlvbiA9PSAxNSkge1xuICAgICAgICAgICAgICAgIGNvbnRleHRfZGF0YV9wb3NpdGlvbiA9IDA7XG4gICAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3N0cmluZyArPSBmKGNvbnRleHRfZGF0YV92YWwpO1xuICAgICAgICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSAwO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRleHRfZGF0YV9wb3NpdGlvbisrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSA+PiAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IDE7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb250ZXh0X251bUJpdHM7IGkrKykge1xuICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfdmFsID0gY29udGV4dF9kYXRhX3ZhbCA8PCAxIHwgdmFsdWU7XG5cbiAgICAgICAgICAgICAgaWYgKGNvbnRleHRfZGF0YV9wb3NpdGlvbiA9PSAxNSkge1xuICAgICAgICAgICAgICAgIGNvbnRleHRfZGF0YV9wb3NpdGlvbiA9IDA7XG4gICAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3N0cmluZyArPSBmKGNvbnRleHRfZGF0YV92YWwpO1xuICAgICAgICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSAwO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRleHRfZGF0YV9wb3NpdGlvbisrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdmFsdWUgPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YWx1ZSA9IGNvbnRleHRfdy5jaGFyQ29kZUF0KDApO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfdmFsID0gY29udGV4dF9kYXRhX3ZhbCA8PCAxIHwgdmFsdWUgJiAxO1xuXG4gICAgICAgICAgICAgIGlmIChjb250ZXh0X2RhdGFfcG9zaXRpb24gPT0gMTUpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfcG9zaXRpb24gPSAwO1xuICAgICAgICAgICAgICAgIGNvbnRleHRfZGF0YV9zdHJpbmcgKz0gZihjb250ZXh0X2RhdGFfdmFsKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfdmFsID0gMDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfcG9zaXRpb24rKztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgPj4gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0X2VubGFyZ2VJbi0tO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHRfZW5sYXJnZUluID09IDApIHtcbiAgICAgICAgICAgIGNvbnRleHRfZW5sYXJnZUluID0gTWF0aC5wb3coMiwgY29udGV4dF9udW1CaXRzKTtcbiAgICAgICAgICAgIGNvbnRleHRfbnVtQml0cysrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRlbGV0ZSBjb250ZXh0X2RpY3Rpb25hcnlUb0NyZWF0ZVtjb250ZXh0X3ddO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0gY29udGV4dF9kaWN0aW9uYXJ5W2NvbnRleHRfd107XG5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29udGV4dF9udW1CaXRzOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSBjb250ZXh0X2RhdGFfdmFsIDw8IDEgfCB2YWx1ZSAmIDE7XG5cbiAgICAgICAgICAgIGlmIChjb250ZXh0X2RhdGFfcG9zaXRpb24gPT0gMTUpIHtcbiAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3Bvc2l0aW9uID0gMDtcbiAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3N0cmluZyArPSBmKGNvbnRleHRfZGF0YV92YWwpO1xuICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfdmFsID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnRleHRfZGF0YV9wb3NpdGlvbisrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlID4+IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dF9lbmxhcmdlSW4tLTtcblxuICAgICAgICBpZiAoY29udGV4dF9lbmxhcmdlSW4gPT0gMCkge1xuICAgICAgICAgIGNvbnRleHRfZW5sYXJnZUluID0gTWF0aC5wb3coMiwgY29udGV4dF9udW1CaXRzKTtcbiAgICAgICAgICBjb250ZXh0X251bUJpdHMrKztcbiAgICAgICAgfSAvLyBBZGQgd2MgdG8gdGhlIGRpY3Rpb25hcnkuXG5cblxuICAgICAgICBjb250ZXh0X2RpY3Rpb25hcnlbY29udGV4dF93Y10gPSBjb250ZXh0X2RpY3RTaXplKys7XG4gICAgICAgIGNvbnRleHRfdyA9IFN0cmluZyhjb250ZXh0X2MpO1xuICAgICAgfVxuICAgIH0gLy8gT3V0cHV0IHRoZSBjb2RlIGZvciB3LlxuXG5cbiAgICBpZiAoY29udGV4dF93ICE9PSAnJykge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjb250ZXh0X2RpY3Rpb25hcnlUb0NyZWF0ZSwgY29udGV4dF93KSkge1xuICAgICAgICBpZiAoY29udGV4dF93LmNoYXJDb2RlQXQoMCkgPCAyNTYpIHtcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29udGV4dF9udW1CaXRzOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSBjb250ZXh0X2RhdGFfdmFsIDw8IDE7XG5cbiAgICAgICAgICAgIGlmIChjb250ZXh0X2RhdGFfcG9zaXRpb24gPT0gMTUpIHtcbiAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3Bvc2l0aW9uID0gMDtcbiAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3N0cmluZyArPSBmKGNvbnRleHRfZGF0YV92YWwpO1xuICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfdmFsID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnRleHRfZGF0YV9wb3NpdGlvbisrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhbHVlID0gY29udGV4dF93LmNoYXJDb2RlQXQoMCk7XG5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgODsgaSsrKSB7XG4gICAgICAgICAgICBjb250ZXh0X2RhdGFfdmFsID0gY29udGV4dF9kYXRhX3ZhbCA8PCAxIHwgdmFsdWUgJiAxO1xuXG4gICAgICAgICAgICBpZiAoY29udGV4dF9kYXRhX3Bvc2l0aW9uID09IDE1KSB7XG4gICAgICAgICAgICAgIGNvbnRleHRfZGF0YV9wb3NpdGlvbiA9IDA7XG4gICAgICAgICAgICAgIGNvbnRleHRfZGF0YV9zdHJpbmcgKz0gZihjb250ZXh0X2RhdGFfdmFsKTtcbiAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3ZhbCA9IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfcG9zaXRpb24rKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSA+PiAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9IDE7XG5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29udGV4dF9udW1CaXRzOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSBjb250ZXh0X2RhdGFfdmFsIDw8IDEgfCB2YWx1ZTtcblxuICAgICAgICAgICAgaWYgKGNvbnRleHRfZGF0YV9wb3NpdGlvbiA9PSAxNSkge1xuICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfcG9zaXRpb24gPSAwO1xuICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfc3RyaW5nICs9IGYoY29udGV4dF9kYXRhX3ZhbCk7XG4gICAgICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSAwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3Bvc2l0aW9uKys7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhbHVlID0gMDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YWx1ZSA9IGNvbnRleHRfdy5jaGFyQ29kZUF0KDApO1xuXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSBjb250ZXh0X2RhdGFfdmFsIDw8IDEgfCB2YWx1ZSAmIDE7XG5cbiAgICAgICAgICAgIGlmIChjb250ZXh0X2RhdGFfcG9zaXRpb24gPT0gMTUpIHtcbiAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3Bvc2l0aW9uID0gMDtcbiAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3N0cmluZyArPSBmKGNvbnRleHRfZGF0YV92YWwpO1xuICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfdmFsID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnRleHRfZGF0YV9wb3NpdGlvbisrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlID4+IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dF9lbmxhcmdlSW4tLTtcblxuICAgICAgICBpZiAoY29udGV4dF9lbmxhcmdlSW4gPT0gMCkge1xuICAgICAgICAgIGNvbnRleHRfZW5sYXJnZUluID0gTWF0aC5wb3coMiwgY29udGV4dF9udW1CaXRzKTtcbiAgICAgICAgICBjb250ZXh0X251bUJpdHMrKztcbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSBjb250ZXh0X2RpY3Rpb25hcnlUb0NyZWF0ZVtjb250ZXh0X3ddO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSBjb250ZXh0X2RpY3Rpb25hcnlbY29udGV4dF93XTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29udGV4dF9udW1CaXRzOyBpKyspIHtcbiAgICAgICAgICBjb250ZXh0X2RhdGFfdmFsID0gY29udGV4dF9kYXRhX3ZhbCA8PCAxIHwgdmFsdWUgJiAxO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHRfZGF0YV9wb3NpdGlvbiA9PSAxNSkge1xuICAgICAgICAgICAgY29udGV4dF9kYXRhX3Bvc2l0aW9uID0gMDtcbiAgICAgICAgICAgIGNvbnRleHRfZGF0YV9zdHJpbmcgKz0gZihjb250ZXh0X2RhdGFfdmFsKTtcbiAgICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb250ZXh0X2RhdGFfcG9zaXRpb24rKztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlID4+IDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29udGV4dF9lbmxhcmdlSW4tLTtcblxuICAgICAgaWYgKGNvbnRleHRfZW5sYXJnZUluID09IDApIHtcbiAgICAgICAgY29udGV4dF9lbmxhcmdlSW4gPSBNYXRoLnBvdygyLCBjb250ZXh0X251bUJpdHMpO1xuICAgICAgICBjb250ZXh0X251bUJpdHMrKztcbiAgICAgIH1cbiAgICB9IC8vIE1hcmsgdGhlIGVuZCBvZiB0aGUgc3RyZWFtXG5cblxuICAgIHZhbHVlID0gMjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBjb250ZXh0X251bUJpdHM7IGkrKykge1xuICAgICAgY29udGV4dF9kYXRhX3ZhbCA9IGNvbnRleHRfZGF0YV92YWwgPDwgMSB8IHZhbHVlICYgMTtcblxuICAgICAgaWYgKGNvbnRleHRfZGF0YV9wb3NpdGlvbiA9PSAxNSkge1xuICAgICAgICBjb250ZXh0X2RhdGFfcG9zaXRpb24gPSAwO1xuICAgICAgICBjb250ZXh0X2RhdGFfc3RyaW5nICs9IGYoY29udGV4dF9kYXRhX3ZhbCk7XG4gICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGV4dF9kYXRhX3Bvc2l0aW9uKys7XG4gICAgICB9XG5cbiAgICAgIHZhbHVlID0gdmFsdWUgPj4gMTtcbiAgICB9IC8vIEZsdXNoIHRoZSBsYXN0IGNoYXJcblxuXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGNvbnRleHRfZGF0YV92YWwgPSBjb250ZXh0X2RhdGFfdmFsIDw8IDE7XG5cbiAgICAgIGlmIChjb250ZXh0X2RhdGFfcG9zaXRpb24gPT0gMTUpIHtcbiAgICAgICAgY29udGV4dF9kYXRhX3N0cmluZyArPSBmKGNvbnRleHRfZGF0YV92YWwpO1xuICAgICAgICBicmVhaztcbiAgICAgIH0gZWxzZSBjb250ZXh0X2RhdGFfcG9zaXRpb24rKztcbiAgICB9XG5cbiAgICByZXR1cm4gY29udGV4dF9kYXRhX3N0cmluZztcbiAgfTtcbiAgY29uc3QgZ2V0S2V5U3RyID0gKCkgPT4ge1xuICAgIGxldCBrZXkgPSAnJztcbiAgICBsZXQgaSA9IDA7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDw9IDI1OyBpKyspIHtcbiAgICAgIGtleSA9IGtleSArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSArIDY1KTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDw9IDI1OyBpKyspIHtcbiAgICAgIGtleSA9IGtleSArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSArIDk3KTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgICAga2V5ID0ga2V5ICsgaTtcbiAgICB9XG5cbiAgICByZXR1cm4ga2V5ICsgJysvPSc7XG4gIH07XG5cbiAgY29uc3QgX2tleVN0ciA9IGdldEtleVN0cigpO1xuICBjb25zdCBjb21wcmVzc1RvQmFzZTY0ID0gaW5wdXQgPT4ge1xuICAgIGlmIChpbnB1dCA9PSBudWxsKSByZXR1cm4gJyc7XG4gICAgdmFyIG91dHB1dCA9ICcnO1xuICAgIHZhciBjaHIxLCBjaHIyLCBjaHIzLCBlbmMxLCBlbmMyLCBlbmMzLCBlbmM0O1xuICAgIHZhciBpID0gMDtcbiAgICBpbnB1dCA9IGNvbXByZXNzKGlucHV0KTtcblxuICAgIHdoaWxlIChpIDwgaW5wdXQubGVuZ3RoICogMikge1xuICAgICAgaWYgKGkgJSAyID09IDApIHtcbiAgICAgICAgY2hyMSA9IGlucHV0LmNoYXJDb2RlQXQoaSAvIDIpID4+IDg7XG4gICAgICAgIGNocjIgPSBpbnB1dC5jaGFyQ29kZUF0KGkgLyAyKSAmIDI1NTtcbiAgICAgICAgaWYgKGkgLyAyICsgMSA8IGlucHV0Lmxlbmd0aCkgY2hyMyA9IGlucHV0LmNoYXJDb2RlQXQoaSAvIDIgKyAxKSA+PiA4O2Vsc2UgY2hyMyA9IE5hTjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNocjEgPSBpbnB1dC5jaGFyQ29kZUF0KChpIC0gMSkgLyAyKSAmIDI1NTtcblxuICAgICAgICBpZiAoKGkgKyAxKSAvIDIgPCBpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgICBjaHIyID0gaW5wdXQuY2hhckNvZGVBdCgoaSArIDEpIC8gMikgPj4gODtcbiAgICAgICAgICBjaHIzID0gaW5wdXQuY2hhckNvZGVBdCgoaSArIDEpIC8gMikgJiAyNTU7XG4gICAgICAgIH0gZWxzZSBjaHIyID0gY2hyMyA9IE5hTjtcbiAgICAgIH1cblxuICAgICAgaSArPSAzO1xuICAgICAgZW5jMSA9IGNocjEgPj4gMjtcbiAgICAgIGVuYzIgPSAoY2hyMSAmIDMpIDw8IDQgfCBjaHIyID4+IDQ7XG4gICAgICBlbmMzID0gKGNocjIgJiAxNSkgPDwgMiB8IGNocjMgPj4gNjtcbiAgICAgIGVuYzQgPSBjaHIzICYgNjM7XG5cbiAgICAgIGlmIChpc05hTihjaHIyKSkge1xuICAgICAgICBlbmMzID0gZW5jNCA9IDY0O1xuICAgICAgfSBlbHNlIGlmIChpc05hTihjaHIzKSkge1xuICAgICAgICBlbmM0ID0gNjQ7XG4gICAgICB9XG5cbiAgICAgIG91dHB1dCA9IG91dHB1dCArIF9rZXlTdHIuY2hhckF0KGVuYzEpICsgX2tleVN0ci5jaGFyQXQoZW5jMikgKyBfa2V5U3RyLmNoYXJBdChlbmMzKSArIF9rZXlTdHIuY2hhckF0KGVuYzQpO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH07XG5cbiAgdmFyIF9maXJlUmVxdWVzdCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiZmlyZVJlcXVlc3RcIik7XG5cbiAgdmFyIF9kcm9wUmVxdWVzdER1ZVRvT3B0T3V0ID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJkcm9wUmVxdWVzdER1ZVRvT3B0T3V0XCIpO1xuXG4gIHZhciBfYWRkVXNlSVBUb1JlcXVlc3QgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImFkZFVzZUlQVG9SZXF1ZXN0XCIpO1xuXG4gIHZhciBfYWRkQVJQVG9SZXF1ZXN0ID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJhZGRBUlBUb1JlcXVlc3RcIik7XG5cbiAgY2xhc3MgUmVxdWVzdERpc3BhdGNoZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgdGhpcy5uZXR3b3JrUmV0cnlDb3VudCA9IDA7XG4gICAgICB0aGlzLm1pbkRlbGF5RnJlcXVlbmN5ID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICAgKiBAcGFyYW0geyp9IHNraXBBUlBcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNlbmRPVUxGbGFnXG4gICAgICovXG4gICAgc3RhdGljIGZpcmVSZXF1ZXN0KHVybCwgc2tpcEFSUCwgc2VuZE9VTEZsYWcsIGV2dE5hbWUpIHtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfZmlyZVJlcXVlc3QpW19maXJlUmVxdWVzdF0odXJsLCAxLCBza2lwQVJQLCBzZW5kT1VMRmxhZywgZXZ0TmFtZSk7XG4gICAgfVxuXG4gICAgZ2V0RGVsYXlGcmVxdWVuY3koKSB7XG4gICAgICB0aGlzLmxvZ2dlci5kZWJ1ZygnTmV0d29yayByZXRyeSAjJyArIHRoaXMubmV0d29ya1JldHJ5Q291bnQpOyAvLyBSZXRyeSB3aXRoIGRlbGF5IGFzIDFzIGZvciBmaXJzdCAxMCByZXRyaWVzXG5cbiAgICAgIGlmICh0aGlzLm5ldHdvcmtSZXRyeUNvdW50IDwgMTApIHtcbiAgICAgICAgdGhpcy5sb2dnZXIuZGVidWcodGhpcy5hY2NvdW50LmlkLCAnRmFpbHVyZSBjb3VudCBpcyAnICsgdGhpcy5uZXR3b3JrUmV0cnlDb3VudCArICcuIFNldHRpbmcgZGVsYXkgZnJlcXVlbmN5IHRvIDFzJyk7XG4gICAgICAgIHRoaXMubWluRGVsYXlGcmVxdWVuY3kgPSBQVVNIX0RFTEFZX01TOyAvLyBSZXNldCBtaW5pbXVtIGRlbGF5IHRvIDFzXG5cbiAgICAgICAgcmV0dXJuIHRoaXMubWluRGVsYXlGcmVxdWVuY3k7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmFjY291bnQucmVnaW9uID09IG51bGwpIHtcbiAgICAgICAgLy8gUmV0cnkgd2l0aCBkZWxheSBhcyAxcyBpZiByZWdpb24gaXMgbnVsbCBpbiBjYXNlIG9mIGV1MVxuICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1Zyh0aGlzLmFjY291bnQuaWQsICdTZXR0aW5nIGRlbGF5IGZyZXF1ZW5jeSB0byAxcycpO1xuICAgICAgICByZXR1cm4gUFVTSF9ERUxBWV9NUztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldHJ5IHdpdGggZGVsYXkgYXMgbWluaW11bSBkZWxheSBmcmVxdWVuY3kgYW5kIGFkZCByYW5kb20gbnVtYmVyIG9mIHNlY29uZHMgdG8gc2NhdHRlciB0cmFmZmljXG4gICAgICAgIGNvbnN0IHJhbmRvbURlbGF5ID0gKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKSArIDEpICogMTAwMDtcbiAgICAgICAgdGhpcy5taW5EZWxheUZyZXF1ZW5jeSArPSByYW5kb21EZWxheTtcblxuICAgICAgICBpZiAodGhpcy5taW5EZWxheUZyZXF1ZW5jeSA8IE1BWF9ERUxBWV9GUkVRVUVOQ1kpIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1Zyh0aGlzLmFjY291bnQuaWQsICdTZXR0aW5nIGRlbGF5IGZyZXF1ZW5jeSB0byAnICsgdGhpcy5taW5EZWxheUZyZXF1ZW5jeSk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMubWluRGVsYXlGcmVxdWVuY3k7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5taW5EZWxheUZyZXF1ZW5jeSA9IFBVU0hfREVMQVlfTVM7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1Zyh0aGlzLmFjY291bnQuaWQsICdTZXR0aW5nIGRlbGF5IGZyZXF1ZW5jeSB0byAnICsgdGhpcy5taW5EZWxheUZyZXF1ZW5jeSk7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbkRlbGF5RnJlcXVlbmN5O1xuICAgICAgfVxuICAgIH1cblxuICB9XG5cbiAgdmFyIF9hZGRBUlBUb1JlcXVlc3QyID0gZnVuY3Rpb24gX2FkZEFSUFRvUmVxdWVzdDIodXJsLCBza2lwUmVzQVJQKSB7XG4gICAgaWYgKHNraXBSZXNBUlAgPT09IHRydWUpIHtcbiAgICAgIGNvbnN0IF9hcnAgPSB7fTtcbiAgICAgIF9hcnAuc2tpcFJlc0FSUCA9IHRydWU7XG4gICAgICByZXR1cm4gYWRkVG9VUkwodXJsLCAnYXJwJywgY29tcHJlc3NEYXRhKEpTT04uc3RyaW5naWZ5KF9hcnApLCB0aGlzLmxvZ2dlcikpO1xuICAgIH1cblxuICAgIGlmIChTdG9yYWdlTWFuYWdlci5faXNMb2NhbFN0b3JhZ2VTdXBwb3J0ZWQoKSAmJiB0eXBlb2YgbG9jYWxTdG9yYWdlLmdldEl0ZW0oQVJQX0NPT0tJRSkgIT09ICd1bmRlZmluZWQnICYmIGxvY2FsU3RvcmFnZS5nZXRJdGVtKEFSUF9DT09LSUUpICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gYWRkVG9VUkwodXJsLCAnYXJwJywgY29tcHJlc3NEYXRhKEpTT04uc3RyaW5naWZ5KFN0b3JhZ2VNYW5hZ2VyLnJlYWRGcm9tTFNvckNvb2tpZShBUlBfQ09PS0lFKSksIHRoaXMubG9nZ2VyKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVybDtcbiAgfTtcblxuICB2YXIgX2FkZFVzZUlQVG9SZXF1ZXN0MiA9IGZ1bmN0aW9uIF9hZGRVc2VJUFRvUmVxdWVzdDIocGFnZUxvYWRVcmwpIHtcbiAgICB2YXIgdXNlSVAgPSBTdG9yYWdlTWFuYWdlci5nZXRNZXRhUHJvcChVU0VJUF9LRVkpO1xuXG4gICAgaWYgKHR5cGVvZiB1c2VJUCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICB1c2VJUCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRUb1VSTChwYWdlTG9hZFVybCwgVVNFSVBfS0VZLCB1c2VJUCA/ICd0cnVlJyA6ICdmYWxzZScpO1xuICB9O1xuXG4gIHZhciBfZHJvcFJlcXVlc3REdWVUb09wdE91dDIgPSBmdW5jdGlvbiBfZHJvcFJlcXVlc3REdWVUb09wdE91dDIoKSB7XG4gICAgaWYgKCRjdC5pc09wdEluUmVxdWVzdCB8fCAhaXNWYWx1ZVZhbGlkKHRoaXMuZGV2aWNlLmdjb29raWUpIHx8ICFpc1N0cmluZyh0aGlzLmRldmljZS5nY29va2llKSkge1xuICAgICAgJGN0LmlzT3B0SW5SZXF1ZXN0ID0gZmFsc2U7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZGV2aWNlLmdjb29raWUuc2xpY2UoLTMpID09PSBPUFRPVVRfQ09PS0lFX0VORFNXSVRIO1xuICB9O1xuXG4gIHZhciBfZmlyZVJlcXVlc3QyID0gZnVuY3Rpb24gX2ZpcmVSZXF1ZXN0Mih1cmwsIHRyaWVzLCBza2lwQVJQLCBzZW5kT1VMRmxhZywgZXZ0TmFtZSkge1xuICAgIHZhciBfd2luZG93JGNsZXZlcnRhcCwgX3dpbmRvdyR3aXpyb2NrZXQ7XG5cbiAgICBpZiAoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9kcm9wUmVxdWVzdER1ZVRvT3B0T3V0KVtfZHJvcFJlcXVlc3REdWVUb09wdE91dF0oKSkge1xuICAgICAgdGhpcy5sb2dnZXIuZGVidWcoJ3JlcSBkcm9wcGVkIGR1ZSB0byBvcHRvdXQgY29va2llOiAnICsgdGhpcy5kZXZpY2UuZ2Nvb2tpZSk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBzZXQgYSByZXF1ZXN0IGluIHByb2dyZXNzXG4gICAgLy8gc28gdGhhdCBpZiBnY29va2llIGlzIG5vdCBwcmVzZW50LCBubyBvdGhlciByZXF1ZXN0IGNhbiBiZSBtYWRlIGFzeW5jaHJvbnVzbHlcblxuXG4gICAgaWYgKCFpc1ZhbHVlVmFsaWQodGhpcy5kZXZpY2UuZ2Nvb2tpZSkpIHtcbiAgICAgICRjdC5ibG9ja1JlcXVlc3QgPSB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBpZiB0aGUgZ2Nvb2tpZSBpcyBudWxsXG4gICAgICogYW5kIHRoZSByZXF1ZXN0IGlzIG5vdCB0aGUgZmlyc3QgcmVxdWVzdFxuICAgICAqIGFuZCB0aGUgdHJpZXMgYXJlIGxlc3MgdGhhbiBtYXggdHJpZXNcbiAgICAgKiBrZWVwIHJldHJ5aW5nXG4gICAgICovXG5cblxuICAgIGlmIChldnROYW1lICYmIGV2dE5hbWUgPT09IFdaUktfRkVUQ0gpIHtcbiAgICAgIC8vIE5ldyByZXRyeSBtZWNoYW5pc21cbiAgICAgIGlmICghaXNWYWx1ZVZhbGlkKHRoaXMuZGV2aWNlLmdjb29raWUpICYmICRjdC5nbG9iYWxDYWNoZS5SRVNQX04gPCAkY3QuZ2xvYmFsQ2FjaGUuUkVRX04gLSAxKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKFwicmV0cnlpbmcgZmlyZSByZXF1ZXN0IGZvciB1cmw6IFwiLmNvbmNhdCh1cmwsIFwiLCB0cmllczogXCIpLmNvbmNhdCh0aGlzLm5ldHdvcmtSZXRyeUNvdW50KSk7XG5cbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2ZpcmVSZXF1ZXN0KVtfZmlyZVJlcXVlc3RdKHVybCwgdW5kZWZpbmVkLCBza2lwQVJQLCBzZW5kT1VMRmxhZyk7XG4gICAgICAgIH0sIHRoaXMuZ2V0RGVsYXlGcmVxdWVuY3koKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghaXNWYWx1ZVZhbGlkKHRoaXMuZGV2aWNlLmdjb29raWUpICYmICRjdC5nbG9iYWxDYWNoZS5SRVNQX04gPCAkY3QuZ2xvYmFsQ2FjaGUuUkVRX04gLSAxICYmIHRyaWVzIDwgTUFYX1RSSUVTKSB7XG4gICAgICAgIC8vIGlmIG9uZ29pbmcgRmlyc3QgUmVxdWVzdCBpcyBpbiBwcm9ncmVzcywgaW5pdGlhdGUgcmV0cnlcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5sb2dnZXIuZGVidWcoXCJyZXRyeWluZyBmaXJlIHJlcXVlc3QgZm9yIHVybDogXCIuY29uY2F0KHVybCwgXCIsIHRyaWVzOiBcIikuY29uY2F0KHRyaWVzKSk7XG5cbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2ZpcmVSZXF1ZXN0KVtfZmlyZVJlcXVlc3RdKHVybCwgdHJpZXMgKyAxLCBza2lwQVJQLCBzZW5kT1VMRmxhZyk7XG4gICAgICAgIH0sIDUwKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gLy8gc2V0IGlzT1VMSW5Qcm9ncmVzcyB0byB0cnVlXG4gICAgLy8gd2hlbiBzZW5kT1VMRmxhZyBpcyBzZXQgdG8gdHJ1ZVxuXG5cbiAgICBpZiAoIXNlbmRPVUxGbGFnKSB7XG4gICAgICBpZiAoaXNWYWx1ZVZhbGlkKHRoaXMuZGV2aWNlLmdjb29raWUpKSB7XG4gICAgICAgIC8vIGFkZCBnY29va2llIHRvIHVybFxuICAgICAgICB1cmwgPSBhZGRUb1VSTCh1cmwsICdnYycsIHRoaXMuZGV2aWNlLmdjb29raWUpO1xuICAgICAgfVxuXG4gICAgICB1cmwgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2FkZEFSUFRvUmVxdWVzdClbX2FkZEFSUFRvUmVxdWVzdF0odXJsLCBza2lwQVJQKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93LmlzT1VMSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgfVxuXG4gICAgdXJsID0gYWRkVG9VUkwodXJsLCAndHJpZXMnLCB0cmllcyk7IC8vIEFkZCB0cmllcyB0byBVUkxcblxuICAgIHVybCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWRkVXNlSVBUb1JlcXVlc3QpW19hZGRVc2VJUFRvUmVxdWVzdF0odXJsKTtcbiAgICB1cmwgPSBhZGRUb1VSTCh1cmwsICdyJywgbmV3IERhdGUoKS5nZXRUaW1lKCkpOyAvLyBhZGQgZXBvY2ggdG8gYmVhdCBjYWNoaW5nIG9mIHRoZSBVUkxcbiAgICAvLyBUT0RPOiBGaWd1cmUgb3V0IGEgYmV0dGVyIHdheSB0byBoYW5kbGUgcGx1Z2luIGNoZWNrXG5cbiAgICBpZiAoKChfd2luZG93JGNsZXZlcnRhcCA9IHdpbmRvdy5jbGV2ZXJ0YXApID09PSBudWxsIHx8IF93aW5kb3ckY2xldmVydGFwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfd2luZG93JGNsZXZlcnRhcC5oYXNPd25Qcm9wZXJ0eSgncGx1Z2luJykpIHx8ICgoX3dpbmRvdyR3aXpyb2NrZXQgPSB3aW5kb3cud2l6cm9ja2V0KSA9PT0gbnVsbCB8fCBfd2luZG93JHdpenJvY2tldCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3dpbmRvdyR3aXpyb2NrZXQuaGFzT3duUHJvcGVydHkoJ3BsdWdpbicpKSkge1xuICAgICAgLy8gdXNlZCB0byBhZGQgcGx1Z2luIG5hbWUgaW4gcmVxdWVzdCBwYXJhbWV0ZXJcbiAgICAgIGNvbnN0IHBsdWdpbiA9IHdpbmRvdy5jbGV2ZXJ0YXAucGx1Z2luIHx8IHdpbmRvdy53aXpyb2NrZXQucGx1Z2luO1xuICAgICAgdXJsID0gYWRkVG9VUkwodXJsLCAnY3RfcGwnLCBwbHVnaW4pO1xuICAgIH1cblxuICAgIGlmICh1cmwuaW5kZXhPZignY2hyb21lLWV4dGVuc2lvbjonKSAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5yZXBsYWNlKCdjaHJvbWUtZXh0ZW5zaW9uOicsICdodHRwczonKTtcbiAgICB9IC8vIFRPRE86IFRyeSB1c2luZyBGdW5jdGlvbiBjb25zdHJ1Y3RvciBpbnN0ZWFkIG9mIGFwcGVuZGluZyBzY3JpcHQuXG5cblxuICAgIHZhciBjdENiU2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2N0LWpwLWNiJyk7XG5cbiAgICB3aGlsZSAoY3RDYlNjcmlwdHNbMF0gJiYgY3RDYlNjcmlwdHNbMF0ucGFyZW50Tm9kZSkge1xuICAgICAgY3RDYlNjcmlwdHNbMF0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjdENiU2NyaXB0c1swXSk7XG4gICAgfVxuXG4gICAgY29uc3QgcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgIHMuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQvamF2YXNjcmlwdCcpO1xuICAgIHMuc2V0QXR0cmlidXRlKCdzcmMnLCB1cmwpO1xuICAgIHMuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjdC1qcC1jYicpO1xuICAgIHMuc2V0QXR0cmlidXRlKCdyZWwnLCAnbm9mb2xsb3cnKTtcbiAgICBzLmFzeW5jID0gdHJ1ZTtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdLmFwcGVuZENoaWxkKHMpO1xuICAgIHRoaXMubG9nZ2VyLmRlYnVnKCdyZXEgc250IC0+IHVybDogJyArIHVybCk7XG4gIH07XG5cbiAgUmVxdWVzdERpc3BhdGNoZXIubG9nZ2VyID0gdm9pZCAwO1xuICBSZXF1ZXN0RGlzcGF0Y2hlci5kZXZpY2UgPSB2b2lkIDA7XG4gIFJlcXVlc3REaXNwYXRjaGVyLmFjY291bnQgPSB2b2lkIDA7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZXF1ZXN0RGlzcGF0Y2hlciwgX2ZpcmVSZXF1ZXN0LCB7XG4gICAgdmFsdWU6IF9maXJlUmVxdWVzdDJcbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZXF1ZXN0RGlzcGF0Y2hlciwgX2Ryb3BSZXF1ZXN0RHVlVG9PcHRPdXQsIHtcbiAgICB2YWx1ZTogX2Ryb3BSZXF1ZXN0RHVlVG9PcHRPdXQyXG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVxdWVzdERpc3BhdGNoZXIsIF9hZGRVc2VJUFRvUmVxdWVzdCwge1xuICAgIHZhbHVlOiBfYWRkVXNlSVBUb1JlcXVlc3QyXG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVxdWVzdERpc3BhdGNoZXIsIF9hZGRBUlBUb1JlcXVlc3QsIHtcbiAgICB2YWx1ZTogX2FkZEFSUFRvUmVxdWVzdDJcbiAgfSk7XG5cbiAgLy8gQ2xldmVyVGFwIHNwZWNpZmljIHV0aWxpdGllc1xuICBjb25zdCBnZXRDYW1wYWlnbk9iamVjdCA9ICgpID0+IHtcbiAgICBsZXQgZmluYWxjYW1wT2JqID0ge307XG5cbiAgICBpZiAoU3RvcmFnZU1hbmFnZXIuX2lzTG9jYWxTdG9yYWdlU3VwcG9ydGVkKCkpIHtcbiAgICAgIGxldCBjYW1wT2JqID0gU3RvcmFnZU1hbmFnZXIucmVhZChDQU1QX0NPT0tJRV9OQU1FKTtcblxuICAgICAgaWYgKGNhbXBPYmogIT0gbnVsbCkge1xuICAgICAgICBjYW1wT2JqID0gSlNPTi5wYXJzZShkZWNvZGVVUklDb21wb25lbnQoY2FtcE9iaikucmVwbGFjZShzaW5nbGVRdW90ZVJlZ2V4LCAnXFxcIicpKTtcblxuICAgICAgICBpZiAoY2FtcE9iai5oYXNPd25Qcm9wZXJ0eSgnZ2xvYmFsJykpIHtcbiAgICAgICAgICBmaW5hbGNhbXBPYmoud3AgPSBjYW1wT2JqO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpbmFsY2FtcE9iaiA9IGNhbXBPYmo7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpbmFsY2FtcE9iaiA9IHt9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmaW5hbGNhbXBPYmo7XG4gIH07XG4gIGNvbnN0IHNhdmVDYW1wYWlnbk9iamVjdCA9IGNhbXBhaWduT2JqID0+IHtcbiAgICBpZiAoU3RvcmFnZU1hbmFnZXIuX2lzTG9jYWxTdG9yYWdlU3VwcG9ydGVkKCkpIHtcbiAgICAgIGNvbnN0IG5ld09iaiA9IHsgLi4uZ2V0Q2FtcGFpZ25PYmplY3QoKSxcbiAgICAgICAgLi4uY2FtcGFpZ25PYmpcbiAgICAgIH07XG4gICAgICBjb25zdCBjYW1wT2JqID0gSlNPTi5zdHJpbmdpZnkobmV3T2JqKTtcbiAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNhdmUoQ0FNUF9DT09LSUVfTkFNRSwgZW5jb2RlVVJJQ29tcG9uZW50KGNhbXBPYmopKTsgLy8gVXBkYXRlIHRoZSBDQU1QX0NPT0tJRV9HIHRvIGJlIGluIHN5bmMgd2l0aCBDQU1QX0NPT0tJRV9OQU1FXG5cbiAgICAgIHNldENhbXBhaWduT2JqZWN0Rm9yR3VpZCgpO1xuICAgIH1cbiAgfTsgLy8gc2V0IENhbXBhaWduIE9iamVjdCBhZ2FpbnN0IHRoZSBndWlkLCB3aXRoIGRhaWx5IGNvdW50IGFuZCB0b3RhbCBjb3VudCBkZXRhaWxzXG5cbiAgY29uc3Qgc2V0Q2FtcGFpZ25PYmplY3RGb3JHdWlkID0gKCkgPT4ge1xuICAgIGlmIChTdG9yYWdlTWFuYWdlci5faXNMb2NhbFN0b3JhZ2VTdXBwb3J0ZWQoKSkge1xuICAgICAgbGV0IGd1aWQgPSBTdG9yYWdlTWFuYWdlci5yZWFkKEdDT09LSUVfTkFNRSk7XG5cbiAgICAgIGlmIChpc1ZhbHVlVmFsaWQoZ3VpZCkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBndWlkID0gSlNPTi5wYXJzZShkZWNvZGVVUklDb21wb25lbnQoU3RvcmFnZU1hbmFnZXIucmVhZChHQ09PS0lFX05BTUUpKSk7XG4gICAgICAgICAgY29uc3QgZ3VpZENhbXBPYmogPSBTdG9yYWdlTWFuYWdlci5yZWFkKENBTVBfQ09PS0lFX0cpID8gSlNPTi5wYXJzZShkZWNvZGVVUklDb21wb25lbnQoU3RvcmFnZU1hbmFnZXIucmVhZChDQU1QX0NPT0tJRV9HKSkpIDoge307XG5cbiAgICAgICAgICBpZiAoZ3VpZCAmJiBTdG9yYWdlTWFuYWdlci5faXNMb2NhbFN0b3JhZ2VTdXBwb3J0ZWQoKSkge1xuICAgICAgICAgICAgdmFyIGZpbmFsQ2FtcE9iaiA9IHt9O1xuICAgICAgICAgICAgdmFyIGNhbXBPYmogPSBnZXRDYW1wYWlnbk9iamVjdCgpO1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoY2FtcE9iaikuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBjYW1wS2V5T2JqID0gZ3VpZCBpbiBndWlkQ2FtcE9iaiAmJiBPYmplY3Qua2V5cyhndWlkQ2FtcE9ialtndWlkXSkubGVuZ3RoICYmIGd1aWRDYW1wT2JqW2d1aWRdW2tleV0gPyBndWlkQ2FtcE9ialtndWlkXVtrZXldIDoge307XG4gICAgICAgICAgICAgIGNvbnN0IGdsb2JhbE9iaiA9IGNhbXBPYmpba2V5XS5nbG9iYWw7XG4gICAgICAgICAgICAgIGNvbnN0IHRvZGF5ID0gZ2V0VG9kYXkoKTtcbiAgICAgICAgICAgICAgY29uc3QgZGFpbHlPYmogPSBjYW1wT2JqW2tleV1bdG9kYXldO1xuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgZ2xvYmFsT2JqICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhbXBhaWduSWRBcnJheSA9IE9iamVjdC5rZXlzKGdsb2JhbE9iaik7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGluZGV4IGluIGNhbXBhaWduSWRBcnJheSkge1xuICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdE9iaiA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoY2FtcGFpZ25JZEFycmF5Lmhhc093blByb3BlcnR5KGluZGV4KSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZGFpbHlDID0gMDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRvdGFsQyA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbXBhaWduSWQgPSBjYW1wYWlnbklkQXJyYXlbaW5kZXhdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYW1wYWlnbklkID09PSAndGMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRhaWx5T2JqICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZGFpbHlPYmpbY2FtcGFpZ25JZF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZGFpbHlDID0gZGFpbHlPYmpbY2FtcGFpZ25JZF07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGdsb2JhbE9iaiAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGdsb2JhbE9ialtjYW1wYWlnbklkXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICB0b3RhbEMgPSBnbG9iYWxPYmpbY2FtcGFpZ25JZF07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXN1bHRPYmogPSBbY2FtcGFpZ25JZCwgZGFpbHlDLCB0b3RhbENdO1xuICAgICAgICAgICAgICAgICAgICBjYW1wS2V5T2JqW2NhbXBhaWduSWRdID0gcmVzdWx0T2JqO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGZpbmFsQ2FtcE9iaiA9IHsgLi4uZmluYWxDYW1wT2JqLFxuICAgICAgICAgICAgICAgIFtrZXldOiBjYW1wS2V5T2JqXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGd1aWRDYW1wT2JqW2d1aWRdID0gZmluYWxDYW1wT2JqO1xuICAgICAgICAgICAgU3RvcmFnZU1hbmFnZXIuc2F2ZShDQU1QX0NPT0tJRV9HLCBlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoZ3VpZENhbXBPYmopKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignSW52YWxpZCBjbGV2ZXJ0YXAgSWQgJyArIGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBnZXRDYW1wYWlnbk9iakZvckxjID0gKCkgPT4ge1xuICAgIC8vIGJlZm9yZSBwcmVwYXJpbmcgZGF0YSB0byBzZW5kIHRvIExDICwgY2hlY2sgaWYgdGhlIGVudHJ5IGZvciB0aGUgZ3VpZCBpcyBhbHJlYWR5IHRoZXJlIGluIENBTVBfQ09PS0lFX0dcbiAgICBjb25zdCBndWlkID0gSlNPTi5wYXJzZShkZWNvZGVVUklDb21wb25lbnQoU3RvcmFnZU1hbmFnZXIucmVhZChHQ09PS0lFX05BTUUpKSk7XG4gICAgbGV0IGNhbXBPYmogPSB7fTtcblxuICAgIGlmIChTdG9yYWdlTWFuYWdlci5faXNMb2NhbFN0b3JhZ2VTdXBwb3J0ZWQoKSkge1xuICAgICAgbGV0IHJlc3VsdE9iaiA9IHt9O1xuICAgICAgY2FtcE9iaiA9IGdldENhbXBhaWduT2JqZWN0KCk7XG4gICAgICBjb25zdCBzdG9yYWdlVmFsdWUgPSBTdG9yYWdlTWFuYWdlci5yZWFkKENBTVBfQ09PS0lFX0cpO1xuICAgICAgY29uc3QgZGVjb2RlZFZhbHVlID0gc3RvcmFnZVZhbHVlID8gZGVjb2RlVVJJQ29tcG9uZW50KHN0b3JhZ2VWYWx1ZSkgOiBudWxsO1xuICAgICAgY29uc3QgcGFyc2VkVmFsdWUgPSBkZWNvZGVkVmFsdWUgPyBKU09OLnBhcnNlKGRlY29kZWRWYWx1ZSkgOiBudWxsO1xuICAgICAgY29uc3QgcmVzdWx0T2JqV1AgPSAhIWd1aWQgJiYgc3RvcmFnZVZhbHVlICE9PSB1bmRlZmluZWQgJiYgc3RvcmFnZVZhbHVlICE9PSBudWxsICYmIHBhcnNlZFZhbHVlICYmIHBhcnNlZFZhbHVlW2d1aWRdICYmIHBhcnNlZFZhbHVlW2d1aWRdLndwID8gT2JqZWN0LnZhbHVlcyhwYXJzZWRWYWx1ZVtndWlkXS53cCkgOiBbXTtcbiAgICAgIGNvbnN0IHJlc3VsdE9ialdJID0gISFndWlkICYmIHN0b3JhZ2VWYWx1ZSAhPT0gdW5kZWZpbmVkICYmIHN0b3JhZ2VWYWx1ZSAhPT0gbnVsbCAmJiBwYXJzZWRWYWx1ZSAmJiBwYXJzZWRWYWx1ZVtndWlkXSAmJiBwYXJzZWRWYWx1ZVtndWlkXS53aSA/IE9iamVjdC52YWx1ZXMocGFyc2VkVmFsdWVbZ3VpZF0ud2kpIDogW107XG4gICAgICBjb25zdCB0b2RheSA9IGdldFRvZGF5KCk7XG4gICAgICBsZXQgdG9kYXlDd3AgPSAwO1xuICAgICAgbGV0IHRvZGF5Q3dpID0gMDtcblxuICAgICAgaWYgKGNhbXBPYmoud3AgJiYgY2FtcE9iai53cFt0b2RheV0gJiYgY2FtcE9iai53cFt0b2RheV0udGMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRvZGF5Q3dwID0gY2FtcE9iai53cFt0b2RheV0udGM7XG4gICAgICB9XG5cbiAgICAgIGlmIChjYW1wT2JqLndpICYmIGNhbXBPYmoud2lbdG9kYXldICYmIGNhbXBPYmoud2lbdG9kYXldLnRjICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0b2RheUN3aSA9IGNhbXBPYmoud2lbdG9kYXldLnRjO1xuICAgICAgfVxuXG4gICAgICByZXN1bHRPYmogPSB7XG4gICAgICAgIHdtcDogdG9kYXlDd3AsXG4gICAgICAgIHdpbXA6IHRvZGF5Q3dpLFxuICAgICAgICB0bGM6IHJlc3VsdE9ialdQLFxuICAgICAgICB3aXRsYzogcmVzdWx0T2JqV0lcbiAgICAgIH07XG4gICAgICByZXR1cm4gcmVzdWx0T2JqO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaXNQcm9maWxlVmFsaWQgPSAocHJvZmlsZU9iaiwgX3JlZikgPT4ge1xuICAgIGxldCB7XG4gICAgICBsb2dnZXJcbiAgICB9ID0gX3JlZjtcbiAgICBsZXQgdmFsaWQgPSBmYWxzZTtcblxuICAgIGlmIChpc09iamVjdChwcm9maWxlT2JqKSkge1xuICAgICAgZm9yIChjb25zdCBwcm9maWxlS2V5IGluIHByb2ZpbGVPYmopIHtcbiAgICAgICAgaWYgKHByb2ZpbGVPYmouaGFzT3duUHJvcGVydHkocHJvZmlsZUtleSkpIHtcbiAgICAgICAgICB2YWxpZCA9IHRydWU7XG4gICAgICAgICAgbGV0IHByb2ZpbGVWYWwgPSBwcm9maWxlT2JqW3Byb2ZpbGVLZXldO1xuXG4gICAgICAgICAgaWYgKHByb2ZpbGVWYWwgPT0gbnVsbCkge1xuICAgICAgICAgICAgZGVsZXRlIHByb2ZpbGVPYmpbcHJvZmlsZUtleV07XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocHJvZmlsZUtleSA9PT0gJ0dlbmRlcicgJiYgIXByb2ZpbGVWYWwubWF0Y2goL15NJHxeRiQvKSkge1xuICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihHRU5ERVJfRVJST1IpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwcm9maWxlS2V5ID09PSAnRW1wbG95ZWQnICYmICFwcm9maWxlVmFsLm1hdGNoKC9eWSR8Xk4kLykpIHtcbiAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoRU1QTE9ZRURfRVJST1IpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwcm9maWxlS2V5ID09PSAnTWFycmllZCcgJiYgIXByb2ZpbGVWYWwubWF0Y2goL15ZJHxeTiQvKSkge1xuICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihNQVJSSUVEX0VSUk9SKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocHJvZmlsZUtleSA9PT0gJ0VkdWNhdGlvbicgJiYgIXByb2ZpbGVWYWwubWF0Y2goL15TY2hvb2wkfF5Db2xsZWdlJHxeR3JhZHVhdGUkLykpIHtcbiAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoRURVQ0FUSU9OX0VSUk9SKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocHJvZmlsZUtleSA9PT0gJ0FnZScgJiYgcHJvZmlsZVZhbCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoaXNDb252ZXJ0aWJsZVRvTnVtYmVyKHByb2ZpbGVWYWwpKSB7XG4gICAgICAgICAgICAgIHByb2ZpbGVPYmouQWdlID0gK3Byb2ZpbGVWYWw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoQUdFX0VSUk9SKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IC8vIGRvYiB3aWxsIGNvbWUgaW4gbGlrZSB0aGlzIC0gJGR0XzE5NDcwODE1IG9yIGRhdGVPYmplY3RcblxuXG4gICAgICAgICAgaWYgKHByb2ZpbGVLZXkgPT09ICdET0InKSB7XG4gICAgICAgICAgICBpZiAoKCEvXlxcJERfLy50ZXN0KHByb2ZpbGVWYWwpIHx8IChwcm9maWxlVmFsICsgJycpLmxlbmd0aCAhPT0gMTEpICYmICFpc0RhdGVPYmplY3QocHJvZmlsZVZhbCkpIHtcbiAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKERPQl9FUlJPUik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpc0RhdGVPYmplY3QocHJvZmlsZVZhbCkpIHtcbiAgICAgICAgICAgICAgcHJvZmlsZU9ialtwcm9maWxlS2V5XSA9IGNvbnZlcnRUb1daUktEYXRlKHByb2ZpbGVWYWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNEYXRlT2JqZWN0KHByb2ZpbGVWYWwpKSB7XG4gICAgICAgICAgICBwcm9maWxlT2JqW3Byb2ZpbGVLZXldID0gY29udmVydFRvV1pSS0RhdGUocHJvZmlsZVZhbCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHByb2ZpbGVLZXkgPT09ICdQaG9uZScgJiYgIWlzT2JqZWN0RW1wdHkocHJvZmlsZVZhbCkpIHtcbiAgICAgICAgICAgIGlmIChwcm9maWxlVmFsLmxlbmd0aCA+IDggJiYgcHJvZmlsZVZhbC5jaGFyQXQoMCkgPT09ICcrJykge1xuICAgICAgICAgICAgICAvLyB2YWxpZCBwaG9uZSBudW1iZXJcbiAgICAgICAgICAgICAgcHJvZmlsZVZhbCA9IHByb2ZpbGVWYWwuc3Vic3RyaW5nKDEsIHByb2ZpbGVWYWwubGVuZ3RoKTtcblxuICAgICAgICAgICAgICBpZiAoaXNDb252ZXJ0aWJsZVRvTnVtYmVyKHByb2ZpbGVWYWwpKSB7XG4gICAgICAgICAgICAgICAgcHJvZmlsZU9iai5QaG9uZSA9ICtwcm9maWxlVmFsO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKFBIT05FX0ZPUk1BVF9FUlJPUiArICcuIFJlbW92ZWQuJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihQSE9ORV9GT1JNQVRfRVJST1IgKyAnLiBSZW1vdmVkLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghdmFsaWQpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBwcm9maWxlT2JqW3Byb2ZpbGVLZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2YWxpZDtcbiAgfTtcbiAgY29uc3QgcHJvY2Vzc0ZCVXNlck9iaiA9IHVzZXIgPT4ge1xuICAgIGNvbnN0IHByb2ZpbGVEYXRhID0ge307XG4gICAgcHJvZmlsZURhdGEuTmFtZSA9IHVzZXIubmFtZTtcblxuICAgIGlmICh1c2VyLmlkICE9IG51bGwpIHtcbiAgICAgIHByb2ZpbGVEYXRhLkZCSUQgPSB1c2VyLmlkICsgJyc7XG4gICAgfSAvLyBGZWIgMjAxNCAtIEZCIGFubm91bmNlZCBvdmVyIDU4IGdlbmRlciBvcHRpb25zLCBoZW5jZSB3ZSBzcGVjaWZpY2FsbHkgbG9vayBmb3IgbWFsZSBvciBmZW1hbGUuIFJlc3Qgd2UgZG9uJ3QgY2FyZS5cblxuXG4gICAgaWYgKHVzZXIuZ2VuZGVyID09PSAnbWFsZScpIHtcbiAgICAgIHByb2ZpbGVEYXRhLkdlbmRlciA9ICdNJztcbiAgICB9IGVsc2UgaWYgKHVzZXIuZ2VuZGVyID09PSAnZmVtYWxlJykge1xuICAgICAgcHJvZmlsZURhdGEuR2VuZGVyID0gJ0YnO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9maWxlRGF0YS5HZW5kZXIgPSAnTyc7XG4gICAgfVxuXG4gICAgY29uc3QgZ2V0SGlnaGVzdEVkdWNhdGlvbiA9IGZ1bmN0aW9uIChlZHVBcnIpIHtcbiAgICAgIGlmIChlZHVBcnIgIT0gbnVsbCkge1xuICAgICAgICBsZXQgY29sbGVnZSA9ICcnO1xuICAgICAgICBsZXQgaGlnaHNjaG9vbCA9ICcnO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWR1QXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgZWR1ID0gZWR1QXJyW2ldO1xuXG4gICAgICAgICAgaWYgKGVkdS50eXBlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBlZHUudHlwZTtcblxuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdHcmFkdWF0ZSBTY2hvb2wnKSB7XG4gICAgICAgICAgICAgIHJldHVybiAnR3JhZHVhdGUnO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnQ29sbGVnZScpIHtcbiAgICAgICAgICAgICAgY29sbGVnZSA9ICcxJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ0hpZ2ggU2Nob29sJykge1xuICAgICAgICAgICAgICBoaWdoc2Nob29sID0gJzEnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb2xsZWdlID09PSAnMScpIHtcbiAgICAgICAgICByZXR1cm4gJ0NvbGxlZ2UnO1xuICAgICAgICB9IGVsc2UgaWYgKGhpZ2hzY2hvb2wgPT09ICcxJykge1xuICAgICAgICAgIHJldHVybiAnU2Nob29sJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAodXNlci5yZWxhdGlvbnNoaXBfc3RhdHVzICE9IG51bGwpIHtcbiAgICAgIHByb2ZpbGVEYXRhLk1hcnJpZWQgPSAnTic7XG5cbiAgICAgIGlmICh1c2VyLnJlbGF0aW9uc2hpcF9zdGF0dXMgPT09ICdNYXJyaWVkJykge1xuICAgICAgICBwcm9maWxlRGF0YS5NYXJyaWVkID0gJ1knO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGVkdSA9IGdldEhpZ2hlc3RFZHVjYXRpb24odXNlci5lZHVjYXRpb24pO1xuXG4gICAgaWYgKGVkdSAhPSBudWxsKSB7XG4gICAgICBwcm9maWxlRGF0YS5FZHVjYXRpb24gPSBlZHU7XG4gICAgfVxuXG4gICAgY29uc3Qgd29yayA9IHVzZXIud29yayAhPSBudWxsID8gdXNlci53b3JrLmxlbmd0aCA6IDA7XG5cbiAgICBpZiAod29yayA+IDApIHtcbiAgICAgIHByb2ZpbGVEYXRhLkVtcGxveWVkID0gJ1knO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9maWxlRGF0YS5FbXBsb3llZCA9ICdOJztcbiAgICB9XG5cbiAgICBpZiAodXNlci5lbWFpbCAhPSBudWxsKSB7XG4gICAgICBwcm9maWxlRGF0YS5FbWFpbCA9IHVzZXIuZW1haWw7XG4gICAgfVxuXG4gICAgaWYgKHVzZXIuYmlydGhkYXkgIT0gbnVsbCkge1xuICAgICAgY29uc3QgbW1kZHl5ID0gdXNlci5iaXJ0aGRheS5zcGxpdCgnLycpOyAvLyBjb21lcyBpbiBhcyBcIjA4LzE1LzE5NDdcIlxuXG4gICAgICBwcm9maWxlRGF0YS5ET0IgPSBzZXREYXRlKG1tZGR5eVsyXSArIG1tZGR5eVswXSArIG1tZGR5eVsxXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb2ZpbGVEYXRhO1xuICB9O1xuICBjb25zdCBwcm9jZXNzR1BsdXNVc2VyT2JqID0gKHVzZXIsIF9yZWYyKSA9PiB7XG4gICAgbGV0IHtcbiAgICAgIGxvZ2dlclxuICAgIH0gPSBfcmVmMjtcbiAgICBjb25zdCBwcm9maWxlRGF0YSA9IHt9O1xuXG4gICAgaWYgKHVzZXIuZGlzcGxheU5hbWUgIT0gbnVsbCkge1xuICAgICAgcHJvZmlsZURhdGEuTmFtZSA9IHVzZXIuZGlzcGxheU5hbWU7XG4gICAgfVxuXG4gICAgaWYgKHVzZXIuaWQgIT0gbnVsbCkge1xuICAgICAgcHJvZmlsZURhdGEuR1BJRCA9IHVzZXIuaWQgKyAnJztcbiAgICB9XG5cbiAgICBpZiAodXNlci5nZW5kZXIgIT0gbnVsbCkge1xuICAgICAgaWYgKHVzZXIuZ2VuZGVyID09PSAnbWFsZScpIHtcbiAgICAgICAgcHJvZmlsZURhdGEuR2VuZGVyID0gJ00nO1xuICAgICAgfSBlbHNlIGlmICh1c2VyLmdlbmRlciA9PT0gJ2ZlbWFsZScpIHtcbiAgICAgICAgcHJvZmlsZURhdGEuR2VuZGVyID0gJ0YnO1xuICAgICAgfSBlbHNlIGlmICh1c2VyLmdlbmRlciA9PT0gJ290aGVyJykge1xuICAgICAgICBwcm9maWxlRGF0YS5HZW5kZXIgPSAnTyc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHVzZXIuaW1hZ2UgIT0gbnVsbCkge1xuICAgICAgaWYgKHVzZXIuaW1hZ2UuaXNEZWZhdWx0ID09PSBmYWxzZSkge1xuICAgICAgICBwcm9maWxlRGF0YS5QaG90byA9IHVzZXIuaW1hZ2UudXJsLnNwbGl0KCc/c3onKVswXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXNlci5lbWFpbHMgIT0gbnVsbCkge1xuICAgICAgZm9yIChsZXQgZW1haWxJZHggPSAwOyBlbWFpbElkeCA8IHVzZXIuZW1haWxzLmxlbmd0aDsgZW1haWxJZHgrKykge1xuICAgICAgICBjb25zdCBlbWFpbE9iaiA9IHVzZXIuZW1haWxzW2VtYWlsSWR4XTtcblxuICAgICAgICBpZiAoZW1haWxPYmoudHlwZSA9PT0gJ2FjY291bnQnKSB7XG4gICAgICAgICAgcHJvZmlsZURhdGEuRW1haWwgPSBlbWFpbE9iai52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh1c2VyLm9yZ2FuaXphdGlvbnMgIT0gbnVsbCkge1xuICAgICAgcHJvZmlsZURhdGEuRW1wbG95ZWQgPSAnTic7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdXNlci5vcmdhbml6YXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IG9yZ09iaiA9IHVzZXIub3JnYW5pemF0aW9uc1tpXTtcblxuICAgICAgICBpZiAob3JnT2JqLnR5cGUgPT09ICd3b3JrJykge1xuICAgICAgICAgIHByb2ZpbGVEYXRhLkVtcGxveWVkID0gJ1knO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHVzZXIuYmlydGhkYXkgIT0gbnVsbCkge1xuICAgICAgY29uc3QgeXl5eW1tZGQgPSB1c2VyLmJpcnRoZGF5LnNwbGl0KCctJyk7IC8vIGNvbWVzIGluIGFzIFwiMTk3Ni0wNy0yN1wiXG5cbiAgICAgIHByb2ZpbGVEYXRhLkRPQiA9IHNldERhdGUoeXl5eW1tZGRbMF0gKyB5eXl5bW1kZFsxXSArIHl5eXltbWRkWzJdKTtcbiAgICB9XG5cbiAgICBpZiAodXNlci5yZWxhdGlvbnNoaXBTdGF0dXMgIT0gbnVsbCkge1xuICAgICAgcHJvZmlsZURhdGEuTWFycmllZCA9ICdOJztcblxuICAgICAgaWYgKHVzZXIucmVsYXRpb25zaGlwU3RhdHVzID09PSAnbWFycmllZCcpIHtcbiAgICAgICAgcHJvZmlsZURhdGEuTWFycmllZCA9ICdZJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsb2dnZXIuZGVidWcoJ2dwbHVzIHVzciBwcm9maWxlICcgKyBKU09OLnN0cmluZ2lmeShwcm9maWxlRGF0YSkpO1xuICAgIHJldHVybiBwcm9maWxlRGF0YTtcbiAgfTtcbiAgY29uc3QgYWRkVG9Mb2NhbFByb2ZpbGVNYXAgPSAocHJvZmlsZU9iaiwgb3ZlcnJpZGUpID0+IHtcbiAgICBpZiAoU3RvcmFnZU1hbmFnZXIuX2lzTG9jYWxTdG9yYWdlU3VwcG9ydGVkKCkpIHtcbiAgICAgIGlmICgkY3QuZ2xvYmFsUHJvZmlsZU1hcCA9PSBudWxsKSB7XG4gICAgICAgICRjdC5nbG9iYWxQcm9maWxlTWFwID0gU3RvcmFnZU1hbmFnZXIucmVhZEZyb21MU29yQ29va2llKFBSX0NPT0tJRSk7XG5cbiAgICAgICAgaWYgKCRjdC5nbG9iYWxQcm9maWxlTWFwID09IG51bGwpIHtcbiAgICAgICAgICAkY3QuZ2xvYmFsUHJvZmlsZU1hcCA9IHt9O1xuICAgICAgICB9XG4gICAgICB9IC8vIE1vdmUgcHJvcHMgZnJvbSBjdXN0b20gYnVja2V0IHRvIG91dHNpZGUuXG5cblxuICAgICAgaWYgKHByb2ZpbGVPYmouX2N1c3RvbSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGtleXMgPSBwcm9maWxlT2JqLl9jdXN0b207XG5cbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4ga2V5cykge1xuICAgICAgICAgIGlmIChrZXlzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIHByb2ZpbGVPYmpba2V5XSA9IGtleXNba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBkZWxldGUgcHJvZmlsZU9iai5fY3VzdG9tO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGNvbnN0IHByb3AgaW4gcHJvZmlsZU9iaikge1xuICAgICAgICBpZiAocHJvZmlsZU9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICAgIGlmICgkY3QuZ2xvYmFsUHJvZmlsZU1hcC5oYXNPd25Qcm9wZXJ0eShwcm9wKSAmJiAhb3ZlcnJpZGUpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgICRjdC5nbG9iYWxQcm9maWxlTWFwW3Byb3BdID0gcHJvZmlsZU9ialtwcm9wXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoJGN0Lmdsb2JhbFByb2ZpbGVNYXAuX2N1c3RvbSAhPSBudWxsKSB7XG4gICAgICAgIGRlbGV0ZSAkY3QuZ2xvYmFsUHJvZmlsZU1hcC5fY3VzdG9tO1xuICAgICAgfVxuXG4gICAgICBTdG9yYWdlTWFuYWdlci5zYXZlVG9MU29yQ29va2llKFBSX0NPT0tJRSwgJGN0Lmdsb2JhbFByb2ZpbGVNYXApO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgY2xvc2VJZnJhbWUgPSAoY2FtcGFpZ25JZCwgZGl2SWRJZ25vcmVkLCBjdXJyZW50U2Vzc2lvbklkKSA9PiB7XG4gICAgaWYgKGNhbXBhaWduSWQgIT0gbnVsbCAmJiBjYW1wYWlnbklkICE9PSAnLTEnKSB7XG4gICAgICBpZiAoU3RvcmFnZU1hbmFnZXIuX2lzTG9jYWxTdG9yYWdlU3VwcG9ydGVkKCkpIHtcbiAgICAgICAgY29uc3QgY2FtcGFpZ25PYmogPSBnZXRDYW1wYWlnbk9iamVjdCgpO1xuICAgICAgICBsZXQgc2Vzc2lvbkNhbXBhaWduT2JqID0gY2FtcGFpZ25PYmoud3BbY3VycmVudFNlc3Npb25JZF07XG5cbiAgICAgICAgaWYgKHNlc3Npb25DYW1wYWlnbk9iaiA9PSBudWxsKSB7XG4gICAgICAgICAgc2Vzc2lvbkNhbXBhaWduT2JqID0ge307XG4gICAgICAgICAgY2FtcGFpZ25PYmpbY3VycmVudFNlc3Npb25JZF0gPSBzZXNzaW9uQ2FtcGFpZ25PYmo7XG4gICAgICAgIH1cblxuICAgICAgICBzZXNzaW9uQ2FtcGFpZ25PYmpbY2FtcGFpZ25JZF0gPSAnZG5kJztcbiAgICAgICAgc2F2ZUNhbXBhaWduT2JqZWN0KGNhbXBhaWduT2JqKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoJGN0LmNhbXBhaWduRGl2TWFwICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IGRpdklkID0gJGN0LmNhbXBhaWduRGl2TWFwW2NhbXBhaWduSWRdO1xuXG4gICAgICBpZiAoZGl2SWQgIT0gbnVsbCkge1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkaXZJZCkuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgICAgICBpZiAoZGl2SWQgPT09ICdpbnRlbnRQcmV2aWV3Jykge1xuICAgICAgICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW50ZW50T3BhY2l0eURpdicpICE9IG51bGwpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnRlbnRPcGFjaXR5RGl2Jykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IGFycCA9IGpzb25NYXAgPT4ge1xuICAgIC8vIEZvciB1bnJlZ2lzdGVyIGNhbGxzIGRvbnQgc2V0IGFycCBpbiBMU1xuICAgIGlmIChqc29uTWFwLnNraXBSZXNBUlAgIT0gbnVsbCAmJiBqc29uTWFwLnNraXBSZXNBUlApIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoJ1VwZGF0ZSBBUlAgUmVxdWVzdCByZWplY3RlZCcsIGpzb25NYXApO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgaXNPVUxBUlAgPSBqc29uTWFwW0lTX09VTF0gPT09IHRydWU7XG5cbiAgICBpZiAoU3RvcmFnZU1hbmFnZXIuX2lzTG9jYWxTdG9yYWdlU3VwcG9ydGVkKCkpIHtcbiAgICAgIC8vIFVwZGF0ZSBhcnAgb25seSBpZiBpdCBpcyBudWxsIG9yIGFuIG91bCByZXF1ZXN0XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgYXJwRnJvbVN0b3JhZ2UgPSBTdG9yYWdlTWFuYWdlci5yZWFkRnJvbUxTb3JDb29raWUoQVJQX0NPT0tJRSk7XG5cbiAgICAgICAgaWYgKGFycEZyb21TdG9yYWdlID09IG51bGwgfHwgaXNPVUxBUlApIHtcbiAgICAgICAgICBhcnBGcm9tU3RvcmFnZSA9IHt9O1xuXG4gICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4ganNvbk1hcCkge1xuICAgICAgICAgICAgaWYgKGpzb25NYXAuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICBpZiAoanNvbk1hcFtrZXldID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBhcnBGcm9tU3RvcmFnZVtrZXldO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFycEZyb21TdG9yYWdlW2tleV0gPSBqc29uTWFwW2tleV07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBTdG9yYWdlTWFuYWdlci5zYXZlVG9MU29yQ29va2llKEFSUF9DT09LSUUsIGFycEZyb21TdG9yYWdlKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdVbmFibGUgdG8gcGFyc2UgQVJQIEpTT046ICcgKyBlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IHNldEVudW0gPSAoZW51bVZhbCwgbG9nZ2VyKSA9PiB7XG4gICAgaWYgKGlzU3RyaW5nKGVudW1WYWwpIHx8IGlzTnVtYmVyKGVudW1WYWwpKSB7XG4gICAgICByZXR1cm4gJyRFXycgKyBlbnVtVmFsO1xuICAgIH1cblxuICAgIGxvZ2dlci5lcnJvcihFTlVNX0ZPUk1BVF9FUlJPUik7XG4gIH07XG4gIGNvbnN0IGhhbmRsZUVtYWlsU3Vic2NyaXB0aW9uID0gKHN1YnNjcmlwdGlvbiwgcmVFbmNvZGVkLCBmZXRjaEdyb3VwcywgYWNjb3VudCwgbG9nZ2VyKSA9PiB7XG4gICAgY29uc3QgdXJsUGFyYW1zQXNJcyA9IGdldFVSTFBhcmFtcyhsb2NhdGlvbi5ocmVmKTsgLy8gY2FuJ3QgdXNlIHVybF9wYXJhbXMgYXMgaXQgaXMgaW4gbG93ZXJjYXNlIGFib3ZlXG5cbiAgICBjb25zdCBlbmNvZGVkRW1haWxJZCA9IHVybFBhcmFtc0FzSXMuZTtcbiAgICBjb25zdCBlbmNvZGVkUHJvZmlsZVByb3BzID0gdXJsUGFyYW1zQXNJcy5wO1xuICAgIGNvbnN0IHBhZ2VUeXBlID0gdXJsUGFyYW1zQXNJcy5wYWdlX3R5cGU7XG5cbiAgICBpZiAodHlwZW9mIGVuY29kZWRFbWFpbElkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3QgZGF0YSA9IHt9O1xuICAgICAgZGF0YS5pZCA9IGFjY291bnQuaWQ7IC8vIGFjY291bnRJZFxuXG4gICAgICBkYXRhLnVuc3ViR3JvdXBzID0gJGN0LnVuc3ViR3JvdXBzOyAvLyB1bnN1YnNjcmliZSBncm91cHNcblxuICAgICAgaWYgKCRjdC51cGRhdGVkQ2F0ZWdvcnlMb25nKSB7XG4gICAgICAgIGRhdGFbY2F0ZWdvcnlMb25nS2V5XSA9ICRjdC51cGRhdGVkQ2F0ZWdvcnlMb25nO1xuICAgICAgfVxuXG4gICAgICBsZXQgdXJsID0gYWNjb3VudC5lbWFpbFVSTDtcblxuICAgICAgaWYgKGZldGNoR3JvdXBzKSB7XG4gICAgICAgIHVybCA9IGFkZFRvVVJMKHVybCwgJ2ZldGNoR3JvdXBzJywgZmV0Y2hHcm91cHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVFbmNvZGVkKSB7XG4gICAgICAgIHVybCA9IGFkZFRvVVJMKHVybCwgJ2VuY29kZWQnLCByZUVuY29kZWQpO1xuICAgICAgfVxuXG4gICAgICB1cmwgPSBhZGRUb1VSTCh1cmwsICdlJywgZW5jb2RlZEVtYWlsSWQpO1xuICAgICAgdXJsID0gYWRkVG9VUkwodXJsLCAnZCcsIGNvbXByZXNzRGF0YShKU09OLnN0cmluZ2lmeShkYXRhKSwgbG9nZ2VyKSk7XG5cbiAgICAgIGlmIChlbmNvZGVkUHJvZmlsZVByb3BzKSB7XG4gICAgICAgIHVybCA9IGFkZFRvVVJMKHVybCwgJ3AnLCBlbmNvZGVkUHJvZmlsZVByb3BzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN1YnNjcmlwdGlvbiAhPT0gJy0xJykge1xuICAgICAgICB1cmwgPSBhZGRUb1VSTCh1cmwsICdzdWInLCBzdWJzY3JpcHRpb24pO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFnZVR5cGUpIHtcbiAgICAgICAgJGN0Lmdsb2JhbFVuc3Vic2NyaWJlID0gcGFnZVR5cGUgPT09IEdMT0JBTDtcbiAgICAgICAgdXJsID0gYWRkVG9VUkwodXJsLCAncGFnZV90eXBlJywgcGFnZVR5cGUpO1xuICAgICAgfVxuXG4gICAgICBSZXF1ZXN0RGlzcGF0Y2hlci5maXJlUmVxdWVzdCh1cmwpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgX2xvZ2dlciQzID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJsb2dnZXJcIik7XG5cbiAgdmFyIF9yZXF1ZXN0JDIgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInJlcXVlc3RcIik7XG5cbiAgdmFyIF9hY2NvdW50ID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJhY2NvdW50XCIpO1xuXG4gIHZhciBfb2xkVmFsdWVzJDEgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcIm9sZFZhbHVlc1wiKTtcblxuICB2YXIgX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlJDEgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImlzUGVyc29uYWxpc2F0aW9uQWN0aXZlXCIpO1xuXG4gIHZhciBfcHJvY2Vzc1Byb2ZpbGVBcnJheSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwicHJvY2Vzc1Byb2ZpbGVBcnJheVwiKTtcblxuICBjbGFzcyBQcm9maWxlSGFuZGxlciBleHRlbmRzIEFycmF5IHtcbiAgICBjb25zdHJ1Y3RvcihfcmVmLCB2YWx1ZXMpIHtcbiAgICAgIGxldCB7XG4gICAgICAgIGxvZ2dlcixcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgYWNjb3VudCxcbiAgICAgICAgaXNQZXJzb25hbGlzYXRpb25BY3RpdmVcbiAgICAgIH0gPSBfcmVmO1xuICAgICAgc3VwZXIoKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfcHJvY2Vzc1Byb2ZpbGVBcnJheSwge1xuICAgICAgICB2YWx1ZTogX3Byb2Nlc3NQcm9maWxlQXJyYXkyXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfbG9nZ2VyJDMsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9yZXF1ZXN0JDIsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9hY2NvdW50LCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfb2xkVmFsdWVzJDEsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9pc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZSQxLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDMpW19sb2dnZXIkM10gPSBsb2dnZXI7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlcXVlc3QkMilbX3JlcXVlc3QkMl0gPSByZXF1ZXN0O1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9hY2NvdW50KVtfYWNjb3VudF0gPSBhY2NvdW50O1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9vbGRWYWx1ZXMkMSlbX29sZFZhbHVlcyQxXSA9IHZhbHVlcztcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfaXNQZXJzb25hbGlzYXRpb25BY3RpdmUkMSlbX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlJDFdID0gaXNQZXJzb25hbGlzYXRpb25BY3RpdmU7XG4gICAgfVxuXG4gICAgcHVzaCgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBwcm9maWxlc0FyciA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgcHJvZmlsZXNBcnJbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcHJvY2Vzc1Byb2ZpbGVBcnJheSlbX3Byb2Nlc3NQcm9maWxlQXJyYXldKHByb2ZpbGVzQXJyKTtcblxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgX3Byb2Nlc3NPbGRWYWx1ZXMoKSB7XG4gICAgICBpZiAoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9vbGRWYWx1ZXMkMSlbX29sZFZhbHVlcyQxXSkge1xuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3Byb2Nlc3NQcm9maWxlQXJyYXkpW19wcm9jZXNzUHJvZmlsZUFycmF5XShfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX29sZFZhbHVlcyQxKVtfb2xkVmFsdWVzJDFdKTtcbiAgICAgIH1cblxuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9vbGRWYWx1ZXMkMSlbX29sZFZhbHVlcyQxXSA9IG51bGw7XG4gICAgfVxuXG4gICAgZ2V0QXR0cmlidXRlKHByb3BOYW1lKSB7XG4gICAgICBpZiAoIV9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfaXNQZXJzb25hbGlzYXRpb25BY3RpdmUkMSlbX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlJDFdKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoJGN0Lmdsb2JhbFByb2ZpbGVNYXAgPT0gbnVsbCkge1xuICAgICAgICAkY3QuZ2xvYmFsUHJvZmlsZU1hcCA9IFN0b3JhZ2VNYW5hZ2VyLnJlYWRGcm9tTFNvckNvb2tpZShQUl9DT09LSUUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoJGN0Lmdsb2JhbFByb2ZpbGVNYXAgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJGN0Lmdsb2JhbFByb2ZpbGVNYXBbcHJvcE5hbWVdO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHthbnl9IGtleVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb21tYW5kXG4gICAgICogaW5jcmVhc2VzIG9yIGRlY3JlYXNlcyB2YWx1ZSBvZiB0aGUgbnVtYmVyIHR5cGUgcHJvcGVydGllcyBpbiBwcm9maWxlIG9iamVjdFxuICAgICAqL1xuICAgIF9oYW5kbGVJbmNyZW1lbnREZWNyZW1lbnRWYWx1ZShrZXksIHZhbHVlLCBjb21tYW5kKSB7XG4gICAgICB2YXIgXyRjdCRnbG9iYWxQcm9maWxlTWFwO1xuXG4gICAgICAvLyBDaGVjayBpZiB0aGUgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIDBcbiAgICAgIGlmICgkY3QuZ2xvYmFsUHJvZmlsZU1hcCA9PSBudWxsKSB7XG4gICAgICAgICRjdC5nbG9iYWxQcm9maWxlTWFwID0gU3RvcmFnZU1hbmFnZXIucmVhZEZyb21MU29yQ29va2llKFBSX0NPT0tJRSk7XG4gICAgICB9XG5cbiAgICAgIGlmICgkY3QuZ2xvYmFsUHJvZmlsZU1hcCA9PSBudWxsICYmICEoKF8kY3QkZ2xvYmFsUHJvZmlsZU1hcCA9ICRjdC5nbG9iYWxQcm9maWxlTWFwKSA9PT0gbnVsbCB8fCBfJGN0JGdsb2JhbFByb2ZpbGVNYXAgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF8kY3QkZ2xvYmFsUHJvZmlsZU1hcC5oYXNPd25Qcm9wZXJ0eShrZXkpKSkge1xuICAgICAgICAvLyBDaGVjayBpZiB0aGUgcHJvZmlsZSBtYXAgYWxyZWFkeSBoYXMgdGhlIHByb3BlcnkgZGVmaW5lZFxuICAgICAgICBjb25zb2xlLmVycm9yKCdLaW5kbHkgY3JlYXRlIHByb2ZpbGUgd2l0aCByZXF1aXJlZCBwcm9wcnR5IHRvIGluY3JlbWVudC9kZWNyZW1lbnQuJyk7XG4gICAgICB9IGVsc2UgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInIHx8IHZhbHVlIDw9IDApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignVmFsdWUgc2hvdWxkIGJlIGEgbnVtYmVyIGdyZWF0ZXIgdGhhbiAwJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBVcGRhdGUgdGhlIHByb2ZpbGUgcHJvcGVydHkgaW4gbG9jYWwgc3RvcmFnZVxuICAgICAgICBpZiAoY29tbWFuZCA9PT0gQ09NTUFORF9JTkNSRU1FTlQpIHtcbiAgICAgICAgICAkY3QuZ2xvYmFsUHJvZmlsZU1hcFtrZXldID0gJGN0Lmdsb2JhbFByb2ZpbGVNYXBba2V5XSArIHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRjdC5nbG9iYWxQcm9maWxlTWFwW2tleV0gPSAkY3QuZ2xvYmFsUHJvZmlsZU1hcFtrZXldIC0gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBTdG9yYWdlTWFuYWdlci5zYXZlVG9MU29yQ29va2llKFBSX0NPT0tJRSwgJGN0Lmdsb2JhbFByb2ZpbGVNYXApOyAvLyBTZW5kIHRoZSB1cGRhdGVkIHZhbHVlIHRvIExDXG5cbiAgICAgICAgbGV0IGRhdGEgPSB7fTtcbiAgICAgICAgY29uc3QgcHJvZmlsZU9iaiA9IHt9O1xuICAgICAgICBkYXRhLnR5cGUgPSAncHJvZmlsZSc7XG4gICAgICAgIHByb2ZpbGVPYmpba2V5XSA9IHtcbiAgICAgICAgICBbY29tbWFuZF06IHZhbHVlXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHByb2ZpbGVPYmoudHogPT0gbnVsbCkge1xuICAgICAgICAgIC8vIHRyeSB0byBhdXRvIGNhcHR1cmUgdXNlciB0aW1lem9uZSBpZiBub3QgcHJlc2VudFxuICAgICAgICAgIHByb2ZpbGVPYmoudHogPSBuZXcgRGF0ZSgpLnRvU3RyaW5nKCkubWF0Y2goLyhbQS1aXStbXFwrLV1bMC05XSspLylbMV07XG4gICAgICAgIH1cblxuICAgICAgICBkYXRhLnByb2ZpbGUgPSBwcm9maWxlT2JqO1xuICAgICAgICBkYXRhID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0JDIpW19yZXF1ZXN0JDJdLmFkZFN5c3RlbURhdGFUb09iamVjdChkYXRhLCB0cnVlKTtcblxuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlcXVlc3QkMilbX3JlcXVlc3QkMl0uYWRkRmxhZ3MoZGF0YSk7XG5cbiAgICAgICAgY29uc3QgY29tcHJlc3NlZERhdGEgPSBjb21wcmVzc0RhdGEoSlNPTi5zdHJpbmdpZnkoZGF0YSksIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDMpW19sb2dnZXIkM10pO1xuXG4gICAgICAgIGxldCBwYWdlTG9hZFVybCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWNjb3VudClbX2FjY291bnRdLmRhdGFQb3N0VVJMO1xuXG4gICAgICAgIHBhZ2VMb2FkVXJsID0gYWRkVG9VUkwocGFnZUxvYWRVcmwsICd0eXBlJywgRVZUX1BVU0gpO1xuICAgICAgICBwYWdlTG9hZFVybCA9IGFkZFRvVVJMKHBhZ2VMb2FkVXJsLCAnZCcsIGNvbXByZXNzZWREYXRhKTtcblxuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlcXVlc3QkMilbX3JlcXVlc3QkMl0uc2F2ZUFuZEZpcmVSZXF1ZXN0KHBhZ2VMb2FkVXJsLCAkY3QuYmxvY2tSZXF1ZXN0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2FueX0ga2V5XG4gICAgICogQHBhcmFtIHthcnJheX0gYXJyYXlWYWxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29tbWFuZFxuICAgICAqIG92ZXJ3cml0ZXMvc2V0cyBuZXcgdmFsdWUocykgYWdhaW5zdCBhIGtleS9wcm9wZXJ0eSBpbiBwcm9maWxlIG9iamVjdFxuICAgICAqL1xuXG5cbiAgICBfaGFuZGxlTXVsdGlWYWx1ZVNldChrZXksIGFycmF5VmFsLCBjb21tYW5kKSB7XG4gICAgICBjb25zdCBhcnJheSA9IFtdO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5VmFsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYXJyYXlWYWxbaV0gPT09ICdudW1iZXInICYmICFhcnJheS5pbmNsdWRlcyhhcnJheVZhbFtpXSkpIHtcbiAgICAgICAgICBhcnJheS5wdXNoKGFycmF5VmFsW2ldKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJyYXlWYWxbaV0gPT09ICdzdHJpbmcnICYmICFhcnJheS5pbmNsdWRlcyhhcnJheVZhbFtpXS50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgIGFycmF5LnB1c2goYXJyYXlWYWxbaV0udG9Mb3dlckNhc2UoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignYXJyYXkgc3VwcG9ydHMgb25seSBzdHJpbmcgb3IgbnVtYmVyIHR5cGUgdmFsdWVzJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCRjdC5nbG9iYWxQcm9maWxlTWFwID09IG51bGwpIHtcbiAgICAgICAgdmFyIF9TdG9yYWdlTWFuYWdlciRyZWFkRjtcblxuICAgICAgICAkY3QuZ2xvYmFsUHJvZmlsZU1hcCA9IChfU3RvcmFnZU1hbmFnZXIkcmVhZEYgPSBTdG9yYWdlTWFuYWdlci5yZWFkRnJvbUxTb3JDb29raWUoUFJfQ09PS0lFKSkgIT09IG51bGwgJiYgX1N0b3JhZ2VNYW5hZ2VyJHJlYWRGICE9PSB2b2lkIDAgPyBfU3RvcmFnZU1hbmFnZXIkcmVhZEYgOiB7fTtcbiAgICAgIH1cblxuICAgICAgJGN0Lmdsb2JhbFByb2ZpbGVNYXBba2V5XSA9IGFycmF5O1xuICAgICAgU3RvcmFnZU1hbmFnZXIuc2F2ZVRvTFNvckNvb2tpZShQUl9DT09LSUUsICRjdC5nbG9iYWxQcm9maWxlTWFwKTtcbiAgICAgIHRoaXMuc2VuZE11bHRpVmFsdWVEYXRhKGtleSwgYXJyYXlWYWwsIGNvbW1hbmQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7YW55fSBwcm9wS2V5IC0gdGhlIHByb3BlcnR5IG5hbWUgdG8gYmUgYWRkZWQgaW4gdGhlIHByb2ZpbGUgb2JqZWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmcsIG51bWJlciwgYXJyYXl9IHByb3BWYWwgLSB0aGUgcHJvcGVydHkgdmFsdWUgdG8gYmUgYWRkZWQgYWdhaW5zdCB0aGUgQHByb3BrZXkga2V5XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbW1hbmRcbiAgICAgKiBBZGRzIGFycmF5IG9yIHNpbmdsZSB2YWx1ZSBhZ2FpbnN0IGEga2V5L3Byb3BlcnR5IGluIHByb2ZpbGUgb2JqZWN0XG4gICAgICovXG5cblxuICAgIF9oYW5kbGVNdWx0aVZhbHVlQWRkKHByb3BLZXksIHByb3BWYWwsIGNvbW1hbmQpIHtcbiAgICAgIC8vIEluaXRpYWxpemUgYXJyYXlcbiAgICAgIHZhciBhcnJheSA9IFtdOyAvLyBDaGVjayBpZiBnbG9iYWxQcm9maWxlTWFwIGlzIG51bGwsIGluaXRpYWxpemUgaWYgbmVlZGVkXG5cbiAgICAgIGlmICgkY3QuZ2xvYmFsUHJvZmlsZU1hcCA9PSBudWxsKSB7XG4gICAgICAgICRjdC5nbG9iYWxQcm9maWxlTWFwID0gU3RvcmFnZU1hbmFnZXIucmVhZEZyb21MU29yQ29va2llKFBSX0NPT0tJRSkgfHwge307XG4gICAgICB9IC8vIENoZWNrIGlmIHRoZSB2YWx1ZSB0byBiZSBzZXQgaXMgZWl0aGVyIHN0cmluZyBvciBudW1iZXJcblxuXG4gICAgICBpZiAodHlwZW9mIHByb3BWYWwgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBwcm9wVmFsID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAoJGN0Lmdsb2JhbFByb2ZpbGVNYXAuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgICAgICBhcnJheSA9ICRjdC5nbG9iYWxQcm9maWxlTWFwW3Byb3BLZXldO1xuICAgICAgICAgIGFycmF5LnB1c2godHlwZW9mIHByb3BWYWwgPT09ICdudW1iZXInID8gcHJvcFZhbCA6IHByb3BWYWwudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGN0Lmdsb2JhbFByb2ZpbGVNYXBbcHJvcEtleV0gPSBwcm9wVmFsO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBDaGVjayBpZiBwcm9wVmFsIGlzIGFuIGFycmF5XG4gICAgICAgIGlmICgkY3QuZ2xvYmFsUHJvZmlsZU1hcC5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICAgIGFycmF5ID0gQXJyYXkuaXNBcnJheSgkY3QuZ2xvYmFsUHJvZmlsZU1hcFtwcm9wS2V5XSkgPyAkY3QuZ2xvYmFsUHJvZmlsZU1hcFtwcm9wS2V5XSA6IFskY3QuZ2xvYmFsUHJvZmlsZU1hcFtwcm9wS2V5XV07XG4gICAgICAgIH0gLy8gQ2hlY2sgZm9yIGNhc2Utc2Vuc2l0aXZlIGlucHV0cyBhbmQgZmlsdGVyIHRoZSBzYW1lIG9uZXNcblxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcFZhbC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICh0eXBlb2YgcHJvcFZhbFtpXSA9PT0gJ251bWJlcicgJiYgIWFycmF5LmluY2x1ZGVzKHByb3BWYWxbaV0pKSB7XG4gICAgICAgICAgICBhcnJheS5wdXNoKHByb3BWYWxbaV0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHByb3BWYWxbaV0gPT09ICdzdHJpbmcnICYmICFhcnJheS5pbmNsdWRlcyhwcm9wVmFsW2ldLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgICBhcnJheS5wdXNoKHByb3BWYWxbaV0udG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcHJvcFZhbFtpXSA9PT0gJ251bWJlcicgJiYgYXJyYXkuaW5jbHVkZXMocHJvcFZhbFtpXSkgfHwgdHlwZW9mIHByb3BWYWxbaV0gPT09ICdzdHJpbmcnICYmIGFycmF5LmluY2x1ZGVzKHByb3BWYWxbaV0udG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1ZhbHVlcyBhbHJlYWR5IGluY2x1ZGVkJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0FycmF5IHN1cHBvcnRzIG9ubHkgc3RyaW5nIG9yIG51bWJlciB0eXBlIHZhbHVlcycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBVcGRhdGUgZ2xvYmFsUHJvZmlsZU1hcCB3aXRoIHRoZSBhcnJheVxuXG5cbiAgICAgICAgJGN0Lmdsb2JhbFByb2ZpbGVNYXBbcHJvcEtleV0gPSBhcnJheTtcbiAgICAgIH0gLy8gU2F2ZSB0byBsb2NhbCBzdG9yYWdlIG9yIGNvb2tpZVxuXG5cbiAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNhdmVUb0xTb3JDb29raWUoUFJfQ09PS0lFLCAkY3QuZ2xvYmFsUHJvZmlsZU1hcCk7IC8vIENhbGwgdGhlIHNlbmRNdWx0aVZhbHVlRGF0YSBmdW5jdGlvblxuXG4gICAgICB0aGlzLnNlbmRNdWx0aVZhbHVlRGF0YShwcm9wS2V5LCBwcm9wVmFsLCBjb21tYW5kKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2FueX0gcHJvcEtleVxuICAgICAqIEBwYXJhbSB7c3RyaW5nLCBudW1iZXIsIGFycmF5fSBwcm9wVmFsXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbW1hbmRcbiAgICAgKiByZW1vdmVzIHZhbHVlKHMpIGFnYWluc3QgYSBrZXkvcHJvcGVydHkgaW4gcHJvZmlsZSBvYmplY3RcbiAgICAgKi9cblxuXG4gICAgX2hhbmRsZU11bHRpVmFsdWVSZW1vdmUocHJvcEtleSwgcHJvcFZhbCwgY29tbWFuZCkge1xuICAgICAgdmFyIF8kY3QkZ2xvYmFsUHJvZmlsZU1hcDI7XG5cbiAgICAgIGlmICgkY3QuZ2xvYmFsUHJvZmlsZU1hcCA9PSBudWxsKSB7XG4gICAgICAgICRjdC5nbG9iYWxQcm9maWxlTWFwID0gU3RvcmFnZU1hbmFnZXIucmVhZEZyb21MU29yQ29va2llKFBSX0NPT0tJRSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghKCRjdCA9PT0gbnVsbCB8fCAkY3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfJGN0JGdsb2JhbFByb2ZpbGVNYXAyID0gJGN0Lmdsb2JhbFByb2ZpbGVNYXApID09PSBudWxsIHx8IF8kY3QkZ2xvYmFsUHJvZmlsZU1hcDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF8kY3QkZ2xvYmFsUHJvZmlsZU1hcDIuaGFzT3duUHJvcGVydHkocHJvcEtleSkpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaGUgcHJvcGVydHkgXCIuY29uY2F0KHByb3BLZXksIFwiIGRvZXMgbm90IGV4aXN0LlwiKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodHlwZW9mIHByb3BWYWwgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBwcm9wVmFsID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIHZhciBpbmRleCA9ICRjdC5nbG9iYWxQcm9maWxlTWFwW3Byb3BLZXldLmluZGV4T2YocHJvcFZhbCk7XG5cbiAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAkY3QuZ2xvYmFsUHJvZmlsZU1hcFtwcm9wS2V5XS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IHByb3BWYWwubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgIHZhciBpZHggPSAkY3QuZ2xvYmFsUHJvZmlsZU1hcFtwcm9wS2V5XS5pbmRleE9mKHByb3BWYWxba10pO1xuXG4gICAgICAgICAgICBpZiAoaWR4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAkY3QuZ2xvYmFsUHJvZmlsZU1hcFtwcm9wS2V5XS5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgU3RvcmFnZU1hbmFnZXIuc2F2ZVRvTFNvckNvb2tpZShQUl9DT09LSUUsICRjdC5nbG9iYWxQcm9maWxlTWFwKTtcbiAgICAgIHRoaXMuc2VuZE11bHRpVmFsdWVEYXRhKHByb3BLZXksIHByb3BWYWwsIGNvbW1hbmQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7YW55fSBwcm9wS2V5XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbW1hbmRcbiAgICAgKiBkZWxldGVzIGEga2V5IHZhbHVlIHBhaXIgZnJvbSB0aGUgcHJvZmlsZSBvYmplY3RcbiAgICAgKi9cblxuXG4gICAgX2hhbmRsZU11bHRpVmFsdWVEZWxldGUocHJvcEtleSwgY29tbWFuZCkge1xuICAgICAgdmFyIF8kY3QkZ2xvYmFsUHJvZmlsZU1hcDM7XG5cbiAgICAgIGlmICgkY3QuZ2xvYmFsUHJvZmlsZU1hcCA9PSBudWxsKSB7XG4gICAgICAgICRjdC5nbG9iYWxQcm9maWxlTWFwID0gU3RvcmFnZU1hbmFnZXIucmVhZEZyb21MU29yQ29va2llKFBSX0NPT0tJRSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghKCRjdCA9PT0gbnVsbCB8fCAkY3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfJGN0JGdsb2JhbFByb2ZpbGVNYXAzID0gJGN0Lmdsb2JhbFByb2ZpbGVNYXApID09PSBudWxsIHx8IF8kY3QkZ2xvYmFsUHJvZmlsZU1hcDMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF8kY3QkZ2xvYmFsUHJvZmlsZU1hcDMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaGUgcHJvcGVydHkgXCIuY29uY2F0KHByb3BLZXksIFwiIGRvZXMgbm90IGV4aXN0LlwiKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWxldGUgJGN0Lmdsb2JhbFByb2ZpbGVNYXBbcHJvcEtleV07XG4gICAgICB9XG5cbiAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNhdmVUb0xTb3JDb29raWUoUFJfQ09PS0lFLCAkY3QuZ2xvYmFsUHJvZmlsZU1hcCk7XG4gICAgICB0aGlzLnNlbmRNdWx0aVZhbHVlRGF0YShwcm9wS2V5LCBudWxsLCBjb21tYW5kKTtcbiAgICB9XG5cbiAgICBzZW5kTXVsdGlWYWx1ZURhdGEocHJvcEtleSwgcHJvcFZhbCwgY29tbWFuZCkge1xuICAgICAgLy8gU2VuZCB0aGUgdXBkYXRlZCB2YWx1ZSB0byBMQ1xuICAgICAgbGV0IGRhdGEgPSB7fTtcbiAgICAgIGNvbnN0IHByb2ZpbGVPYmogPSB7fTtcbiAgICAgIGRhdGEudHlwZSA9ICdwcm9maWxlJzsgLy8gdGhpcyByZW1vdmVzIHRoZSBwcm9wZXJ0eSBhdCBiYWNrZW5kXG5cbiAgICAgIHByb2ZpbGVPYmpbcHJvcEtleV0gPSB7XG4gICAgICAgIFtjb21tYW5kXTogY29tbWFuZCA9PT0gQ09NTUFORF9ERUxFVEUgPyB0cnVlIDogcHJvcFZhbFxuICAgICAgfTtcblxuICAgICAgaWYgKHByb2ZpbGVPYmoudHogPT0gbnVsbCkge1xuICAgICAgICBwcm9maWxlT2JqLnR6ID0gbmV3IERhdGUoKS50b1N0cmluZygpLm1hdGNoKC8oW0EtWl0rW1xcKy1dWzAtOV0rKS8pWzFdO1xuICAgICAgfVxuXG4gICAgICBkYXRhLnByb2ZpbGUgPSBwcm9maWxlT2JqO1xuICAgICAgZGF0YSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdCQyKVtfcmVxdWVzdCQyXS5hZGRTeXN0ZW1EYXRhVG9PYmplY3QoZGF0YSwgdHJ1ZSk7XG5cbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdCQyKVtfcmVxdWVzdCQyXS5hZGRGbGFncyhkYXRhKTtcblxuICAgICAgY29uc3QgY29tcHJlc3NlZERhdGEgPSBjb21wcmVzc0RhdGEoSlNPTi5zdHJpbmdpZnkoZGF0YSksIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDMpW19sb2dnZXIkM10pO1xuXG4gICAgICBsZXQgcGFnZUxvYWRVcmwgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2FjY291bnQpW19hY2NvdW50XS5kYXRhUG9zdFVSTDtcblxuICAgICAgcGFnZUxvYWRVcmwgPSBhZGRUb1VSTChwYWdlTG9hZFVybCwgJ3R5cGUnLCBFVlRfUFVTSCk7XG4gICAgICBwYWdlTG9hZFVybCA9IGFkZFRvVVJMKHBhZ2VMb2FkVXJsLCAnZCcsIGNvbXByZXNzZWREYXRhKTtcblxuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0JDIpW19yZXF1ZXN0JDJdLnNhdmVBbmRGaXJlUmVxdWVzdChwYWdlTG9hZFVybCwgJGN0LmJsb2NrUmVxdWVzdCk7XG4gICAgfVxuXG4gIH1cblxuICB2YXIgX3Byb2Nlc3NQcm9maWxlQXJyYXkyID0gZnVuY3Rpb24gX3Byb2Nlc3NQcm9maWxlQXJyYXkyKHByb2ZpbGVBcnIpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9maWxlQXJyKSAmJiBwcm9maWxlQXJyLmxlbmd0aCA+IDApIHtcbiAgICAgIGZvciAoY29uc3QgaW5kZXggaW4gcHJvZmlsZUFycikge1xuICAgICAgICBpZiAocHJvZmlsZUFyci5oYXNPd25Qcm9wZXJ0eShpbmRleCkpIHtcbiAgICAgICAgICBjb25zdCBvdXRlck9iaiA9IHByb2ZpbGVBcnJbaW5kZXhdO1xuICAgICAgICAgIGxldCBkYXRhID0ge307XG4gICAgICAgICAgbGV0IHByb2ZpbGVPYmo7XG5cbiAgICAgICAgICBpZiAob3V0ZXJPYmouU2l0ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBvcmdhbmljIGRhdGEgZnJvbSB0aGUgc2l0ZVxuICAgICAgICAgICAgcHJvZmlsZU9iaiA9IG91dGVyT2JqLlNpdGU7XG5cbiAgICAgICAgICAgIGlmIChpc09iamVjdEVtcHR5KHByb2ZpbGVPYmopIHx8ICFpc1Byb2ZpbGVWYWxpZChwcm9maWxlT2JqLCB7XG4gICAgICAgICAgICAgIGxvZ2dlcjogX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkMylbX2xvZ2dlciQzXVxuICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAob3V0ZXJPYmouRmFjZWJvb2sgIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gZmIgY29ubmVjdCBkYXRhXG4gICAgICAgICAgICBjb25zdCBGYlByb2ZpbGVPYmogPSBvdXRlck9iai5GYWNlYm9vazsgLy8gbWFrZSBzdXJlIHRoYXQgdGhlIG9iamVjdCBjb250YWlucyBhbnkgZGF0YSBhdCBhbGxcblxuICAgICAgICAgICAgaWYgKCFpc09iamVjdEVtcHR5KEZiUHJvZmlsZU9iaikgJiYgIUZiUHJvZmlsZU9iai5lcnJvcikge1xuICAgICAgICAgICAgICBwcm9maWxlT2JqID0gcHJvY2Vzc0ZCVXNlck9iaihGYlByb2ZpbGVPYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAob3V0ZXJPYmpbJ0dvb2dsZSBQbHVzJ10gIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgR1BsdXNQcm9maWxlT2JqID0gb3V0ZXJPYmpbJ0dvb2dsZSBQbHVzJ107XG5cbiAgICAgICAgICAgIGlmICghaXNPYmplY3RFbXB0eShHUGx1c1Byb2ZpbGVPYmopICYmICFHUGx1c1Byb2ZpbGVPYmouZXJyb3IpIHtcbiAgICAgICAgICAgICAgcHJvZmlsZU9iaiA9IHByb2Nlc3NHUGx1c1VzZXJPYmooR1BsdXNQcm9maWxlT2JqLCB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyOiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQzKVtfbG9nZ2VyJDNdXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwcm9maWxlT2JqICE9IG51bGwgJiYgIWlzT2JqZWN0RW1wdHkocHJvZmlsZU9iaikpIHtcbiAgICAgICAgICAgIC8vIHByb2ZpbGUgZ290IHNldCBmcm9tIGFib3ZlXG4gICAgICAgICAgICBkYXRhLnR5cGUgPSAncHJvZmlsZSc7XG5cbiAgICAgICAgICAgIGlmIChwcm9maWxlT2JqLnR6ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgLy8gdHJ5IHRvIGF1dG8gY2FwdHVyZSB1c2VyIHRpbWV6b25lIGlmIG5vdCBwcmVzZW50XG4gICAgICAgICAgICAgIHByb2ZpbGVPYmoudHogPSBuZXcgRGF0ZSgpLnRvU3RyaW5nKCkubWF0Y2goLyhbQS1aXStbXFwrLV1bMC05XSspLylbMV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRhdGEucHJvZmlsZSA9IHByb2ZpbGVPYmo7XG4gICAgICAgICAgICBhZGRUb0xvY2FsUHJvZmlsZU1hcChwcm9maWxlT2JqLCB0cnVlKTtcbiAgICAgICAgICAgIGRhdGEgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlcXVlc3QkMilbX3JlcXVlc3QkMl0uYWRkU3lzdGVtRGF0YVRvT2JqZWN0KGRhdGEsIHVuZGVmaW5lZCk7XG5cbiAgICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdCQyKVtfcmVxdWVzdCQyXS5hZGRGbGFncyhkYXRhKTtcblxuICAgICAgICAgICAgY29uc3QgY29tcHJlc3NlZERhdGEgPSBjb21wcmVzc0RhdGEoSlNPTi5zdHJpbmdpZnkoZGF0YSksIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDMpW19sb2dnZXIkM10pO1xuXG4gICAgICAgICAgICBsZXQgcGFnZUxvYWRVcmwgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2FjY291bnQpW19hY2NvdW50XS5kYXRhUG9zdFVSTDtcblxuICAgICAgICAgICAgcGFnZUxvYWRVcmwgPSBhZGRUb1VSTChwYWdlTG9hZFVybCwgJ3R5cGUnLCBFVlRfUFVTSCk7XG4gICAgICAgICAgICBwYWdlTG9hZFVybCA9IGFkZFRvVVJMKHBhZ2VMb2FkVXJsLCAnZCcsIGNvbXByZXNzZWREYXRhKTtcblxuICAgICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0JDIpW19yZXF1ZXN0JDJdLnNhdmVBbmRGaXJlUmVxdWVzdChwYWdlTG9hZFVybCwgJGN0LmJsb2NrUmVxdWVzdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBfcmVxdWVzdCQzID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJyZXF1ZXN0XCIpO1xuXG4gIHZhciBfbG9nZ2VyJDQgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImxvZ2dlclwiKTtcblxuICB2YXIgX2FjY291bnQkMSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiYWNjb3VudFwiKTtcblxuICB2YXIgX3Nlc3Npb24kMSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwic2Vzc2lvblwiKTtcblxuICB2YXIgX29sZFZhbHVlcyQyID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJvbGRWYWx1ZXNcIik7XG5cbiAgdmFyIF9kZXZpY2UkMSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiZGV2aWNlXCIpO1xuXG4gIHZhciBfcHJvY2Vzc09VTCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwicHJvY2Vzc09VTFwiKTtcblxuICB2YXIgX2hhbmRsZUNvb2tpZUZyb21DYWNoZSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiaGFuZGxlQ29va2llRnJvbUNhY2hlXCIpO1xuXG4gIHZhciBfZGVsZXRlVXNlciA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiZGVsZXRlVXNlclwiKTtcblxuICB2YXIgX3Byb2Nlc3NMb2dpbkFycmF5ID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJwcm9jZXNzTG9naW5BcnJheVwiKTtcblxuICBjbGFzcyBVc2VyTG9naW5IYW5kbGVyIGV4dGVuZHMgQXJyYXkge1xuICAgIGNvbnN0cnVjdG9yKF9yZWYsIHZhbHVlcykge1xuICAgICAgbGV0IHtcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgYWNjb3VudCxcbiAgICAgICAgc2Vzc2lvbixcbiAgICAgICAgbG9nZ2VyLFxuICAgICAgICBkZXZpY2VcbiAgICAgIH0gPSBfcmVmO1xuICAgICAgc3VwZXIoKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfcHJvY2Vzc0xvZ2luQXJyYXksIHtcbiAgICAgICAgdmFsdWU6IF9wcm9jZXNzTG9naW5BcnJheTJcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9kZWxldGVVc2VyLCB7XG4gICAgICAgIHZhbHVlOiBfZGVsZXRlVXNlcjJcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9oYW5kbGVDb29raWVGcm9tQ2FjaGUsIHtcbiAgICAgICAgdmFsdWU6IF9oYW5kbGVDb29raWVGcm9tQ2FjaGUyXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfcHJvY2Vzc09VTCwge1xuICAgICAgICB2YWx1ZTogX3Byb2Nlc3NPVUwyXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfcmVxdWVzdCQzLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfbG9nZ2VyJDQsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9hY2NvdW50JDEsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9zZXNzaW9uJDEsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9vbGRWYWx1ZXMkMiwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX2RldmljZSQxLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdCQzKVtfcmVxdWVzdCQzXSA9IHJlcXVlc3Q7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2FjY291bnQkMSlbX2FjY291bnQkMV0gPSBhY2NvdW50O1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXNzaW9uJDEpW19zZXNzaW9uJDFdID0gc2Vzc2lvbjtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDQpW19sb2dnZXIkNF0gPSBsb2dnZXI7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX29sZFZhbHVlcyQyKVtfb2xkVmFsdWVzJDJdID0gdmFsdWVzO1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9kZXZpY2UkMSlbX2RldmljZSQxXSA9IGRldmljZTtcbiAgICB9IC8vIE9uIFVzZXIgTG9naW5cblxuXG4gICAgY2xlYXIoKSB7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ0KVtfbG9nZ2VyJDRdLmRlYnVnKCdjbGVhciBjYWxsZWQuIFJlc2V0IGZsYWcgaGFzIGJlZW4gc2V0LicpO1xuXG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2RlbGV0ZVVzZXIpW19kZWxldGVVc2VyXSgpO1xuXG4gICAgICBTdG9yYWdlTWFuYWdlci5zZXRNZXRhUHJvcChDTEVBUiwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgcHVzaCgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBwcm9maWxlc0FyciA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgcHJvZmlsZXNBcnJbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcHJvY2Vzc0xvZ2luQXJyYXkpW19wcm9jZXNzTG9naW5BcnJheV0ocHJvZmlsZXNBcnIpO1xuXG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICBfcHJvY2Vzc09sZFZhbHVlcygpIHtcbiAgICAgIGlmIChfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX29sZFZhbHVlcyQyKVtfb2xkVmFsdWVzJDJdKSB7XG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcHJvY2Vzc0xvZ2luQXJyYXkpW19wcm9jZXNzTG9naW5BcnJheV0oX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9vbGRWYWx1ZXMkMilbX29sZFZhbHVlcyQyXSk7XG4gICAgICB9XG5cbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfb2xkVmFsdWVzJDIpW19vbGRWYWx1ZXMkMl0gPSBudWxsO1xuICAgIH1cblxuICB9XG5cbiAgdmFyIF9wcm9jZXNzT1VMMiA9IGZ1bmN0aW9uIF9wcm9jZXNzT1VMMihwcm9maWxlQXJyKSB7XG4gICAgbGV0IHNlbmRPVUxGbGFnID0gdHJ1ZTtcbiAgICBTdG9yYWdlTWFuYWdlci5zYXZlVG9MU29yQ29va2llKEZJUkVfUFVTSF9VTlJFR0lTVEVSRUQsIHNlbmRPVUxGbGFnKTtcblxuICAgIGNvbnN0IGFkZFRvSyA9IGlkcyA9PiB7XG4gICAgICBsZXQgayA9IFN0b3JhZ2VNYW5hZ2VyLnJlYWRGcm9tTFNvckNvb2tpZShLQ09PS0lFX05BTUUpO1xuICAgICAgY29uc3QgZyA9IFN0b3JhZ2VNYW5hZ2VyLnJlYWRGcm9tTFNvckNvb2tpZShHQ09PS0lFX05BTUUpO1xuICAgICAgbGV0IGtJZDtcblxuICAgICAgaWYgKGsgPT0gbnVsbCkge1xuICAgICAgICBrID0ge307XG4gICAgICAgIGtJZCA9IGlkcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGNoZWNrIGlmIGFscmVhZHkgZXhpc3RzICovXG4gICAgICAgIGtJZCA9IGsuaWQ7XG4gICAgICAgIGxldCBhbm9ueW1vdXNVc2VyID0gZmFsc2U7XG4gICAgICAgIGxldCBmb3VuZEluQ2FjaGUgPSBmYWxzZTtcblxuICAgICAgICBpZiAoa0lkID09IG51bGwpIHtcbiAgICAgICAgICBrSWQgPSBpZHNbMF07XG4gICAgICAgICAgYW5vbnltb3VzVXNlciA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJGN0LkxSVV9DQUNIRSA9PSBudWxsICYmIFN0b3JhZ2VNYW5hZ2VyLl9pc0xvY2FsU3RvcmFnZVN1cHBvcnRlZCgpKSB7XG4gICAgICAgICAgJGN0LkxSVV9DQUNIRSA9IG5ldyBMUlVDYWNoZShMUlVfQ0FDSEVfU0laRSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYW5vbnltb3VzVXNlcikge1xuICAgICAgICAgIGlmIChnICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIGlmIGhhdmUgZ2Nvb2tpZVxuICAgICAgICAgICAgJGN0LkxSVV9DQUNIRS5zZXQoa0lkLCBnKTtcbiAgICAgICAgICAgICRjdC5ibG9ja1JlcXVlc3QgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGlkIGlzIHByZXNlbnQgaW4gdGhlIGNhY2hlXG4gICAgICAgICAgLy8gc2V0IGZvdW5kSW5DYWNoZSB0byB0cnVlXG4gICAgICAgICAgZm9yIChjb25zdCBpZHggaW4gaWRzKSB7XG4gICAgICAgICAgICBpZiAoaWRzLmhhc093blByb3BlcnR5KGlkeCkpIHtcbiAgICAgICAgICAgICAgY29uc3QgaWQgPSBpZHNbaWR4XTtcblxuICAgICAgICAgICAgICBpZiAoJGN0LkxSVV9DQUNIRS5jYWNoZVtpZF0pIHtcbiAgICAgICAgICAgICAgICBrSWQgPSBpZDtcbiAgICAgICAgICAgICAgICBmb3VuZEluQ2FjaGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZvdW5kSW5DYWNoZSkge1xuICAgICAgICAgIGlmIChrSWQgIT09ICRjdC5MUlVfQ0FDSEUuZ2V0TGFzdEtleSgpKSB7XG4gICAgICAgICAgICAvLyBOZXcgVXNlciBmb3VuZFxuICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBlbnRpcmUgY2FjaGVcbiAgICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfaGFuZGxlQ29va2llRnJvbUNhY2hlKVtfaGFuZGxlQ29va2llRnJvbUNhY2hlXSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZW5kT1VMRmxhZyA9IGZhbHNlO1xuICAgICAgICAgICAgU3RvcmFnZU1hbmFnZXIuc2F2ZVRvTFNvckNvb2tpZShGSVJFX1BVU0hfVU5SRUdJU1RFUkVELCBzZW5kT1VMRmxhZyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgZ0Zyb21DYWNoZSA9ICRjdC5MUlVfQ0FDSEUuZ2V0KGtJZCk7XG4gICAgICAgICAgJGN0LkxSVV9DQUNIRS5zZXQoa0lkLCBnRnJvbUNhY2hlKTtcbiAgICAgICAgICBTdG9yYWdlTWFuYWdlci5zYXZlVG9MU29yQ29va2llKEdDT09LSUVfTkFNRSwgZ0Zyb21DYWNoZSk7XG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9kZXZpY2UkMSlbX2RldmljZSQxXS5nY29va2llID0gZ0Zyb21DYWNoZTtcbiAgICAgICAgICBjb25zdCBsYXN0SyA9ICRjdC5MUlVfQ0FDSEUuZ2V0U2Vjb25kTGFzdEtleSgpO1xuXG4gICAgICAgICAgaWYgKFN0b3JhZ2VNYW5hZ2VyLnJlYWRGcm9tTFNvckNvb2tpZShGSVJFX1BVU0hfVU5SRUdJU1RFUkVEKSAmJiBsYXN0SyAhPT0gLTEpIHtcbiAgICAgICAgICAgIC8vIENBQ0hFRCBPTEQgVVNFUiBGT1VORC4gVFJBTlNGRVIgUFVTSCBUT0tFTiBUTyBUSElTIFVTRVJcbiAgICAgICAgICAgIGNvbnN0IGxhc3RHVUlEID0gJGN0LkxSVV9DQUNIRS5jYWNoZVtsYXN0S107XG5cbiAgICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdCQzKVtfcmVxdWVzdCQzXS51bnJlZ2lzdGVyVG9rZW5Gb3JHdWlkKGxhc3RHVUlEKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFhbm9ueW1vdXNVc2VyKSB7XG4gICAgICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChnICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9kZXZpY2UkMSlbX2RldmljZSQxXS5nY29va2llID0gZztcbiAgICAgICAgICAgICAgU3RvcmFnZU1hbmFnZXIuc2F2ZVRvTFNvckNvb2tpZShHQ09PS0lFX05BTUUsIGcpO1xuICAgICAgICAgICAgICBzZW5kT1VMRmxhZyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNhdmVUb0xTb3JDb29raWUoRklSRV9QVVNIX1VOUkVHSVNURVJFRCwgZmFsc2UpO1xuICAgICAgICAgIGtJZCA9IGlkc1swXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBrLmlkID0ga0lkO1xuICAgICAgU3RvcmFnZU1hbmFnZXIuc2F2ZVRvTFNvckNvb2tpZShLQ09PS0lFX05BTUUsIGspO1xuICAgIH07XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9maWxlQXJyKSAmJiBwcm9maWxlQXJyLmxlbmd0aCA+IDApIHtcbiAgICAgIGZvciAoY29uc3QgaW5kZXggaW4gcHJvZmlsZUFycikge1xuICAgICAgICBpZiAocHJvZmlsZUFyci5oYXNPd25Qcm9wZXJ0eShpbmRleCkpIHtcbiAgICAgICAgICBjb25zdCBvdXRlck9iaiA9IHByb2ZpbGVBcnJbaW5kZXhdO1xuICAgICAgICAgIGxldCBkYXRhID0ge307XG4gICAgICAgICAgbGV0IHByb2ZpbGVPYmo7XG5cbiAgICAgICAgICBpZiAob3V0ZXJPYmouU2l0ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBvcmdhbmljIGRhdGEgZnJvbSB0aGUgc2l0ZVxuICAgICAgICAgICAgcHJvZmlsZU9iaiA9IG91dGVyT2JqLlNpdGU7XG5cbiAgICAgICAgICAgIGlmIChpc09iamVjdEVtcHR5KHByb2ZpbGVPYmopIHx8ICFpc1Byb2ZpbGVWYWxpZChwcm9maWxlT2JqLCB7XG4gICAgICAgICAgICAgIGxvZ2dlcjogX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkNClbX2xvZ2dlciQ0XVxuICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAob3V0ZXJPYmouRmFjZWJvb2sgIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gZmIgY29ubmVjdCBkYXRhXG4gICAgICAgICAgICBjb25zdCBGYlByb2ZpbGVPYmogPSBvdXRlck9iai5GYWNlYm9vazsgLy8gbWFrZSBzdXJlIHRoYXQgdGhlIG9iamVjdCBjb250YWlucyBhbnkgZGF0YSBhdCBhbGxcblxuICAgICAgICAgICAgaWYgKCFpc09iamVjdEVtcHR5KEZiUHJvZmlsZU9iaikgJiYgIUZiUHJvZmlsZU9iai5lcnJvcikge1xuICAgICAgICAgICAgICBwcm9maWxlT2JqID0gcHJvY2Vzc0ZCVXNlck9iaihGYlByb2ZpbGVPYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAob3V0ZXJPYmpbJ0dvb2dsZSBQbHVzJ10gIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgR1BsdXNQcm9maWxlT2JqID0gb3V0ZXJPYmpbJ0dvb2dsZSBQbHVzJ107XG5cbiAgICAgICAgICAgIGlmIChpc09iamVjdEVtcHR5KEdQbHVzUHJvZmlsZU9iaikgJiYgIUdQbHVzUHJvZmlsZU9iai5lcnJvcikge1xuICAgICAgICAgICAgICBwcm9maWxlT2JqID0gcHJvY2Vzc0dQbHVzVXNlck9iaihHUGx1c1Byb2ZpbGVPYmosIHtcbiAgICAgICAgICAgICAgICBsb2dnZXI6IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDQpW19sb2dnZXIkNF1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHByb2ZpbGVPYmogIT0gbnVsbCAmJiAhaXNPYmplY3RFbXB0eShwcm9maWxlT2JqKSkge1xuICAgICAgICAgICAgLy8gcHJvZmlsZSBnb3Qgc2V0IGZyb20gYWJvdmVcbiAgICAgICAgICAgIGRhdGEudHlwZSA9ICdwcm9maWxlJztcblxuICAgICAgICAgICAgaWYgKHByb2ZpbGVPYmoudHogPT0gbnVsbCkge1xuICAgICAgICAgICAgICAvLyB0cnkgdG8gYXV0byBjYXB0dXJlIHVzZXIgdGltZXpvbmUgaWYgbm90IHByZXNlbnRcbiAgICAgICAgICAgICAgcHJvZmlsZU9iai50eiA9IG5ldyBEYXRlKCkudG9TdHJpbmcoKS5tYXRjaCgvKFtBLVpdK1tcXCstXVswLTldKykvKVsxXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGF0YS5wcm9maWxlID0gcHJvZmlsZU9iajtcbiAgICAgICAgICAgIGNvbnN0IGlkcyA9IFtdO1xuXG4gICAgICAgICAgICBpZiAoU3RvcmFnZU1hbmFnZXIuX2lzTG9jYWxTdG9yYWdlU3VwcG9ydGVkKCkpIHtcbiAgICAgICAgICAgICAgaWYgKHByb2ZpbGVPYmouSWRlbnRpdHkpIHtcbiAgICAgICAgICAgICAgICBpZHMucHVzaChwcm9maWxlT2JqLklkZW50aXR5KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChwcm9maWxlT2JqLkVtYWlsKSB7XG4gICAgICAgICAgICAgICAgaWRzLnB1c2gocHJvZmlsZU9iai5FbWFpbCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAocHJvZmlsZU9iai5HUElEKSB7XG4gICAgICAgICAgICAgICAgaWRzLnB1c2goJ0dQOicgKyBwcm9maWxlT2JqLkdQSUQpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKHByb2ZpbGVPYmouRkJJRCkge1xuICAgICAgICAgICAgICAgIGlkcy5wdXNoKCdGQjonICsgcHJvZmlsZU9iai5GQklEKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChpZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGFkZFRvSyhpZHMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFkZFRvTG9jYWxQcm9maWxlTWFwKHByb2ZpbGVPYmosIHRydWUpO1xuICAgICAgICAgICAgZGF0YSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdCQzKVtfcmVxdWVzdCQzXS5hZGRTeXN0ZW1EYXRhVG9PYmplY3QoZGF0YSwgdW5kZWZpbmVkKTtcblxuICAgICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0JDMpW19yZXF1ZXN0JDNdLmFkZEZsYWdzKGRhdGEpOyAvLyBBZGRpbmcgJ2lzT1VMJyBmbGFnIGluIHRydWUgZm9yIE9VTCBjYXNlcyB3aGljaC5cbiAgICAgICAgICAgIC8vIFRoaXMgZmxhZyB0ZWxscyBMQyB0byBjcmVhdGUgYSBuZXcgYXJwIG9iamVjdC5cbiAgICAgICAgICAgIC8vIEFsc28gd2Ugd2lsbCByZWNlaXZlIHRoZSBzYW1lIGZsYWcgaW4gcmVzcG9uc2UgYXJwIHdoaWNoIHRlbGxzIHRvIGRlbGV0ZSBleGlzdGluZyBhcnAgb2JqZWN0LlxuXG5cbiAgICAgICAgICAgIGlmIChzZW5kT1VMRmxhZykge1xuICAgICAgICAgICAgICBkYXRhW0lTX09VTF0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBjb21wcmVzc2VkRGF0YSA9IGNvbXByZXNzRGF0YShKU09OLnN0cmluZ2lmeShkYXRhKSwgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkNClbX2xvZ2dlciQ0XSk7XG5cbiAgICAgICAgICAgIGxldCBwYWdlTG9hZFVybCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWNjb3VudCQxKVtfYWNjb3VudCQxXS5kYXRhUG9zdFVSTDtcblxuICAgICAgICAgICAgcGFnZUxvYWRVcmwgPSBhZGRUb1VSTChwYWdlTG9hZFVybCwgJ3R5cGUnLCBFVlRfUFVTSCk7XG4gICAgICAgICAgICBwYWdlTG9hZFVybCA9IGFkZFRvVVJMKHBhZ2VMb2FkVXJsLCAnZCcsIGNvbXByZXNzZWREYXRhKTsgLy8gV2hlbmV2ZXIgc2VuZE9VTEZsYWcgaXMgdHJ1ZSB0aGVuIGRvbnQgc2VuZCBhcnAgYW5kIGdjb29raWUgKGd1aWQgaW4gbWVtb3J5IGluIHRoZSByZXF1ZXN0KVxuICAgICAgICAgICAgLy8gQWxzbyB3aGVuIHRoaXMgZmxhZyBpcyBzZXQgd2Ugd2lsbCBnZXQgYW5vdGhlciBmbGFnIGZyb20gTEMgaW4gYXJwIHdoaWNoIHRlbGxzIHVzIHRvIGRlbGV0ZSBhcnBcbiAgICAgICAgICAgIC8vIHN0b3JlZCBpbiB0aGUgY2FjaGUgYW5kIHJlcGxhY2UgaXQgd2l0aCB0aGUgcmVzcG9uc2UgYXJwLlxuXG4gICAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlcXVlc3QkMylbX3JlcXVlc3QkM10uc2F2ZUFuZEZpcmVSZXF1ZXN0KHBhZ2VMb2FkVXJsLCAkY3QuYmxvY2tSZXF1ZXN0LCBzZW5kT1VMRmxhZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBfaGFuZGxlQ29va2llRnJvbUNhY2hlMiA9IGZ1bmN0aW9uIF9oYW5kbGVDb29raWVGcm9tQ2FjaGUyKCkge1xuICAgICRjdC5ibG9ja1JlcXVlc3QgPSBmYWxzZTtcbiAgICBjb25zb2xlLmRlYnVnKCdCbG9jayByZXF1ZXN0IGlzIGZhbHNlJyk7XG5cbiAgICBpZiAoU3RvcmFnZU1hbmFnZXIuX2lzTG9jYWxTdG9yYWdlU3VwcG9ydGVkKCkpIHtcbiAgICAgIGRlbGV0ZSBsb2NhbFN0b3JhZ2VbUFJfQ09PS0lFXTtcbiAgICAgIGRlbGV0ZSBsb2NhbFN0b3JhZ2VbRVZfQ09PS0lFXTtcbiAgICAgIGRlbGV0ZSBsb2NhbFN0b3JhZ2VbTUVUQV9DT09LSUVdO1xuICAgICAgZGVsZXRlIGxvY2FsU3RvcmFnZVtBUlBfQ09PS0lFXTtcbiAgICAgIGRlbGV0ZSBsb2NhbFN0b3JhZ2VbQ0FNUF9DT09LSUVfTkFNRV07XG4gICAgICBkZWxldGUgbG9jYWxTdG9yYWdlW0NIQVJHRURJRF9DT09LSUVfTkFNRV07XG4gICAgfVxuXG4gICAgU3RvcmFnZU1hbmFnZXIucmVtb3ZlQ29va2llKENBTVBfQ09PS0lFX05BTUUsIGdldEhvc3ROYW1lKCkpO1xuICAgIFN0b3JhZ2VNYW5hZ2VyLnJlbW92ZUNvb2tpZShfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3Nlc3Npb24kMSlbX3Nlc3Npb24kMV0uY29va2llTmFtZSwgJGN0LmJyb2FkRG9tYWluKTtcbiAgICBTdG9yYWdlTWFuYWdlci5yZW1vdmVDb29raWUoQVJQX0NPT0tJRSwgJGN0LmJyb2FkRG9tYWluKTtcblxuICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfc2Vzc2lvbiQxKVtfc2Vzc2lvbiQxXS5zZXRTZXNzaW9uQ29va2llT2JqZWN0KCcnKTtcbiAgfTtcblxuICB2YXIgX2RlbGV0ZVVzZXIyID0gZnVuY3Rpb24gX2RlbGV0ZVVzZXIyKCkge1xuICAgICRjdC5ibG9ja1JlcXVlc3QgPSB0cnVlO1xuXG4gICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkNClbX2xvZ2dlciQ0XS5kZWJ1ZygnQmxvY2sgcmVxdWVzdCBpcyB0cnVlJyk7XG5cbiAgICAkY3QuZ2xvYmFsQ2FjaGUgPSB7XG4gICAgICBnY29va2llOiBudWxsLFxuICAgICAgUkVRX046IDAsXG4gICAgICBSRVNQX046IDBcbiAgICB9O1xuXG4gICAgaWYgKFN0b3JhZ2VNYW5hZ2VyLl9pc0xvY2FsU3RvcmFnZVN1cHBvcnRlZCgpKSB7XG4gICAgICBkZWxldGUgbG9jYWxTdG9yYWdlW0dDT09LSUVfTkFNRV07XG4gICAgICBkZWxldGUgbG9jYWxTdG9yYWdlW0tDT09LSUVfTkFNRV07XG4gICAgICBkZWxldGUgbG9jYWxTdG9yYWdlW1BSX0NPT0tJRV07XG4gICAgICBkZWxldGUgbG9jYWxTdG9yYWdlW0VWX0NPT0tJRV07XG4gICAgICBkZWxldGUgbG9jYWxTdG9yYWdlW01FVEFfQ09PS0lFXTtcbiAgICAgIGRlbGV0ZSBsb2NhbFN0b3JhZ2VbQVJQX0NPT0tJRV07XG4gICAgICBkZWxldGUgbG9jYWxTdG9yYWdlW0NBTVBfQ09PS0lFX05BTUVdO1xuICAgICAgZGVsZXRlIGxvY2FsU3RvcmFnZVtDSEFSR0VESURfQ09PS0lFX05BTUVdO1xuICAgIH1cblxuICAgIFN0b3JhZ2VNYW5hZ2VyLnJlbW92ZUNvb2tpZShHQ09PS0lFX05BTUUsICRjdC5icm9hZERvbWFpbik7XG4gICAgU3RvcmFnZU1hbmFnZXIucmVtb3ZlQ29va2llKENBTVBfQ09PS0lFX05BTUUsIGdldEhvc3ROYW1lKCkpO1xuICAgIFN0b3JhZ2VNYW5hZ2VyLnJlbW92ZUNvb2tpZShLQ09PS0lFX05BTUUsIGdldEhvc3ROYW1lKCkpO1xuICAgIFN0b3JhZ2VNYW5hZ2VyLnJlbW92ZUNvb2tpZShfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3Nlc3Npb24kMSlbX3Nlc3Npb24kMV0uY29va2llTmFtZSwgJGN0LmJyb2FkRG9tYWluKTtcbiAgICBTdG9yYWdlTWFuYWdlci5yZW1vdmVDb29raWUoQVJQX0NPT0tJRSwgJGN0LmJyb2FkRG9tYWluKTtcbiAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2RldmljZSQxKVtfZGV2aWNlJDFdLmdjb29raWUgPSBudWxsO1xuXG4gICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXNzaW9uJDEpW19zZXNzaW9uJDFdLnNldFNlc3Npb25Db29raWVPYmplY3QoJycpO1xuICB9O1xuXG4gIHZhciBfcHJvY2Vzc0xvZ2luQXJyYXkyID0gZnVuY3Rpb24gX3Byb2Nlc3NMb2dpbkFycmF5Mihsb2dpbkFycikge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGxvZ2luQXJyKSAmJiBsb2dpbkFyci5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBwcm9maWxlT2JqID0gbG9naW5BcnIucG9wKCk7XG4gICAgICBjb25zdCBwcm9jZXNzUHJvZmlsZSA9IHByb2ZpbGVPYmogIT0gbnVsbCAmJiBpc09iamVjdChwcm9maWxlT2JqKSAmJiAocHJvZmlsZU9iai5TaXRlICE9IG51bGwgJiYgT2JqZWN0LmtleXMocHJvZmlsZU9iai5TaXRlKS5sZW5ndGggPiAwIHx8IHByb2ZpbGVPYmouRmFjZWJvb2sgIT0gbnVsbCAmJiBPYmplY3Qua2V5cyhwcm9maWxlT2JqLkZhY2Vib29rKS5sZW5ndGggPiAwIHx8IHByb2ZpbGVPYmpbJ0dvb2dsZSBQbHVzJ10gIT0gbnVsbCAmJiBPYmplY3Qua2V5cyhwcm9maWxlT2JqWydHb29nbGUgUGx1cyddKS5sZW5ndGggPiAwKTtcblxuICAgICAgaWYgKHByb2Nlc3NQcm9maWxlKSB7XG4gICAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNldEluc3RhbnREZWxldGVGbGFnSW5LKCk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3Byb2Nlc3NPVUwpW19wcm9jZXNzT1VMXShbcHJvZmlsZU9ial0pO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkNClbX2xvZ2dlciQ0XS5kZWJ1ZyhlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkNClbX2xvZ2dlciQ0XS5lcnJvcignUHJvZmlsZSBvYmplY3QgaXMgaW4gaW5jb3JyZWN0IGZvcm1hdCcpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjbGFzcyBDVFdlYlBlcnNvbmFsaXNhdGlvbkJhbm5lciBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICB0aGlzLl9kZXRhaWxzID0gbnVsbDtcbiAgICAgIHRoaXMuc2hhZG93ID0gbnVsbDtcbiAgICAgIHRoaXMuc2hhZG93ID0gdGhpcy5hdHRhY2hTaGFkb3coe1xuICAgICAgICBtb2RlOiAnb3BlbidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldCBkZXRhaWxzKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2RldGFpbHMgfHwgJyc7XG4gICAgfVxuXG4gICAgc2V0IGRldGFpbHModmFsKSB7XG4gICAgICBpZiAodGhpcy5fZGV0YWlscyA9PT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9kZXRhaWxzID0gdmFsO1xuICAgICAgICB0aGlzLnJlbmRlckJhbm5lcigpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlckJhbm5lcigpIHtcbiAgICAgIHRoaXMuc2hhZG93LmlubmVySFRNTCA9IHRoaXMuZ2V0QmFubmVyQ29udGVudCgpO1xuXG4gICAgICBpZiAodGhpcy50cmFja0NsaWNrICE9PSBmYWxzZSkge1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IG9uQ2xpY2tVcmwgPSB0aGlzLmRldGFpbHMub25DbGljaztcblxuICAgICAgICAgIGlmIChvbkNsaWNrVXJsKSB7XG4gICAgICAgICAgICB0aGlzLmRldGFpbHMud2luZG93ID8gd2luZG93Lm9wZW4ob25DbGlja1VybCwgJ19ibGFuaycpIDogd2luZG93LnBhcmVudC5sb2NhdGlvbi5ocmVmID0gb25DbGlja1VybDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB3aW5kb3cuY2xldmVydGFwLnJlbmRlck5vdGlmaWNhdGlvbkNsaWNrZWQoe1xuICAgICAgICAgICAgbXNnSWQ6IHRoaXMubXNnSWQsXG4gICAgICAgICAgICBwaXZvdElkOiB0aGlzLnBpdm90SWRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHdpbmRvdy5jbGV2ZXJ0YXAucmVuZGVyTm90aWZpY2F0aW9uVmlld2VkKHtcbiAgICAgICAgbXNnSWQ6IHRoaXMubXNnSWQsXG4gICAgICAgIHBpdm90SWQ6IHRoaXMucGl2b3RJZFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0QmFubmVyQ29udGVudCgpIHtcbiAgICAgIHJldHVybiBcIlxcbiAgICAgIDxzdHlsZSB0eXBlPVxcXCJ0ZXh0L2Nzc1xcXCI+XFxuICAgICAgICAuYmFubmVyIHtcXG4gICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICAgICAgICBjdXJzb3I6IFwiLmNvbmNhdCh0aGlzLmRldGFpbHMub25DbGljayA/ICdwb2ludGVyJyA6ICcnLCBcIlxcbiAgICAgICAgfVxcbiAgICAgICAgaW1nIHtcXG4gICAgICAgICAgaGVpZ2h0OiBcIikuY29uY2F0KHRoaXMuZGl2SGVpZ2h0ID8gdGhpcy5kaXZIZWlnaHQgOiAnYXV0bycsIFwiO1xcbiAgICAgICAgICB3aWR0aDogMTAwJTtcXG4gICAgICAgIH1cXG4gICAgICAgIC53cmFwcGVyOmlzKC5sZWZ0LCAucmlnaHQsIC5jZW50ZXIpIHtcXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgICAgIGhlaWdodDogMTAwJTtcXG4gICAgICAgICAgb3ZlcmZsb3c6IGF1dG87XFxuICAgICAgICAgIHRvcDogMDtcXG4gICAgICAgIH1cXG4gICAgICAgIFwiKS5jb25jYXQodGhpcy5kZXRhaWxzLmNzcyA/IHRoaXMuZGV0YWlscy5jc3MgOiAnJywgXCJcXG4gICAgICA8L3N0eWxlPlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImJhbm5lclxcXCI+XFxuICAgICAgICA8cGljdHVyZT5cXG4gICAgICAgICAgPHNvdXJjZSBtZWRpYT1cXFwiKG1pbi13aWR0aDo0ODBweClcXFwiIHNyY3NldD1cXFwiXCIpLmNvbmNhdCh0aGlzLmRldGFpbHMuZGVza3RvcEltYWdlVVJMLCBcIlxcXCI+XFxuICAgICAgICAgIDxzb3VyY2Ugc3Jjc2V0PVxcXCJcIikuY29uY2F0KHRoaXMuZGV0YWlscy5tb2JpbGVJbWFnZVVSTCwgXCJcXFwiPlxcbiAgICAgICAgICA8aW1nIHNyYz1cXFwiXCIpLmNvbmNhdCh0aGlzLmRldGFpbHMuZGVza3RvcEltYWdlVVJMLCBcIlxcXCIgYWx0PVxcXCJQbGVhc2UgdXBsb2FkIGEgcGljdHVyZVxcXCIgc3R5bGU9XFxcIndpZHRoOjEwMCU7XFxcIiBwYXJ0PVxcXCJiYW5uZXJfX2ltZ1xcXCI+XFxuICAgICAgICA8L3BpY3R1cmU+XFxuICAgICAgICBcIikuY29uY2F0KHRoaXMuZGV0YWlscy5odG1sID8gdGhpcy5kZXRhaWxzLmh0bWwgOiAnJywgXCJcXG4gICAgICA8L2Rpdj5cXG4gICAgXCIpO1xuICAgIH1cblxuICB9XG5cbiAgY2xhc3MgQ1RXZWJQZXJzb25hbGlzYXRpb25DYXJvdXNlbCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICB0aGlzLl90YXJnZXQgPSBudWxsO1xuICAgICAgdGhpcy5fY2Fyb3VzZWwgPSBudWxsO1xuICAgICAgdGhpcy5zaGFkb3cgPSBudWxsO1xuICAgICAgdGhpcy5zbGlkZXMgPSAwO1xuICAgICAgdGhpcy5wcmV2aW91c2x5U2VsZWN0ZWRJdGVtID0gLTE7XG4gICAgICB0aGlzLnNlbGVjdGVkSXRlbSA9IDE7XG4gICAgICB0aGlzLmF1dG9TbGlkZSA9IG51bGw7XG4gICAgICB0aGlzLnN0b3BBdXRvU2xpZGVUaW1lb3V0ID0gbnVsbDtcbiAgICAgIHRoaXMuc2hhZG93ID0gdGhpcy5hdHRhY2hTaGFkb3coe1xuICAgICAgICBtb2RlOiAnb3BlbidcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoY3VzdG9tRWxlbWVudHMuZ2V0KCdjdC13ZWItcGVyc29uYWxpc2F0aW9uLWJhbm5lcicpID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdjdC13ZWItcGVyc29uYWxpc2F0aW9uLWJhbm5lcicsIENUV2ViUGVyc29uYWxpc2F0aW9uQmFubmVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgdGFyZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RhcmdldCB8fCAnJztcbiAgICB9XG5cbiAgICBzZXQgdGFyZ2V0KHZhbCkge1xuICAgICAgaWYgKHRoaXMuX3RhcmdldCA9PT0gbnVsbCkge1xuICAgICAgICB0aGlzLl90YXJnZXQgPSB2YWw7XG4gICAgICAgIHRoaXMucmVuZGVyQ2Fyb3VzZWwoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgZGV0YWlscygpIHtcbiAgICAgIHJldHVybiB0aGlzLnRhcmdldC5kaXNwbGF5LmRldGFpbHM7XG4gICAgfVxuXG4gICAgZ2V0IGRpc3BsYXkoKSB7XG4gICAgICByZXR1cm4gdGhpcy50YXJnZXQuZGlzcGxheTtcbiAgICB9XG5cbiAgICByZW5kZXJDYXJvdXNlbCgpIHtcbiAgICAgIHRoaXMuc2xpZGVzID0gdGhpcy5kZXRhaWxzLmxlbmd0aDtcbiAgICAgIHRoaXMuc2hhZG93LmlubmVySFRNTCA9IHRoaXMuZ2V0U3R5bGVzKCk7XG4gICAgICBjb25zdCBjYXJvdXNlbCA9IHRoaXMuZ2V0Q2Fyb3VzZWxDb250ZW50KCk7XG5cbiAgICAgIGlmICh0aGlzLmRpc3BsYXkuc2hvd05hdkJ0bnMpIHtcbiAgICAgICAgY2Fyb3VzZWwuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCB0aGlzLmRpc3BsYXkubmF2QnRuc0h0bWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5kaXNwbGF5LnNob3dOYXZBcnJvd3MpIHtcbiAgICAgICAgY2Fyb3VzZWwuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCB0aGlzLmRpc3BsYXkubGVmdE5hdkFycm93SHRtbCk7XG4gICAgICAgIGNhcm91c2VsLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgdGhpcy5kaXNwbGF5LnJpZ2h0TmF2QXJyb3dIdG1sKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fY2Fyb3VzZWwgPSBjYXJvdXNlbDtcbiAgICAgIHRoaXMuc2hhZG93LmFwcGVuZENoaWxkKGNhcm91c2VsKTtcbiAgICAgIHRoaXMuc2V0dXBDbGljaygpO1xuICAgICAgdGhpcy51cGRhdGVTZWxlY3RlZEl0ZW0oKTsgLy8gVE9ETzogZW5hYmxlIGNvbmRpdGlvbmFsbHlcblxuICAgICAgdGhpcy5zdGFydEF1dG9TbGlkZSgpO1xuICAgICAgdGhpcy5zZXR1cE9uSG92ZXIoKTtcbiAgICAgIHdpbmRvdy5jbGV2ZXJ0YXAucmVuZGVyTm90aWZpY2F0aW9uVmlld2VkKHtcbiAgICAgICAgbXNnSWQ6IHRoaXMudGFyZ2V0Lnd6cmtfaWQsXG4gICAgICAgIHBpdm90SWQ6IHRoaXMudGFyZ2V0Lnd6cmtfcGl2b3RcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHNldHVwQ2xpY2soKSB7XG4gICAgICB0aGlzLl9jYXJvdXNlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcbiAgICAgICAgY29uc3QgZXZlbnRJRCA9IGV2ZW50LnRhcmdldC5pZDtcblxuICAgICAgICBpZiAoZXZlbnRJRC5zdGFydHNXaXRoKCdjYXJvdXNlbF9fYnV0dG9uJykpIHtcbiAgICAgICAgICBjb25zdCBzZWxlY3RlZCA9ICtldmVudElELnNwbGl0KCctJylbMV07XG5cbiAgICAgICAgICBpZiAoc2VsZWN0ZWQgIT09IHRoaXMuc2VsZWN0ZWRJdGVtKSB7XG4gICAgICAgICAgICB0aGlzLnByZXZpb3VzbHlTZWxlY3RlZEl0ZW0gPSB0aGlzLnNlbGVjdGVkSXRlbTtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRJdGVtID0gc2VsZWN0ZWQ7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkSXRlbSgpO1xuICAgICAgICAgICAgdGhpcy5zdGFydEF1dG9TbGlkZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChldmVudElELnN0YXJ0c1dpdGgoJ2Nhcm91c2VsX19hcnJvdycpKSB7XG4gICAgICAgICAgZXZlbnRJRC5lbmRzV2l0aCgncmlnaHQnKSA/IHRoaXMuZ29Ub05leHQoKSA6IHRoaXMuZ29Ub1ByZXYoKTtcbiAgICAgICAgICB0aGlzLnN0YXJ0QXV0b1NsaWRlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnRJRC5pbmRleE9mKCctJykgPiAtMSkge1xuICAgICAgICAgIGNvbnN0IGl0ZW0gPSArZXZlbnRJRC5zcGxpdCgnLScpWzFdO1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gaXRlbSAtIDE7XG5cbiAgICAgICAgICBpZiAod2luZG93LnBhcmVudC5jbGV2ZXJ0YXApIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdSYWlzZSBub3RpZmljYXRpb24gY2xpY2tlZCBldmVudCBmb3IgJywgaXRlbSlcbiAgICAgICAgICAgIHdpbmRvdy5jbGV2ZXJ0YXAucmVuZGVyTm90aWZpY2F0aW9uQ2xpY2tlZCh7XG4gICAgICAgICAgICAgIG1zZ0lkOiB0aGlzLnRhcmdldC53enJrX2lkLFxuICAgICAgICAgICAgICBwaXZvdElkOiB0aGlzLnRhcmdldC53enJrX3Bpdm90LFxuICAgICAgICAgICAgICB3enJrX3NsaWRlTm86IGl0ZW1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHVybCA9IHRoaXMuZGV0YWlsc1tpbmRleF0ub25DbGljaztcblxuICAgICAgICAgIGlmICh1cmwgIT09ICcnKSB7XG4gICAgICAgICAgICB0aGlzLmRldGFpbHNbaW5kZXhdLndpbmRvdyA/IHdpbmRvdy5vcGVuKHVybCwgJ19ibGFuaycpIDogd2luZG93LmxvY2F0aW9uLmhyZWYgPSB1cmw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzZXR1cE9uSG92ZXIoKSB7XG4gICAgICB0aGlzLl9jYXJvdXNlbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgZXZlbnQgPT4ge1xuICAgICAgICB0aGlzLnN0b3BBdXRvU2xpZGVUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5hdXRvU2xpZGUgPSBjbGVhckludGVydmFsKHRoaXMuYXV0b1NsaWRlKTtcbiAgICAgICAgfSwgNTAwKTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLl9jYXJvdXNlbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgZXZlbnQgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5zdG9wQXV0b1NsaWRlVGltZW91dCk7XG5cbiAgICAgICAgaWYgKHRoaXMuYXV0b1NsaWRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLnN0YXJ0QXV0b1NsaWRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldENhcm91c2VsQ29udGVudCgpIHtcbiAgICAgIGNvbnN0IGNhcm91c2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBjYXJvdXNlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2Nhcm91c2VsJyk7XG4gICAgICB0aGlzLmRldGFpbHMuZm9yRWFjaCgoZGV0YWlsLCBpKSA9PiB7XG4gICAgICAgIGNvbnN0IGJhbm5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2N0LXdlYi1wZXJzb25hbGlzYXRpb24tYmFubmVyJyk7XG4gICAgICAgIGJhbm5lci5jbGFzc0xpc3QuYWRkKCdjYXJvdXNlbF9faXRlbScpO1xuICAgICAgICBiYW5uZXIudHJhY2tDbGljayA9IGZhbHNlO1xuICAgICAgICBiYW5uZXIuc2V0QXR0cmlidXRlKCdpZCcsIFwiY2Fyb3VzZWxfX2l0ZW0tXCIuY29uY2F0KGkgKyAxKSk7XG4gICAgICAgIGJhbm5lci5kZXRhaWxzID0gZGV0YWlsO1xuICAgICAgICBjYXJvdXNlbC5hcHBlbmRDaGlsZChiYW5uZXIpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gY2Fyb3VzZWw7XG4gICAgfVxuXG4gICAgZ2V0U3R5bGVzKCkge1xuICAgICAgdmFyIF90aGlzJHRhcmdldCwgX3RoaXMkdGFyZ2V0JGRpc3BsYXk7XG5cbiAgICAgIHJldHVybiBcIlxcbiAgICAgIDxzdHlsZT5cXG4gICAgICAuY2Fyb3VzZWwge1xcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICAgIH1cXG5cXG4gICAgICAuY2Fyb3VzZWxfX2l0ZW0ge1xcbiAgICAgICAgZGlzcGxheTogbm9uZTtcXG4gICAgICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxuICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcbiAgICAgIH1cXG5cXG4gICAgICBjdC13ZWItcGVyc29uYWxpc2F0aW9uLWJhbm5lcjo6cGFydChiYW5uZXJfX2ltZykge1xcbiAgICAgICAgaGVpZ2h0OiBcIi5jb25jYXQoKHRoaXMgPT09IG51bGwgfHwgdGhpcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF90aGlzJHRhcmdldCA9IHRoaXMudGFyZ2V0KSA9PT0gbnVsbCB8fCBfdGhpcyR0YXJnZXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfdGhpcyR0YXJnZXQkZGlzcGxheSA9IF90aGlzJHRhcmdldC5kaXNwbGF5KSA9PT0gbnVsbCB8fCBfdGhpcyR0YXJnZXQkZGlzcGxheSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkdGFyZ2V0JGRpc3BsYXkuZGl2SGVpZ2h0KSA/IHRoaXMudGFyZ2V0LmRpc3BsYXkuZGl2SGVpZ2h0IDogJ2F1dG8nLCBcIjtcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgICAgdHJhbnNpdGlvbjogMnM7XFxuICAgICAgfVxcblxcbiAgICAgIC5jYXJvdXNlbF9faXRlbS0tc2VsZWN0ZWQge1xcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XFxuICAgICAgfVxcbiAgICAgIFwiKS5jb25jYXQodGhpcy5kaXNwbGF5Lm5hdkJ0bnNDc3MsIFwiXFxuICAgICAgXCIpLmNvbmNhdCh0aGlzLmRpc3BsYXkubmF2QXJyb3dzQ3NzLCBcIlxcbiAgICAgIDwvc3R5bGU+XFxuICBcIik7XG4gICAgfVxuXG4gICAgdXBkYXRlU2VsZWN0ZWRJdGVtKCkge1xuICAgICAgaWYgKHRoaXMucHJldmlvdXNseVNlbGVjdGVkSXRlbSAhPT0gLTEpIHtcbiAgICAgICAgY29uc3QgcHJldkl0ZW0gPSB0aGlzLnNoYWRvdy5nZXRFbGVtZW50QnlJZChcImNhcm91c2VsX19pdGVtLVwiLmNvbmNhdCh0aGlzLnByZXZpb3VzbHlTZWxlY3RlZEl0ZW0pKTtcbiAgICAgICAgY29uc3QgcHJldkJ1dHRvbiA9IHRoaXMuc2hhZG93LmdldEVsZW1lbnRCeUlkKFwiY2Fyb3VzZWxfX2J1dHRvbi1cIi5jb25jYXQodGhpcy5wcmV2aW91c2x5U2VsZWN0ZWRJdGVtKSk7XG4gICAgICAgIHByZXZJdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2Nhcm91c2VsX19pdGVtLS1zZWxlY3RlZCcpO1xuXG4gICAgICAgIGlmIChwcmV2QnV0dG9uKSB7XG4gICAgICAgICAgcHJldkJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdjYXJvdXNlbF9fYnV0dG9uLS1zZWxlY3RlZCcpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLnNoYWRvdy5nZXRFbGVtZW50QnlJZChcImNhcm91c2VsX19pdGVtLVwiLmNvbmNhdCh0aGlzLnNlbGVjdGVkSXRlbSkpO1xuICAgICAgY29uc3QgYnV0dG9uID0gdGhpcy5zaGFkb3cuZ2V0RWxlbWVudEJ5SWQoXCJjYXJvdXNlbF9fYnV0dG9uLVwiLmNvbmNhdCh0aGlzLnNlbGVjdGVkSXRlbSkpO1xuICAgICAgaXRlbS5jbGFzc0xpc3QuYWRkKCdjYXJvdXNlbF9faXRlbS0tc2VsZWN0ZWQnKTtcblxuICAgICAgaWYgKGJ1dHRvbikge1xuICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgnY2Fyb3VzZWxfX2J1dHRvbi0tc2VsZWN0ZWQnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzdGFydEF1dG9TbGlkZSgpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5hdXRvU2xpZGUpO1xuICAgICAgdGhpcy5hdXRvU2xpZGUgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIHRoaXMuZ29Ub05leHQoKTtcbiAgICAgIH0sIHRoaXMuZGlzcGxheS5zbGlkZXJUaW1lID8gdGhpcy5kaXNwbGF5LnNsaWRlclRpbWUgKiAxMDAwIDogMzAwMCk7XG4gICAgfVxuXG4gICAgZ29Ub05leHQoKSB7XG4gICAgICB0aGlzLmdvVG8odGhpcy5zZWxlY3RlZEl0ZW0sICh0aGlzLnNlbGVjdGVkSXRlbSArIDEpICUgdGhpcy5zbGlkZXMpO1xuICAgIH1cblxuICAgIGdvVG9QcmV2KCkge1xuICAgICAgdGhpcy5nb1RvKHRoaXMuc2VsZWN0ZWRJdGVtLCB0aGlzLnNlbGVjdGVkSXRlbSAtIDEpO1xuICAgIH1cblxuICAgIGdvVG8ocHJldiwgY3VyKSB7XG4gICAgICB0aGlzLnByZXZpb3VzbHlTZWxlY3RlZEl0ZW0gPSBwcmV2O1xuICAgICAgdGhpcy5zZWxlY3RlZEl0ZW0gPSBjdXI7XG5cbiAgICAgIGlmIChjdXIgPT09IDApIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZEl0ZW0gPSB0aGlzLnNsaWRlcztcbiAgICAgIH1cblxuICAgICAgdGhpcy51cGRhdGVTZWxlY3RlZEl0ZW0oKTtcbiAgICB9XG5cbiAgfVxuXG4gIGNsYXNzIENUV2ViUG9wdXBJbWFnZU9ubHkgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICBzdXBlcigpO1xuICAgICAgdGhpcy5fdGFyZ2V0ID0gbnVsbDtcbiAgICAgIHRoaXMuX3Nlc3Npb24gPSBudWxsO1xuICAgICAgdGhpcy5zaGFkb3cgPSBudWxsO1xuICAgICAgdGhpcy5wb3B1cCA9IG51bGw7XG4gICAgICB0aGlzLmNvbnRhaW5lciA9IG51bGw7XG4gICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyID0gbnVsbDtcbiAgICAgIHRoaXMuc2hhZG93ID0gdGhpcy5hdHRhY2hTaGFkb3coe1xuICAgICAgICBtb2RlOiAnb3BlbidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldCB0YXJnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdGFyZ2V0IHx8ICcnO1xuICAgIH1cblxuICAgIHNldCB0YXJnZXQodmFsKSB7XG4gICAgICBpZiAodGhpcy5fdGFyZ2V0ID09PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3RhcmdldCA9IHZhbDtcbiAgICAgICAgdGhpcy5yZW5kZXJJbWFnZU9ubHlQb3B1cCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGdldCBzZXNzaW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Nlc3Npb24gfHwgJyc7XG4gICAgfVxuXG4gICAgc2V0IHNlc3Npb24odmFsKSB7XG4gICAgICB0aGlzLl9zZXNzaW9uID0gdmFsO1xuICAgIH1cblxuICAgIGdldCBtc2dJZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnRhcmdldC53enJrX2lkO1xuICAgIH1cblxuICAgIGdldCBwaXZvdElkKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0Lnd6cmtfcGl2b3Q7XG4gICAgfVxuXG4gICAgZ2V0IG9uQ2xpY2tVcmwoKSB7XG4gICAgICByZXR1cm4gdGhpcy50YXJnZXQuZGlzcGxheS5vbkNsaWNrVXJsO1xuICAgIH1cblxuICAgIHJlbmRlckltYWdlT25seVBvcHVwKCkge1xuICAgICAgY29uc3QgY2FtcGFpZ25JZCA9IHRoaXMudGFyZ2V0Lnd6cmtfaWQuc3BsaXQoJ18nKVswXTtcbiAgICAgIGNvbnN0IGN1cnJlbnRTZXNzaW9uSWQgPSB0aGlzLnNlc3Npb24uc2Vzc2lvbklkO1xuICAgICAgdGhpcy5zaGFkb3cuaW5uZXJIVE1MID0gdGhpcy5nZXRJbWFnZU9ubHlQb3B1cENvbnRlbnQoKTtcbiAgICAgIHRoaXMucG9wdXAgPSB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoJ2ltYWdlT25seVBvcHVwJyk7XG4gICAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZCgnY29udGFpbmVyJyk7XG4gICAgICB0aGlzLmNsb3NlSWNvbiA9IHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZCgnY2xvc2UnKTtcbiAgICAgIHRoaXMucG9wdXAuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIHRoaXMudXBkYXRlSW1hZ2VBbmRDb250YWluZXJXaWR0aCgpKTtcbiAgICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoKCkgPT4gdGhpcy5oYW5kbGVSZXNpemUodGhpcy5wb3B1cCwgdGhpcy5jb250YWluZXIpKTtcbiAgICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLnBvcHVwKTtcbiAgICAgIHRoaXMuY2xvc2VJY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyLnVub2JzZXJ2ZSh0aGlzLnBvcHVwKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3d6cmtJbWFnZU9ubHlEaXYnKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB0aGlzLnJlbW92ZSgpO1xuXG4gICAgICAgIGlmIChjYW1wYWlnbklkICE9IG51bGwgJiYgY2FtcGFpZ25JZCAhPT0gJy0xJykge1xuICAgICAgICAgIGlmIChTdG9yYWdlTWFuYWdlci5faXNMb2NhbFN0b3JhZ2VTdXBwb3J0ZWQoKSkge1xuICAgICAgICAgICAgY29uc3QgY2FtcGFpZ25PYmogPSBnZXRDYW1wYWlnbk9iamVjdCgpO1xuICAgICAgICAgICAgbGV0IHNlc3Npb25DYW1wYWlnbk9iaiA9IGNhbXBhaWduT2JqLndwW2N1cnJlbnRTZXNzaW9uSWRdO1xuXG4gICAgICAgICAgICBpZiAoc2Vzc2lvbkNhbXBhaWduT2JqID09IG51bGwpIHtcbiAgICAgICAgICAgICAgc2Vzc2lvbkNhbXBhaWduT2JqID0ge307XG4gICAgICAgICAgICAgIGNhbXBhaWduT2JqW2N1cnJlbnRTZXNzaW9uSWRdID0gc2Vzc2lvbkNhbXBhaWduT2JqO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZXNzaW9uQ2FtcGFpZ25PYmpbY2FtcGFpZ25JZF0gPSAnZG5kJztcbiAgICAgICAgICAgIHNhdmVDYW1wYWlnbk9iamVjdChjYW1wYWlnbk9iaik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHdpbmRvdy5jbGV2ZXJ0YXAucmVuZGVyTm90aWZpY2F0aW9uVmlld2VkKHtcbiAgICAgICAgbXNnSWQ6IHRoaXMubXNnSWQsXG4gICAgICAgIHBpdm90SWQ6IHRoaXMucGl2b3RJZFxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLm9uQ2xpY2tVcmwpIHtcbiAgICAgICAgdGhpcy5wb3B1cC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICB0aGlzLnRhcmdldC5kaXNwbGF5LndpbmRvdyA/IHdpbmRvdy5vcGVuKHRoaXMub25DbGlja1VybCwgJ19ibGFuaycpIDogd2luZG93LnBhcmVudC5sb2NhdGlvbi5ocmVmID0gdGhpcy5vbkNsaWNrVXJsO1xuICAgICAgICAgIHdpbmRvdy5jbGV2ZXJ0YXAucmVuZGVyTm90aWZpY2F0aW9uQ2xpY2tlZCh7XG4gICAgICAgICAgICBtc2dJZDogdGhpcy5tc2dJZCxcbiAgICAgICAgICAgIHBpdm90SWQ6IHRoaXMucGl2b3RJZFxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVSZXNpemUocG9wdXAsIGNvbnRhaW5lcikge1xuICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLmdldFJlbmRlcmVkSW1hZ2VXaWR0aChwb3B1cCk7XG4gICAgICBjb250YWluZXIuc3R5bGUuc2V0UHJvcGVydHkoJ3dpZHRoJywgXCJcIi5jb25jYXQod2lkdGgsIFwicHhcIikpO1xuICAgIH1cblxuICAgIGdldEltYWdlT25seVBvcHVwQ29udGVudCgpIHtcbiAgICAgIHJldHVybiBcIlxcbiAgICAgICAgXCIuY29uY2F0KHRoaXMudGFyZ2V0Lm1zZ0NvbnRlbnQuY3NzLCBcIlxcbiAgICAgICAgXCIpLmNvbmNhdCh0aGlzLnRhcmdldC5tc2dDb250ZW50Lmh0bWwsIFwiXFxuICAgICAgXCIpO1xuICAgIH1cblxuICAgIHVwZGF0ZUltYWdlQW5kQ29udGFpbmVyV2lkdGgoKSB7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMuZ2V0UmVuZGVyZWRJbWFnZVdpZHRoKHRoaXMucG9wdXApO1xuICAgICAgICB0aGlzLnBvcHVwLnN0eWxlLnNldFByb3BlcnR5KCd3aWR0aCcsIFwiXCIuY29uY2F0KHdpZHRoLCBcInB4XCIpKTtcbiAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUuc2V0UHJvcGVydHkoJ3dpZHRoJywgXCJcIi5jb25jYXQod2lkdGgsIFwicHhcIikpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS5zZXRQcm9wZXJ0eSgnaGVpZ2h0JywgJ2F1dG8nKTtcbiAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUuc2V0UHJvcGVydHkoJ3Bvc2l0aW9uJywgJ2ZpeGVkJyk7XG4gICAgICAgIHRoaXMucG9wdXAuc3R5bGUuc2V0UHJvcGVydHkoJ3Zpc2liaWxpdHknLCAndmlzaWJsZScpO1xuICAgICAgICB0aGlzLmNsb3NlSWNvbi5zdHlsZS5zZXRQcm9wZXJ0eSgndmlzaWJpbGl0eScsICd2aXNpYmxlJyk7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3enJrSW1hZ2VPbmx5RGl2Jykuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZ2V0UmVuZGVyZWRJbWFnZVdpZHRoKGltZykge1xuICAgICAgY29uc3QgcmF0aW8gPSBpbWcubmF0dXJhbFdpZHRoIC8gaW1nLm5hdHVyYWxIZWlnaHQ7XG4gICAgICByZXR1cm4gaW1nLmhlaWdodCAqIHJhdGlvO1xuICAgIH1cblxuICB9XG5cbiAgY2xhc3MgTWVzc2FnZSBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcsIG1lc3NhZ2UpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICB0aGlzLndyYXBwZXIgPSBudWxsO1xuICAgICAgdGhpcy5zbmFja0JhciA9IG51bGw7XG4gICAgICB0aGlzLnNoYWRvdyA9IHRoaXMuYXR0YWNoU2hhZG93KHtcbiAgICAgICAgbW9kZTogJ29wZW4nXG4gICAgICB9KTtcbiAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgIHRoaXMucmVuZGVyTWVzc2FnZShtZXNzYWdlKTtcbiAgICB9XG5cbiAgICBnZXQgcGl2b3RJZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2Uud3pya19waXZvdDtcbiAgICB9XG5cbiAgICBnZXQgY2FtcGFpZ25JZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2Uud3pya19pZDtcbiAgICB9XG5cbiAgICBjcmVhdGVFbCh0eXBlLCBpZCwgcGFydCkge1xuICAgICAgY29uc3QgX2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0eXBlKTtcblxuICAgICAgX2VsLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7XG5cbiAgICAgIF9lbC5zZXRBdHRyaWJ1dGUoJ3BhcnQnLCBwYXJ0IHx8IGlkKTtcblxuICAgICAgcmV0dXJuIF9lbDtcbiAgICB9XG5cbiAgICByZW5kZXJNZXNzYWdlKG1zZykge1xuICAgICAgdGhpcy53cmFwcGVyID0gdGhpcy5jcmVhdGVFbCgnZGl2JywgJ21lc3NhZ2VXcmFwcGVyJyk7XG5cbiAgICAgIHN3aXRjaCAobXNnLnRlbXBsYXRlVHlwZSkge1xuICAgICAgICBjYXNlICd0ZXh0LW9ubHknOlxuICAgICAgICBjYXNlICd0ZXh0LXdpdGgtaWNvbic6XG4gICAgICAgIGNhc2UgJ3RleHQtd2l0aC1pY29uLWFuZC1pbWFnZSc6XG4gICAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IHRoaXMucHJlcGFyZUJhc2ljTWVzc2FnZShtc2cubXNnWzBdKTtcbiAgICAgICAgICAgIHRoaXMud3JhcHBlci5hcHBlbmRDaGlsZChtZXNzYWdlKTtcbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRpbWVTdGFtcCA9IHRoaXMuY3JlYXRlRWwoJ2RpdicsICd0aW1lU3RhbXAnKTtcbiAgICAgIHRpbWVTdGFtcC5pbm5lckhUTUwgPSBcIjxzcGFuPlwiLmNvbmNhdChkZXRlcm1pbmVUaW1lU3RhbXBUZXh0KG1zZy5pZC5zcGxpdCgnXycpWzFdKSwgXCI8c3Bhbj5cIik7XG5cbiAgICAgIGlmICghbXNnLnZpZXdlZCkge1xuICAgICAgICBjb25zdCB1bnJlYWRNYXJrZXIgPSB0aGlzLmNyZWF0ZUVsKCdzcGFuJywgJ3VucmVhZE1hcmtlcicpO1xuICAgICAgICB0aW1lU3RhbXAuYXBwZW5kQ2hpbGQodW5yZWFkTWFya2VyKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy53cmFwcGVyLmFwcGVuZENoaWxkKHRpbWVTdGFtcCk7XG4gICAgICB0aGlzLnNoYWRvdy5hcHBlbmRDaGlsZCh0aGlzLndyYXBwZXIpO1xuICAgIH1cblxuICAgIHByZXBhcmVCYXNpY01lc3NhZ2UobXNnKSB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gdGhpcy5jcmVhdGVFbCgnZGl2JywgJ21lc3NhZ2UnKTtcblxuICAgICAgaWYgKG1zZy5pbWFnZVVybCkge1xuICAgICAgICBjb25zdCBpbWFnZUNvbnRhaW5lciA9IHRoaXMuYWRkSW1hZ2UobXNnLmltYWdlVXJsLCAnbWFpbkltZycpO1xuICAgICAgICBtZXNzYWdlLmFwcGVuZENoaWxkKGltYWdlQ29udGFpbmVyKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaWNvblRpdGxlRGVzY1dyYXBwZXIgPSB0aGlzLmNyZWF0ZUVsKCdkaXYnLCAnaWNvblRpdGxlRGVzY1dyYXBwZXInKTtcblxuICAgICAgaWYgKG1zZy5pY29uVXJsKSB7XG4gICAgICAgIGNvbnN0IGljb25Db250YWluZXIgPSB0aGlzLmFkZEltYWdlKG1zZy5pY29uVXJsLCAnaWNvbkltZycpO1xuICAgICAgICBpY29uVGl0bGVEZXNjV3JhcHBlci5hcHBlbmRDaGlsZChpY29uQ29udGFpbmVyKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdGl0bGVEZXNjV3JhcHBlciA9IHRoaXMuY3JlYXRlRWwoJ2RpdicsICd0aXRsZURlc2NXcmFwcGVyJyk7XG5cbiAgICAgIGlmIChtc2cudGl0bGUpIHtcbiAgICAgICAgY29uc3QgdGl0bGUgPSB0aGlzLmNyZWF0ZUVsKCdkaXYnLCAndGl0bGUnKTtcbiAgICAgICAgdGl0bGUuaW5uZXJUZXh0ID0gbXNnLnRpdGxlO1xuICAgICAgICB0aXRsZURlc2NXcmFwcGVyLmFwcGVuZENoaWxkKHRpdGxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1zZy5kZXNjcmlwdGlvbikge1xuICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHRoaXMuY3JlYXRlRWwoJ2RpdicsICdkZXNjcmlwdGlvbicpO1xuICAgICAgICBkZXNjcmlwdGlvbi5pbm5lclRleHQgPSBtc2cuZGVzY3JpcHRpb247XG4gICAgICAgIHRpdGxlRGVzY1dyYXBwZXIuYXBwZW5kQ2hpbGQoZGVzY3JpcHRpb24pO1xuICAgICAgfVxuXG4gICAgICBpZiAobXNnLnRpdGxlIHx8IG1zZy5kZXNjcmlwdGlvbikge1xuICAgICAgICBpY29uVGl0bGVEZXNjV3JhcHBlci5hcHBlbmRDaGlsZCh0aXRsZURlc2NXcmFwcGVyKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1zZy5pY29uVXJsIHx8IG1zZy50aXRsZSB8fCBtc2cuZGVzY3JpcHRpb24pIHtcbiAgICAgICAgbWVzc2FnZS5hcHBlbmRDaGlsZChpY29uVGl0bGVEZXNjV3JhcHBlcik7XG4gICAgICB9XG5cbiAgICAgIGlmIChtc2cuYnV0dG9ucyAmJiBtc2cuYnV0dG9ucy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgYnV0dG9uc0NvbnRhaW5lciA9IHRoaXMuYWRkQnV0dG9ucyhtc2cuYnV0dG9ucyk7XG4gICAgICAgIG1lc3NhZ2UuYXBwZW5kQ2hpbGQoYnV0dG9uc0NvbnRhaW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cblxuICAgIGFkZEJ1dHRvbnMoKSB7XG4gICAgICBsZXQgYnV0dG9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG4gICAgICBjb25zdCBidXR0b25zQ29udGFpbmVyID0gdGhpcy5jcmVhdGVFbCgnZGl2JywgJ2J1dHRvbnNDb250YWluZXInKTtcbiAgICAgIGxldCBoYXNDb3B5QWN0aW9uID0gZmFsc2U7XG4gICAgICBidXR0b25zLmZvckVhY2goKGIsIGkpID0+IHtcbiAgICAgICAgY29uc3QgYnV0dG9uID0gdGhpcy5jcmVhdGVFbCgnYnV0dG9uJywgXCJidXR0b24tXCIuY29uY2F0KGkpLCAnYnV0dG9uJyk7XG4gICAgICAgIGJ1dHRvbi5pbm5lclRleHQgPSBiLnRleHQ7XG5cbiAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgYnV0dG9uLnN0eWxlLmNzc1RleHQgKz0gJ21hcmdpbi1sZWZ0OiAycHg7JztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChiLmFjdGlvbiA9PT0gJ2NvcHknKSB7XG4gICAgICAgICAgaGFzQ29weUFjdGlvbiA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBidXR0b25zQ29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbik7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGhhc0NvcHlBY3Rpb24pIHtcbiAgICAgICAgdGhpcy5hZGRTbmFja2JhcihidXR0b25zQ29udGFpbmVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJ1dHRvbnNDb250YWluZXI7XG4gICAgfVxuXG4gICAgYWRkU25hY2tiYXIoYnV0dG9uc0NvbnRhaW5lcikge1xuICAgICAgdGhpcy5zbmFja0JhciA9IHRoaXMuY3JlYXRlRWwoJ2RpdicsIFwic25hY2tiYXItXCIuY29uY2F0KHRoaXMuY2FtcGFpZ25JZCksICdzbmFja2JhcicpO1xuICAgICAgdGhpcy5zbmFja0Jhci5pbm5lckhUTUwgPSBncmVlblRpY2tTdmc7XG4gICAgICBjb25zdCBjbGlwYm9hcmRNc2cgPSB0aGlzLmNyZWF0ZUVsKCdzcGFuJywgXCJzbmFja2Jhci1tc2ctXCIuY29uY2F0KHRoaXMuY2FtcGFpZ25JZCksICdzbmFja2Jhci1tc2cnKTtcbiAgICAgIGNsaXBib2FyZE1zZy5pbm5lclRleHQgPSAnQ29waWVkIHRvIGNsaXBib2FyZCc7XG4gICAgICB0aGlzLnNuYWNrQmFyLmFwcGVuZENoaWxkKGNsaXBib2FyZE1zZyk7XG4gICAgICBidXR0b25zQ29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuc25hY2tCYXIpO1xuICAgIH1cblxuICAgIGFkZEltYWdlKHVybCwgdHlwZSkge1xuICAgICAgY29uc3QgaW1hZ2VDb250YWluZXIgPSB0aGlzLmNyZWF0ZUVsKCdkaXYnLCBcIlwiLmNvbmNhdCh0eXBlLCBcIkNvbnRhaW5lclwiKSk7XG4gICAgICBjb25zdCBpbWFnZSA9IHRoaXMuY3JlYXRlRWwoJ2ltZycsIHR5cGUpO1xuICAgICAgaW1hZ2Uuc2V0QXR0cmlidXRlKCdzcmMnLCB1cmwpOyAvLyBpbWFnZXMgd2lsbCBiZSBmZXRjaGVkIGFzIGFuZCB3aGVuIHRoZSBlbGVtZW50IGNvbWVzIGludG8gdGhlIHZpZXdwb3J0XG5cbiAgICAgIGltYWdlLnNldEF0dHJpYnV0ZSgnbG9hZGluZycsICdsYXp5Jyk7XG4gICAgICBpbWFnZUNvbnRhaW5lci5hcHBlbmRDaGlsZChpbWFnZSk7XG4gICAgICByZXR1cm4gaW1hZ2VDb250YWluZXI7XG4gICAgfVxuXG4gICAgcmFpc2VDbGlja2VkRXZlbnQocGF0aCwgaXNQcmV2aWV3KSB7XG4gICAgICBzd2l0Y2ggKHRoaXMubWVzc2FnZS50ZW1wbGF0ZVR5cGUpIHtcbiAgICAgICAgY2FzZSAndGV4dC1vbmx5JzpcbiAgICAgICAgY2FzZSAndGV4dC13aXRoLWljb24nOlxuICAgICAgICBjYXNlICd0ZXh0LXdpdGgtaWNvbi1hbmQtaW1hZ2UnOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMucmFpc2VDbGlja2VkRm9yQmFzaWNUZW1wbGF0ZXMocGF0aCwgaXNQcmV2aWV3KTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmFpc2VDbGlja2VkRm9yQmFzaWNUZW1wbGF0ZXMocGF0aCwgaXNQcmV2aWV3KSB7XG4gICAgICBjb25zdCBtc2cgPSB0aGlzLm1lc3NhZ2UubXNnWzBdO1xuICAgICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgICAgbXNnSWQ6IHRoaXMuY2FtcGFpZ25JZCxcbiAgICAgICAgcGl2b3RJZDogdGhpcy5waXZvdElkXG4gICAgICB9O1xuXG4gICAgICBpZiAocGF0aC50YWdOYW1lID09PSAnQlVUVE9OJykge1xuICAgICAgICBjb25zdCBpZCA9IHBhdGguaWQuc3BsaXQoJy0nKVsxXTtcbiAgICAgICAgY29uc3QgYnV0dG9uID0gbXNnLmJ1dHRvbnNbaWRdO1xuICAgICAgICBwYXlsb2FkLmt2ID0ge1xuICAgICAgICAgIHd6cmtfYzJhOiBidXR0b24udGV4dFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChidXR0b24uYWN0aW9uID09PSAndXJsJykge1xuICAgICAgICAgIGJ1dHRvbi5vcGVuVXJsSW5OZXdUYWIgPyB3aW5kb3cub3BlbihidXR0b24udXJsLCAnX2JsYW5rJykgOiB3aW5kb3cubG9jYXRpb24gPSBidXR0b24udXJsO1xuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvbi5hY3Rpb24gPT09ICdjb3B5Jykge1xuICAgICAgICAgIHdpbmRvdy5mb2N1cygpO1xuICAgICAgICAgIG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KGJ1dHRvbi5jbGlwYm9hcmRUZXh0KTtcbiAgICAgICAgICB0aGlzLnNuYWNrQmFyLnN0eWxlLnNldFByb3BlcnR5KCdkaXNwbGF5JywgJ2ZsZXgnLCAnaW1wb3J0YW50Jyk7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNuYWNrQmFyLnN0eWxlLnNldFByb3BlcnR5KCdkaXNwbGF5JywgJ25vbmUnLCAnaW1wb3J0YW50Jyk7XG4gICAgICAgICAgfSwgMjAwMCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocGF0aC50YWdOYW1lID09PSAnQ1QtSU5CT1gtTUVTU0FHRScgJiYgbXNnLm9uQ2xpY2tVcmwpIHtcbiAgICAgICAgbXNnLm9wZW5VcmxJbk5ld1RhYiA/IHdpbmRvdy5vcGVuKG1zZy5vbkNsaWNrVXJsLCAnX2JsYW5rJykgOiB3aW5kb3cubG9jYXRpb24gPSBtc2cub25DbGlja1VybDtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzUHJldmlldykge1xuICAgICAgICBjb25zb2xlLmxvZygnTm90aWZpY3Rpb24gY2xpY2tlZCBldmVudCB3aWxsIGJlIHJhaXNlZCBhdCBydW4gdGltZSB3aXRoIHBheWxvYWQgOjonLCBwYXlsb2FkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5jbGV2ZXJ0YXAucmVuZGVyTm90aWZpY2F0aW9uQ2xpY2tlZChwYXlsb2FkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgfVxuXG4gIGNvbnN0IG1lc3NhZ2VTdHlsZXMgPSAoX3JlZikgPT4ge1xuICAgIGxldCB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3IsXG4gICAgICBib3JkZXJDb2xvcixcbiAgICAgIHRpdGxlQ29sb3IsXG4gICAgICBkZXNjcmlwdGlvbkNvbG9yLFxuICAgICAgYnV0dG9uQ29sb3IsXG4gICAgICBidXR0b25UZXh0Q29sb3IsXG4gICAgICB1bnJlYWRNYXJrZXJDb2xvclxuICAgIH0gPSBfcmVmO1xuICAgIHJldHVybiBcIlxcbiAgICA8c3R5bGUgaWQ9XFxcIm1lc3NhZ2VTdHlsZXNcXFwiPlxcbiAgICAgIGN0LWluYm94LW1lc3NhZ2U6OnBhcnQobWVzc2FnZVdyYXBwZXIpIHtcXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDE2cHg7IFxcbiAgICAgIH1cXG4gICAgICBjdC1pbmJveC1tZXNzYWdlOjpwYXJ0KG1lc3NhZ2UpIHtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IFwiLmNvbmNhdChiYWNrZ3JvdW5kQ29sb3IsIFwiOyBcXG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIFwiKS5jb25jYXQoYm9yZGVyQ29sb3IsIFwiO1xcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4OyBcXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgICAgICBtaW4taGVpZ2h0OiA0MHB4O1xcbiAgICAgIH1cXG4gICAgICBjdC1pbmJveC1tZXNzYWdlOjpwYXJ0KG1lc3NhZ2UpOmhvdmVyIHtcXG4gICAgICAgIGJveC1zaGFkb3c6IDBweCA0cHggOHB4IHJnYigwIDAgMCAvIDEwJSk7XFxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgfVxcbiAgICAgIGN0LWluYm94LW1lc3NhZ2U6OnBhcnQoaWNvblRpdGxlRGVzY1dyYXBwZXIpIHtcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7IFxcbiAgICAgICAgcGFkZGluZzogMTZweDtcXG4gICAgICB9XFxuICAgICAgY3QtaW5ib3gtbWVzc2FnZTo6cGFydCh0aXRsZURlc2NXcmFwcGVyKSB7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4OyBcXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAgfVxcbiAgICAgIGN0LWluYm94LW1lc3NhZ2U6OnBhcnQoaWNvbkltZ0NvbnRhaW5lcikge1xcbiAgICAgICAgZGlzcGxheTogZmxleDsgXFxuICAgICAgICBtYXJnaW4tcmlnaHQ6IDE2cHg7XFxuICAgICAgfVxcbiAgICAgIGN0LWluYm94LW1lc3NhZ2U6OnBhcnQobWFpbkltZ0NvbnRhaW5lcikge1xcbiAgICAgICAgbGluZS1oZWlnaHQ6IDA7XFxuICAgICAgfVxcbiAgICAgIGN0LWluYm94LW1lc3NhZ2U6OnBhcnQobWFpbkltZykge1xcbiAgICAgICAgd2lkdGg6IDEwMCU7IFxcbiAgICAgICAgYmFja2dyb3VuZDogI2IyYjFhZTtcXG4gICAgICB9XFxuICAgICAgY3QtaW5ib3gtbWVzc2FnZTo6cGFydChpY29uSW1nKSB7XFxuICAgICAgICBoZWlnaHQ6IDQwcHg7IFxcbiAgICAgICAgd2lkdGg6IDQwcHg7XFxuICAgICAgfVxcbiAgICAgIGN0LWluYm94LW1lc3NhZ2U6OnBhcnQodGl0bGUpIHtcXG4gICAgICAgIGZvbnQtc2l6ZTogMTRweCAhaW1wb3J0YW50OyBcXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4OyBcXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA2MDA7IFxcbiAgICAgICAgY29sb3I6IFwiKS5jb25jYXQodGl0bGVDb2xvciwgXCJcXG4gICAgICB9XFxuICAgICAgY3QtaW5ib3gtbWVzc2FnZTo6cGFydChkZXNjcmlwdGlvbikge1xcbiAgICAgICAgZm9udC1zaXplOiAxNHB4ICFpbXBvcnRhbnQ7IFxcbiAgICAgICAgbGluZS1oZWlnaHQ6IDIwcHg7IFxcbiAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDsgXFxuICAgICAgICBjb2xvcjogXCIpLmNvbmNhdChkZXNjcmlwdGlvbkNvbG9yLCBcIlxcbiAgICAgIH1cXG4gICAgICBjdC1pbmJveC1tZXNzYWdlOjpwYXJ0KGJ1dHRvbikge1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogXCIpLmNvbmNhdChidXR0b25Db2xvciwgXCI7IFxcbiAgICAgICAgY29sb3I6IFwiKS5jb25jYXQoYnV0dG9uVGV4dENvbG9yLCBcIjsgXFxuICAgICAgICBwYWRkaW5nOiA4cHggMTZweDsgXFxuICAgICAgICBmb250LXNpemU6IDEycHg7IFxcbiAgICAgICAgbGluZS1oZWlnaHQ6IDE2cHg7IFxcbiAgICAgICAgZm9udC13ZWlnaHQ6IDYwMDsgXFxuICAgICAgICBmbGV4OiAxOyBcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDBweDsgXFxuICAgICAgICB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZTsgXFxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7IFxcbiAgICAgICAgYm9yZGVyOiBub25lO1xcbiAgICAgIH1cXG4gICAgICBjdC1pbmJveC1tZXNzYWdlOjpwYXJ0KGJ1dHRvbnNDb250YWluZXIpIHtcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgfVxcbiAgICAgIGN0LWluYm94LW1lc3NhZ2U6OnBhcnQoc25hY2tiYXIpIHtcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgIHRvcDogY2FsYygtMTAwJSAtIDEycHgpO1xcbiAgICAgICAgbGVmdDogNTAlO1xcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgMHB4KTtcXG4gICAgICAgIGZvbnQtc2l6ZTogMTRweDtcXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICAgICAgICBiYWNrZ3JvdW5kOiAjRkZGRkZGO1xcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI0VDRURGMjtcXG4gICAgICAgIGJveC1zaGFkb3c6IDBweCA0cHggOHB4IHJnYigwIDAgMCAvIDYlKSwgMHB4IDBweCAycHggcmdiKDAgMCAwIC8gNCUpO1xcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgICAgICAgei1pbmRleDogMjtcXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgICAgICB3aWR0aDogbWF4LWNvbnRlbnQ7XFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgICAgcGFkZGluZzogOHB4IDE2cHg7XFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgICB9XFxuXFxuICAgICAgY3QtaW5ib3gtbWVzc2FnZTo6cGFydChzbmFja2Jhci1tc2cpIHtcXG4gICAgICAgIGNvbG9yOiBibGFjaztcXG4gICAgICAgIG1hcmdpbi1sZWZ0OiA4cHg7XFxuICAgICAgfVxcblxcbiAgICAgIGN0LWluYm94LW1lc3NhZ2U6OnBhcnQodGltZVN0YW1wKSB7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4OyBcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogZW5kOyBcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7IFxcbiAgICAgICAgbWFyZ2luLXRvcDogNHB4OyBcXG4gICAgICAgIGZvbnQtc2l6ZTogMTJweCAhaW1wb3J0YW50OyBcXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxNnB4OyBcXG4gICAgICAgIGNvbG9yOiBibGFjaztcXG4gICAgICB9XFxuICAgICAgY3QtaW5ib3gtbWVzc2FnZTo6cGFydCh1bnJlYWRNYXJrZXIpIHtcXG4gICAgICAgIGhlaWdodDogOHB4OyBcXG4gICAgICAgIHdpZHRoOiA4cHg7IFxcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlOyBcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IFwiKS5jb25jYXQodW5yZWFkTWFya2VyQ29sb3IsIFwiOyBcXG4gICAgICAgIG1hcmdpbi1sZWZ0OiA4cHg7XFxuICAgICAgfVxcbiAgICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNDIwcHgpIHtcXG4gICAgICAgIGN0LWluYm94LW1lc3NhZ2U6OnBhcnQobWFpbkltZykge1xcbiAgICAgICAgICBoZWlnaHQ6IDE4MHB4O1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgPC9zdHlsZT5cXG4gIFwiKTtcbiAgfTtcbiAgY29uc3QgaW5ib3hDb250YWluZXJTdHlsZXMgPSAoX3JlZjIpID0+IHtcbiAgICBsZXQge1xuICAgICAgcGFuZWxCYWNrZ3JvdW5kQ29sb3IsXG4gICAgICBwYW5lbEJvcmRlckNvbG9yLFxuICAgICAgaGVhZGVyQmFja2dyb3VuZENvbG9yLFxuICAgICAgaGVhZGVyVGl0bGVDb2xvcixcbiAgICAgIGNsb3NlSWNvbkNvbG9yLFxuICAgICAgY2F0ZWdvcmllc1RhYkNvbG9yLFxuICAgICAgY2F0ZWdvcmllc1RpdGxlQ29sb3IsXG4gICAgICBjYXRlZ29yaWVzQm9yZGVyQ29sb3IsXG4gICAgICBzZWxlY3RlZENhdGVnb3J5VGFiQ29sb3IsXG4gICAgICBzZWxlY3RlZENhdGVnb3J5VGl0bGVDb2xvcixcbiAgICAgIHNlbGVjdGVkQ2F0ZWdvcnlCb3JkZXJDb2xvcixcbiAgICAgIGhlYWRlckNhdGVnb3J5SGVpZ2h0XG4gICAgfSA9IF9yZWYyO1xuICAgIHJldHVybiBcIlxcbiAgICAgIDxzdHlsZSBpZD1cXFwid2ViSW5ib3hTdHlsZXNcXFwiPlxcbiAgICAgICAgI2luYm94IHtcXG4gICAgICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcXG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsgXFxuICAgICAgICAgIGRpc3BsYXk6IG5vbmU7IFxcbiAgICAgICAgICBib3gtc2hhZG93OiAwcHggMnB4IDEwcHggMHB4ICNkN2Q3ZDc5MTtcXG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogXCIuY29uY2F0KHBhbmVsQmFja2dyb3VuZENvbG9yLCBcIjsgXFxuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIFwiKS5jb25jYXQocGFuZWxCb3JkZXJDb2xvciwgXCI7XFxuICAgICAgICAgIHRvcDogMDtcXG4gICAgICAgICAgbGVmdDogMDtcXG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xcbiAgICAgICAgICBvdmVyZmxvdzogYXV0bztcXG4gICAgICAgICAgei1pbmRleDogMTtcXG4gICAgICAgICAgYm94LXNpemluZzogY29udGVudC1ib3g7XFxuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gICAgICAgIH1cXG4gIFxcbiAgICAgICAgI2VtcHR5SW5ib3hNc2cge1xcbiAgICAgICAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgICAgICAgcGFkZGluZzogMTBweDtcXG4gICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICAgICAgICBjb2xvcjogYmxhY2s7XFxuICAgICAgICB9XFxuICBcXG4gICAgICAgICNoZWFkZXIge1xcbiAgICAgICAgICBoZWlnaHQ6IDM2cHg7IFxcbiAgICAgICAgICB3aWR0aDogMTAwJTsgXFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7IFxcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgXFxuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7IFxcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBcIikuY29uY2F0KGhlYWRlckJhY2tncm91bmRDb2xvciwgXCI7IFxcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jYXJkLWJnLCBcIikuY29uY2F0KGhlYWRlckJhY2tncm91bmRDb2xvciwgXCIpO1xcbiAgICAgICAgICBjb2xvcjogXCIpLmNvbmNhdChoZWFkZXJUaXRsZUNvbG9yLCBcIlxcbiAgICAgICAgfVxcbiAgXFxuICAgICAgICAjY2xvc2VJbmJveCB7XFxuICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDsgXFxuICAgICAgICAgIG1hcmdpbi1yaWdodDogMTJweDsgXFxuICAgICAgICAgIGNvbG9yOiBcIikuY29uY2F0KGNsb3NlSWNvbkNvbG9yLCBcIjsgXFxuICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgICAgIH1cXG4gIFxcbiAgICAgICAgI2hlYWRlclRpdGxlIHtcXG4gICAgICAgICAgZm9udC1zaXplOiAxNHB4OyBcXG4gICAgICAgICAgbGluZS1oZWlnaHQ6IDIwcHg7IFxcbiAgICAgICAgICBmbGV4LWdyb3c6IDE7IFxcbiAgICAgICAgICBmb250LXdlaWdodDogNzAwOyBcXG4gICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICAgICAgICBmbGV4LWdyb3c6IDE7XFxuICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgICAgIH1cXG4gIFxcbiAgICAgICAgI2NhdGVnb3JpZXNDb250YWluZXIge1xcbiAgICAgICAgICBwYWRkaW5nOiAxNnB4IDE2cHggMCAxNnB4OyBcXG4gICAgICAgICAgaGVpZ2h0OiAzMnB4OyBcXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgICAgc2Nyb2xsLWJlaGF2aW9yOiBzbW9vdGg7XFxuICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgICNjYXRlZ29yaWVzV3JhcHBlciB7XFxuICAgICAgICAgIGhlaWdodDogMzJweDsgXFxuICAgICAgICAgIG92ZXJmbG93LXg6IHNjcm9sbDtcXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gICAgICAgICAgc2Nyb2xsYmFyLXdpZHRoOiBub25lO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgI2NhdGVnb3JpZXNXcmFwcGVyOjotd2Via2l0LXNjcm9sbGJhciB7XFxuICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgICAgICB9XFxuICBcXG4gICAgICAgICNsZWZ0QXJyb3csICNyaWdodEFycm93IHtcXG4gICAgICAgICAgaGVpZ2h0OiAzMnB4O1xcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgICAgICBmb250LXdlaWdodDogNzAwO1xcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICAgIHotaW5kZXg6IDI7XFxuICAgICAgICAgIHBvaW50ZXItZXZlbnRzOiBhdXRvO1xcbiAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgICAgICB9XFxuXFxuICAgICAgICAjbGVmdEFycm93IHtcXG4gICAgICAgICAgbGVmdDogMDtcXG4gICAgICAgICAgcGFkZGluZy1sZWZ0OiA0cHg7XFxuICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDE2cHg7XFxuICAgICAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCg5MGRlZywgXCIpLmNvbmNhdChwYW5lbEJhY2tncm91bmRDb2xvciwgXCIgMCUsIFwiKS5jb25jYXQocGFuZWxCYWNrZ3JvdW5kQ29sb3IsIFwiOTkgODAlLCBcIikuY29uY2F0KHBhbmVsQmFja2dyb3VuZENvbG9yLCBcIjBkIDEwMCUpO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgI3JpZ2h0QXJyb3cge1xcbiAgICAgICAgICByaWdodDogMDtcXG4gICAgICAgICAgcGFkZGluZy1yaWdodDogNHB4O1xcbiAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDE2cHg7XFxuICAgICAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgtOTBkZWcsIFwiKS5jb25jYXQocGFuZWxCYWNrZ3JvdW5kQ29sb3IsIFwiIDAlLCBcIikuY29uY2F0KHBhbmVsQmFja2dyb3VuZENvbG9yLCBcIjk5IDgwJSwgXCIpLmNvbmNhdChwYW5lbEJhY2tncm91bmRDb2xvciwgXCIwZCAxMDAlKTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIFtpZF49XFxcImNhdGVnb3J5LVxcXCJdIHtcXG4gICAgICAgICAgZGlzcGxheTogZmxleDsgXFxuICAgICAgICAgIGZsZXg6IDEgMSAwOyBcXG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IFxcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyOyBcXG4gICAgICAgICAgZm9udC1zaXplOiAxNHB4OyBcXG4gICAgICAgICAgbGluZS1oZWlnaHQ6IDIwcHg7IFxcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBcIikuY29uY2F0KGNhdGVnb3JpZXNUYWJDb2xvciwgXCI7IFxcbiAgICAgICAgICBjb2xvcjogXCIpLmNvbmNhdChjYXRlZ29yaWVzVGl0bGVDb2xvciwgXCI7IFxcbiAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgICAgIHBhZGRpbmc6IDZweCAyNHB4O1xcbiAgICAgICAgICBtYXJnaW46IDAgM3B4O1xcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiAxNnB4O1xcbiAgICAgICAgICBib3JkZXI6IFwiKS5jb25jYXQoY2F0ZWdvcmllc0JvcmRlckNvbG9yID8gJzFweCBzb2xpZCAnICsgY2F0ZWdvcmllc0JvcmRlckNvbG9yIDogJ25vbmUnLCBcIjtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIFtpZF49XFxcImNhdGVnb3J5LVxcXCJdW3NlbGVjdGVkPVxcXCJ0cnVlXFxcIl0ge1xcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBcIikuY29uY2F0KHNlbGVjdGVkQ2F0ZWdvcnlUYWJDb2xvciwgXCI7IFxcbiAgICAgICAgICBjb2xvcjogXCIpLmNvbmNhdChzZWxlY3RlZENhdGVnb3J5VGl0bGVDb2xvciwgXCI7IFxcbiAgICAgICAgICBib3JkZXI6IFwiKS5jb25jYXQoc2VsZWN0ZWRDYXRlZ29yeUJvcmRlckNvbG9yID8gJzFweCBzb2xpZCAnICsgc2VsZWN0ZWRDYXRlZ29yeUJvcmRlckNvbG9yIDogJ25vbmUnLCBcIlxcbiAgICAgICAgfVxcbiAgXFxuICAgICAgICAjaW5ib3hDYXJkIHtcXG4gICAgICAgICAgcGFkZGluZzogMCAxNnB4IDAgMTZweDtcXG4gICAgICAgICAgb3ZlcmZsb3cteTogYXV0bztcXG4gICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgICAgICAgbWFyZ2luLXRvcDogMTZweDtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNDgwcHgpIHtcXG4gICAgICAgICAgI2luYm94IHtcXG4gICAgICAgICAgICB3aWR0aDogdmFyKC0taW5ib3gtd2lkdGgsIDM5MnB4KTtcXG4gICAgICAgICAgICBoZWlnaHQ6IHZhcigtLWluYm94LWhlaWdodCwgNTQ2cHgpO1xcbiAgICAgICAgICAgIHBvc2l0aW9uOiB2YXIoLS1pbmJveC1wb3NpdGlvbiwgZml4ZWQpO1xcbiAgICAgICAgICAgIHJpZ2h0OiB2YXIoLS1pbmJveC1yaWdodCwgdW5zZXQpO1xcbiAgICAgICAgICAgIGJvdHRvbTogdmFyKC0taW5ib3gtYm90dG9tLCB1bnNldCk7XFxuICAgICAgICAgICAgdG9wOiB2YXIoLS1pbmJveC10b3AsIHVuc2V0KTtcXG4gICAgICAgICAgICBsZWZ0OiB2YXIoLS1pbmJveC1sZWZ0LCB1bnNldCk7XFxuICAgICAgICAgIH1cXG4gIFxcbiAgICAgICAgICAjaW5ib3hDYXJkIHtcXG4gICAgICAgICAgICBoZWlnaHQ6IGNhbGModmFyKC0taW5ib3gtaGVpZ2h0LCA1NDZweCkgLSBcIikuY29uY2F0KGhlYWRlckNhdGVnb3J5SGVpZ2h0LCBcInB4KTsgXFxuICAgICAgICAgIH1cXG4gIFxcbiAgICAgICAgfVxcbiAgICAgIDwvc3R5bGU+XFxuICAgICAgXCIpO1xuICB9O1xuXG4gIGNsYXNzIEluYm94IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKGxvZ2dlcikge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIHRoaXMuaXNJbmJveE9wZW4gPSBmYWxzZTtcbiAgICAgIHRoaXMuaXNJbmJveEZyb21GbHV0dGVyID0gZmFsc2U7XG4gICAgICB0aGlzLnNlbGVjdGVkQ2F0ZWdvcnkgPSBudWxsO1xuICAgICAgdGhpcy51bnZpZXdlZE1lc3NhZ2VzID0ge307XG4gICAgICB0aGlzLnVudmlld2VkQ291bnRlciA9IDA7XG4gICAgICB0aGlzLmlzUHJldmlldyA9IGZhbHNlO1xuICAgICAgdGhpcy5pbmJveENvbmZpZ0ZvclByZXZpZXcgPSB7fTtcbiAgICAgIHRoaXMuaW5ib3hTZWxlY3RvciA9IG51bGw7XG4gICAgICB0aGlzLmluYm94ID0gbnVsbDtcbiAgICAgIHRoaXMuZW1wdHlJbmJveE1zZyA9IG51bGw7XG4gICAgICB0aGlzLmluYm94Q2FyZCA9IG51bGw7XG4gICAgICB0aGlzLnVudmlld2VkQmFkZ2UgPSBudWxsO1xuICAgICAgdGhpcy5vYnNlcnZlciA9IG51bGw7XG4gICAgICB0aGlzLnNlbGVjdGVkQ2F0ZWdvcnlSZWYgPSBudWxsO1xuXG4gICAgICB0aGlzLmFkZENsaWNrTGlzdGVuZXJPbkRvY3VtZW50ID0gKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIGUgPT4ge1xuICAgICAgICAgIGlmIChlLmNvbXBvc2VkUGF0aCgpLmluY2x1ZGVzKHRoaXMuaW5ib3gpKSB7XG4gICAgICAgICAgICAvLyBwYXRoIGlzIG5vdCBzdXBwb3J0ZWQgb24gRkYuIFNvIHdlIGZhbGxiYWNrIHRvIGUuY29tcG9zZWRQYXRoXG4gICAgICAgICAgICBjb25zdCBwYXRoID0gZS5wYXRoIHx8IGUuY29tcG9zZWRQYXRoICYmIGUuY29tcG9zZWRQYXRoKCk7XG5cbiAgICAgICAgICAgIGlmIChwYXRoLmxlbmd0aCkge1xuICAgICAgICAgICAgICBjb25zdCBpZCA9IHBhdGhbMF0uaWQ7XG5cbiAgICAgICAgICAgICAgaWYgKGlkID09PSAnY2xvc2VJbmJveCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUluYm94KCk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoaWQuc3RhcnRzV2l0aCgnY2F0ZWdvcnktJykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByZXZDYXRlZ29yeVJlZiA9IHRoaXMuc2VsZWN0ZWRDYXRlZ29yeVJlZjtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkQ2F0ZWdvcnlSZWYgPSBwYXRoWzBdO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQWN0aXZlQ2F0ZWdvcnkocGF0aFswXS5pbm5lclRleHQpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IF9wYXRoID0gcGF0aC5maWx0ZXIocCA9PiB7XG4gICAgICAgICAgICAgICAgICB2YXIgX3AkaWQ7XG5cbiAgICAgICAgICAgICAgICAgIHJldHVybiAoKF9wJGlkID0gcC5pZCkgPT09IG51bGwgfHwgX3AkaWQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9wJGlkLnN0YXJ0c1dpdGgoJ2J1dHRvbi0nKSkgfHwgcC50YWdOYW1lID09PSAnQ1QtSU5CT1gtTUVTU0FHRSc7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoX3BhdGgubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlRWwgPSBfcGF0aFtfcGF0aC5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2VFbC5yYWlzZUNsaWNrZWRFdmVudChfcGF0aFswXSwgdGhpcy5pc1ByZXZpZXcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pbmJveFNlbGVjdG9yLmNvbnRhaW5zKGUudGFyZ2V0KSB8fCB0aGlzLmlzSW5ib3hPcGVuKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0luYm94RnJvbUZsdXR0ZXIpIHtcbiAgICAgICAgICAgICAgdGhpcy5pc0luYm94RnJvbUZsdXR0ZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMudG9nZ2xlSW5ib3goZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSkoKTtcblxuICAgICAgdGhpcy5zZXRCYWRnZVN0eWxlID0gbXNnQ291bnQgPT4ge1xuICAgICAgICBpZiAodGhpcy51bnZpZXdlZEJhZGdlICE9PSBudWxsKSB7XG4gICAgICAgICAgdGhpcy51bnZpZXdlZEJhZGdlLmlubmVyVGV4dCA9IG1zZ0NvdW50ID4gOSA/ICc5KycgOiBtc2dDb3VudDtcbiAgICAgICAgICB0aGlzLnVudmlld2VkQmFkZ2Uuc3R5bGUuZGlzcGxheSA9IG1zZ0NvdW50ID4gMCA/ICdmbGV4JyA6ICdub25lJztcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XG4gICAgICB0aGlzLnNoYWRvdyA9IHRoaXMuYXR0YWNoU2hhZG93KHtcbiAgICAgICAgbW9kZTogJ29wZW4nXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXQgaW5jb21pbmdNZXNzYWdlcygpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBzZXQgaW5jb21pbmdNZXNzYWdlcyhtc2dzKSB7XG4gICAgICBpZiAobXNncyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG1zZ3MgPSBbXTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1zZ3MubGVuZ3RoID4gMCAmJiB0aGlzLmluYm94KSB7XG4gICAgICAgIHRoaXMudXBkYXRlSW5ib3hNZXNzYWdlcyhtc2dzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgaW5jb21pbmdNZXNzYWdlc0ZvclByZXZpZXcoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgc2V0IGluY29taW5nTWVzc2FnZXNGb3JQcmV2aWV3KG1zZ3MpIHtcbiAgICAgIGlmIChtc2dzID09PSB2b2lkIDApIHtcbiAgICAgICAgbXNncyA9IFtdO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwcmV2aWV3TXNncyA9IHt9O1xuXG4gICAgICBpZiAobXNncy5sZW5ndGggPiAwICYmIHRoaXMuaW5ib3gpIHtcbiAgICAgICAgdGhpcy5pc1ByZXZpZXcgPSB0cnVlO1xuICAgICAgICB0aGlzLnVudmlld2VkQ291bnRlciA9IDA7XG4gICAgICAgIG1zZ3MuZm9yRWFjaChtID0+IHtcbiAgICAgICAgICBjb25zdCBrZXkgPSBcIlwiLmNvbmNhdChtLnd6cmtfaWQuc3BsaXQoJ18nKVswXSwgXCJfXCIpLmNvbmNhdChEYXRlLm5vdygpKTtcbiAgICAgICAgICBtLmlkID0ga2V5O1xuICAgICAgICAgIHByZXZpZXdNc2dzW2tleV0gPSBtO1xuICAgICAgICAgIHRoaXMudW52aWV3ZWRNZXNzYWdlc1trZXldID0gbTtcbiAgICAgICAgICB0aGlzLnVudmlld2VkQ291bnRlcisrO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5idWlsZFVJRm9yTWVzc2FnZXMocHJldmlld01zZ3MpO1xuICAgICAgICB0aGlzLnVwZGF0ZVVudmlld2VkQmFkZ2VDb3VudGVyKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG5cbiAgICBpbml0KCkge1xuICAgICAgdGhpcy5jb25maWcgPSB0aGlzLmlzUHJldmlldyA/IHRoaXMuaW5ib3hDb25maWdGb3JQcmV2aWV3IDogU3RvcmFnZU1hbmFnZXIucmVhZEZyb21MU29yQ29va2llKFdFQklOQk9YX0NPTkZJRykgfHwge307XG5cbiAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLmNvbmZpZykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pbmJveFNlbGVjdG9yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5jb25maWcuaW5ib3hTZWxlY3Rvcik7XG5cbiAgICAgIGlmICh0aGlzLmluYm94U2VsZWN0b3IgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5jb25maWcuc3R5bGVzLm5vdGlmaWNhdGlvbnNCYWRnZSkge1xuICAgICAgICB0aGlzLmFkZFVudmlld2VkQmFkZ2UoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy51bnZpZXdlZEJhZGdlKSB7XG4gICAgICAgIHRoaXMudW52aWV3ZWRCYWRnZS5yZW1vdmUoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jcmVhdGVpbmJveCgpO1xuICAgICAgLyoqXG4gICAgICAgKiBXZSBuZWVkIHRvIHJlbW92ZSB0aGUgbGlzdGVuZXIgYXMgdGhlcmUgY291bGQgYmUgYSBzY2VuYXJpbyB3aGVyZSBpbml0IHdvdWxkIGJlIGNhbGxlZCB3aGVuXG4gICAgICAgKiB3ZSBnZXQgdXBkYXRlZCB3ZWIgaW5ib3ggc2V0dGluZ3MgZnJvbSBMQyBhZnRlciB0aGUgaW5ib3ggaGFzIGJlZW4gaW5pdGlhbGlzZWQuXG4gICAgICAgKiBJdCBjYW4gc28gaGFwcGVuIHRoYXQgdGhlIGluYm94LXNlbGVjdG9yIHdvdWxkIGhhdmUgY2hhbmdlZC5cbiAgICAgICAqL1xuXG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuYWRkQ2xpY2tMaXN0ZW5lck9uRG9jdW1lbnQpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmFkZENsaWNrTGlzdGVuZXJPbkRvY3VtZW50KTtcbiAgICAgIHRoaXMuY29uZmlnLmNhdGVnb3JpZXMubGVuZ3RoICYmIHRoaXMudXBkYXRlQWN0aXZlQ2F0ZWdvcnkodGhpcy5zZWxlY3RlZENhdGVnb3J5UmVmLmlubmVyVGV4dCk7XG4gICAgICB0aGlzLnNoYWRvdy5pbm5lckhUTUwgPSB0aGlzLmdldEluYm94U3R5bGVzKCk7XG4gICAgICB0aGlzLnNoYWRvdy5hcHBlbmRDaGlsZCh0aGlzLmluYm94KTtcbiAgICB9XG5cbiAgICBhZGRNc2dzVG9JbmJveEZyb21MUygpIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2VzID0gdGhpcy5kZWxldGVFeHBpcmVkQW5kR2V0VW5leHBpcmVkTXNncyhmYWxzZSk7XG4gICAgICBjb25zdCBtc2dJZHMgPSBtZXNzYWdlcyA/IE9iamVjdC5rZXlzKG1lc3NhZ2VzKSA6IFtdO1xuXG4gICAgICBpZiAobXNnSWRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG1zZ0lkcy5mb3JFYWNoKG0gPT4ge1xuICAgICAgICBpZiAoIW1lc3NhZ2VzW21dLnZpZXdlZCkge1xuICAgICAgICAgIHRoaXMudW52aWV3ZWRNZXNzYWdlc1ttXSA9IG1lc3NhZ2VzW21dO1xuICAgICAgICAgIHRoaXMudW52aWV3ZWRDb3VudGVyKys7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5idWlsZFVJRm9yTWVzc2FnZXMobWVzc2FnZXMpO1xuICAgICAgdGhpcy51cGRhdGVVbnZpZXdlZEJhZGdlQ291bnRlcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0geyp9IGRlbGV0ZU1zZ3NGcm9tVUkgLSBJZiB0aGlzIHBhcmFtIGlzIHRydWUsIHRoZW4gd2UnbGwgaGF2ZSB0byBjaGVjayB0aGUgVUkgYW5kIGRlbGV0ZSBleHBpcmVkIG1lc3NhZ2VzIGZyb20gdGhlIERPTVxuICAgICAqIEl0J2xsIGJlIGZhbHNlIHdoZW4geW91IGFyZSBidWlsZGluZyB0aGUgaW5ib3ggbGF5b3V0IGZvciB0aGUgdmVyeSBmaXJzdCB0aW1lLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgcmVhZHMgdGhlIGluYm94IG1lc3NhZ2VzIGZyb20gTFMsXG4gICAgICogYmFzZWQgb24gdGhlIGRlbGV0ZU1zZ3NGcm9tVUkgZmxhZyBkZWxldGVzIHRoZSBleHBpcmVkIG1lc3NhZ2VzIGZyb20gVUkgYW5kIGRlY3JlbWVudHMgdGhlIHVudmlld2VkIGNvdW50ZXIgaWYgdGhlIG1lc3NhZ2Ugd2FzIG5vdCB2aWV3ZWQsXG4gICAgICogc29ydHMgdGhlIG1lc3NhZ2VzIGJhc2VkIG9uIHRoZSBkYXRlLFxuICAgICAqIHNhdmVzIHRoZSB1bmV4cGlyZWQgbWVzc2FnZXMgdG8gTFNcbiAgICAgKiBhbmQgcmV0dXJucyB0aGUgc29ydGVkIHVuZXhwaXJlZCBtZXNzYWdlc1xuICAgICAqXG4gICAgICogU2NlbmFyaW9zIHdoZW4gd2UgZW5jb3VudGVyIGV4cGlyZWQgbWVzc2FnZXMgLVxuICAgICAqIDEuIGJ1aWxkaW5nIHVpIGZvciB0aGUgMXN0IHRpbWUsIG5vIG5lZWQgdG8gZGVjcmVtZW50IHRoZSB1bnZpZXdlZCBjb3VudGVyIGFzIHRoZSBjb3JyZWN0IGNvdW50IHdpbGwgYmUgc2V0IGF0IHRoZSB0aW1lIG9mIHJlbmRlcmluZ1xuICAgICAqIDIuIFVJIGlzIGFscmVhZHkgYnVpbHQgKGRlbGV0ZU1zZ3NGcm9tVUkgPSB0cnVlKSBhbmQgeW91IG9wZW4gdGhlIGluYm94XG4gICAgICogICAgYS4gWW91J2xsIGZpbmQgdGhlIGV4cGlyZWQgbXNnIGluIGluYm94XG4gICAgICogICAgYi4gWW91J2xsIG5vdCBmaW5kIHRoZSBleHBpcmVkIG1zZyBpbiBpbmJveC5cbiAgICAgKiAgICAgICBUaGlzIGhhcHBlbnMgd2hlbiB3ZSByZWNlaXZlIG5ldyBtZXNzYWdlcyBmcm9tIExDLCBpbmNyZW1lbnQgdW52aWV3ZWQgY291bnRlciwgc2F2ZSBpdCBpbiBMUy4gKFdlIGJ1aWxkIHRoZSBVSSBvbmx5IHdoZW4gdGhlIHVzZXIgb3BlbnMgaW5ib3guKVxuICAgICAqICBJbiBib3RoIHRoZSBhYm92ZSBzY2VuYXJpb3MsIHdlJ2xsIHN0aWxsIGhhdmUgdG8gZGVjcmVtZW50IHRoZSB1bnZpZXdlZCBjb3VudGVyIGlmIHRoZSBtZXNzYWdlIHdhcyBub3Qgdmlld2VkLlxuICAgICAqL1xuXG5cbiAgICBkZWxldGVFeHBpcmVkQW5kR2V0VW5leHBpcmVkTXNncygpIHtcbiAgICAgIGxldCBkZWxldGVNc2dzRnJvbVVJID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0cnVlO1xuICAgICAgbGV0IG1lc3NhZ2VzID0gZ2V0SW5ib3hNZXNzYWdlcygpO1xuICAgICAgY29uc3Qgbm93ID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG5cbiAgICAgIGZvciAoY29uc3QgbXNnIGluIG1lc3NhZ2VzKSB7XG4gICAgICAgIGlmIChtZXNzYWdlc1ttc2ddLnd6cmtfdHRsICYmIG1lc3NhZ2VzW21zZ10ud3pya190dGwgPiAwICYmIG1lc3NhZ2VzW21zZ10ud3pya190dGwgPCBub3cpIHtcbiAgICAgICAgICBpZiAoZGVsZXRlTXNnc0Zyb21VSSkge1xuICAgICAgICAgICAgY29uc3QgZWwgPSB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQobWVzc2FnZXNbbXNnXS5pZCk7XG4gICAgICAgICAgICBlbCAmJiBlbC5yZW1vdmUoKTtcblxuICAgICAgICAgICAgaWYgKCFtZXNzYWdlc1ttc2ddLnZpZXdlZCkge1xuICAgICAgICAgICAgICB0aGlzLnVudmlld2VkQ291bnRlci0tO1xuICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVVudmlld2VkQmFkZ2VDb3VudGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGVsZXRlIG1lc3NhZ2VzW21zZ107XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lc3NhZ2VzICYmIG1lc3NhZ2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbWVzc2FnZXMgPSBPYmplY3QudmFsdWVzKG1lc3NhZ2VzKS5zb3J0KChhLCBiKSA9PiBiLmRhdGUgLSBhLmRhdGUpLnJlZHVjZSgoYWNjLCBtKSA9PiB7XG4gICAgICAgICAgYWNjW20uaWRdID0gbTtcbiAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LCB7fSk7XG4gICAgICB9XG5cbiAgICAgIHNhdmVJbmJveE1lc3NhZ2VzKG1lc3NhZ2VzKTtcbiAgICAgIHJldHVybiBtZXNzYWdlcztcbiAgICB9XG5cbiAgICB1cGRhdGVJbmJveE1lc3NhZ2VzKCkge1xuICAgICAgbGV0IG1zZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xuICAgICAgY29uc3QgaW5ib3hNc2dzID0gdGhpcy5kZWxldGVFeHBpcmVkQW5kR2V0VW5leHBpcmVkTXNncygpO1xuICAgICAgY29uc3QgZGF0ZSA9IERhdGUubm93KCk7XG4gICAgICBjb25zdCBpbmNvbWluZ01zZ3MgPSB7fTtcbiAgICAgIG1zZ3MuZm9yRWFjaCgobSwgaSkgPT4ge1xuICAgICAgICBjb25zdCBrZXkgPSBcIlwiLmNvbmNhdChtLnd6cmtfaWQuc3BsaXQoJ18nKVswXSwgXCJfXCIpLmNvbmNhdChEYXRlLm5vdygpKTtcbiAgICAgICAgbS5pZCA9IGtleTsgLy8gV2UgYXJlIGRvaW5nIHRoaXMgdG8gcHJlc2VydmUgdGhlIG9yZGVyIG9mIHRoZSBtZXNzYWdlc1xuXG4gICAgICAgIG0uZGF0ZSA9IGRhdGUgLSBpO1xuICAgICAgICBtLnZpZXdlZCA9IDA7XG4gICAgICAgIGluYm94TXNnc1trZXldID0gbTtcbiAgICAgICAgaW5jb21pbmdNc2dzW2tleV0gPSBtO1xuICAgICAgICB0aGlzLnVudmlld2VkTWVzc2FnZXNba2V5XSA9IG07XG4gICAgICAgIHRoaXMudW52aWV3ZWRDb3VudGVyKys7XG4gICAgICB9KTtcbiAgICAgIHNhdmVJbmJveE1lc3NhZ2VzKGluYm94TXNncyk7XG4gICAgICB0aGlzLmJ1aWxkVUlGb3JNZXNzYWdlcyhpbmNvbWluZ01zZ3MpO1xuICAgICAgdGhpcy51cGRhdGVVbnZpZXdlZEJhZGdlQ291bnRlcigpO1xuICAgIH1cblxuICAgIGNyZWF0ZUVsKHR5cGUsIGlkLCBwYXJ0KSB7XG4gICAgICBjb25zdCBfZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHR5cGUpO1xuXG4gICAgICBfZWwuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTtcblxuICAgICAgX2VsLnNldEF0dHJpYnV0ZSgncGFydCcsIHBhcnQgfHwgaWQpO1xuXG4gICAgICByZXR1cm4gX2VsO1xuICAgIH1cblxuICAgIGFkZFVudmlld2VkQmFkZ2UoKSB7XG4gICAgICBpZiAoIXRoaXMudW52aWV3ZWRCYWRnZSkge1xuICAgICAgICB0aGlzLnVudmlld2VkQmFkZ2UgPSB0aGlzLmNyZWF0ZUVsKCdkaXYnLCAndW52aWV3ZWRCYWRnZScpOyAvLyBBcyB0aGlzIHVudmlld2VkQmFkZ2UgZWxlbWVudCB3aWxsIGJlIGRpcmVjdGx5IGFkZGVkIHRvIHRoZSBET00sIHdlIGFyZSBkZWZpbmluZyBpbmxpbmUgc3R5bGVzXG5cbiAgICAgICAgdGhpcy51bnZpZXdlZEJhZGdlLnN0eWxlLmNzc1RleHQgPSBcImRpc3BsYXk6IG5vbmU7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgaGVpZ2h0OiAxNnB4OyB3aWR0aDogMjZweDsgYm9yZGVyLXJhZGl1czogOHB4OyBiYWNrZ3JvdW5kLWNvbG9yOiBcIi5jb25jYXQodGhpcy5jb25maWcuc3R5bGVzLm5vdGlmaWNhdGlvbnNCYWRnZS5iYWNrZ3JvdW5kQ29sb3IsIFwiOyBmb250LXNpemU6IDEycHg7IGNvbG9yOiBcIikuY29uY2F0KHRoaXMuY29uZmlnLnN0eWxlcy5ub3RpZmljYXRpb25zQmFkZ2UudGV4dENvbG9yLCBcIjsgZm9udC13ZWlnaHQ6IGJvbGQ7IGFsaWduLWl0ZW1zOiBjZW50ZXI7IGp1c3RpZnktY29udGVudDogY2VudGVyO1wiKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLnVudmlld2VkQmFkZ2UpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnVwZGF0ZVVudmlld2VkQmFkZ2VQb3NpdGlvbigpOyAvLyBjYWxsZWQgd2hlbiB1c2VyIHN3aXRjaGVzIGIvdyBwb3J0cmFpdCBhbmQgbGFuZHNjYXBlIG1vZGUuXG5cbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiB7XG4gICAgICAgIHRoaXMudXBkYXRlVW52aWV3ZWRCYWRnZVBvc2l0aW9uKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB1cGRhdGVVbnZpZXdlZEJhZGdlUG9zaXRpb24oKSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHRvcCxcbiAgICAgICAgcmlnaHRcbiAgICAgIH0gPSB0aGlzLmluYm94U2VsZWN0b3IuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB0aGlzLnVudmlld2VkQmFkZ2Uuc3R5bGUudG9wID0gXCJcIi5jb25jYXQodG9wIC0gOCwgXCJweFwiKTtcbiAgICAgIHRoaXMudW52aWV3ZWRCYWRnZS5zdHlsZS5sZWZ0ID0gXCJcIi5jb25jYXQocmlnaHQgLSA4LCBcInB4XCIpO1xuICAgIH1cblxuICAgIGNyZWF0ZWluYm94KCkge1xuICAgICAgdGhpcy5pbmJveCA9IHRoaXMuY3JlYXRlRWwoJ2RpdicsICdpbmJveCcpO1xuICAgICAgY29uc3QgaGVhZGVyID0gdGhpcy5jcmVhdGVFbCgnZGl2JywgJ2hlYWRlcicpO1xuICAgICAgY29uc3QgaGVhZGVyVGl0bGUgPSB0aGlzLmNyZWF0ZUVsKCdkaXYnLCAnaGVhZGVyVGl0bGUnKTtcbiAgICAgIGhlYWRlclRpdGxlLmlubmVyVGV4dCA9IHRoaXMuY29uZmlnLnRpdGxlO1xuICAgICAgY29uc3QgY2xvc2VJY29uID0gdGhpcy5jcmVhdGVFbCgnZGl2JywgJ2Nsb3NlSW5ib3gnKTtcbiAgICAgIGNsb3NlSWNvbi5pbm5lckhUTUwgPSAnJnRpbWVzJztcbiAgICAgIGhlYWRlci5hcHBlbmRDaGlsZChoZWFkZXJUaXRsZSk7XG4gICAgICBoZWFkZXIuYXBwZW5kQ2hpbGQoY2xvc2VJY29uKTtcbiAgICAgIHRoaXMuaW5ib3guYXBwZW5kQ2hpbGQoaGVhZGVyKTtcblxuICAgICAgaWYgKHRoaXMuY29uZmlnLmNhdGVnb3JpZXMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGNhdGVnb3JpZXMgPSB0aGlzLmNyZWF0ZUNhdGVnb3JpZXMoKTtcbiAgICAgICAgdGhpcy5pbmJveC5hcHBlbmRDaGlsZChjYXRlZ29yaWVzKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pbmJveENhcmQgPSB0aGlzLmNyZWF0ZUVsKCdkaXYnLCAnaW5ib3hDYXJkJyk7XG4gICAgICB0aGlzLmluYm94LmFwcGVuZENoaWxkKHRoaXMuaW5ib3hDYXJkKTtcbiAgICAgIHRoaXMuZW1wdHlJbmJveE1zZyA9IHRoaXMuY3JlYXRlRWwoJ2RpdicsICdlbXB0eUluYm94TXNnJyk7XG4gICAgICB0aGlzLmVtcHR5SW5ib3hNc2cuaW5uZXJUZXh0ID0gJ0FsbCBtZXNzYWdlcyB3aWxsIGJlIGRpc3BsYXllZCBoZXJlLic7XG4gICAgICB0aGlzLmluYm94Q2FyZC5hcHBlbmRDaGlsZCh0aGlzLmVtcHR5SW5ib3hNc2cpOyAvLyBJbnRlcnNlY3Rpb24gb2JzZXJ2ZXIgZm9yIG5vdGlmaWNhdGlvbiB2aWV3ZWRcblxuICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgcm9vdDogdGhpcy5pbmJveENhcmQsXG4gICAgICAgIHJvb3RNYXJnaW46ICcwcHgnLFxuICAgICAgICB0aHJlc2hvbGQ6IDAuNVxuICAgICAgfTtcbiAgICAgIHRoaXMub2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXMsIG9ic2VydmVyKSA9PiB7XG4gICAgICAgIHRoaXMuaGFuZGxlTWVzc2FnZVZpZXdlZChlbnRyaWVzKTtcbiAgICAgIH0sIG9wdGlvbnMpO1xuICAgICAgdGhpcy5hZGRNc2dzVG9JbmJveEZyb21MUygpO1xuICAgIH1cblxuICAgIGNyZWF0ZUNhdGVnb3JpZXMoKSB7XG4gICAgICBjb25zdCBjYXRlZ29yaWVzQ29udGFpbmVyID0gdGhpcy5jcmVhdGVFbCgnZGl2JywgJ2NhdGVnb3JpZXNDb250YWluZXInKTtcbiAgICAgIGNvbnN0IGxlZnRBcnJvdyA9IHRoaXMuY3JlYXRlRWwoJ2RpdicsICdsZWZ0QXJyb3cnKTtcbiAgICAgIGxlZnRBcnJvdy5pbm5lckhUTUwgPSBhcnJvd1N2ZztcbiAgICAgIGxlZnRBcnJvdy5jaGlsZHJlblswXS5zdHlsZSA9ICd0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpJztcbiAgICAgIGxlZnRBcnJvdy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgdGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKCdjYXRlZ29yaWVzV3JhcHBlcicpLnNjcm9sbEJ5KC03MCwgMCk7XG4gICAgICB9KTtcbiAgICAgIGNhdGVnb3JpZXNDb250YWluZXIuYXBwZW5kQ2hpbGQobGVmdEFycm93KTtcbiAgICAgIGNvbnN0IGNhdGVnb3JpZXNXcmFwcGVyID0gdGhpcy5jcmVhdGVFbCgnZGl2JywgJ2NhdGVnb3JpZXNXcmFwcGVyJyk7XG4gICAgICBjb25zdCBfY2F0ZWdvcmllcyA9IFsnQWxsJywgLi4udGhpcy5jb25maWcuY2F0ZWdvcmllc107XG5cbiAgICAgIF9jYXRlZ29yaWVzLmZvckVhY2goKGMsIGkpID0+IHtcbiAgICAgICAgY29uc3QgY2F0ZWdvcnkgPSB0aGlzLmNyZWF0ZUVsKCdkaXYnLCBcImNhdGVnb3J5LVwiLmNvbmNhdChpKSwgJ2NhdGVnb3J5Jyk7XG4gICAgICAgIGNhdGVnb3J5LmlubmVyVGV4dCA9IGM7XG5cbiAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICB0aGlzLnNlbGVjdGVkQ2F0ZWdvcnlSZWYgPSBjYXRlZ29yeTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhdGVnb3JpZXNXcmFwcGVyLmFwcGVuZENoaWxkKGNhdGVnb3J5KTtcbiAgICAgIH0pO1xuXG4gICAgICBjYXRlZ29yaWVzQ29udGFpbmVyLmFwcGVuZENoaWxkKGNhdGVnb3JpZXNXcmFwcGVyKTtcbiAgICAgIGNvbnN0IHJpZ2h0QXJyb3cgPSB0aGlzLmNyZWF0ZUVsKCdkaXYnLCAncmlnaHRBcnJvdycpO1xuICAgICAgcmlnaHRBcnJvdy5pbm5lckhUTUwgPSBhcnJvd1N2ZztcbiAgICAgIHJpZ2h0QXJyb3cuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZCgnY2F0ZWdvcmllc1dyYXBwZXInKS5zY3JvbGxCeSg3MCwgMCk7XG4gICAgICB9KTtcbiAgICAgIGNhdGVnb3JpZXNDb250YWluZXIuYXBwZW5kQ2hpbGQocmlnaHRBcnJvdyk7XG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICByb290OiBjYXRlZ29yaWVzQ29udGFpbmVyLFxuICAgICAgICB0aHJlc2hvbGQ6IDAuOVxuICAgICAgfTtcbiAgICAgIGNvbnN0IGZpcnN0Q2F0ZWdvcnkgPSBjYXRlZ29yaWVzV3JhcHBlci5jaGlsZHJlblswXTtcbiAgICAgIGNvbnN0IGxhc3RDYXRlZ29yeSA9IGNhdGVnb3JpZXNXcmFwcGVyLmNoaWxkcmVuW3RoaXMuY29uZmlnLmNhdGVnb3JpZXMubGVuZ3RoXTtcbiAgICAgIGNvbnN0IGZpcnN0Q2F0ZWdvcnlPYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihlID0+IHtcbiAgICAgICAgdGhpcy5jYXRlZ29yeU9ic2VydmVyQ2IobGVmdEFycm93LCBlWzBdLmludGVyc2VjdGlvblJhdGlvID49IDAuOSk7XG4gICAgICB9LCBvcHRpb25zKTtcbiAgICAgIGZpcnN0Q2F0ZWdvcnlPYnNlcnZlci5vYnNlcnZlKGZpcnN0Q2F0ZWdvcnkpO1xuICAgICAgY29uc3QgbGFzdENhdGVnb3J5T2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoZSA9PiB7XG4gICAgICAgIHRoaXMuY2F0ZWdvcnlPYnNlcnZlckNiKHJpZ2h0QXJyb3csIGVbMF0uaW50ZXJzZWN0aW9uUmF0aW8gPj0gMC45KTtcbiAgICAgIH0sIG9wdGlvbnMpO1xuICAgICAgbGFzdENhdGVnb3J5T2JzZXJ2ZXIub2JzZXJ2ZShsYXN0Q2F0ZWdvcnkpO1xuICAgICAgcmV0dXJuIGNhdGVnb3JpZXNDb250YWluZXI7XG4gICAgfVxuXG4gICAgY2F0ZWdvcnlPYnNlcnZlckNiKGVsLCBoaWRlKSB7XG4gICAgICBpZiAoIWVsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGhpZGUgPyAnbm9uZScgOiAnZmxleCc7XG4gICAgfVxuXG4gICAgdXBkYXRlQWN0aXZlQ2F0ZWdvcnkoYWN0aXZlQ2F0ZWdvcnkpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWRDYXRlZ29yeSA9IGFjdGl2ZUNhdGVnb3J5O1xuICAgICAgdGhpcy5pbmJveENhcmQuc2Nyb2xsVG9wID0gMDtcbiAgICAgIGxldCBjb3VudGVyID0gMDtcbiAgICAgIHRoaXMucHJldkNhdGVnb3J5UmVmICYmIHRoaXMucHJldkNhdGVnb3J5UmVmLnNldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnLCAnZmFsc2UnKTtcbiAgICAgIHRoaXMuc2VsZWN0ZWRDYXRlZ29yeVJlZi5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgJ3RydWUnKTtcbiAgICAgIHRoaXMuaW5ib3hDYXJkLmNoaWxkTm9kZXMuZm9yRWFjaChjID0+IHtcbiAgICAgICAgaWYgKGMuZ2V0QXR0cmlidXRlKCdpZCcpICE9PSAnZW1wdHlJbmJveE1zZycpIHtcbiAgICAgICAgICBjLnN0eWxlLmRpc3BsYXkgPSB0aGlzLnNlbGVjdGVkQ2F0ZWdvcnkgPT09ICdBbGwnIHx8IGMuZ2V0QXR0cmlidXRlKCdjYXRlZ29yeScpID09PSB0aGlzLnNlbGVjdGVkQ2F0ZWdvcnkgPyAnYmxvY2snIDogJ25vbmUnO1xuXG4gICAgICAgICAgaWYgKGMuc3R5bGUuZGlzcGxheSA9PT0gJ2Jsb2NrJykge1xuICAgICAgICAgICAgY291bnRlcisrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChjb3VudGVyID09PSAwKSB7XG4gICAgICAgIHRoaXMuZW1wdHlJbmJveE1zZy5pbm5lclRleHQgPSBcIlwiLmNvbmNhdChhY3RpdmVDYXRlZ29yeSwgXCIgbWVzc2FnZXMgd2lsbCBiZSBkaXNwbGF5ZWQgaGVyZS5cIik7XG4gICAgICAgIHRoaXMuZW1wdHlJbmJveE1zZy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZW1wdHlJbmJveE1zZy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgfVxuICAgIH1cblxuICAgIGJ1aWxkVUlGb3JNZXNzYWdlcygpIHtcbiAgICAgIHZhciBfdGhpcyRjb25maWckbWF4TXNnc0k7XG5cbiAgICAgIGxldCBtZXNzYWdlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICAhdGhpcy5pc1ByZXZpZXcgJiYgdGhpcy51cGRhdGVUU0ZvclJlbmRlcmVkTXNncygpO1xuICAgICAgdGhpcy5pbmJveENhcmQuc2Nyb2xsVG9wID0gMDtcbiAgICAgIGNvbnN0IG1heE1zZ3NJbkluYm94ID0gKF90aGlzJGNvbmZpZyRtYXhNc2dzSSA9IHRoaXMuY29uZmlnLm1heE1zZ3NJbkluYm94KSAhPT0gbnVsbCAmJiBfdGhpcyRjb25maWckbWF4TXNnc0kgIT09IHZvaWQgMCA/IF90aGlzJGNvbmZpZyRtYXhNc2dzSSA6IE1BWF9JTkJPWF9NU0c7XG4gICAgICBjb25zdCBmaXJzdENoaWxkID0gdGhpcy5pbmJveENhcmQuZmlyc3RDaGlsZDtcbiAgICAgIGNvbnN0IHNvcnRlZE1zZ3MgPSBPYmplY3QudmFsdWVzKG1lc3NhZ2VzKS5zb3J0KChhLCBiKSA9PiBiLmRhdGUgLSBhLmRhdGUpLm1hcChtID0+IG0uaWQpO1xuXG4gICAgICBmb3IgKGNvbnN0IG0gb2Ygc29ydGVkTXNncykge1xuICAgICAgICBjb25zdCBpdGVtID0gbmV3IE1lc3NhZ2UodGhpcy5jb25maWcsIG1lc3NhZ2VzW21dKTtcbiAgICAgICAgaXRlbS5zZXRBdHRyaWJ1dGUoJ2lkJywgbWVzc2FnZXNbbV0uaWQpO1xuICAgICAgICBpdGVtLnNldEF0dHJpYnV0ZSgncGl2b3QnLCBtZXNzYWdlc1ttXS53enJrX3Bpdm90KTtcbiAgICAgICAgaXRlbS5zZXRBdHRyaWJ1dGUoJ3BhcnQnLCAnY3QtaW5ib3gtbWVzc2FnZScpO1xuXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5jYXRlZ29yaWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBpdGVtLnNldEF0dHJpYnV0ZSgnY2F0ZWdvcnknLCBtZXNzYWdlc1ttXS50YWdzWzBdIHx8ICcnKTtcbiAgICAgICAgICBpdGVtLnN0eWxlLmRpc3BsYXkgPSB0aGlzLnNlbGVjdGVkQ2F0ZWdvcnkgPT09ICdBbGwnIHx8IG1lc3NhZ2VzW21dLmNhdGVnb3J5ID09PSB0aGlzLnNlbGVjdGVkQ2F0ZWdvcnkgPyAnYmxvY2snIDogJ25vbmUnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW0uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmluYm94Q2FyZC5pbnNlcnRCZWZvcmUoaXRlbSwgZmlyc3RDaGlsZCk7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZShpdGVtKTtcbiAgICAgIH1cblxuICAgICAgbGV0IG1zZ1RvdGFsQ291bnQgPSB0aGlzLmluYm94Q2FyZC5xdWVyeVNlbGVjdG9yQWxsKCdjdC1pbmJveC1tZXNzYWdlJykubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAobXNnVG90YWxDb3VudCA+IG1heE1zZ3NJbkluYm94KSB7XG4gICAgICAgIGNvbnN0IGN0SW5ib3hNc2dzID0gdGhpcy5pbmJveENhcmQucXVlcnlTZWxlY3RvckFsbCgnY3QtaW5ib3gtbWVzc2FnZScpO1xuXG4gICAgICAgIGlmIChjdEluYm94TXNncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY3RJbmJveE1zZ3NbY3RJbmJveE1zZ3MubGVuZ3RoIC0gMV0ucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBtc2dUb3RhbENvdW50LS07XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGhhc01lc3NhZ2VzID0gdGhpcy5pbmJveENhcmQucXVlcnlTZWxlY3RvckFsbCgnY3QtaW5ib3gtbWVzc2FnZVtzdHlsZSo9XCJkaXNwbGF5OiBibG9ja1wiXScpLmxlbmd0aDtcbiAgICAgIHRoaXMuZW1wdHlJbmJveE1zZy5zdHlsZS5kaXNwbGF5ID0gaGFzTWVzc2FnZXMgPyAnbm9uZScgOiAnYmxvY2snO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgY2xpY2sgbGlzdGVuZXIgb24gdGhlIGRvY3VtZW50LiBGb3IgZXZlcnkgY2xpY2sgd2UgY2hlY2tcbiAgICAgKiAxLiBpZiB0aGUgY2xpY2sgaGFzIGhhcHBlbm5lZCB3aXRoaW4gdGhlIGluYm94XG4gICAgICogICAgLSBvbiBjbG9zZSBidXR0b24sIHdlIGNsb3NlIHRoZSBpbmJveFxuICAgICAqICAgIC0gb24gYW55IG9mIHRoZSBjYXRlZ29yeSwgd2Ugc2V0IHRoYXQgYXMgdGhlIGFjdGl2ZUNhdGVnb3J5XG4gICAgICogICAgLSBvbiBhbnkgb2YgdGhlIG1lc3NhZ2UsIHdlIG1hcmsgcmFpc2Ugbm90aWZpY2F0aW9uIGNsaWNrZWQgZXZlbnQuIFRvIGlkZW50aWZ5IHRoZSBjbGlja3Mgb24gYSBidXR0b24sIHdlIGhhdmUgcC5pZC5zdGFydHNXaXRoKCdidXR0b24tJylcbiAgICAgKiAyLiBpZiB0aGUgdXNlciBoYXMgY2xpY2tlZCBvbiB0aGUgaW5ib3hTZWxlY3Rvciwgd2UgdG9nZ2xlIGluYm94XG4gICAgICogMy4gaWYgdGhlIGNsaWNrIGlzIGFueXdoZXJlIGVsc2Ugb24gdGhlIFVJIGFuZCB0aGUgaW5ib3ggaXMgb3Blbiwgd2Ugc2ltcGx5IGNsb3NlIGl0XG4gICAgICovXG5cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgZXZlcnkgdGltZSB3aGVuIGEgbWVzc2FnZSBjb21lcyBpbnRvIHRoZSBpbmJveCB2aWV3cG9ydCBhbmQgaXQncyB2aXNpYmlsaXR5IGluY3JlYXNlcyB0byA1MCUgb3IgZHJvcHMgYmVsb3cgNTAlXG4gICAgICogSWYgYSBtc2cgaXMgNTAlIHZpc2libGUgaW4gdGhlIFVJLCB3ZSBuZWVkIHRvIG1hcmsgdGhlIG1lc3NhZ2UgYXMgdmlld2VkIGluIExTIGFuZCByYWlzZSBub3RpZmljYXRpb24gdmlld2VkIGV2ZW50XG4gICAgICovXG4gICAgaGFuZGxlTWVzc2FnZVZpZXdlZChlbnRyaWVzKSB7XG4gICAgICBjb25zdCByYWlzZVZpZXdlZEV2ZW50ID0gIXRoaXMuaXNQcmV2aWV3O1xuXG4gICAgICBpZiAodGhpcy5pc0luYm94T3Blbikge1xuICAgICAgICBlbnRyaWVzLmZvckVhY2goZSA9PiB7XG4gICAgICAgICAgaWYgKGUuaXNJbnRlcnNlY3RpbmcgJiYgdGhpcy51bnZpZXdlZE1lc3NhZ2VzLmhhc093blByb3BlcnR5KGUudGFyZ2V0LmlkKSAmJiBlLnRhcmdldC5tZXNzYWdlLnZpZXdlZCA9PT0gMCkge1xuICAgICAgICAgICAgZS50YXJnZXQubWVzc2FnZS52aWV3ZWQgPSAxO1xuXG4gICAgICAgICAgICBpZiAocmFpc2VWaWV3ZWRFdmVudCkge1xuICAgICAgICAgICAgICB3aW5kb3cuY2xldmVydGFwLnJlbmRlck5vdGlmaWNhdGlvblZpZXdlZCh7XG4gICAgICAgICAgICAgICAgbXNnSWQ6IGUudGFyZ2V0LmNhbXBhaWduSWQsXG4gICAgICAgICAgICAgICAgcGl2b3RJZDogZS50YXJnZXQucGl2b3RJZFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgdGhpcy51cGRhdGVNZXNzYWdlSW5MUyhlLnRhcmdldC5pZCwgeyAuLi5lLnRhcmdldC5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIHZpZXdlZDogMVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgZS50YXJnZXQuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZCgndW5yZWFkTWFya2VyJykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnTm90aWZpY3Rpb24gdmlld2VkIGV2ZW50IHdpbGwgYmUgcmFpc2VkIGF0IHJ1biB0aW1lIHdpdGggcGF5bG9hZCA6OicsIHtcbiAgICAgICAgICAgICAgICBtc2dJZDogZS50YXJnZXQuY2FtcGFpZ25JZCxcbiAgICAgICAgICAgICAgICBwaXZvdElkOiBlLnRhcmdldC5waXZvdElkXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnVudmlld2VkQ291bnRlci0tO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVVbnZpZXdlZEJhZGdlQ291bnRlcigpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMudW52aWV3ZWRNZXNzYWdlc1tlLnRhcmdldC5pZF07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVNZXNzYWdlSW5MUyhrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoIXRoaXMuaXNQcmV2aWV3KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gZ2V0SW5ib3hNZXNzYWdlcygpO1xuICAgICAgICBtZXNzYWdlc1trZXldID0gdmFsdWU7XG4gICAgICAgIHNhdmVJbmJveE1lc3NhZ2VzKG1lc3NhZ2VzKTtcbiAgICAgIH1cbiAgICB9IC8vIGNyZWF0ZSBhIHNlcGFydGUgZm4gZnJvIHJlZmFjdG9yaW5nXG5cblxuICAgIHRvZ2dsZUluYm94KGUpIHtcbiAgICAgIHRoaXMuaXNJbmJveE9wZW4gPSAhdGhpcy5pc0luYm94T3BlbjtcbiAgICAgIHRoaXMuaXNJbmJveEZyb21GbHV0dGVyID0gISEoZSA9PT0gbnVsbCB8fCBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlLnJlY3QpO1xuXG4gICAgICBpZiAodGhpcy5pc0luYm94T3Blbikge1xuICAgICAgICB0aGlzLmluYm94Q2FyZC5zY3JvbGxUb3AgPSAwO1xuICAgICAgICAhdGhpcy5pc1ByZXZpZXcgJiYgdGhpcy5kZWxldGVFeHBpcmVkQW5kR2V0VW5leHBpcmVkTXNncygpO1xuICAgICAgICB0aGlzLmluYm94LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICB0aGlzLmluYm94LnN0eWxlLnpJbmRleCA9ICcyMTQ3NDgzNjQ3JzsgLy8gekluZGV4IHNob3VsZCBiZSBtYXggZm9yIHRoZSBpbmJveCB0byBiZSByZW5kZXJlZCBvbiB0b3Agb2YgYWxsIGVsZW1lbnRzXG5cbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmNhdGVnb3JpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5zZWxlY3RlZENhdGVnb3J5UmVmLnNldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgICB0aGlzLnNlbGVjdGVkQ2F0ZWdvcnlSZWYgPSB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoJ2NhdGVnb3J5LTAnKTtcbiAgICAgICAgICB0aGlzLnVwZGF0ZUFjdGl2ZUNhdGVnb3J5KHRoaXMuc2VsZWN0ZWRDYXRlZ29yeVJlZi5pbm5lclRleHQpO1xuICAgICAgICAgIHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZCgnY2F0ZWdvcmllc1dyYXBwZXInKS5zY3JvbGxMZWZ0IC09IHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZCgnY2F0ZWdvcmllc1dyYXBwZXInKS5zY3JvbGxXaWR0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0SW5ib3hQb3NpdGlvbihlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaW5ib3guc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRJbmJveFBvc2l0aW9uKGUpIHtcbiAgICAgIGNvbnN0IHdpbmRvd1dpZHRoID0gd2luZG93Lm91dGVyV2lkdGg7XG4gICAgICBjb25zdCBjdXN0b21JbmJveFN0eWxlcyA9IGdldENvbXB1dGVkU3R5bGUoJGN0LmluYm94KTtcbiAgICAgIGNvbnN0IHRvcCA9IGN1c3RvbUluYm94U3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJy0taW5ib3gtdG9wJyk7XG4gICAgICBjb25zdCBib3R0b20gPSBjdXN0b21JbmJveFN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCctLWluYm94LWJvdHRvbScpO1xuICAgICAgY29uc3QgbGVmdCA9IGN1c3RvbUluYm94U3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJy0taW5ib3gtbGVmdCcpO1xuICAgICAgY29uc3QgcmlnaHQgPSBjdXN0b21JbmJveFN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCctLWluYm94LXJpZ2h0Jyk7XG4gICAgICBjb25zdCBoYXNQb3NpdGlvbkRlZmluZWQgPSB0b3AgfHwgYm90dG9tIHx8IGxlZnQgfHwgcmlnaHQ7XG5cbiAgICAgIGlmICh3aW5kb3dXaWR0aCA+IDQ4MSAmJiAhaGFzUG9zaXRpb25EZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGdldEluYm94UG9zaXRpb24oZSwgdGhpcy5pbmJveC5jbGllbnRIZWlnaHQsIHRoaXMuaW5ib3guY2xpZW50V2lkdGgpO1xuICAgICAgICBjb25zdCB4UG9zID0gcmVzLnhQb3M7XG4gICAgICAgIGNvbnN0IHlQb3MgPSByZXMueVBvcztcbiAgICAgICAgdGhpcy5pbmJveC5zdHlsZS50b3AgPSB5UG9zICsgJ3B4JztcbiAgICAgICAgdGhpcy5pbmJveC5zdHlsZS5sZWZ0ID0geFBvcyArICdweCc7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIFVJIHdpdGggdGhlIG51bWJlciBvZiB1bnZpZXdlZCBtZXNzYWdlc1xuICAgICAqIElmIHRoZXJlIGFyZSBtb3JlIHRoYW4gOSB1bnZpZXdlZCBtZXNzYWdlcywgd2Ugc2hvdyB0aGUgY291bnQgYXMgOStcbiAgICAgKi9cblxuXG4gICAgdXBkYXRlVW52aWV3ZWRCYWRnZUNvdW50ZXIoKSB7XG4gICAgICBpZiAodGhpcy5pc1ByZXZpZXcpIHtcbiAgICAgICAgdGhpcy5zZXRCYWRnZVN0eWxlKHRoaXMudW52aWV3ZWRDb3VudGVyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBsZXQgY291bnRlciA9IDA7XG4gICAgICB0aGlzLmluYm94Q2FyZC5xdWVyeVNlbGVjdG9yQWxsKCdjdC1pbmJveC1tZXNzYWdlJykuZm9yRWFjaChtID0+IHtcbiAgICAgICAgY29uc3QgbWVzc2FnZXMgPSBnZXRJbmJveE1lc3NhZ2VzKCk7XG5cbiAgICAgICAgaWYgKG1lc3NhZ2VzW20uaWRdICYmIG1lc3NhZ2VzW20uaWRdLnZpZXdlZCA9PT0gMCkge1xuICAgICAgICAgIGNvdW50ZXIrKztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLnNldEJhZGdlU3R5bGUoY291bnRlcik7XG4gICAgfVxuXG4gICAgdXBkYXRlVFNGb3JSZW5kZXJlZE1zZ3MoKSB7XG4gICAgICB0aGlzLmluYm94Q2FyZC5xdWVyeVNlbGVjdG9yQWxsKCdjdC1pbmJveC1tZXNzYWdlJykuZm9yRWFjaChtID0+IHtcbiAgICAgICAgY29uc3QgdHMgPSBtLmlkLnNwbGl0KCdfJylbMV07XG4gICAgICAgIG0uc2hhZG93LmdldEVsZW1lbnRCeUlkKCd0aW1lU3RhbXAnKS5maXJzdENoaWxkLmlubmVyVGV4dCA9IGRldGVybWluZVRpbWVTdGFtcFRleHQodHMpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0SW5ib3hTdHlsZXMoKSB7XG4gICAgICBjb25zdCBoZWFkZXJIZWlnaHQgPSAzNjtcbiAgICAgIGNvbnN0IGNhdGVnb3JpZXNIZWlnaHQgPSB0aGlzLmNvbmZpZy5jYXRlZ29yaWVzLmxlbmd0aCA/IDY0IDogMTY7XG4gICAgICBjb25zdCBzdHlsZXMgPSB7XG4gICAgICAgIHBhbmVsQmFja2dyb3VuZENvbG9yOiB0aGlzLmNvbmZpZy5zdHlsZXMucGFuZWxCYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgIHBhbmVsQm9yZGVyQ29sb3I6IHRoaXMuY29uZmlnLnN0eWxlcy5wYW5lbEJvcmRlckNvbG9yLFxuICAgICAgICBoZWFkZXJCYWNrZ3JvdW5kQ29sb3I6IHRoaXMuY29uZmlnLnN0eWxlcy5oZWFkZXIuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICBoZWFkZXJUaXRsZUNvbG9yOiB0aGlzLmNvbmZpZy5zdHlsZXMuaGVhZGVyLnRpdGxlQ29sb3IsXG4gICAgICAgIGNsb3NlSWNvbkNvbG9yOiB0aGlzLmNvbmZpZy5zdHlsZXMuY2xvc2VJY29uQ29sb3IsXG4gICAgICAgIGNhdGVnb3JpZXNUYWJDb2xvcjogdGhpcy5jb25maWcuc3R5bGVzLmNhdGVnb3JpZXMudGFiQ29sb3IsXG4gICAgICAgIGNhdGVnb3JpZXNUaXRsZUNvbG9yOiB0aGlzLmNvbmZpZy5zdHlsZXMuY2F0ZWdvcmllcy50aXRsZUNvbG9yLFxuICAgICAgICBzZWxlY3RlZENhdGVnb3J5VGFiQ29sb3I6IHRoaXMuY29uZmlnLnN0eWxlcy5jYXRlZ29yaWVzLnNlbGVjdGVkVGFiLnRhYkNvbG9yLFxuICAgICAgICBzZWxlY3RlZENhdGVnb3J5VGl0bGVDb2xvcjogdGhpcy5jb25maWcuc3R5bGVzLmNhdGVnb3JpZXMuc2VsZWN0ZWRUYWIudGl0bGVDb2xvcixcbiAgICAgICAgaGVhZGVyQ2F0ZWdvcnlIZWlnaHQ6IGhlYWRlckhlaWdodCArIGNhdGVnb3JpZXNIZWlnaHRcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLmNvbmZpZy5zdHlsZXMuY2F0ZWdvcmllcy5ib3JkZXJDb2xvcikge1xuICAgICAgICBzdHlsZXMuY2F0ZWdvcmllc0JvcmRlckNvbG9yID0gdGhpcy5jb25maWcuc3R5bGVzLmNhdGVnb3JpZXMuYm9yZGVyQ29sb3I7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmNvbmZpZy5zdHlsZXMuY2F0ZWdvcmllcy5zZWxlY3RlZFRhYi5ib3JkZXJDb2xvcikge1xuICAgICAgICBzdHlsZXMuc2VsZWN0ZWRDYXRlZ29yeUJvcmRlckNvbG9yID0gdGhpcy5jb25maWcuc3R5bGVzLmNhdGVnb3JpZXMuc2VsZWN0ZWRUYWIuYm9yZGVyQ29sb3I7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGluYm94U3R5bGVzID0gaW5ib3hDb250YWluZXJTdHlsZXMoc3R5bGVzKTtcbiAgICAgIGNvbnN0IGNhcmRTdHlsZXMgPSB0aGlzLmNvbmZpZy5zdHlsZXMuY2FyZHM7XG4gICAgICBjb25zdCBtc2dTdHlsZXMgPSBtZXNzYWdlU3R5bGVzKHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjYXJkU3R5bGVzLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgYm9yZGVyQ29sb3I6IGNhcmRTdHlsZXMuYm9yZGVyQ29sb3IsXG4gICAgICAgIHRpdGxlQ29sb3I6IGNhcmRTdHlsZXMudGl0bGVDb2xvcixcbiAgICAgICAgZGVzY3JpcHRpb25Db2xvcjogY2FyZFN0eWxlcy5kZXNjcmlwdGlvbkNvbG9yLFxuICAgICAgICBidXR0b25Db2xvcjogY2FyZFN0eWxlcy5idXR0b25Db2xvcixcbiAgICAgICAgYnV0dG9uVGV4dENvbG9yOiBjYXJkU3R5bGVzLmJ1dHRvblRleHRDb2xvcixcbiAgICAgICAgdW5yZWFkTWFya2VyQ29sb3I6IGNhcmRTdHlsZXMudW5yZWFkTWFya2VyQ29sb3JcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGluYm94U3R5bGVzICsgbXNnU3R5bGVzO1xuICAgIH1cblxuICB9XG5cbiAgY29uc3QgcHJvY2Vzc1dlYkluYm94U2V0dGluZ3MgPSBmdW5jdGlvbiAod2ViSW5ib3hTZXR0aW5nKSB7XG4gICAgbGV0IGlzUHJldmlldyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgICBjb25zdCBfc2V0dGluZ3MgPSBTdG9yYWdlTWFuYWdlci5yZWFkRnJvbUxTb3JDb29raWUoV0VCSU5CT1hfQ09ORklHKSB8fCB7fTtcblxuICAgIGlmIChpc1ByZXZpZXcpIHtcbiAgICAgICRjdC5pbmJveC5pbmJveENvbmZpZ0ZvclByZXZpZXcgPSB3ZWJJbmJveFNldHRpbmc7XG4gICAgICAkY3QuaW5ib3guaXNQcmV2aWV3ID0gdHJ1ZTtcbiAgICAgICRjdC5pbmJveCAmJiAkY3QuaW5ib3guaW5pdCgpO1xuICAgIH0gZWxzZSBpZiAoSlNPTi5zdHJpbmdpZnkoX3NldHRpbmdzKSAhPT0gSlNPTi5zdHJpbmdpZnkod2ViSW5ib3hTZXR0aW5nKSkge1xuICAgICAgU3RvcmFnZU1hbmFnZXIuc2F2ZVRvTFNvckNvb2tpZShXRUJJTkJPWF9DT05GSUcsIHdlYkluYm94U2V0dGluZyk7XG4gICAgICAkY3QuaW5ib3ggJiYgJGN0LmluYm94LmluaXQoKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHByb2Nlc3NJbmJveE5vdGlmcyA9IG1zZyA9PiB7XG4gICAgaWYgKG1zZy5pbmJveF9wcmV2aWV3KSB7XG4gICAgICAkY3QuaW5ib3guaW5jb21pbmdNZXNzYWdlc0ZvclByZXZpZXcgPSBtc2cuaW5ib3hfbm90aWZzO1xuICAgIH0gZWxzZSB7XG4gICAgICAkY3QuaW5ib3guaW5jb21pbmdNZXNzYWdlcyA9IG1zZztcbiAgICB9XG4gIH07XG4gIGNvbnN0IGFkZFdlYkluYm94ID0gbG9nZ2VyID0+IHtcbiAgICBjaGVja0FuZFJlZ2lzdGVyV2ViSW5ib3hFbGVtZW50cygpO1xuICAgICRjdC5pbmJveCA9IG5ldyBJbmJveCh7XG4gICAgICBsb2dnZXJcbiAgICB9KTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKCRjdC5pbmJveCk7XG4gIH07XG5cbiAgY29uc3QgZ2V0QW5kTWlncmF0ZUluYm94TWVzc2FnZXMgPSBndWlkID0+IHtcbiAgICBjb25zdCBtZXNzYWdlcyA9IFN0b3JhZ2VNYW5hZ2VyLnJlYWRGcm9tTFNvckNvb2tpZShXRUJJTkJPWCkgfHwge307IC8vIERvaW5nIHRoaXMgdG8gbWlncmF0ZSBtZXNzYWdlIHRvIGd1aWQgbGV2ZWxcblxuICAgIGlmIChPYmplY3Qua2V5cyhtZXNzYWdlcykubGVuZ3RoID4gMCAmJiBPYmplY3Qua2V5cyhtZXNzYWdlcylbMF0uaW5jbHVkZXMoJ18nKSkge1xuICAgICAgY29uc3QgZ3VkSW5ib3hPYmogPSB7fTtcbiAgICAgIGd1ZEluYm94T2JqW2d1aWRdID0gbWVzc2FnZXM7XG4gICAgICBTdG9yYWdlTWFuYWdlci5zYXZlVG9MU29yQ29va2llKFdFQklOQk9YLCBndWRJbmJveE9iaik7XG4gICAgICByZXR1cm4gZ3VkSW5ib3hPYmo7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lc3NhZ2VzO1xuICB9O1xuXG4gIGNvbnN0IGdldEluYm94TWVzc2FnZXMgPSAoKSA9PiB7XG4gICAgY29uc3QgZ3VpZCA9IEpTT04ucGFyc2UoZGVjb2RlVVJJQ29tcG9uZW50KFN0b3JhZ2VNYW5hZ2VyLnJlYWQoR0NPT0tJRV9OQU1FKSkpO1xuXG4gICAgaWYgKCFpc1ZhbHVlVmFsaWQoZ3VpZCkpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICBjb25zdCBtZXNzYWdlcyA9IGdldEFuZE1pZ3JhdGVJbmJveE1lc3NhZ2VzKGd1aWQpO1xuICAgIHJldHVybiBtZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eShndWlkKSA/IG1lc3NhZ2VzW2d1aWRdIDoge307XG4gIH07XG4gIGNvbnN0IHNhdmVJbmJveE1lc3NhZ2VzID0gbWVzc2FnZXMgPT4ge1xuICAgIGNvbnN0IGd1aWQgPSBKU09OLnBhcnNlKGRlY29kZVVSSUNvbXBvbmVudChTdG9yYWdlTWFuYWdlci5yZWFkKEdDT09LSUVfTkFNRSkpKTtcblxuICAgIGlmICghaXNWYWx1ZVZhbGlkKGd1aWQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgc3RvcmVkSW5ib3hPYmogPSBnZXRBbmRNaWdyYXRlSW5ib3hNZXNzYWdlcyhndWlkKTtcbiAgICBjb25zdCBuZXdPYmogPSB7IC4uLnN0b3JlZEluYm94T2JqLFxuICAgICAgW2d1aWRdOiBtZXNzYWdlc1xuICAgIH07XG4gICAgU3RvcmFnZU1hbmFnZXIuc2F2ZVRvTFNvckNvb2tpZShXRUJJTkJPWCwgbmV3T2JqKTtcbiAgfTtcbiAgY29uc3QgaW5pdGlhbGl6ZVdlYkluYm94ID0gbG9nZ2VyID0+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICAgICAgYWRkV2ViSW5ib3gobG9nZ2VyKTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgY29uZmlnID0gU3RvcmFnZU1hbmFnZXIucmVhZEZyb21MU29yQ29va2llKFdFQklOQk9YX0NPTkZJRykgfHwge307XG5cbiAgICAgICAgY29uc3Qgb25Mb2FkZWQgPSAoKSA9PiB7XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogV2UgbmVlZCB0aGlzIG51bGwgY2hlY2sgaGVyZSBiZWNhdXNlICRjdC5pbmJveCBjb3VsZCBiZSBpbml0aWFsaXNlZCB2aWEgaW5pdCBtZXRob2QgdG9vIG9uIGRvY3VtZW50IGxvYWQuXG4gICAgICAgICAgICogSW4gdGhhdCBjYXNlIHdlIGRvbid0IG5lZWQgdG8gY2FsbCBhZGRXZWJJbmJveCBtZXRob2RcbiAgICAgICAgICAgKi9cbiAgICAgICAgICBpZiAoJGN0LmluYm94ID09PSBudWxsKSB7XG4gICAgICAgICAgICBhZGRXZWJJbmJveChsb2dnZXIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfTtcblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBTY3JpcHRzIGNhbiBiZSBsb2FkZWQgbGF5emlseSwgd2UgbWF5IG5vdCBnZXQgZWxlbWVudCBmcm9tIGRvbSBhcyBpdCBtYXkgbm90IGJlIG1vdW50ZWQgeWV0XG4gICAgICAgICAgICogV2Ugd2lsbCB0byBjaGVjayBlbGVtZW50IGZvciAxMCBzZWNvbmRzIGFuZCBnaXZlIHVwXG4gICAgICAgICAgICovXG4gICAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvbmZpZy5pbmJveFNlbGVjdG9yKSkge1xuICAgICAgICAgICAgb25Mb2FkZWQoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gY2hlY2sgZm9yIGVsZW1lbnQgZm9yIG5leHQgMTAgc2Vjb25kc1xuICAgICAgICAgICAgbGV0IGNvdW50ID0gMDtcblxuICAgICAgICAgICAgaWYgKGNvdW50IDwgMjApIHtcbiAgICAgICAgICAgICAgY29uc3QgdCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29uZmlnLmluYm94U2VsZWN0b3IpKSB7XG4gICAgICAgICAgICAgICAgICBvbkxvYWRlZCgpO1xuICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0KTtcbiAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvdW50ID49IDIwKSB7XG4gICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHQpO1xuICAgICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdGYWlsZWQgdG8gYWRkIGluYm94Jyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICBjb25zdCBjaGVja0FuZFJlZ2lzdGVyV2ViSW5ib3hFbGVtZW50cyA9ICgpID0+IHtcbiAgICBpZiAoY3VzdG9tRWxlbWVudHMuZ2V0KCdjdC13ZWItaW5ib3gnKSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ2N0LXdlYi1pbmJveCcsIEluYm94KTtcbiAgICAgIGN1c3RvbUVsZW1lbnRzLmRlZmluZSgnY3QtaW5ib3gtbWVzc2FnZScsIE1lc3NhZ2UpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgZ2V0SW5ib3hQb3NpdGlvbiA9IChlLCBpbmJveEhlaWdodCwgaW5ib3hXaWR0aCkgPT4ge1xuICAgIGNvbnN0IGhvcml6b250YWxTY3JvbGwgPSBkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50LnNjcm9sbExlZnQ7XG4gICAgY29uc3QgdmVydGljYWxTY3JvbGwgPSBkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50LnNjcm9sbFRvcDtcbiAgICBjb25zdCB3aW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoICsgaG9yaXpvbnRhbFNjcm9sbDtcbiAgICBjb25zdCB3aW5kb3dIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgKyB2ZXJ0aWNhbFNjcm9sbDtcbiAgICBjb25zdCBzZWxlY3RvclJlY3QgPSBlLnJlY3QgfHwgZS50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3Qgc2VsZWN0b3JYID0gc2VsZWN0b3JSZWN0LnggKyBob3Jpem9udGFsU2Nyb2xsO1xuICAgIGNvbnN0IHNlbGVjdG9yWSA9IHNlbGVjdG9yUmVjdC55ICsgdmVydGljYWxTY3JvbGw7XG4gICAgY29uc3Qgc2VsZWN0b3JMZWZ0ID0gc2VsZWN0b3JSZWN0LmxlZnQgKyBob3Jpem9udGFsU2Nyb2xsO1xuICAgIGNvbnN0IHNlbGVjdG9yUmlnaHQgPSBzZWxlY3RvclJlY3QucmlnaHQgKyBob3Jpem9udGFsU2Nyb2xsO1xuICAgIGNvbnN0IHNlbGVjdG9yVG9wID0gc2VsZWN0b3JSZWN0LnRvcCArIHZlcnRpY2FsU2Nyb2xsOyAvLyBjb25zdCBzZWxlY3RvckJvdHRvbSA9IHNlbGVjdG9yUmVjdC5ib3R0b20gKyB2ZXJ0aWNhbFNjcm9sbFxuXG4gICAgY29uc3Qgc2VsZWN0b3JCb3R0b20gPSBzZWxlY3RvclJlY3QuYm90dG9tO1xuICAgIGNvbnN0IHNlbGVjdG9ySGVpZ2h0ID0gc2VsZWN0b3JSZWN0LmhlaWdodDtcbiAgICBjb25zdCBzZWxlY3RvcldpZHRoID0gc2VsZWN0b3JSZWN0LndpZHRoO1xuICAgIGNvbnN0IHNlbGVjdG9yQ2VudGVyID0ge1xuICAgICAgeDogc2VsZWN0b3JYICsgc2VsZWN0b3JXaWR0aCAvIDIsXG4gICAgICB5OiBzZWxlY3RvclkgKyBzZWxlY3RvckhlaWdodCAvIDJcbiAgICB9O1xuICAgIGNvbnN0IGhhbGZPZkluYm94SGVpZ2h0ID0gaW5ib3hIZWlnaHQgLyAyO1xuICAgIGNvbnN0IGhhbGZPZkluYm94V2lkdGggPSBpbmJveFdpZHRoIC8gMjtcbiAgICBsZXQgaW5ib3hPblNpZGUgPSBmYWxzZTtcbiAgICBsZXQgeFBvcywgeVBvcztcbiAgICBjb25zdCBwYWRkaW5nID0gMTY7XG4gICAgLyoqXG4gICAgICogeSBjby1vcmRpbmF0ZXM6XG4gICAgICogVHJ5IHRvIHB1c2ggdGhlIGNhcmQgZG93bndhcmRzXG4gICAgICogaWYgdGhhdCdzIG5vdCBwb3NzaWJsZSwgcHVzaCBpdCB1cHdhcmRzXG4gICAgICogaWYgdGhhdCB0b28gaXMgbm90IHBvc3NpYmxlLCB0aGVuIHRoZSBjYXJkIHdpbGwgYmUgcGxhY2VkIG9uIHRoZSBzaWRlLiBBZGQgc29tZSBwYWRkaW5nLlxuICAgICAqXG4gICAgICogeCBjby1vcmRpbmF0ZXM6XG4gICAgICogSWYgdGhlIGNhcmQgaXMgb24gdGhlIHNpZGUsXG4gICAgICogICAgdHJ5IHRvIHBsYWNlIGl0IHRvIHRoZSByaWdodC4gSWYgaXQncyBub3QgcG9zc2libGUsXG4gICAgICogICAgcGxhY2UgaXQgdG8gdGhlIGxlZnRcbiAgICAgKiBJZiB0aGUgY2FyZCBpcyBlaXRoZXIgb24gdG9wLyBib3R0b20sIHNldCB0aGUgeCBjby1vcmRpbmF0ZSBzdWNoIHRoYXQgdGhlIHNlbGVjdG9yIGNlbnRlciBhbmQgdGhlIGluYm94IGNhcmQgY2VudGVyIGJlY29tZSB0aGUgc2FtZVxuICAgICAqIE5vdyxcbiAgICAgKiAgaWYgdGhlIGxlZnQgb2YgdGhlIGluYm94IGNhcmQgaXMgPCAwLFxuICAgICAqICAgIHRyeSB0byBnZXQgdGhlIGxlZnQgYWxpZ25lZCB0byB0aGUgc2VsZWN0b3JMZWZ0LlxuICAgICAqICAgIGlmIHRoYXQncyBub3QgcG9zc2libGUsIHNpbXBseSBzZXQgbGVmdCB0byAwXG4gICAgICogIGlmIHRoZSByaWdodCBvZiB0aGUgaW5ib3ggY2FyZCA+IHdpbmRvd1dpZHRoLFxuICAgICAqICAgIHRyeSB0byBnZXQgdGhlIHJpZ2h0IG9mIHJoZSBpbmJveCBjYXJkIGFsaWduZWQgd2l0aCB0aGUgc2VsZWN0b3JSaWdodFxuICAgICAqICAgIGlmIHRoYXQncyBub3QgcG9zc2libGUsIHNpbXBseSBzZXQgdGhlIGluYm94IHJpZ2h0IHRvIHRoZSB3aW5kb3cgUmlnaHRcbiAgICAgKi9cblxuICAgIGlmIChzZWxlY3RvckJvdHRvbSArIGluYm94SGVpZ2h0IDw9IHdpbmRvd0hlaWdodCkge1xuICAgICAgLy8gdHJ5IHRvIHBsYWNlIHRoZSBjYXJkIGRvd25cbiAgICAgIGNvbnN0IGF2YWlsYWJsZUhlaWdodCA9IHdpbmRvd0hlaWdodCAtIChzZWxlY3RvckJvdHRvbSArIGluYm94SGVpZ2h0KTtcbiAgICAgIHlQb3MgPSBhdmFpbGFibGVIZWlnaHQgPj0gcGFkZGluZyA/IHNlbGVjdG9yQm90dG9tICsgcGFkZGluZyA6IHNlbGVjdG9yQm90dG9tICsgYXZhaWxhYmxlSGVpZ2h0O1xuICAgIH0gZWxzZSBpZiAoc2VsZWN0b3JUb3AgLSBpbmJveEhlaWdodCA+PSB2ZXJ0aWNhbFNjcm9sbCkge1xuICAgICAgLy8gdHJ5IHRvIHBsYWNlIHRoZSBjYXJkIHVwXG4gICAgICBjb25zdCBhdmFpbGFibGVIZWlnaHQgPSBzZWxlY3RvclRvcCAtIGluYm94SGVpZ2h0O1xuICAgICAgeVBvcyA9IGF2YWlsYWJsZUhlaWdodCA+PSBwYWRkaW5nID8gc2VsZWN0b3JUb3AgLSBpbmJveEhlaWdodCAtIHBhZGRpbmcgOiBzZWxlY3RvclRvcCAtIGluYm94SGVpZ2h0IC0gYXZhaWxhYmxlSGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBpbmJveE9uU2lkZSA9IHRydWU7XG4gICAgICB5UG9zID0gc2VsZWN0b3JDZW50ZXIueSAtIGhhbGZPZkluYm94SGVpZ2h0OyAvLyB3aXRoIHRoaXMgdGhlIHkgY28tb3JkaW5hdGUgb2YgdGhlIHNlbGVjdG9yIGNlbnRlciBhbmQgdGhlIGluYm94IGNhcmQgY2VudGVyIGJlY29tZSB0aGUgc2FtZVxuXG4gICAgICBpZiAoeVBvcyA8IHZlcnRpY2FsU2Nyb2xsKSB7XG4gICAgICAgIHlQb3MgPSB2ZXJ0aWNhbFNjcm9sbDtcbiAgICAgIH0gZWxzZSBpZiAoeVBvcyArIGluYm94SGVpZ2h0ID4gd2luZG93SGVpZ2h0KSB7XG4gICAgICAgIHlQb3MgPSB3aW5kb3dIZWlnaHQgLSBpbmJveEhlaWdodDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaW5ib3hPblNpZGUpIHtcbiAgICAgIC8vIFNlZSBpZiB3ZSBjYW4gcGxhY2UgdGhlIGNhcmQgdG8gdGhlIHJpZ2h0IG9mIHRoZSBzZWxlY3RvclxuICAgICAgY29uc3QgaW5ib3hSaWdodCA9IHNlbGVjdG9yUmlnaHQgKyBpbmJveFdpZHRoO1xuXG4gICAgICBpZiAoaW5ib3hSaWdodCA8PSB3aW5kb3dXaWR0aCkge1xuICAgICAgICBjb25zdCBhdmFpbGFibGVXaWR0aCA9IGluYm94UmlnaHQgKyBwYWRkaW5nIDw9IHdpbmRvd1dpZHRoID8gcGFkZGluZyA6IHdpbmRvd1dpZHRoIC0gaW5ib3hSaWdodDtcbiAgICAgICAgeFBvcyA9IHNlbGVjdG9yUmlnaHQgKyBhdmFpbGFibGVXaWR0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGluYm94TGVmdCA9IHNlbGVjdG9yTGVmdCAtIGluYm94V2lkdGg7XG4gICAgICAgIGNvbnN0IGF2YWlsYWJsZVdpZHRoID0gaW5ib3hMZWZ0IC0gcGFkZGluZyA+PSBob3Jpem9udGFsU2Nyb2xsID8gcGFkZGluZyA6IGluYm94TGVmdCAtIGhvcml6b250YWxTY3JvbGw7XG4gICAgICAgIHhQb3MgPSBpbmJveExlZnQgLSBhdmFpbGFibGVXaWR0aDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgeFBvcyA9IHNlbGVjdG9yQ2VudGVyLnggLSBoYWxmT2ZJbmJveFdpZHRoO1xuXG4gICAgICBpZiAoeFBvcyA8IGhvcml6b250YWxTY3JvbGwpIHtcbiAgICAgICAgaWYgKHNlbGVjdG9yTGVmdCArIGluYm94V2lkdGggPD0gd2luZG93V2lkdGgpIHtcbiAgICAgICAgICB4UG9zID0gc2VsZWN0b3JMZWZ0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHhQb3MgPSBob3Jpem9udGFsU2Nyb2xsO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHhQb3MgKyBpbmJveFdpZHRoID4gd2luZG93V2lkdGgpIHtcbiAgICAgICAgaWYgKHNlbGVjdG9yUmlnaHQgLSBpbmJveFdpZHRoID49IGhvcml6b250YWxTY3JvbGwpIHtcbiAgICAgICAgICB4UG9zID0gc2VsZWN0b3JSaWdodCAtIGluYm94V2lkdGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgeFBvcyA9IHdpbmRvd1dpZHRoIC0gaW5ib3hXaWR0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB4UG9zLFxuICAgICAgeVBvc1xuICAgIH07XG4gIH07XG4gIGNvbnN0IGRldGVybWluZVRpbWVTdGFtcFRleHQgPSB0cyA9PiB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBsZXQgZGlmZiA9IE1hdGguZmxvb3IoKG5vdyAtIHRzKSAvIDYwMDAwKTtcblxuICAgIGlmIChkaWZmIDwgNSkge1xuICAgICAgcmV0dXJuICdKdXN0IG5vdyc7XG4gICAgfVxuXG4gICAgaWYgKGRpZmYgPCA2MCkge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KGRpZmYsIFwiIG1pbnV0ZVwiKS5jb25jYXQoZGlmZiA+IDEgPyAncycgOiAnJywgXCIgYWdvXCIpO1xuICAgIH1cblxuICAgIGRpZmYgPSBNYXRoLmZsb29yKGRpZmYgLyA2MCk7XG5cbiAgICBpZiAoZGlmZiA8IDI0KSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoZGlmZiwgXCIgaG91clwiKS5jb25jYXQoZGlmZiA+IDEgPyAncycgOiAnJywgXCIgYWdvXCIpO1xuICAgIH1cblxuICAgIGRpZmYgPSBNYXRoLmZsb29yKGRpZmYgLyAyNCk7XG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KGRpZmYsIFwiIGRheVwiKS5jb25jYXQoZGlmZiA+IDEgPyAncycgOiAnJywgXCIgYWdvXCIpO1xuICB9O1xuICBjb25zdCBoYXNXZWJJbmJveFNldHRpbmdzSW5MUyA9ICgpID0+IHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoU3RvcmFnZU1hbmFnZXIucmVhZEZyb21MU29yQ29va2llKFdFQklOQk9YX0NPTkZJRykgfHwge30pLmxlbmd0aCA+IDA7XG4gIH07XG4gIGNvbnN0IGFycm93U3ZnID0gXCI8c3ZnIHdpZHRoPVxcXCI2XFxcIiBoZWlnaHQ9XFxcIjEwXFxcIiB2aWV3Qm94PVxcXCIwIDAgNiAxMFxcXCIgZmlsbD1cXFwibm9uZVxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj5cXG48cGF0aCBmaWxsLXJ1bGU9XFxcImV2ZW5vZGRcXFwiIGNsaXAtcnVsZT1cXFwiZXZlbm9kZFxcXCIgZD1cXFwiTTAuMjU4NDM1IDkuNzQ3NTFDLTAuMDQ3ODU4NCA5LjQ0ODI1IC0wLjA4MTg5MSA4Ljk4MzczIDAuMTU2MzM3IDguNjQ3NzVMMC4yNTg0MzUgOC41MjgzNkwzLjg3MTA2IDVMMC4yNTg0MzUgMS40NzE2NEMtMC4wNDc4NTg4IDEuMTcyMzkgLTAuMDgxODkxNCAwLjcwNzg2NyAwLjE1NjMzNyAwLjM3MTg4N0wwLjI1ODQzNSAwLjI1MjQ5NEMwLjU2NDcyOCAtMC4wNDY3NTg1IDEuMDQwMTggLTAuMDgwMDA4NSAxLjM4NDA3IDAuMTUyNzQzTDEuNTA2MjcgMC4yNTI0OTRMNS43NDE1NiA0LjM5MDQyQzYuMDQ3ODYgNC42ODk2OCA2LjA4MTg5IDUuMTU0MiA1Ljg0MzY2IDUuNDkwMThMNS43NDE1NiA1LjYwOTU3TDEuNTA2MjcgOS43NDc1MUMxLjE2MTY5IDEwLjA4NDIgMC42MDMwMTUgMTAuMDg0MiAwLjI1ODQzNSA5Ljc0NzUxWlxcXCIgZmlsbD1cXFwiIzYzNjk4RlxcXCIvPlxcbjwvc3ZnPlxcblwiO1xuICBjb25zdCBncmVlblRpY2tTdmcgPSBcIjxzdmcgd2lkdGg9XFxcIjE2XFxcIiBoZWlnaHQ9XFxcIjE2XFxcIiB2aWV3Qm94PVxcXCIwIDAgMTYgMTZcXFwiIGZpbGw9XFxcIm5vbmVcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+XFxuPHBhdGggZmlsbC1ydWxlPVxcXCJldmVub2RkXFxcIiBjbGlwLXJ1bGU9XFxcImV2ZW5vZGRcXFwiIGQ9XFxcIk0xNiA4QzE2IDMuNTgxNzIgMTIuNDE4MyAwIDggMEMzLjU4MTcyIDAgMCAzLjU4MTcyIDAgOEMwIDEyLjQxODMgMy41ODE3MiAxNiA4IDE2QzEyLjQxODMgMTYgMTYgMTIuNDE4MyAxNiA4Wk05LjY4MzkgNS45MzYwMkM5Ljk3MDgzIDUuNTU2OTggMTAuNTAzIDUuNDg4MzMgMTAuODcyNSA1Ljc4MjY5QzExLjIxMzUgNi4wNTQ0IDExLjI5NjggNi41NDA0NCAxMS4wODE5IDYuOTExNzNMMTEuMDIxOSA3LjAwMTk4TDguMDk4MzEgMTAuODY0QzcuODA1ODEgMTEuMjUwNCA3LjI2NjU0IDExLjMwODYgNi45MDMyMyAxMS4wMTIyTDYuODI4MjIgMTAuOTQzM0w1LjA0NTk3IDkuMTAxOTFDNC43MTYzNSA4Ljc2MTM2IDQuNzE4MjYgOC4yMTExNyA1LjA1MDIzIDcuODczMDNDNS4zNTY2NiA3LjU2MDkgNS44MzcyMiA3LjUzODU1IDYuMTY4NTkgNy44MDQ4Mkw2LjI0ODE0IDcuODc3MzlMNy4zNTEzMyA5LjAxNzE3TDkuNjgzOSA1LjkzNjAyWlxcXCIgZmlsbD1cXFwiIzAzQTM4N1xcXCIvPlxcbjwvc3ZnPlxcblwiO1xuXG4gIGNvbnN0IE9WRVJMQVlfUEFUSCA9ICdodHRwczovL3dlYi1uYXRpdmUtZGlzcGxheS1jYW1wYWlnbi5jbGV2ZXJ0YXAuY29tL3Byb2R1Y3Rpb24vbGliLW92ZXJsYXkvb3ZlcmxheS5qcyc7XG4gIGNvbnN0IENTU19QQVRIID0gJ2h0dHBzOi8vd2ViLW5hdGl2ZS1kaXNwbGF5LWNhbXBhaWduLmNsZXZlcnRhcC5jb20vcHJvZHVjdGlvbi9saWItb3ZlcmxheS9zdHlsZS5jc3MnO1xuXG4gIGNvbnN0IHVwZGF0ZUZvcm1EYXRhID0gKGVsZW1lbnQsIGZvcm1TdHlsZSkgPT4ge1xuICAgIC8vIFVwZGF0ZSB0aGUgZWxlbWVudCBzdHlsZVxuICAgIGlmIChmb3JtU3R5bGUuc3R5bGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgT2JqZWN0LmtleXMoZm9ybVN0eWxlLnN0eWxlKS5mb3JFYWNoKHByb3BlcnR5ID0+IHtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgZm9ybVN0eWxlLnN0eWxlW3Byb3BlcnR5XSk7XG4gICAgICB9KTtcbiAgICB9IC8vIFVwZGF0ZSB1bmRlcmxpbmUgZm9yIGVsZW1lbnRcblxuXG4gICAgaWYgKGZvcm1TdHlsZS51bmRlcmxpbmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgY3VyVGV4dERlY29yYXRpb24gPSBlbGVtZW50LnN0eWxlLnRleHREZWNvcmF0aW9uO1xuXG4gICAgICBpZiAoZm9ybVN0eWxlLnVuZGVybGluZSkge1xuICAgICAgICBlbGVtZW50LnN0eWxlLnRleHREZWNvcmF0aW9uID0gXCJcIi5jb25jYXQoY3VyVGV4dERlY29yYXRpb24sIFwiIHVuZGVybGluZVwiKS50cmltKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LnN0eWxlLnRleHREZWNvcmF0aW9uID0gY3VyVGV4dERlY29yYXRpb24ucmVwbGFjZSgndW5kZXJsaW5lJywgJycpLnRyaW0oKTtcbiAgICAgIH1cbiAgICB9IC8vIFVwZGF0ZSBlbGVtZW50IHRleHRcblxuXG4gICAgaWYgKGZvcm1TdHlsZS50ZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGVsZW1lbnQuaW5uZXJUZXh0ID0gZm9ybVN0eWxlLnRleHQ7XG4gICAgfSAvLyBIYW5kbGUgZWxlbWVudCBvbkNsaWNrXG5cblxuICAgIGlmIChmb3JtU3R5bGUuY2xpY2tEZXRhaWxzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IHVybCA9IGZvcm1TdHlsZS5jbGlja0RldGFpbHMuY2xpY2tVcmw7XG4gICAgICBlbGVtZW50Lm9uY2xpY2sgPSBmb3JtU3R5bGUuY2xpY2tEZXRhaWxzLm5ld1RhYiA/ICgpID0+IHdpbmRvdy5vcGVuKHVybCwgJ19ibGFuaycpLmZvY3VzKCkgOiAoKSA9PiB7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJsO1xuICAgICAgfTtcbiAgICB9IC8vIFNldCB0aGUgaW1hZ2Ugc291cmNlXG5cblxuICAgIGlmIChmb3JtU3R5bGUuaW1nVVJMICE9PSB1bmRlZmluZWQgJiYgZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbWcnKSB7XG4gICAgICBlbGVtZW50LnNyYyA9IGZvcm1TdHlsZS5pbWdVUkw7XG4gICAgfSAvLyBIYW5kbGUgZWxlbWVudENzc1xuXG5cbiAgICBpZiAoZm9ybVN0eWxlLmVsZW1lbnRDc3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgc3R5bGUuaW5uZXJIVE1MID0gZm9ybVN0eWxlLmVsZW1lbnRDc3M7XG4gICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgY2hlY2tCdWlsZGVyID0gKGxvZ2dlciwgYWNjb3VudElkKSA9PiB7XG4gICAgY29uc3Qgc2VhcmNoID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaDtcbiAgICBjb25zdCBwYXJlbnRXaW5kb3cgPSB3aW5kb3cub3BlbmVyO1xuXG4gICAgaWYgKHNlYXJjaCA9PT0gJz9jdEJ1aWxkZXInKSB7XG4gICAgICAvLyBvcGVuIGluIHZpc3VhbCBidWlsZGVyIG1vZGVcbiAgICAgIGxvZ2dlci5kZWJ1Zygnb3BlbiBpbiB2aXN1YWwgYnVpbGRlciBtb2RlJyk7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGhhbmRsZU1lc3NhZ2VFdmVudCwgZmFsc2UpO1xuXG4gICAgICBpZiAocGFyZW50V2luZG93KSB7XG4gICAgICAgIHBhcmVudFdpbmRvdy5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgbWVzc2FnZTogJ2J1aWxkZXInLFxuICAgICAgICAgIG9yaWdpblVybDogd2luZG93LmxvY2F0aW9uLmhyZWZcbiAgICAgICAgfSwgJyonKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzZWFyY2ggPT09ICc/Y3RCdWlsZGVyUHJldmlldycpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgaGFuZGxlTWVzc2FnZUV2ZW50LCBmYWxzZSk7XG5cbiAgICAgIGlmIChwYXJlbnRXaW5kb3cpIHtcbiAgICAgICAgcGFyZW50V2luZG93LnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICBtZXNzYWdlOiAncHJldmlldycsXG4gICAgICAgICAgb3JpZ2luVXJsOiB3aW5kb3cubG9jYXRpb24uaHJlZlxuICAgICAgICB9LCAnKicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzZWFyY2ggPT09ICc/Y3RCdWlsZGVyU0RLQ2hlY2snKSB7XG4gICAgICBpZiAocGFyZW50V2luZG93KSB7XG4gICAgICAgIHBhcmVudFdpbmRvdy5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgbWVzc2FnZTogJ1NES1ZlcnNpb24nLFxuICAgICAgICAgIGFjY291bnRJZCxcbiAgICAgICAgICBvcmlnaW5Vcmw6IHdpbmRvdy5sb2NhdGlvbi5ocmVmLFxuICAgICAgICAgIHNka1ZlcnNpb246ICcxLjkuMidcbiAgICAgICAgfSwgJyonKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlTWVzc2FnZUV2ZW50ID0gZXZlbnQgPT4ge1xuICAgIGlmIChldmVudC5kYXRhICYmIGlzVmFsaWRVcmwoZXZlbnQuZGF0YS5vcmlnaW5VcmwpKSB7XG4gICAgICBjb25zdCBtc2dPcmlnaW4gPSBuZXcgVVJMKGV2ZW50LmRhdGEub3JpZ2luVXJsKS5vcmlnaW47XG5cbiAgICAgIGlmIChldmVudC5vcmlnaW4gIT09IG1zZ09yaWdpbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQuZGF0YS5tZXNzYWdlID09PSAnRGFzaGJvYXJkJykge1xuICAgICAgdmFyIF9ldmVudCRkYXRhJHZhcmlhbnQsIF9ldmVudCRkYXRhJGRldGFpbHM7XG5cbiAgICAgIGluaXRpYWxpc2VDVEJ1aWxkZXIoZXZlbnQuZGF0YS51cmwsIChfZXZlbnQkZGF0YSR2YXJpYW50ID0gZXZlbnQuZGF0YS52YXJpYW50KSAhPT0gbnVsbCAmJiBfZXZlbnQkZGF0YSR2YXJpYW50ICE9PSB2b2lkIDAgPyBfZXZlbnQkZGF0YSR2YXJpYW50IDogbnVsbCwgKF9ldmVudCRkYXRhJGRldGFpbHMgPSBldmVudC5kYXRhLmRldGFpbHMpICE9PSBudWxsICYmIF9ldmVudCRkYXRhJGRldGFpbHMgIT09IHZvaWQgMCA/IF9ldmVudCRkYXRhJGRldGFpbHMgOiB7fSk7XG4gICAgfSBlbHNlIGlmIChldmVudC5kYXRhLm1lc3NhZ2UgPT09ICdPdmVybGF5Jykge1xuICAgICAgcmVuZGVyVmlzdWFsQnVpbGRlcihldmVudC5kYXRhLCB0cnVlKTtcbiAgICB9XG4gIH07XG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgQ2xldmVydGFwIGJ1aWxkZXIuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSBUaGUgVVJMIHRvIGluaXRpYWxpemUgdGhlIGJ1aWxkZXIuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YXJpYW50IC0gVGhlIHZhcmlhbnQgb2YgdGhlIGJ1aWxkZXIuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkZXRhaWxzIC0gVGhlIGRldGFpbHMgb2JqZWN0LlxuICAgKi9cblxuXG4gIGNvbnN0IGluaXRpYWxpc2VDVEJ1aWxkZXIgPSAodXJsLCB2YXJpYW50LCBkZXRhaWxzKSA9PiB7XG4gICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdsb2FkaW5nJykge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IG9uQ29udGVudExvYWQodXJsLCB2YXJpYW50LCBkZXRhaWxzKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uQ29udGVudExvYWQodXJsLCB2YXJpYW50LCBkZXRhaWxzKTtcbiAgICB9XG4gIH07XG5cbiAgbGV0IGNvbnRhaW5lcjtcbiAgbGV0IGNvbnRlbnRMb2FkZWQgPSBmYWxzZTtcbiAgLyoqXG4gICAqIEhhbmRsZXMgY29udGVudCBsb2FkIGZvciBDbGV2ZXJ0YXAgYnVpbGRlci5cbiAgICovXG5cbiAgZnVuY3Rpb24gb25Db250ZW50TG9hZCh1cmwsIHZhcmlhbnQsIGRldGFpbHMpIHtcbiAgICBpZiAoIWNvbnRlbnRMb2FkZWQpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuaW5uZXJIVE1MID0gJyc7XG4gICAgICBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNvbnRhaW5lci5pZCA9ICdvdmVybGF5RGl2JztcbiAgICAgIGNvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7IC8vIEVuc3VyZSByZWxhdGl2ZSBwb3NpdGlvbmluZyBmb3IgYWJzb2x1dGUgcG9zaXRpb25pbmcgb2YgZm9ybVxuXG4gICAgICBjb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcbiAgICAgIGNvbnN0IG92ZXJsYXlQYXRoID0gT1ZFUkxBWV9QQVRIO1xuICAgICAgbG9hZE92ZXJsYXlTY3JpcHQob3ZlcmxheVBhdGgsIHVybCwgdmFyaWFudCwgZGV0YWlscykudGhlbigoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdPdmVybGF5IHNjcmlwdCBsb2FkZWQgc3VjY2Vzc2Z1bGx5LicpO1xuICAgICAgICBjb250ZW50TG9hZGVkID0gdHJ1ZTtcbiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbG9hZGluZyBvdmVybGF5IHNjcmlwdDonLCBlcnJvcik7XG4gICAgICB9KTtcbiAgICAgIGxvYWRDU1MoKTtcbiAgICAgIGxvYWRUeXBlS2l0KCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBMb2FkcyBDU1MgZmlsZS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBsb2FkQ1NTKCkge1xuICAgIHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpO1xuICAgIGxpbmsucmVsID0gJ3N0eWxlc2hlZXQnO1xuICAgIGxpbmsudHlwZSA9ICd0ZXh0L2Nzcyc7XG4gICAgbGluay5ocmVmID0gQ1NTX1BBVEg7XG4gICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChsaW5rKTtcbiAgfVxuICAvKipcbiAgICogTG9hZHMgdGhlIG92ZXJsYXkgc2NyaXB0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3ZlcmxheVBhdGggLSBUaGUgcGF0aCB0byBvdmVybGF5IHNjcmlwdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIFRoZSBVUkwuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YXJpYW50IC0gVGhlIHZhcmlhbnQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkZXRhaWxzIC0gVGhlIGRldGFpbHMgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBwcm9taXNlLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGxvYWRPdmVybGF5U2NyaXB0KG92ZXJsYXlQYXRoLCB1cmwsIHZhcmlhbnQsIGRldGFpbHMpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgc2NyaXB0LnR5cGUgPSAnbW9kdWxlJztcbiAgICAgIHNjcmlwdC5zcmMgPSBvdmVybGF5UGF0aDtcblxuICAgICAgc2NyaXB0Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cuT3ZlcmxheSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHdpbmRvdy5PdmVybGF5KHtcbiAgICAgICAgICAgIGlkOiAnI292ZXJsYXlEaXYnLFxuICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgdmFyaWFudCxcbiAgICAgICAgICAgIGRldGFpbHNcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignQ29udGVudExheW91dCBub3QgZm91bmQgaW4gb3ZlcmxheS5qcycpKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgc2NyaXB0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIH07XG5cbiAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogTG9hZHMgVHlwZUtpdCBzY3JpcHQuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gbG9hZFR5cGVLaXQoKSB7XG4gICAgY29uc3QgY29uZmlnID0ge1xuICAgICAga2l0SWQ6ICdlcWo2bm9tJyxcbiAgICAgIHNjcmlwdFRpbWVvdXQ6IDMwMDAsXG4gICAgICBhc3luYzogdHJ1ZVxuICAgIH07XG4gICAgY29uc3QgZG9jRWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICBjb25zdCB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGRvY0VsZW1lbnQuY2xhc3NOYW1lID0gZG9jRWxlbWVudC5jbGFzc05hbWUucmVwbGFjZSgvXFxid2YtbG9hZGluZ1xcYi9nLCAnJykgKyAnIHdmLWluYWN0aXZlJztcbiAgICB9LCBjb25maWcuc2NyaXB0VGltZW91dCk7XG4gICAgY29uc3QgdHlwZUtpdFNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgIGxldCBzY3JpcHRMb2FkZWQgPSBmYWxzZTtcbiAgICBjb25zdCBmaXJzdFNjcmlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTtcbiAgICBsZXQgc2NyaXB0UmVhZHlTdGF0ZTtcbiAgICBkb2NFbGVtZW50LmNsYXNzTmFtZSArPSAnIHdmLWxvYWRpbmcnO1xuICAgIHR5cGVLaXRTY3JpcHQuc3JjID0gJ2h0dHBzOi8vdXNlLnR5cGVraXQubmV0LycgKyBjb25maWcua2l0SWQgKyAnLmpzJztcbiAgICB0eXBlS2l0U2NyaXB0LmFzeW5jID0gdHJ1ZTtcblxuICAgIHR5cGVLaXRTY3JpcHQub25sb2FkID0gdHlwZUtpdFNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBzY3JpcHRSZWFkeVN0YXRlID0gdGhpcy5yZWFkeVN0YXRlO1xuICAgICAgaWYgKHNjcmlwdExvYWRlZCB8fCBzY3JpcHRSZWFkeVN0YXRlICYmIHNjcmlwdFJlYWR5U3RhdGUgIT09ICdjb21wbGV0ZScgJiYgc2NyaXB0UmVhZHlTdGF0ZSAhPT0gJ2xvYWRlZCcpIHJldHVybjtcbiAgICAgIHNjcmlwdExvYWRlZCA9IHRydWU7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgICAgIFR5cGVraXQubG9hZChjb25maWcpO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9O1xuXG4gICAgZmlyc3RTY3JpcHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodHlwZUtpdFNjcmlwdCwgZmlyc3RTY3JpcHQpO1xuICB9XG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoZSB2aXN1YWwgYnVpbGRlci5cbiAgICogQHBhcmFtIHtPYmplY3R9IHRhcmdldGluZ01zZ0pzb24gLSBUaGUgcG9pbnQgYW5kIGNsaWNrIGNhbXBhaWduIEpTT04gb2JqZWN0LlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzUHJldmlldyAtIEluZGljYXRlcyBpZiBpdCdzIGEgcHJldmlldy5cbiAgICovXG5cblxuICBjb25zdCByZW5kZXJWaXN1YWxCdWlsZGVyID0gKHRhcmdldGluZ01zZ0pzb24sIGlzUHJldmlldykgPT4ge1xuICAgIGNvbnN0IGRldGFpbHMgPSBpc1ByZXZpZXcgPyB0YXJnZXRpbmdNc2dKc29uLmRldGFpbHNbMF0gOiB0YXJnZXRpbmdNc2dKc29uLmRpc3BsYXkuZGV0YWlsc1swXTtcbiAgICBjb25zdCBzaXRlVXJsID0gT2JqZWN0LmtleXMoZGV0YWlscylbMF07XG4gICAgY29uc3Qgc2VsZWN0b3JzID0gZGV0YWlsc1tzaXRlVXJsXTtcbiAgICBsZXQgZWxlbWVudERpc3BsYXllZCA9IGZhbHNlO1xuICAgIGlmIChzaXRlVXJsICE9PSB3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdCgnPycpWzBdKSByZXR1cm47XG5cbiAgICBjb25zdCBwcm9jZXNzRWxlbWVudCA9IChlbGVtZW50LCBzZWxlY3RvcikgPT4ge1xuICAgICAgaWYgKHNlbGVjdG9yc1tzZWxlY3Rvcl0uaHRtbCkge1xuICAgICAgICBlbGVtZW50Lm91dGVySFRNTCA9IHNlbGVjdG9yc1tzZWxlY3Rvcl0uaHRtbDtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZWN0b3JzW3NlbGVjdG9yXS5qc29uKSB7XG4gICAgICAgIGRpc3BhdGNoSnNvbkRhdGEodGFyZ2V0aW5nTXNnSnNvbiwgc2VsZWN0b3JzW3NlbGVjdG9yXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cGRhdGVGb3JtRGF0YShlbGVtZW50LCBzZWxlY3RvcnNbc2VsZWN0b3JdLmZvcm0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCB0cnlGaW5kaW5nRWxlbWVudCA9IHNlbGVjdG9yID0+IHtcbiAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICBjb25zdCBpbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICBjb25zdCByZXRyeUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcblxuICAgICAgICBpZiAocmV0cnlFbGVtZW50KSB7XG4gICAgICAgICAgcHJvY2Vzc0VsZW1lbnQocmV0cnlFbGVtZW50LCBzZWxlY3Rvcik7XG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbElkKTtcbiAgICAgICAgfSBlbHNlIGlmICgrK2NvdW50ID49IDIwKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJObyBlbGVtZW50IHByZXNlbnQgb24gRE9NIHdpdGggc2VsZWN0b3IgJ1wiLmNvbmNhdChzZWxlY3RvciwgXCInLlwiKSk7XG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbElkKTtcbiAgICAgICAgfVxuICAgICAgfSwgNTAwKTtcbiAgICB9O1xuXG4gICAgT2JqZWN0LmtleXMoc2VsZWN0b3JzKS5mb3JFYWNoKHNlbGVjdG9yID0+IHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcblxuICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgcHJvY2Vzc0VsZW1lbnQoZWxlbWVudCwgc2VsZWN0b3IpO1xuICAgICAgICBlbGVtZW50RGlzcGxheWVkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeUZpbmRpbmdFbGVtZW50KHNlbGVjdG9yKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChlbGVtZW50RGlzcGxheWVkICYmICFpc1ByZXZpZXcpIHtcbiAgICAgIHdpbmRvdy5jbGV2ZXJ0YXAucmVuZGVyTm90aWZpY2F0aW9uVmlld2VkKHtcbiAgICAgICAgbXNnSWQ6IHRhcmdldGluZ01zZ0pzb24ud3pya19pZCxcbiAgICAgICAgcGl2b3RJZDogdGFyZ2V0aW5nTXNnSnNvbi53enJrX3Bpdm90XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIEpTT04gZGF0YS5cbiAgICogQHBhcmFtIHtPYmplY3R9IHRhcmdldGluZ01zZ0pzb24gLSBUaGUgcG9pbnQgYW5kIGNsaWNrIGNhbXBhaWduIEpTT04gb2JqZWN0LlxuICAgKiBAcGFyYW0ge09iamVjdH0gc2VsZWN0b3IgLSBUaGUgc2VsZWN0b3Igb2JqZWN0LlxuICAgKi9cblxuICBmdW5jdGlvbiBkaXNwYXRjaEpzb25EYXRhKHRhcmdldGluZ01zZ0pzb24sIHNlbGVjdG9yKSB7XG4gICAgY29uc3QgaW5hT2JqID0ge307XG4gICAgaW5hT2JqLm1zZ0lkID0gdGFyZ2V0aW5nTXNnSnNvbi53enJrX2lkO1xuXG4gICAgaWYgKHRhcmdldGluZ01zZ0pzb24ud3pya19waXZvdCkge1xuICAgICAgaW5hT2JqLnBpdm90SWQgPSB0YXJnZXRpbmdNc2dKc29uLnd6cmtfcGl2b3Q7XG4gICAgfVxuXG4gICAgaWYgKHNlbGVjdG9yLmpzb24gIT0gbnVsbCkge1xuICAgICAgaW5hT2JqLmpzb24gPSBzZWxlY3Rvci5qc29uO1xuICAgIH1cblxuICAgIGNvbnN0IGt2UGFpcnNFdmVudCA9IG5ldyBDdXN0b21FdmVudCgnQ1Rfd2ViX25hdGl2ZV9kaXNwbGF5X2J1aWRlcicsIHtcbiAgICAgIGRldGFpbDogaW5hT2JqXG4gICAgfSk7XG4gICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChrdlBhaXJzRXZlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNWYWxpZFVybChzdHJpbmcpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChzdHJpbmcpO1xuICAgICAgcmV0dXJuIEJvb2xlYW4odXJsKTtcbiAgICB9IGNhdGNoIChfZXJyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgX3RyID0gKG1zZywgX3JlZikgPT4ge1xuICAgIGxldCB7XG4gICAgICBkZXZpY2UsXG4gICAgICBzZXNzaW9uLFxuICAgICAgcmVxdWVzdCxcbiAgICAgIGxvZ2dlclxuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IF9kZXZpY2UgPSBkZXZpY2U7XG4gICAgY29uc3QgX3Nlc3Npb24gPSBzZXNzaW9uO1xuICAgIGNvbnN0IF9yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgICBjb25zdCBfbG9nZ2VyID0gbG9nZ2VyO1xuICAgIGxldCBfd2l6Q291bnRlciA9IDA7IC8vIENhbXBhaWduIEhvdXNlIGtlZXBpbmdcblxuICAgIGNvbnN0IGRvQ2FtcEhvdXNlS2VlcGluZyA9IHRhcmdldGluZ01zZ0pzb24gPT4ge1xuICAgICAgY29uc3QgY2FtcGFpZ25JZCA9IHRhcmdldGluZ01zZ0pzb24ud3pya19pZC5zcGxpdCgnXycpWzBdO1xuICAgICAgY29uc3QgdG9kYXkgPSBnZXRUb2RheSgpO1xuXG4gICAgICBjb25zdCBpbmNyQ291bnQgPSAob2JqLCBjYW1wYWlnbklkLCBleGNsdWRlRnJvbUZyZXFDYXBzKSA9PiB7XG4gICAgICAgIGxldCBjdXJyZW50Q291bnQgPSAwO1xuICAgICAgICBsZXQgdG90YWxDb3VudCA9IDA7XG5cbiAgICAgICAgaWYgKG9ialtjYW1wYWlnbklkXSAhPSBudWxsKSB7XG4gICAgICAgICAgY3VycmVudENvdW50ID0gb2JqW2NhbXBhaWduSWRdO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudENvdW50Kys7XG5cbiAgICAgICAgaWYgKG9iai50YyAhPSBudWxsKSB7XG4gICAgICAgICAgdG90YWxDb3VudCA9IG9iai50YztcbiAgICAgICAgfSAvLyBpZiBleGNsdWRlIGZyb20gY2FwcyB0aGVuIGRvbnQgYWRkIHRvIHRvdGFsIGNvdW50c1xuXG5cbiAgICAgICAgaWYgKGV4Y2x1ZGVGcm9tRnJlcUNhcHMgPCAwKSB7XG4gICAgICAgICAgdG90YWxDb3VudCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgb2JqLnRjID0gdG90YWxDb3VudDtcbiAgICAgICAgb2JqW2NhbXBhaWduSWRdID0gY3VycmVudENvdW50O1xuICAgICAgfTtcblxuICAgICAgaWYgKFN0b3JhZ2VNYW5hZ2VyLl9pc0xvY2FsU3RvcmFnZVN1cHBvcnRlZCgpKSB7XG4gICAgICAgIGRlbGV0ZSBzZXNzaW9uU3RvcmFnZVtDQU1QX0NPT0tJRV9OQU1FXTtcbiAgICAgICAgdmFyIGNhbXBUeXBlT2JqID0ge307XG4gICAgICAgIGNvbnN0IGNhbXBPYmogPSBnZXRDYW1wYWlnbk9iamVjdCgpO1xuXG4gICAgICAgIGlmICh0YXJnZXRpbmdNc2dKc29uLmRpc3BsYXkud3RhcmdldF90eXBlID09PSAzICYmIGNhbXBPYmouaGFzT3duUHJvcGVydHkoJ3dpJykpIHtcbiAgICAgICAgICBjYW1wVHlwZU9iaiA9IGNhbXBPYmoud2k7XG4gICAgICAgIH0gZWxzZSBpZiAoKHRhcmdldGluZ01zZ0pzb24uZGlzcGxheS53dGFyZ2V0X3R5cGUgPT09IDAgfHwgdGFyZ2V0aW5nTXNnSnNvbi5kaXNwbGF5Lnd0YXJnZXRfdHlwZSA9PT0gMSkgJiYgY2FtcE9iai5oYXNPd25Qcm9wZXJ0eSgnd3AnKSkge1xuICAgICAgICAgIGNhbXBUeXBlT2JqID0gY2FtcE9iai53cDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYW1wVHlwZU9iaiA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNhbXBPYmouaGFzT3duUHJvcGVydHkoJ2dsb2JhbCcpKSB7XG4gICAgICAgICAgY2FtcFR5cGVPYmoud3AgPSBjYW1wT2JqO1xuICAgICAgICB9IC8vIGdsb2JhbCBzZXNzaW9uIGxpbWl0LiBkZWZhdWx0IGlzIDFcblxuXG4gICAgICAgIGlmICh0YXJnZXRpbmdNc2dKc29uW0RJU1BMQVldLndtYyA9PSBudWxsKSB7XG4gICAgICAgICAgdGFyZ2V0aW5nTXNnSnNvbltESVNQTEFZXS53bWMgPSAxO1xuICAgICAgICB9IC8vIGdsb2JhbCBzZXNzaW9uIGxpbWl0IGZvciB3ZWIgaW5ib3guIGRlZmF1bHQgaXMgMVxuXG5cbiAgICAgICAgaWYgKHRhcmdldGluZ01zZ0pzb25bRElTUExBWV0ud2ltYyA9PSBudWxsKSB7XG4gICAgICAgICAgdGFyZ2V0aW5nTXNnSnNvbltESVNQTEFZXS53aW1jID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBleGNsdWRlRnJvbUZyZXFDYXBzID0gLTE7IC8vIGVmYyAtIEV4Y2x1ZGUgZnJvbSBmcmVxdWVuY3kgY2Fwc1xuXG4gICAgICAgIGxldCBjYW1wYWlnblNlc3Npb25MaW1pdCA9IC0xOyAvLyBtZGMgLSBPbmNlIHBlciBzZXNzaW9uXG5cbiAgICAgICAgbGV0IGNhbXBhaWduRGFpbHlMaW1pdCA9IC0xOyAvLyB0ZGMgLSBPbmNlIHBlciBkYXlcblxuICAgICAgICBsZXQgY2FtcGFpZ25Ub3RhbExpbWl0ID0gLTE7IC8vIHRsYyAtIE9uY2UgcGVyIHVzZXIgZm9yIHRoZSBkdXJhdGlvbiBvZiBjYW1wYWlnblxuXG4gICAgICAgIGxldCB0b3RhbERhaWx5TGltaXQgPSAtMTtcbiAgICAgICAgbGV0IHRvdGFsU2Vzc2lvbkxpbWl0ID0gLTE7IC8vIHdtYyAtIFdlYiBQb3B1cCBHbG9iYWwgU2Vzc2lvbiBMaW1pdFxuXG4gICAgICAgIGxldCB0b3RhbEluYm94U2Vzc2lvbkxpbWl0ID0gLTE7IC8vIHdpbWMgLSBXZWIgSW5ib3ggR2xvYmFsIFNlc3Npb24gTGltaXRcblxuICAgICAgICBpZiAodGFyZ2V0aW5nTXNnSnNvbltESVNQTEFZXS5lZmMgIT0gbnVsbCkge1xuICAgICAgICAgIC8vIGV4Y2x1ZGUgZnJvbSBmcmVxdWVuY3kgY2FwXG4gICAgICAgICAgZXhjbHVkZUZyb21GcmVxQ2FwcyA9IHBhcnNlSW50KHRhcmdldGluZ01zZ0pzb25bRElTUExBWV0uZWZjLCAxMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFyZ2V0aW5nTXNnSnNvbltESVNQTEFZXS5tZGMgIT0gbnVsbCkge1xuICAgICAgICAgIC8vIENhbXBhaWduIFNlc3Npb24gTGltaXRcbiAgICAgICAgICBjYW1wYWlnblNlc3Npb25MaW1pdCA9IHBhcnNlSW50KHRhcmdldGluZ01zZ0pzb25bRElTUExBWV0ubWRjLCAxMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFyZ2V0aW5nTXNnSnNvbltESVNQTEFZXS50ZGMgIT0gbnVsbCkge1xuICAgICAgICAgIC8vIE5vIG9mIHdlYiBwb3B1cHMgaW4gYSBkYXkgcGVyIGNhbXBhaWduXG4gICAgICAgICAgY2FtcGFpZ25EYWlseUxpbWl0ID0gcGFyc2VJbnQodGFyZ2V0aW5nTXNnSnNvbltESVNQTEFZXS50ZGMsIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YXJnZXRpbmdNc2dKc29uW0RJU1BMQVldLnRsYyAhPSBudWxsKSB7XG4gICAgICAgICAgLy8gVG90YWwgbGlmZXRpbWUgY291bnRcbiAgICAgICAgICBjYW1wYWlnblRvdGFsTGltaXQgPSBwYXJzZUludCh0YXJnZXRpbmdNc2dKc29uW0RJU1BMQVldLnRsYywgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRhcmdldGluZ01zZ0pzb25bRElTUExBWV0ud21wICE9IG51bGwpIHtcbiAgICAgICAgICAvLyBObyBvZiBjYW1wYWlnbnMgcGVyIGRheVxuICAgICAgICAgIHRvdGFsRGFpbHlMaW1pdCA9IHBhcnNlSW50KHRhcmdldGluZ01zZ0pzb25bRElTUExBWV0ud21wLCAxMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFyZ2V0aW5nTXNnSnNvbltESVNQTEFZXS53bWMgIT0gbnVsbCkge1xuICAgICAgICAgIC8vIE5vIG9mIGNhbXBhaWducyBwZXIgc2Vzc2lvblxuICAgICAgICAgIHRvdGFsU2Vzc2lvbkxpbWl0ID0gcGFyc2VJbnQodGFyZ2V0aW5nTXNnSnNvbltESVNQTEFZXS53bWMsIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YXJnZXRpbmdNc2dKc29uW0RJU1BMQVldLndpbWMgIT0gbnVsbCkge1xuICAgICAgICAgIC8vIE5vIG9mIGluYm94IGNhbXBhaWducyBwZXIgc2Vzc2lvblxuICAgICAgICAgIHRvdGFsSW5ib3hTZXNzaW9uTGltaXQgPSBwYXJzZUludCh0YXJnZXRpbmdNc2dKc29uW0RJU1BMQVldLndpbWMsIDEwKTtcbiAgICAgICAgfSAvLyBzZXNzaW9uIGxldmVsIGNhcHBpbmdcblxuXG4gICAgICAgIHZhciBzZXNzaW9uT2JqID0gY2FtcFR5cGVPYmpbX3Nlc3Npb24uc2Vzc2lvbklkXTtcblxuICAgICAgICBpZiAoc2Vzc2lvbk9iaikge1xuICAgICAgICAgIGNvbnN0IGNhbXBhaWduU2Vzc2lvbkNvdW50ID0gc2Vzc2lvbk9ialtjYW1wYWlnbklkXTtcbiAgICAgICAgICBjb25zdCB0b3RhbFNlc3Npb25Db3VudCA9IHNlc3Npb25PYmoudGM7IC8vIGRuZFxuXG4gICAgICAgICAgaWYgKGNhbXBhaWduU2Vzc2lvbkNvdW50ID09PSAnZG5kJyAmJiAhJGN0LmRpc21pc3NTcGFtQ29udHJvbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0YXJnZXRpbmdNc2dKc29uW0RJU1BMQVldLnd0YXJnZXRfdHlwZSA9PT0gMykge1xuICAgICAgICAgICAgLy8gSW5ib3ggc2Vzc2lvblxuICAgICAgICAgICAgaWYgKHRvdGFsSW5ib3hTZXNzaW9uTGltaXQgPiAwICYmIHRvdGFsU2Vzc2lvbkNvdW50ID49IHRvdGFsSW5ib3hTZXNzaW9uTGltaXQgJiYgZXhjbHVkZUZyb21GcmVxQ2FwcyA8IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzZXNzaW9uXG4gICAgICAgICAgICBpZiAodG90YWxTZXNzaW9uTGltaXQgPiAwICYmIHRvdGFsU2Vzc2lvbkNvdW50ID49IHRvdGFsU2Vzc2lvbkxpbWl0ICYmIGV4Y2x1ZGVGcm9tRnJlcUNhcHMgPCAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IC8vIGNhbXBhaWduIHNlc3Npb25cblxuXG4gICAgICAgICAgaWYgKGNhbXBhaWduU2Vzc2lvbkxpbWl0ID4gMCAmJiBjYW1wYWlnblNlc3Npb25Db3VudCA+PSBjYW1wYWlnblNlc3Npb25MaW1pdCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXNzaW9uT2JqID0ge307XG4gICAgICAgICAgY2FtcFR5cGVPYmpbX3Nlc3Npb24uc2Vzc2lvbklkXSA9IHNlc3Npb25PYmo7XG4gICAgICAgIH0gLy8gZGFpbHkgbGV2ZWwgY2FwcGluZ1xuXG5cbiAgICAgICAgdmFyIGRhaWx5T2JqID0gY2FtcFR5cGVPYmpbdG9kYXldO1xuXG4gICAgICAgIGlmIChkYWlseU9iaiAhPSBudWxsKSB7XG4gICAgICAgICAgY29uc3QgY2FtcGFpZ25EYWlseUNvdW50ID0gZGFpbHlPYmpbY2FtcGFpZ25JZF07XG4gICAgICAgICAgY29uc3QgdG90YWxEYWlseUNvdW50ID0gZGFpbHlPYmoudGM7IC8vIGRhaWx5XG5cbiAgICAgICAgICBpZiAodG90YWxEYWlseUxpbWl0ID4gMCAmJiB0b3RhbERhaWx5Q291bnQgPj0gdG90YWxEYWlseUxpbWl0ICYmIGV4Y2x1ZGVGcm9tRnJlcUNhcHMgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfSAvLyBjYW1wYWlnbiBkYWlseVxuXG5cbiAgICAgICAgICBpZiAoY2FtcGFpZ25EYWlseUxpbWl0ID4gMCAmJiBjYW1wYWlnbkRhaWx5Q291bnQgPj0gY2FtcGFpZ25EYWlseUxpbWl0KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhaWx5T2JqID0ge307XG4gICAgICAgICAgY2FtcFR5cGVPYmpbdG9kYXldID0gZGFpbHlPYmo7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZ2xvYmFsT2JqID0gY2FtcFR5cGVPYmpbR0xPQkFMXTtcblxuICAgICAgICBpZiAoZ2xvYmFsT2JqICE9IG51bGwpIHtcbiAgICAgICAgICBjb25zdCBjYW1wYWlnblRvdGFsQ291bnQgPSBnbG9iYWxPYmpbY2FtcGFpZ25JZF07IC8vIGNhbXBhaWduIHRvdGFsXG5cbiAgICAgICAgICBpZiAoY2FtcGFpZ25Ub3RhbExpbWl0ID4gMCAmJiBjYW1wYWlnblRvdGFsQ291bnQgPj0gY2FtcGFpZ25Ub3RhbExpbWl0KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdsb2JhbE9iaiA9IHt9O1xuICAgICAgICAgIGNhbXBUeXBlT2JqW0dMT0JBTF0gPSBnbG9iYWxPYmo7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gZGVsYXlcblxuXG4gICAgICBpZiAodGFyZ2V0aW5nTXNnSnNvbltESVNQTEFZXS5kZWxheSAhPSBudWxsICYmIHRhcmdldGluZ01zZ0pzb25bRElTUExBWV0uZGVsYXkgPiAwKSB7XG4gICAgICAgIGNvbnN0IGRlbGF5ID0gdGFyZ2V0aW5nTXNnSnNvbltESVNQTEFZXS5kZWxheTtcbiAgICAgICAgdGFyZ2V0aW5nTXNnSnNvbltESVNQTEFZXS5kZWxheSA9IDA7XG4gICAgICAgIHNldFRpbWVvdXQoX3RyLCBkZWxheSAqIDEwMDAsIG1zZywge1xuICAgICAgICAgIGRldmljZTogX2RldmljZSxcbiAgICAgICAgICBzZXNzaW9uOiBfc2Vzc2lvbixcbiAgICAgICAgICByZXF1ZXN0OiBfcmVxdWVzdCxcbiAgICAgICAgICBsb2dnZXI6IF9sb2dnZXJcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaW5jckNvdW50KHNlc3Npb25PYmosIGNhbXBhaWduSWQsIGV4Y2x1ZGVGcm9tRnJlcUNhcHMpO1xuICAgICAgaW5jckNvdW50KGRhaWx5T2JqLCBjYW1wYWlnbklkLCBleGNsdWRlRnJvbUZyZXFDYXBzKTtcbiAgICAgIGluY3JDb3VudChnbG9iYWxPYmosIGNhbXBhaWduSWQsIGV4Y2x1ZGVGcm9tRnJlcUNhcHMpO1xuICAgICAgbGV0IGNhbXBLZXkgPSAnd3AnO1xuXG4gICAgICBpZiAodGFyZ2V0aW5nTXNnSnNvbltESVNQTEFZXS53dGFyZ2V0X3R5cGUgPT09IDMpIHtcbiAgICAgICAgY2FtcEtleSA9ICd3aSc7XG4gICAgICB9IC8vIGdldCByaWRlIG9mIHN0YWxlIHNlc3Npb25zIGFuZCBkYXkgZW50cmllc1xuXG5cbiAgICAgIGNvbnN0IG5ld0NhbXBPYmogPSB7fTtcbiAgICAgIG5ld0NhbXBPYmpbX3Nlc3Npb24uc2Vzc2lvbklkXSA9IHNlc3Npb25PYmo7XG4gICAgICBuZXdDYW1wT2JqW3RvZGF5XSA9IGRhaWx5T2JqO1xuICAgICAgbmV3Q2FtcE9ialtHTE9CQUxdID0gZ2xvYmFsT2JqO1xuICAgICAgc2F2ZUNhbXBhaWduT2JqZWN0KHtcbiAgICAgICAgW2NhbXBLZXldOiBuZXdDYW1wT2JqXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgZ2V0Q29va2llUGFyYW1zID0gKCkgPT4ge1xuICAgICAgY29uc3QgZ2Nvb2tpZSA9IF9kZXZpY2UuZ2V0R3VpZCgpO1xuXG4gICAgICBjb25zdCBzY29va2llT2JqID0gX3Nlc3Npb24uZ2V0U2Vzc2lvbkNvb2tpZU9iamVjdCgpO1xuXG4gICAgICByZXR1cm4gJyZ0PXdjJmQ9JyArIGVuY29kZVVSSUNvbXBvbmVudChjb21wcmVzc1RvQmFzZTY0KGdjb29raWUgKyAnfCcgKyBzY29va2llT2JqLnAgKyAnfCcgKyBzY29va2llT2JqLnMpKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgc2V0dXBDbGlja0V2ZW50ID0gKG9uQ2xpY2ssIHRhcmdldGluZ01zZ0pzb24sIGNvbnRlbnREaXYsIGRpdklkLCBpc0xlZ2FjeSkgPT4ge1xuICAgICAgaWYgKG9uQ2xpY2sgIT09ICcnICYmIG9uQ2xpY2sgIT0gbnVsbCkge1xuICAgICAgICBsZXQgY3RhRWxlbWVudDtcbiAgICAgICAgbGV0IGpzQ1RBRWxlbWVudHM7XG5cbiAgICAgICAgaWYgKGlzTGVnYWN5KSB7XG4gICAgICAgICAgY3RhRWxlbWVudCA9IGNvbnRlbnREaXY7XG4gICAgICAgIH0gZWxzZSBpZiAoY29udGVudERpdiAhPT0gbnVsbCkge1xuICAgICAgICAgIGpzQ1RBRWxlbWVudHMgPSBjb250ZW50RGl2LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2pzQ1RfQ1RBJyk7XG5cbiAgICAgICAgICBpZiAoanNDVEFFbGVtZW50cyAhPSBudWxsICYmIGpzQ1RBRWxlbWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBjdGFFbGVtZW50ID0ganNDVEFFbGVtZW50c1swXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBqc0Z1bmMgPSB0YXJnZXRpbmdNc2dKc29uLmRpc3BsYXkuanNGdW5jO1xuICAgICAgICBjb25zdCBpc1ByZXZpZXcgPSB0YXJnZXRpbmdNc2dKc29uLmRpc3BsYXkucHJldmlldztcblxuICAgICAgICBpZiAoaXNQcmV2aWV3ID09IG51bGwpIHtcbiAgICAgICAgICBvbkNsaWNrICs9IGdldENvb2tpZVBhcmFtcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGN0YUVsZW1lbnQgIT0gbnVsbCkge1xuICAgICAgICAgIGN0YUVsZW1lbnQub25jbGljayA9ICgpID0+IHtcbiAgICAgICAgICAgIC8vIGludm9rZSBqcyBmdW5jdGlvbiBjYWxsXG4gICAgICAgICAgICBpZiAoanNGdW5jICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgLy8gdHJhY2sgbm90aWZpY2F0aW9uIGNsaWNrZWQgZXZlbnRcbiAgICAgICAgICAgICAgaWYgKGlzUHJldmlldyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgUmVxdWVzdERpc3BhdGNoZXIuZmlyZVJlcXVlc3Qob25DbGljayk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpbnZva2VFeHRlcm5hbEpzKGpzRnVuYywgdGFyZ2V0aW5nTXNnSnNvbik7IC8vIGNsb3NlIGlmcmFtZS4gdXNpbmcgLTEgZm9yIG5vIGNhbXBhaWduSWRcblxuICAgICAgICAgICAgICBjbG9zZUlmcmFtZSgnLTEnLCBkaXZJZCwgX3Nlc3Npb24uc2Vzc2lvbklkKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSAvLyBwYXNzIG9uIHRoZSBnY29va2llfHBhZ2V8c2Nvb2tpZUlkIGZvciBjYXB0dXJpbmcgdGhlIGNsaWNrIGV2ZW50XG5cblxuICAgICAgICAgICAgaWYgKHRhcmdldGluZ01zZ0pzb24uZGlzcGxheS53aW5kb3cgPT09IDEpIHtcbiAgICAgICAgICAgICAgd2luZG93Lm9wZW4ob25DbGljaywgJ19ibGFuaycpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gb25DbGljaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IGludm9rZUV4dGVybmFsSnMgPSAoanNGdW5jLCB0YXJnZXRpbmdNc2dKc29uKSA9PiB7XG4gICAgICBjb25zdCBmdW5jID0gd2luZG93LnBhcmVudFtqc0Z1bmNdO1xuXG4gICAgICBpZiAodHlwZW9mIGZ1bmMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaWYgKHRhcmdldGluZ01zZ0pzb24uZGlzcGxheS5rdiAhPSBudWxsKSB7XG4gICAgICAgICAgZnVuYyh0YXJnZXRpbmdNc2dKc29uLmRpc3BsYXkua3YpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZ1bmMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBzZXR1cENsaWNrVXJsID0gKG9uQ2xpY2ssIHRhcmdldGluZ01zZ0pzb24sIGNvbnRlbnREaXYsIGRpdklkLCBpc0xlZ2FjeSkgPT4ge1xuICAgICAgaW5jcmVtZW50SW1wcmVzc2lvbih0YXJnZXRpbmdNc2dKc29uKTtcbiAgICAgIHNldHVwQ2xpY2tFdmVudChvbkNsaWNrLCB0YXJnZXRpbmdNc2dKc29uLCBjb250ZW50RGl2LCBkaXZJZCwgaXNMZWdhY3kpO1xuICAgIH07XG5cbiAgICBjb25zdCBpbmNyZW1lbnRJbXByZXNzaW9uID0gdGFyZ2V0aW5nTXNnSnNvbiA9PiB7XG4gICAgICBjb25zdCBkYXRhID0ge307XG4gICAgICBkYXRhLnR5cGUgPSAnZXZlbnQnO1xuICAgICAgZGF0YS5ldnROYW1lID0gTk9USUZJQ0FUSU9OX1ZJRVdFRDtcbiAgICAgIGRhdGEuZXZ0RGF0YSA9IHtcbiAgICAgICAgW1daUktfSURdOiB0YXJnZXRpbmdNc2dKc29uLnd6cmtfaWRcbiAgICAgIH07XG5cbiAgICAgIGlmICh0YXJnZXRpbmdNc2dKc29uLnd6cmtfcGl2b3QpIHtcbiAgICAgICAgZGF0YS5ldnREYXRhID0geyAuLi5kYXRhLmV2dERhdGEsXG4gICAgICAgICAgd3pya19waXZvdDogdGFyZ2V0aW5nTXNnSnNvbi53enJrX3Bpdm90XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIF9yZXF1ZXN0LnByb2Nlc3NFdmVudChkYXRhKTtcbiAgICB9O1xuXG4gICAgY29uc3QgcmVuZGVyUGVyc29uYWxpc2F0aW9uQmFubmVyID0gdGFyZ2V0aW5nTXNnSnNvbiA9PiB7XG4gICAgICB2YXIgX3RhcmdldGluZ01zZ0pzb24kZGlzO1xuXG4gICAgICBpZiAoY3VzdG9tRWxlbWVudHMuZ2V0KCdjdC13ZWItcGVyc29uYWxpc2F0aW9uLWJhbm5lcicpID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdjdC13ZWItcGVyc29uYWxpc2F0aW9uLWJhbm5lcicsIENUV2ViUGVyc29uYWxpc2F0aW9uQmFubmVyKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZGl2SWQgPSAoX3RhcmdldGluZ01zZ0pzb24kZGlzID0gdGFyZ2V0aW5nTXNnSnNvbi5kaXNwbGF5LmRpdklkKSAhPT0gbnVsbCAmJiBfdGFyZ2V0aW5nTXNnSnNvbiRkaXMgIT09IHZvaWQgMCA/IF90YXJnZXRpbmdNc2dKc29uJGRpcyA6IHRhcmdldGluZ01zZ0pzb24uZGlzcGxheS5kaXZTZWxlY3RvcjtcbiAgICAgIGNvbnN0IGJhbm5lckVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY3Qtd2ViLXBlcnNvbmFsaXNhdGlvbi1iYW5uZXInKTtcbiAgICAgIGJhbm5lckVsLm1zZ0lkID0gdGFyZ2V0aW5nTXNnSnNvbi53enJrX2lkO1xuICAgICAgYmFubmVyRWwucGl2b3RJZCA9IHRhcmdldGluZ01zZ0pzb24ud3pya19waXZvdDtcbiAgICAgIGJhbm5lckVsLmRpdkhlaWdodCA9IHRhcmdldGluZ01zZ0pzb24uZGlzcGxheS5kaXZIZWlnaHQ7XG4gICAgICBiYW5uZXJFbC5kZXRhaWxzID0gdGFyZ2V0aW5nTXNnSnNvbi5kaXNwbGF5LmRldGFpbHNbMF07XG4gICAgICBjb25zdCBjb250YWluZXJFbCA9IHRhcmdldGluZ01zZ0pzb24uZGlzcGxheS5kaXZJZCA/IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRpdklkKSA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZGl2SWQpO1xuICAgICAgY29udGFpbmVyRWwuaW5uZXJIVE1MID0gJyc7XG4gICAgICBjb250YWluZXJFbC5hcHBlbmRDaGlsZChiYW5uZXJFbCk7XG4gICAgfTtcblxuICAgIGNvbnN0IHJlbmRlclBlcnNvbmFsaXNhdGlvbkNhcm91c2VsID0gdGFyZ2V0aW5nTXNnSnNvbiA9PiB7XG4gICAgICB2YXIgX3RhcmdldGluZ01zZ0pzb24kZGlzMjtcblxuICAgICAgaWYgKGN1c3RvbUVsZW1lbnRzLmdldCgnY3Qtd2ViLXBlcnNvbmFsaXNhdGlvbi1jYXJvdXNlbCcpID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdjdC13ZWItcGVyc29uYWxpc2F0aW9uLWNhcm91c2VsJywgQ1RXZWJQZXJzb25hbGlzYXRpb25DYXJvdXNlbCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRpdklkID0gKF90YXJnZXRpbmdNc2dKc29uJGRpczIgPSB0YXJnZXRpbmdNc2dKc29uLmRpc3BsYXkuZGl2SWQpICE9PSBudWxsICYmIF90YXJnZXRpbmdNc2dKc29uJGRpczIgIT09IHZvaWQgMCA/IF90YXJnZXRpbmdNc2dKc29uJGRpczIgOiB0YXJnZXRpbmdNc2dKc29uLmRpc3BsYXkuZGl2U2VsZWN0b3I7XG4gICAgICBjb25zdCBjYXJvdXNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2N0LXdlYi1wZXJzb25hbGlzYXRpb24tY2Fyb3VzZWwnKTtcbiAgICAgIGNhcm91c2VsLnRhcmdldCA9IHRhcmdldGluZ01zZ0pzb247XG4gICAgICBjb25zdCBjb250YWluZXIgPSB0YXJnZXRpbmdNc2dKc29uLmRpc3BsYXkuZGl2SWQgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkaXZJZCkgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGRpdklkKTtcbiAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjYXJvdXNlbCk7XG4gICAgfTtcblxuICAgIGNvbnN0IHJlbmRlclBvcFVwSW1hZ2VPbmx5ID0gdGFyZ2V0aW5nTXNnSnNvbiA9PiB7XG4gICAgICBjb25zdCBkaXZJZCA9ICd3enJrSW1hZ2VPbmx5RGl2JztcbiAgICAgIGNvbnN0IHBvcHVwSW1hZ2VPbmx5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY3Qtd2ViLXBvcHVwLWltYWdlb25seScpO1xuICAgICAgcG9wdXBJbWFnZU9ubHkuc2Vzc2lvbiA9IF9zZXNzaW9uO1xuICAgICAgcG9wdXBJbWFnZU9ubHkudGFyZ2V0ID0gdGFyZ2V0aW5nTXNnSnNvbjtcbiAgICAgIGNvbnN0IGNvbnRhaW5lckVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGl2SWQpO1xuICAgICAgY29udGFpbmVyRWwuaW5uZXJIVE1MID0gJyc7XG4gICAgICBjb250YWluZXJFbC5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgICBjb250YWluZXJFbC5hcHBlbmRDaGlsZChwb3B1cEltYWdlT25seSk7XG4gICAgfTtcblxuICAgIGNvbnN0IHJlbmRlckZvb3Rlck5vdGlmaWNhdGlvbiA9IHRhcmdldGluZ01zZ0pzb24gPT4ge1xuICAgICAgY29uc3QgY2FtcGFpZ25JZCA9IHRhcmdldGluZ01zZ0pzb24ud3pya19pZC5zcGxpdCgnXycpWzBdO1xuICAgICAgY29uc3QgZGlzcGxheU9iaiA9IHRhcmdldGluZ01zZ0pzb24uZGlzcGxheTtcblxuICAgICAgaWYgKGRpc3BsYXlPYmoud3RhcmdldF90eXBlID09PSAyKSB7XG4gICAgICAgIC8vIEhhbmRsaW5nIFdlYiBOYXRpdmUgZGlzcGxheVxuICAgICAgICAvLyBMb2dpYyBmb3Iga3YgcGFpciBkYXRhXG4gICAgICAgIGlmICh0YXJnZXRpbmdNc2dKc29uLm1zZ0NvbnRlbnQudHlwZSA9PT0gMSkge1xuICAgICAgICAgIGNvbnN0IGluYU9iaiA9IHt9O1xuICAgICAgICAgIGluYU9iai5tc2dJZCA9IHRhcmdldGluZ01zZ0pzb24ud3pya19pZDtcblxuICAgICAgICAgIGlmICh0YXJnZXRpbmdNc2dKc29uLnd6cmtfcGl2b3QpIHtcbiAgICAgICAgICAgIGluYU9iai5waXZvdElkID0gdGFyZ2V0aW5nTXNnSnNvbi53enJrX3Bpdm90O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0YXJnZXRpbmdNc2dKc29uLm1zZ0NvbnRlbnQua3YgIT0gbnVsbCkge1xuICAgICAgICAgICAgaW5hT2JqLmt2ID0gdGFyZ2V0aW5nTXNnSnNvbi5tc2dDb250ZW50Lmt2O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGt2UGFpcnNFdmVudCA9IG5ldyBDdXN0b21FdmVudCgnQ1Rfd2ViX25hdGl2ZV9kaXNwbGF5Jywge1xuICAgICAgICAgICAgZGV0YWlsOiBpbmFPYmpcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGt2UGFpcnNFdmVudCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChkaXNwbGF5T2JqLmxheW91dCA9PT0gMSkge1xuICAgICAgICAvLyBIYW5kbGluZyBXZWIgRXhpdCBJbnRlbnRcbiAgICAgICAgcmV0dXJuIHNob3dFeGl0SW50ZW50KHVuZGVmaW5lZCwgdGFyZ2V0aW5nTXNnSnNvbik7XG4gICAgICB9XG5cbiAgICAgIGlmIChkaXNwbGF5T2JqLmxheW91dCA9PT0gMykge1xuICAgICAgICAvLyBIYW5kbGluZyBXZWIgUG9wdXAgSW1hZ2UgT25seVxuICAgICAgICBjb25zdCBkaXZJZCA9ICd3enJrSW1hZ2VPbmx5RGl2JztcblxuICAgICAgICBpZiAoZG9DYW1wSG91c2VLZWVwaW5nKHRhcmdldGluZ01zZ0pzb24pID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkY3QuZGlzbWlzc1NwYW1Db250cm9sICYmIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRpdklkKSAhPSBudWxsKSB7XG4gICAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRpdklkKTtcbiAgICAgICAgICBlbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICB9IC8vIEltYWdlT25seSBjYW1wYWlnbiBhbmQgSW50ZXJzdGl0aWFsL0V4aXQgSW50ZW50IHNob3VsZG4ndCBjb2V4aXN0XG5cblxuICAgICAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGl2SWQpICE9IG51bGwgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ludGVudFByZXZpZXcnKSAhPSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbXNnRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIG1zZ0Rpdi5pZCA9IGRpdklkO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG1zZ0Rpdik7XG5cbiAgICAgICAgaWYgKGN1c3RvbUVsZW1lbnRzLmdldCgnY3Qtd2ViLXBvcHVwLWltYWdlb25seScpID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ2N0LXdlYi1wb3B1cC1pbWFnZW9ubHknLCBDVFdlYlBvcHVwSW1hZ2VPbmx5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZW5kZXJQb3BVcEltYWdlT25seSh0YXJnZXRpbmdNc2dKc29uKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRvQ2FtcEhvdXNlS2VlcGluZyh0YXJnZXRpbmdNc2dKc29uKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBkaXZJZCA9ICd3aXpQYXJEaXYnICsgZGlzcGxheU9iai5sYXlvdXQ7XG5cbiAgICAgIGlmICgkY3QuZGlzbWlzc1NwYW1Db250cm9sICYmIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRpdklkKSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkaXZJZCk7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkaXZJZCkgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICRjdC5jYW1wYWlnbkRpdk1hcFtjYW1wYWlnbklkXSA9IGRpdklkO1xuICAgICAgY29uc3QgaXNCYW5uZXIgPSBkaXNwbGF5T2JqLmxheW91dCA9PT0gMjtcbiAgICAgIGNvbnN0IG1zZ0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgbXNnRGl2LmlkID0gZGl2SWQ7XG4gICAgICBjb25zdCB2aWV3SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgY29uc3Qgdmlld1dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICBsZXQgbGVnYWN5ID0gZmFsc2U7XG5cbiAgICAgIGlmICghaXNCYW5uZXIpIHtcbiAgICAgICAgY29uc3QgbWFyZ2luQm90dG9tID0gdmlld0hlaWdodCAqIDUgLyAxMDA7XG4gICAgICAgIHZhciBjb250ZW50SGVpZ2h0ID0gMTA7XG4gICAgICAgIGxldCByaWdodCA9IHZpZXdXaWR0aCAqIDUgLyAxMDA7XG4gICAgICAgIGxldCBib3R0b21Qb3NpdGlvbiA9IGNvbnRlbnRIZWlnaHQgKyBtYXJnaW5Cb3R0b207XG4gICAgICAgIGxldCB3aWR0aCA9IHZpZXdXaWR0aCAqIDMwIC8gMTAwICsgMjA7XG4gICAgICAgIGxldCB3aWR0aFBlcmN0ID0gJ3dpZHRoOjMwJTsnOyAvLyBmb3Igc21hbGwgZGV2aWNlcyAgLSBtb2JpbGUgcGhvbmVzXG5cbiAgICAgICAgaWYgKCgvbW9iaWxlL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSB8fCAvbWluaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpICYmIC9pUGFkL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICB3aWR0aCA9IHZpZXdXaWR0aCAqIDg1IC8gMTAwICsgMjA7XG4gICAgICAgICAgcmlnaHQgPSB2aWV3V2lkdGggKiA1IC8gMTAwO1xuICAgICAgICAgIGJvdHRvbVBvc2l0aW9uID0gdmlld0hlaWdodCAqIDUgLyAxMDA7XG4gICAgICAgICAgd2lkdGhQZXJjdCA9ICd3aWR0aDo4MCU7JzsgLy8gbWVkaXVtIGRldmljZXMgLSB0YWJsZXRzXG4gICAgICAgIH0gZWxzZSBpZiAoJ29udG91Y2hzdGFydCcgaW4gd2luZG93IHx8IC90YWJsZXQvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICAgICAgd2lkdGggPSB2aWV3V2lkdGggKiA1MCAvIDEwMCArIDIwO1xuICAgICAgICAgIHJpZ2h0ID0gdmlld1dpZHRoICogNSAvIDEwMDtcbiAgICAgICAgICBib3R0b21Qb3NpdGlvbiA9IHZpZXdIZWlnaHQgKiA1IC8gMTAwO1xuICAgICAgICAgIHdpZHRoUGVyY3QgPSAnd2lkdGg6NTAlOyc7XG4gICAgICAgIH0gLy8gbGVnYWN5IGZvb3RlciBub3RpZlxuXG5cbiAgICAgICAgaWYgKGRpc3BsYXlPYmoucHJvdG8gPT0gbnVsbCkge1xuICAgICAgICAgIGxlZ2FjeSA9IHRydWU7XG4gICAgICAgICAgbXNnRGl2LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnZGlzcGxheTpibG9jaztvdmVyZmxvdzpoaWRkZW47IGJvdHRvbTonICsgYm90dG9tUG9zaXRpb24gKyAncHggIWltcG9ydGFudDt3aWR0aDonICsgd2lkdGggKyAncHggIWltcG9ydGFudDtyaWdodDonICsgcmlnaHQgKyAncHggIWltcG9ydGFudDtwb3NpdGlvbjpmaXhlZDt6LWluZGV4OjIxNDc0ODM2NDc7Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbXNnRGl2LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCB3aWR0aFBlcmN0ICsgZGlzcGxheU9iai5pRnJhbWVTdHlsZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1zZ0Rpdi5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgZGlzcGxheU9iai5pRnJhbWVTdHlsZSk7XG4gICAgICB9XG5cbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobXNnRGl2KTtcbiAgICAgIGNvbnN0IGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgICAgY29uc3QgYm9yZGVyUmFkaXVzID0gZGlzcGxheU9iai5iciA9PT0gZmFsc2UgPyAnMCcgOiAnOCc7XG4gICAgICBpZnJhbWUuZnJhbWVib3JkZXIgPSAnMHB4JztcbiAgICAgIGlmcmFtZS5tYXJnaW5oZWlnaHQgPSAnMHB4JztcbiAgICAgIGlmcmFtZS5tYXJnaW53aWR0aCA9ICcwcHgnO1xuICAgICAgaWZyYW1lLnNjcm9sbGluZyA9ICdubyc7XG4gICAgICBpZnJhbWUuaWQgPSAnd2l6LWlmcmFtZSc7XG4gICAgICBjb25zdCBvbkNsaWNrID0gdGFyZ2V0aW5nTXNnSnNvbi5kaXNwbGF5Lm9uQ2xpY2s7XG4gICAgICBsZXQgcG9pbnRlckNzcyA9ICcnO1xuXG4gICAgICBpZiAob25DbGljayAhPT0gJycgJiYgb25DbGljayAhPSBudWxsKSB7XG4gICAgICAgIHBvaW50ZXJDc3MgPSAnY3Vyc29yOnBvaW50ZXI7JztcbiAgICAgIH1cblxuICAgICAgaWYgKGRpc3BsYXlPYmoucHJldmlldyAmJiBkaXNwbGF5T2JqWydjdXN0b20tZWRpdG9yJ10pIHtcbiAgICAgICAgaWZyYW1lLnNhbmRib3ggPSAnYWxsb3ctc2NyaXB0cyBhbGxvdy1wb3B1cHMgYWxsb3ctcG9wdXBzLXRvLWVzY2FwZS1zYW5kYm94JztcbiAgICAgIH1cblxuICAgICAgbGV0IGh0bWw7IC8vIGRpcmVjdCBodG1sXG5cbiAgICAgIGlmICh0YXJnZXRpbmdNc2dKc29uLm1zZ0NvbnRlbnQudHlwZSA9PT0gMSkge1xuICAgICAgICBodG1sID0gdGFyZ2V0aW5nTXNnSnNvbi5tc2dDb250ZW50Lmh0bWw7XG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoLyMjY2FtcGFpZ25JZCMjL2csIGNhbXBhaWduSWQpO1xuICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKC8jI2NhbXBhaWduSWRfYmF0Y2hJZCMjL2csIHRhcmdldGluZ01zZ0pzb24ud3pya19pZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBjc3MgPSAnJyArICc8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+JyArICdib2R5e21hcmdpbjowO3BhZGRpbmc6MDt9JyArICcjY29udGVudERpdi53enJre292ZXJmbG93OmhpZGRlbjtwYWRkaW5nOjA7dGV4dC1hbGlnbjpjZW50ZXI7JyArIHBvaW50ZXJDc3MgKyAnfScgKyAnI2NvbnRlbnREaXYud3pyayB0ZHtwYWRkaW5nOjE1cHggMTBweDt9JyArICcud3pya1BQdGl0bGV7Zm9udC13ZWlnaHQ6IGJvbGQ7Zm9udC1zaXplOiAxNnB4O2ZvbnQtZmFtaWx5OmFyaWFsO3BhZGRpbmctYm90dG9tOjEwcHg7d29yZC1icmVhazogYnJlYWstd29yZDt9JyArICcud3pya1BQZHNjcntmb250LXNpemU6IDE0cHg7Zm9udC1mYW1pbHk6YXJpYWw7bGluZS1oZWlnaHQ6MTZweDt3b3JkLWJyZWFrOiBicmVhay13b3JkO2Rpc3BsYXk6aW5saW5lLWJsb2NrO30nICsgJy5QTDE1e3BhZGRpbmctbGVmdDoxNXB4O30nICsgJy53enJrUFB3YXJwe21hcmdpbjoyMHB4IDIwcHggMCA1cHg7cGFkZGluZzowcHg7Ym9yZGVyLXJhZGl1czogJyArIGJvcmRlclJhZGl1cyArICdweDtib3gtc2hhZG93OiAxcHggMXB4IDVweCAjODg4ODg4O30nICsgJ2Eud3pya0Nsb3Nle2N1cnNvcjpwb2ludGVyO3Bvc2l0aW9uOiBhYnNvbHV0ZTt0b3A6IDExcHg7cmlnaHQ6IDExcHg7ei1pbmRleDogMjE0NzQ4MzY0Nztmb250LXNpemU6MTlweDtmb250LWZhbWlseTphcmlhbDtmb250LXdlaWdodDpib2xkO3RleHQtZGVjb3JhdGlvbjogbm9uZTt3aWR0aDogMjVweDsvKmhlaWdodDogMjVweDsqL3RleHQtYWxpZ246IGNlbnRlcjsgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lOyBsaW5lLWhlaWdodDogMjVweDsnICsgJ2JhY2tncm91bmQ6ICMzNTM1MzU7Ym9yZGVyOiAjZmZmIDJweCBzb2xpZDtib3JkZXItcmFkaXVzOiAxMDAlO2JveC1zaGFkb3c6ICM3NzcgMnB4IDJweCAycHg7Y29sb3I6I2ZmZjt9JyArICdhOmhvdmVyLnd6cmtDbG9zZXtiYWNrZ3JvdW5kLWNvbG9yOiNkMTkxNGEgIWltcG9ydGFudDtjb2xvcjojZmZmICFpbXBvcnRhbnQ7IC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTt9JyArICd0ZHt2ZXJ0aWNhbC1hbGlnbjp0b3A7fScgKyAndGQuaW1nVGR7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czo4cHg7Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czo4cHg7fScgKyAnPC9zdHlsZT4nO1xuICAgICAgICBsZXQgYmdDb2xvciwgdGV4dENvbG9yLCBidG5CZywgbGVmdFRkLCBidENvbG9yO1xuXG4gICAgICAgIGlmICh0YXJnZXRpbmdNc2dKc29uLmRpc3BsYXkudGhlbWUgPT09ICdkYXJrJykge1xuICAgICAgICAgIGJnQ29sb3IgPSAnIzJkMmQyZSc7XG4gICAgICAgICAgdGV4dENvbG9yID0gJyNlYWVhZWEnO1xuICAgICAgICAgIGJ0bkJnID0gJyMzNTM1MzUnO1xuICAgICAgICAgIGxlZnRUZCA9ICcjMzUzNTM1JztcbiAgICAgICAgICBidENvbG9yID0gJyNmZmZmZmYnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJnQ29sb3IgPSAnI2ZmZmZmZic7XG4gICAgICAgICAgdGV4dENvbG9yID0gJyMwMDAwMDAnO1xuICAgICAgICAgIGxlZnRUZCA9ICcjZjRmNGY0JztcbiAgICAgICAgICBidG5CZyA9ICcjYTVhNmE2JztcbiAgICAgICAgICBidENvbG9yID0gJyNmZmZmZmYnO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdGl0bGVUZXh0ID0gdGFyZ2V0aW5nTXNnSnNvbi5tc2dDb250ZW50LnRpdGxlO1xuICAgICAgICBjb25zdCBkZXNjcmlwdGlvblRleHQgPSB0YXJnZXRpbmdNc2dKc29uLm1zZ0NvbnRlbnQuZGVzY3JpcHRpb247XG4gICAgICAgIGxldCBpbWFnZVRkID0gJyc7XG5cbiAgICAgICAgaWYgKHRhcmdldGluZ01zZ0pzb24ubXNnQ29udGVudC5pbWFnZVVybCAhPSBudWxsICYmIHRhcmdldGluZ01zZ0pzb24ubXNnQ29udGVudC5pbWFnZVVybCAhPT0gJycpIHtcbiAgICAgICAgICBpbWFnZVRkID0gXCI8dGQgY2xhc3M9J2ltZ1RkJyBzdHlsZT0nYmFja2dyb3VuZC1jb2xvcjpcIiArIGxlZnRUZCArIFwiJz48aW1nIHNyYz0nXCIgKyB0YXJnZXRpbmdNc2dKc29uLm1zZ0NvbnRlbnQuaW1hZ2VVcmwgKyBcIicgaGVpZ2h0PSc2MCcgd2lkdGg9JzYwJz48L3RkPlwiO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgb25DbGlja1N0ciA9ICdwYXJlbnQuJFdaUktfV1IuY2xvc2VJZnJhbWUoJyArIGNhbXBhaWduSWQgKyBcIiwnXCIgKyBkaXZJZCArIFwiJyk7XCI7XG4gICAgICAgIGNvbnN0IHRpdGxlID0gXCI8ZGl2IGNsYXNzPSd3enJrUFB3YXJwJyBzdHlsZT0nY29sb3I6XCIgKyB0ZXh0Q29sb3IgKyAnO2JhY2tncm91bmQtY29sb3I6JyArIGJnQ29sb3IgKyBcIjsnPlwiICsgXCI8YSBocmVmPSdqYXZhc2NyaXB0OnZvaWQoMCk7JyBvbmNsaWNrPVwiICsgb25DbGlja1N0ciArIFwiIGNsYXNzPSd3enJrQ2xvc2UnIHN0eWxlPSdiYWNrZ3JvdW5kLWNvbG9yOlwiICsgYnRuQmcgKyAnO2NvbG9yOicgKyBidENvbG9yICsgXCInPiZ0aW1lczs8L2E+XCIgKyBcIjxkaXYgaWQ9J2NvbnRlbnREaXYnIGNsYXNzPSd3enJrJz5cIiArIFwiPHRhYmxlIGNlbGxwYWRkaW5nPScwJyBjZWxsc3BhY2luZz0nMCcgYm9yZGVyPScwJz5cIiArIC8vIFwiPHRyPjx0ZCBjb2xzcGFuPScyJz48L3RkPjwvdHI+XCIrXG4gICAgICAgICc8dHI+JyArIGltYWdlVGQgKyBcIjx0ZCBzdHlsZT0ndmVydGljYWwtYWxpZ246dG9wOyc+XCIgKyBcIjxkaXYgY2xhc3M9J3d6cmtQUHRpdGxlJyBzdHlsZT0nY29sb3I6XCIgKyB0ZXh0Q29sb3IgKyBcIic+XCIgKyB0aXRsZVRleHQgKyAnPC9kaXY+JztcbiAgICAgICAgY29uc3QgYm9keSA9IFwiPGRpdiBjbGFzcz0nd3pya1BQZHNjcicgc3R5bGU9J2NvbG9yOlwiICsgdGV4dENvbG9yICsgXCInPlwiICsgZGVzY3JpcHRpb25UZXh0ICsgJzxkaXY+PC90ZD48L3RyPjwvdGFibGU+PC9kaXY+JztcbiAgICAgICAgaHRtbCA9IGNzcyArIHRpdGxlICsgYm9keTtcbiAgICAgIH1cblxuICAgICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnei1pbmRleDogMjE0NzQ4MzY0NzsgZGlzcGxheTpibG9jazsgd2lkdGg6IDEwMCUgIWltcG9ydGFudDsgYm9yZGVyOjBweCAhaW1wb3J0YW50OyBib3JkZXItY29sb3I6bm9uZSAhaW1wb3J0YW50OycpO1xuICAgICAgbXNnRGl2LmFwcGVuZENoaWxkKGlmcmFtZSk7IC8vIERpc3BhdGNoIGV2ZW50IGZvciBwb3B1cCBib3gvYmFubmVyIGNsb3NlXG5cbiAgICAgIGNvbnN0IGNsb3NlQ2FtcGFpZ24gPSBuZXcgRXZlbnQoJ0NUX2NhbXBhaWduX3JlbmRlcmVkJyk7XG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGNsb3NlQ2FtcGFpZ24pO1xuXG4gICAgICBpZiAoZGlzcGxheU9ialsnY3VzdG9tLWVkaXRvciddKSB7XG4gICAgICAgIGh0bWwgPSBhcHBlbmRTY3JpcHRGb3JDdXN0b21FdmVudCh0YXJnZXRpbmdNc2dKc29uLCBodG1sKTtcbiAgICAgIH1cblxuICAgICAgaWZyYW1lLnNyY2RvYyA9IGh0bWw7XG5cbiAgICAgIGNvbnN0IGFkanVzdElGcmFtZUhlaWdodCA9ICgpID0+IHtcbiAgICAgICAgLy8gYWRqdXN0IGlmcmFtZSBhbmQgYm9keSBoZWlnaHQgb2YgaHRtbCBpbnNpZGUgY29ycmVjdGx5XG4gICAgICAgIGNvbnRlbnRIZWlnaHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2l6LWlmcmFtZScpLmNvbnRlbnREb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGVudERpdicpLnNjcm9sbEhlaWdodDtcblxuICAgICAgICBpZiAoZGlzcGxheU9ialsnY3VzdG9tLWVkaXRvciddICE9PSB0cnVlICYmICFpc0Jhbm5lcikge1xuICAgICAgICAgIGNvbnRlbnRIZWlnaHQgKz0gMjU7XG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2l6LWlmcmFtZScpLmNvbnRlbnREb2N1bWVudC5ib2R5LnN0eWxlLm1hcmdpbiA9ICcwcHgnO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2l6LWlmcmFtZScpLnN0eWxlLmhlaWdodCA9IGNvbnRlbnRIZWlnaHQgKyAncHgnO1xuICAgICAgfTtcblxuICAgICAgY29uc3QgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGlmICh1YS5pbmRleE9mKCdzYWZhcmknKSAhPT0gLTEpIHtcbiAgICAgICAgaWYgKHVhLmluZGV4T2YoJ2Nocm9tZScpID4gLTEpIHtcbiAgICAgICAgICBpZnJhbWUub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgYWRqdXN0SUZyYW1lSGVpZ2h0KCk7XG4gICAgICAgICAgICBjb25zdCBjb250ZW50RGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dpei1pZnJhbWUnKS5jb250ZW50RG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRlbnREaXYnKTtcbiAgICAgICAgICAgIHNldHVwQ2xpY2tVcmwob25DbGljaywgdGFyZ2V0aW5nTXNnSnNvbiwgY29udGVudERpdiwgZGl2SWQsIGxlZ2FjeSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZXQgaW5Eb2MgPSBpZnJhbWUuY29udGVudERvY3VtZW50IHx8IGlmcmFtZS5jb250ZW50V2luZG93O1xuICAgICAgICAgIGlmIChpbkRvYy5kb2N1bWVudCkgaW5Eb2MgPSBpbkRvYy5kb2N1bWVudDsgLy8gc2FmYXJpIGlwaG9uZSA3KyBuZWVkcyB0aGlzLlxuXG4gICAgICAgICAgY29uc3QgX3RpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGluRG9jLnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChfdGltZXIpOyAvLyBhZGp1c3QgaWZyYW1lIGFuZCBib2R5IGhlaWdodCBvZiBodG1sIGluc2lkZSBjb3JyZWN0bHlcblxuICAgICAgICAgICAgICBhZGp1c3RJRnJhbWVIZWlnaHQoKTtcbiAgICAgICAgICAgICAgY29uc3QgY29udGVudERpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3aXotaWZyYW1lJykuY29udGVudERvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250ZW50RGl2Jyk7XG4gICAgICAgICAgICAgIHNldHVwQ2xpY2tVcmwob25DbGljaywgdGFyZ2V0aW5nTXNnSnNvbiwgY29udGVudERpdiwgZGl2SWQsIGxlZ2FjeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWZyYW1lLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAvLyBhZGp1c3QgaWZyYW1lIGFuZCBib2R5IGhlaWdodCBvZiBodG1sIGluc2lkZSBjb3JyZWN0bHlcbiAgICAgICAgICBhZGp1c3RJRnJhbWVIZWlnaHQoKTtcbiAgICAgICAgICBjb25zdCBjb250ZW50RGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dpei1pZnJhbWUnKS5jb250ZW50RG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRlbnREaXYnKTtcbiAgICAgICAgICBzZXR1cENsaWNrVXJsKG9uQ2xpY2ssIHRhcmdldGluZ01zZ0pzb24sIGNvbnRlbnREaXYsIGRpdklkLCBsZWdhY3kpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBhcHBlbmRTY3JpcHRGb3JDdXN0b21FdmVudCA9ICh0YXJnZXRpbmdNc2dKc29uLCBodG1sKSA9PiB7XG4gICAgICBjb25zdCBzY3JpcHQgPSBcIjxzY3JpcHQ+XFxuICAgICAgY29uc3QgY3RfX2NhbWFwaWduSWQgPSAnXCIuY29uY2F0KHRhcmdldGluZ01zZ0pzb24ud3pya19pZCwgXCInO1xcbiAgICAgIGNvbnN0IGN0X19mb3JtYXRWYWwgPSAodikgPT4ge1xcbiAgICAgICAgICByZXR1cm4gdiAmJiB2LnRyaW0oKS5zdWJzdHJpbmcoMCwgMjApO1xcbiAgICAgIH1cXG4gICAgICBjb25zdCBjdF9fcGFyZW50T3JpZ2luID0gIHdpbmRvdy5wYXJlbnQub3JpZ2luO1xcbiAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcXG4gICAgICAgIGNvbnN0IGVsZW0gPSBldmVudC50YXJnZXQuY2xvc2VzdD8uKCdhW3d6cmtfYzJhXSwgYnV0dG9uW3d6cmtfYzJhXScpO1xcbiAgICAgICAgaWYgKGVsZW0pIHtcXG4gICAgICAgICAgICBjb25zdCB7aW5uZXJUZXh0LCBpZCwgbmFtZSwgdmFsdWUsIGhyZWZ9ID0gZWxlbTtcXG4gICAgICAgICAgICBjb25zdCBjbGlja0F0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZSgnb25jbGljaycpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKCdjbGljaycpO1xcbiAgICAgICAgICAgIGNvbnN0IG9uY2xpY2tVUkwgPSBjbGlja0F0dHI/Lm1hdGNoKC8od2luZG93Lm9wZW4pWyhdKFxcXCJ8JykoLiopKFxcXCJ8JywpLyk/LlszXSB8fCBjbGlja0F0dHI/Lm1hdGNoKC8obG9jYXRpb24uaHJlZiAqPSAqKShcXFwifCcpKC4qKShcXFwifCcpLyk/LlszXTtcXG4gICAgICAgICAgICBjb25zdCBwcm9wcyA9IHtpbm5lclRleHQsIGlkLCBuYW1lLCB2YWx1ZX07XFxuICAgICAgICAgICAgbGV0IG1zZ0NUa3YgPSBPYmplY3Qua2V5cyhwcm9wcykucmVkdWNlKChhY2MsIGMpID0+IHtcXG4gICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0dGVkVmFsID0gY3RfX2Zvcm1hdFZhbChwcm9wc1tjXSk7XFxuICAgICAgICAgICAgICAgIGZvcm1hdHRlZFZhbCAmJiAoYWNjWyd3enJrX2NsaWNrXycgKyBjXSA9IGZvcm1hdHRlZFZhbCk7XFxuICAgICAgICAgICAgICAgIHJldHVybiBhY2M7XFxuICAgICAgICAgICAgfSwge30pO1xcbiAgICAgICAgICAgIGlmKG9uY2xpY2tVUkwpIHsgbXNnQ1Rrdlsnd3pya19jbGlja18nICsgJ3VybCddID0gb25jbGlja1VSTDsgfVxcbiAgICAgICAgICAgIGlmKGhyZWYpIHsgbXNnQ1Rrdlsnd3pya19jbGlja18nICsgJ2MyYSddID0gaHJlZjsgfVxcbiAgICAgICAgICAgIGNvbnN0IG5vdGlmRGF0YSA9IHsgbXNnSWQ6IGN0X19jYW1hcGlnbklkLCBtc2dDVGt2LCBwaXZvdElkOiAnXCIpLmNvbmNhdCh0YXJnZXRpbmdNc2dKc29uLnd6cmtfcGl2b3QsIFwiJyB9O1xcbiAgICAgICAgICAgIHdpbmRvdy5wYXJlbnQuY2xldmVydGFwLnJlbmRlck5vdGlmaWNhdGlvbkNsaWNrZWQobm90aWZEYXRhKTtcXG4gICAgICAgIH1cXG4gICAgICB9KTtcXG4gICAgICA8L3NjcmlwdD5cXG4gICAgXCIpO1xuICAgICAgcmV0dXJuIGh0bWwucmVwbGFjZSgvKDxcXHMqXFwvXFxzKmJvZHkpLywgXCJcIi5jb25jYXQoc2NyaXB0LCBcIlxcbiQxXCIpKTtcbiAgICB9O1xuXG4gICAgbGV0IF9jYWxsQmFja0NhbGxlZCA9IGZhbHNlO1xuXG4gICAgY29uc3Qgc2hvd0Zvb3Rlck5vdGlmaWNhdGlvbiA9IHRhcmdldGluZ01zZ0pzb24gPT4ge1xuICAgICAgbGV0IG9uQ2xpY2sgPSB0YXJnZXRpbmdNc2dKc29uLmRpc3BsYXkub25DbGljazsgLy8gVE9ETzogTmVlZHMgd2l6cm9ja2V0IGFzIGEgZ2xvYmFsIHZhcmlhYmxlXG5cbiAgICAgIGlmICh3aW5kb3cuY2xldmVydGFwLmhhc093blByb3BlcnR5KCdub3RpZmljYXRpb25DYWxsYmFjaycpICYmIHR5cGVvZiB3aW5kb3cuY2xldmVydGFwLm5vdGlmaWNhdGlvbkNhbGxiYWNrICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmNsZXZlcnRhcC5ub3RpZmljYXRpb25DYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjb25zdCBub3RpZmljYXRpb25DYWxsYmFjayA9IHdpbmRvdy5jbGV2ZXJ0YXAubm90aWZpY2F0aW9uQ2FsbGJhY2s7XG5cbiAgICAgICAgaWYgKCFfY2FsbEJhY2tDYWxsZWQpIHtcbiAgICAgICAgICBjb25zdCBpbmFPYmogPSB7fTtcbiAgICAgICAgICBpbmFPYmoubXNnQ29udGVudCA9IHRhcmdldGluZ01zZ0pzb24ubXNnQ29udGVudDtcbiAgICAgICAgICBpbmFPYmoubXNnSWQgPSB0YXJnZXRpbmdNc2dKc29uLnd6cmtfaWQ7XG5cbiAgICAgICAgICBpZiAodGFyZ2V0aW5nTXNnSnNvbi53enJrX3Bpdm90KSB7XG4gICAgICAgICAgICBpbmFPYmoucGl2b3RJZCA9IHRhcmdldGluZ01zZ0pzb24ud3pya19waXZvdDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGFyZ2V0aW5nTXNnSnNvbi5kaXNwbGF5Lmt2ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGluYU9iai5rdiA9IHRhcmdldGluZ01zZ0pzb24uZGlzcGxheS5rdjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB3aW5kb3cuY2xldmVydGFwLnJhaXNlTm90aWZpY2F0aW9uQ2xpY2tlZCA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChvbkNsaWNrICE9PSAnJyAmJiBvbkNsaWNrICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgY29uc3QganNGdW5jID0gdGFyZ2V0aW5nTXNnSnNvbi5kaXNwbGF5LmpzRnVuYztcbiAgICAgICAgICAgICAgb25DbGljayArPSBnZXRDb29raWVQYXJhbXMoKTsgLy8gaW52b2tlIGpzIGZ1bmN0aW9uIGNhbGxcblxuICAgICAgICAgICAgICBpZiAoanNGdW5jICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyB0cmFjayBub3RpZmljYXRpb24gY2xpY2tlZCBldmVudFxuICAgICAgICAgICAgICAgIFJlcXVlc3REaXNwYXRjaGVyLmZpcmVSZXF1ZXN0KG9uQ2xpY2spO1xuICAgICAgICAgICAgICAgIGludm9rZUV4dGVybmFsSnMoanNGdW5jLCB0YXJnZXRpbmdNc2dKc29uKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH0gLy8gcGFzcyBvbiB0aGUgZ2Nvb2tpZXxwYWdlfHNjb29raWVJZCBmb3IgY2FwdHVyaW5nIHRoZSBjbGljayBldmVudFxuXG5cbiAgICAgICAgICAgICAgaWYgKHRhcmdldGluZ01zZ0pzb24uZGlzcGxheS53aW5kb3cgPT09IDEpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cub3BlbihvbkNsaWNrLCAnX2JsYW5rJyk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gb25DbGljaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICB3aW5kb3cuY2xldmVydGFwLnJhaXNlTm90aWZpY2F0aW9uVmlld2VkID0gKCkgPT4ge1xuICAgICAgICAgICAgaW5jcmVtZW50SW1wcmVzc2lvbih0YXJnZXRpbmdNc2dKc29uKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgbm90aWZpY2F0aW9uQ2FsbGJhY2soaW5hT2JqKTtcbiAgICAgICAgICBfY2FsbEJhY2tDYWxsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cuY2xldmVydGFwLnBvcHVwQ3VycmVudFd6cmtJZCA9IHRhcmdldGluZ01zZ0pzb24ud3pya19pZDtcbiAgICAgICAgcmVuZGVyRm9vdGVyTm90aWZpY2F0aW9uKHRhcmdldGluZ01zZ0pzb24pO1xuXG4gICAgICAgIGlmICh3aW5kb3cuY2xldmVydGFwLmhhc093blByb3BlcnR5KCdwb3B1cENhbGxiYWNrcycpICYmIHR5cGVvZiB3aW5kb3cuY2xldmVydGFwLnBvcHVwQ2FsbGJhY2tzICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmNsZXZlcnRhcC5wb3B1cENhbGxiYWNrc1t0YXJnZXRpbmdNc2dKc29uLnd6cmtfaWRdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgY29uc3QgcG9wdXBDYWxsYmFjayA9IHdpbmRvdy5jbGV2ZXJ0YXAucG9wdXBDYWxsYmFja3NbdGFyZ2V0aW5nTXNnSnNvbi53enJrX2lkXTtcbiAgICAgICAgICBjb25zdCBpbmFPYmogPSB7fTtcbiAgICAgICAgICBpbmFPYmoubXNnQ29udGVudCA9IHRhcmdldGluZ01zZ0pzb24ubXNnQ29udGVudDtcbiAgICAgICAgICBpbmFPYmoubXNnSWQgPSB0YXJnZXRpbmdNc2dKc29uLnd6cmtfaWQ7XG5cbiAgICAgICAgICBpZiAodGFyZ2V0aW5nTXNnSnNvbi53enJrX3Bpdm90KSB7XG4gICAgICAgICAgICBpbmFPYmoucGl2b3RJZCA9IHRhcmdldGluZ01zZ0pzb24ud3pya19waXZvdDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgbXNnQ1RrdiA9IFtdO1xuXG4gICAgICAgICAgZm9yICh2YXIgd3pya1ByZWZpeEtleSBpbiB0YXJnZXRpbmdNc2dKc29uKSB7XG4gICAgICAgICAgICAvLyBBREQgV1pSSyBQUkVGSVggS0VZIFZBTFVFIFBBSVJTXG4gICAgICAgICAgICBpZiAod3pya1ByZWZpeEtleS5zdGFydHNXaXRoKFdaUktfUFJFRklYKSAmJiB3enJrUHJlZml4S2V5ICE9PSBXWlJLX0lEKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHd6cmtKc29uID0ge1xuICAgICAgICAgICAgICAgIFt3enJrUHJlZml4S2V5XTogdGFyZ2V0aW5nTXNnSnNvblt3enJrUHJlZml4S2V5XVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBtc2dDVGt2LnB1c2god3pya0pzb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChtc2dDVGt2Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGluYU9iai5tc2dDVGt2ID0gbXNnQ1RrdjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGFyZ2V0aW5nTXNnSnNvbi5kaXNwbGF5Lmt2ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGluYU9iai5rdiA9IHRhcmdldGluZ01zZ0pzb24uZGlzcGxheS5rdjtcbiAgICAgICAgICB9IC8vIFBVQkxJQyBBUEkgVE8gUkVDT1JEIENMSUNLRUQgRVZFTlRcblxuXG4gICAgICAgICAgd2luZG93LmNsZXZlcnRhcC5yYWlzZVBvcHVwTm90aWZpY2F0aW9uQ2xpY2tlZCA9IG5vdGlmaWNhdGlvbkRhdGEgPT4ge1xuICAgICAgICAgICAgaWYgKCFub3RpZmljYXRpb25EYXRhIHx8ICFub3RpZmljYXRpb25EYXRhLm1zZ0lkKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgZXZlbnREYXRhID0ge307XG4gICAgICAgICAgICBldmVudERhdGEudHlwZSA9ICdldmVudCc7XG4gICAgICAgICAgICBldmVudERhdGEuZXZ0TmFtZSA9IE5PVElGSUNBVElPTl9DTElDS0VEO1xuICAgICAgICAgICAgZXZlbnREYXRhLmV2dERhdGEgPSB7XG4gICAgICAgICAgICAgIFtXWlJLX0lEXTogbm90aWZpY2F0aW9uRGF0YS5tc2dJZFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKHRhcmdldGluZ01zZ0pzb24ud3pya19waXZvdCkge1xuICAgICAgICAgICAgICBldmVudERhdGEuZXZ0RGF0YSA9IHsgLi4uZXZlbnREYXRhLmV2dERhdGEsXG4gICAgICAgICAgICAgICAgd3pya19waXZvdDogbm90aWZpY2F0aW9uRGF0YS5waXZvdElkXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IC8vIFdaUksgUFJFRklYIEtFWSBWQUxVRSBQQUlSU1xuXG5cbiAgICAgICAgICAgIGlmIChub3RpZmljYXRpb25EYXRhLm1zZ0NUa3YpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgd3pya1ByZWZpeE9iaiBvZiBub3RpZmljYXRpb25EYXRhLm1zZ0NUa3YpIHtcbiAgICAgICAgICAgICAgICBldmVudERhdGEuZXZ0RGF0YSA9IHsgLi4uZXZlbnREYXRhLmV2dERhdGEsXG4gICAgICAgICAgICAgICAgICAuLi53enJrUHJlZml4T2JqXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfcmVxdWVzdC5wcm9jZXNzRXZlbnQoZXZlbnREYXRhKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgcG9wdXBDYWxsYmFjayhpbmFPYmopO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIGxldCBleGl0aW50ZW50T2JqO1xuXG4gICAgY29uc3Qgc2hvd0V4aXRJbnRlbnQgPSAoZXZlbnQsIHRhcmdldE9iaikgPT4ge1xuICAgICAgbGV0IHRhcmdldGluZ01zZ0pzb247XG5cbiAgICAgIGlmIChldmVudCAhPSBudWxsICYmIGV2ZW50LmNsaWVudFkgPiAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRhcmdldE9iaiA9PSBudWxsKSB7XG4gICAgICAgIHRhcmdldGluZ01zZ0pzb24gPSBleGl0aW50ZW50T2JqO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0aW5nTXNnSnNvbiA9IHRhcmdldE9iajtcbiAgICAgIH1cblxuICAgICAgaWYgKCRjdC5kaXNtaXNzU3BhbUNvbnRyb2wgJiYgdGFyZ2V0aW5nTXNnSnNvbi5kaXNwbGF5Lnd0YXJnZXRfdHlwZSA9PT0gMCAmJiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW50ZW50UHJldmlldycpICE9IG51bGwgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ludGVudE9wYWNpdHlEaXYnKSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW50ZW50UHJldmlldycpO1xuICAgICAgICBlbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW50ZW50T3BhY2l0eURpdicpLnJlbW92ZSgpO1xuICAgICAgfSAvLyBJbWFnZU9ubHkgY2FtcGFpZ24gYW5kIEludGVyc3RpdGlhbC9FeGl0IEludGVudCBzaG91bGRuJ3QgY29leGlzdFxuXG5cbiAgICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW50ZW50UHJldmlldycpICE9IG51bGwgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3d6cmtJbWFnZU9ubHlEaXYnKSAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gZG9udCBzaG93IGV4aXQgaW50ZW50IG9uIHRhYmxldC9tb2JpbGUgLSBvbmx5IG9uIGRlc2t0b3BcblxuXG4gICAgICBpZiAodGFyZ2V0aW5nTXNnSnNvbi5kaXNwbGF5LmxheW91dCA9PSBudWxsICYmICgvbW9iaWxlL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSB8fCAvbWluaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgfHwgL2lQYWQvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpIHx8ICdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyB8fCAvdGFibGV0L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZG9DYW1wSG91c2VLZWVwaW5nKHRhcmdldGluZ01zZ0pzb24pID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNhbXBhaWduSWQgPSB0YXJnZXRpbmdNc2dKc29uLnd6cmtfaWQuc3BsaXQoJ18nKVswXTtcbiAgICAgICRjdC5jYW1wYWlnbkRpdk1hcFtjYW1wYWlnbklkXSA9ICdpbnRlbnRQcmV2aWV3JztcbiAgICAgIGxldCBsZWdhY3kgPSBmYWxzZTtcbiAgICAgIGNvbnN0IG9wYWNpdHlEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIG9wYWNpdHlEaXYuaWQgPSAnaW50ZW50T3BhY2l0eURpdic7XG4gICAgICBjb25zdCBvcGFjaXR5ID0gdGFyZ2V0aW5nTXNnSnNvbi5kaXNwbGF5Lm9wYWNpdHkgfHwgMC43O1xuICAgICAgY29uc3QgcmdiYUNvbG9yID0gXCJyZ2JhKDAsMCwwLFwiLmNvbmNhdChvcGFjaXR5LCBcIilcIik7XG4gICAgICBvcGFjaXR5RGl2LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBcInBvc2l0aW9uOiBmaXhlZDt0b3A6IDA7Ym90dG9tOiAwO2xlZnQ6IDA7d2lkdGg6IDEwMCU7aGVpZ2h0OiAxMDAlO3otaW5kZXg6IDIxNDc0ODM2NDY7YmFja2dyb3VuZDogXCIuY29uY2F0KHJnYmFDb2xvciwgXCI7XCIpKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQob3BhY2l0eURpdik7XG4gICAgICBjb25zdCBtc2dEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIG1zZ0Rpdi5pZCA9ICdpbnRlbnRQcmV2aWV3JztcblxuICAgICAgaWYgKHRhcmdldGluZ01zZ0pzb24uZGlzcGxheS5wcm90byA9PSBudWxsKSB7XG4gICAgICAgIGxlZ2FjeSA9IHRydWU7XG4gICAgICAgIG1zZ0Rpdi5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ2Rpc3BsYXk6YmxvY2s7b3ZlcmZsb3c6aGlkZGVuO3RvcDo1NSUgIWltcG9ydGFudDtsZWZ0OjUwJSAhaW1wb3J0YW50O3Bvc2l0aW9uOmZpeGVkO3otaW5kZXg6MjE0NzQ4MzY0Nzt3aWR0aDo2MDBweCAhaW1wb3J0YW50O2hlaWdodDo2MDBweCAhaW1wb3J0YW50O21hcmdpbjotMzAwcHggMCAwIC0zMDBweCAhaW1wb3J0YW50OycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXNnRGl2LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCB0YXJnZXRpbmdNc2dKc29uLmRpc3BsYXkuaUZyYW1lU3R5bGUpO1xuICAgICAgfVxuXG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG1zZ0Rpdik7XG4gICAgICBjb25zdCBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICAgIGNvbnN0IGJvcmRlclJhZGl1cyA9IHRhcmdldGluZ01zZ0pzb24uZGlzcGxheS5iciA9PT0gZmFsc2UgPyAnMCcgOiAnOCc7XG4gICAgICBpZnJhbWUuZnJhbWVib3JkZXIgPSAnMHB4JztcbiAgICAgIGlmcmFtZS5tYXJnaW5oZWlnaHQgPSAnMHB4JztcbiAgICAgIGlmcmFtZS5tYXJnaW53aWR0aCA9ICcwcHgnO1xuICAgICAgaWZyYW1lLnNjcm9sbGluZyA9ICdubyc7XG4gICAgICBpZnJhbWUuaWQgPSAnd2l6LWlmcmFtZS1pbnRlbnQnO1xuICAgICAgY29uc3Qgb25DbGljayA9IHRhcmdldGluZ01zZ0pzb24uZGlzcGxheS5vbkNsaWNrO1xuICAgICAgbGV0IHBvaW50ZXJDc3MgPSAnJztcblxuICAgICAgaWYgKG9uQ2xpY2sgIT09ICcnICYmIG9uQ2xpY2sgIT0gbnVsbCkge1xuICAgICAgICBwb2ludGVyQ3NzID0gJ2N1cnNvcjpwb2ludGVyOyc7XG4gICAgICB9XG5cbiAgICAgIGlmICh0YXJnZXRpbmdNc2dKc29uLmRpc3BsYXkucHJldmlldyAmJiB0YXJnZXRpbmdNc2dKc29uLmRpc3BsYXlbJ2N1c3RvbS1lZGl0b3InXSkge1xuICAgICAgICBpZnJhbWUuc2FuZGJveCA9ICdhbGxvdy1zY3JpcHRzIGFsbG93LXBvcHVwcyBhbGxvdy1wb3B1cHMtdG8tZXNjYXBlLXNhbmRib3gnO1xuICAgICAgfVxuXG4gICAgICBsZXQgaHRtbDsgLy8gZGlyZWN0IGh0bWxcblxuICAgICAgaWYgKHRhcmdldGluZ01zZ0pzb24ubXNnQ29udGVudC50eXBlID09PSAxKSB7XG4gICAgICAgIGh0bWwgPSB0YXJnZXRpbmdNc2dKc29uLm1zZ0NvbnRlbnQuaHRtbDtcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvIyNjYW1wYWlnbklkIyMvZywgY2FtcGFpZ25JZCk7XG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoLyMjY2FtcGFpZ25JZF9iYXRjaElkIyMvZywgdGFyZ2V0aW5nTXNnSnNvbi53enJrX2lkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGNzcyA9ICcnICsgJzxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj4nICsgJ2JvZHl7bWFyZ2luOjA7cGFkZGluZzowO30nICsgJyNjb250ZW50RGl2Lnd6cmt7b3ZlcmZsb3c6aGlkZGVuO3BhZGRpbmc6MCAwIDIwcHggMDt0ZXh0LWFsaWduOmNlbnRlcjsnICsgcG9pbnRlckNzcyArICd9JyArICcjY29udGVudERpdi53enJrIHRke3BhZGRpbmc6MTVweCAxMHB4O30nICsgJy53enJrUFB0aXRsZXtmb250LXdlaWdodDogYm9sZDtmb250LXNpemU6IDI0cHg7Zm9udC1mYW1pbHk6YXJpYWw7d29yZC1icmVhazogYnJlYWstd29yZDtwYWRkaW5nLXRvcDoyMHB4O30nICsgJy53enJrUFBkc2Nye2ZvbnQtc2l6ZTogMTRweDtmb250LWZhbWlseTphcmlhbDtsaW5lLWhlaWdodDoxNnB4O3dvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7ZGlzcGxheTppbmxpbmUtYmxvY2s7cGFkZGluZzoyMHB4IDIwcHggMCAyMHB4O2xpbmUtaGVpZ2h0OjIwcHg7fScgKyAnLlBMMTV7cGFkZGluZy1sZWZ0OjE1cHg7fScgKyAnLnd6cmtQUHdhcnB7bWFyZ2luOjIwcHggMjBweCAwIDVweDtwYWRkaW5nOjBweDtib3JkZXItcmFkaXVzOiAnICsgYm9yZGVyUmFkaXVzICsgJ3B4O2JveC1zaGFkb3c6IDFweCAxcHggNXB4ICM4ODg4ODg7fScgKyAnYS53enJrQ2xvc2V7Y3Vyc29yOnBvaW50ZXI7cG9zaXRpb246IGFic29sdXRlO3RvcDogMTFweDtyaWdodDogMTFweDt6LWluZGV4OiAyMTQ3NDgzNjQ3O2ZvbnQtc2l6ZToxOXB4O2ZvbnQtZmFtaWx5OmFyaWFsO2ZvbnQtd2VpZ2h0OmJvbGQ7dGV4dC1kZWNvcmF0aW9uOiBub25lO3dpZHRoOiAyNXB4Oy8qaGVpZ2h0OiAyNXB4OyovdGV4dC1hbGlnbjogY2VudGVyOyAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7IGxpbmUtaGVpZ2h0OiAyNXB4OycgKyAnYmFja2dyb3VuZDogIzM1MzUzNTtib3JkZXI6ICNmZmYgMnB4IHNvbGlkO2JvcmRlci1yYWRpdXM6IDEwMCU7Ym94LXNoYWRvdzogIzc3NyAycHggMnB4IDJweDtjb2xvcjojZmZmO30nICsgJ2E6aG92ZXIud3pya0Nsb3Nle2JhY2tncm91bmQtY29sb3I6I2QxOTE0YSAhaW1wb3J0YW50O2NvbG9yOiNmZmYgIWltcG9ydGFudDsgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO30nICsgJyNjb250ZW50RGl2IC5idXR0b257cGFkZGluZy10b3A6MjBweDt9JyArICcjY29udGVudERpdiAuYnV0dG9uIGF7Zm9udC1zaXplOiAxNHB4O2ZvbnQtd2VpZ2h0OmJvbGQ7Zm9udC1mYW1pbHk6YXJpYWw7dGV4dC1hbGlnbjpjZW50ZXI7ZGlzcGxheTppbmxpbmUtYmxvY2s7dGV4dC1kZWNvcmF0aW9uOm5vbmU7cGFkZGluZzowIDMwcHg7aGVpZ2h0OjQwcHg7bGluZS1oZWlnaHQ6NDBweDtiYWNrZ3JvdW5kOiNlYTY5M2I7Y29sb3I6I2ZmZjtib3JkZXItcmFkaXVzOjRweDstd2Via2l0LWJvcmRlci1yYWRpdXM6NHB4Oy1tb3otYm9yZGVyLXJhZGl1czo0cHg7fScgKyAnPC9zdHlsZT4nO1xuICAgICAgICBsZXQgYmdDb2xvciwgdGV4dENvbG9yLCBidG5CZywgYnRDb2xvcjtcblxuICAgICAgICBpZiAodGFyZ2V0aW5nTXNnSnNvbi5kaXNwbGF5LnRoZW1lID09PSAnZGFyaycpIHtcbiAgICAgICAgICBiZ0NvbG9yID0gJyMyZDJkMmUnO1xuICAgICAgICAgIHRleHRDb2xvciA9ICcjZWFlYWVhJztcbiAgICAgICAgICBidG5CZyA9ICcjMzUzNTM1JztcbiAgICAgICAgICBidENvbG9yID0gJyNmZmZmZmYnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJnQ29sb3IgPSAnI2ZmZmZmZic7XG4gICAgICAgICAgdGV4dENvbG9yID0gJyMwMDAwMDAnO1xuICAgICAgICAgIGJ0bkJnID0gJyNhNWE2YTYnO1xuICAgICAgICAgIGJ0Q29sb3IgPSAnI2ZmZmZmZic7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0aXRsZVRleHQgPSB0YXJnZXRpbmdNc2dKc29uLm1zZ0NvbnRlbnQudGl0bGU7XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uVGV4dCA9IHRhcmdldGluZ01zZ0pzb24ubXNnQ29udGVudC5kZXNjcmlwdGlvbjtcbiAgICAgICAgbGV0IGN0YVRleHQgPSAnJztcblxuICAgICAgICBpZiAodGFyZ2V0aW5nTXNnSnNvbi5tc2dDb250ZW50LmN0YVRleHQgIT0gbnVsbCAmJiB0YXJnZXRpbmdNc2dKc29uLm1zZ0NvbnRlbnQuY3RhVGV4dCAhPT0gJycpIHtcbiAgICAgICAgICBjdGFUZXh0ID0gXCI8ZGl2IGNsYXNzPSdidXR0b24nPjxhIGhyZWY9JyMnPlwiICsgdGFyZ2V0aW5nTXNnSnNvbi5tc2dDb250ZW50LmN0YVRleHQgKyAnPC9hPjwvZGl2Pic7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaW1hZ2VUZCA9ICcnO1xuXG4gICAgICAgIGlmICh0YXJnZXRpbmdNc2dKc29uLm1zZ0NvbnRlbnQuaW1hZ2VVcmwgIT0gbnVsbCAmJiB0YXJnZXRpbmdNc2dKc29uLm1zZ0NvbnRlbnQuaW1hZ2VVcmwgIT09ICcnKSB7XG4gICAgICAgICAgaW1hZ2VUZCA9IFwiPGRpdiBzdHlsZT0ncGFkZGluZy10b3A6MjBweDsnPjxpbWcgc3JjPSdcIiArIHRhcmdldGluZ01zZ0pzb24ubXNnQ29udGVudC5pbWFnZVVybCArIFwiJyB3aWR0aD0nNTAwJyBhbHQ9XCIgKyB0aXRsZVRleHQgKyAnIC8+PC9kaXY+JztcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG9uQ2xpY2tTdHIgPSAncGFyZW50LiRXWlJLX1dSLmNsb3NlSWZyYW1lKCcgKyBjYW1wYWlnbklkICsgXCIsJ2ludGVudFByZXZpZXcnKTtcIjtcbiAgICAgICAgY29uc3QgdGl0bGUgPSBcIjxkaXYgY2xhc3M9J3d6cmtQUHdhcnAnIHN0eWxlPSdjb2xvcjpcIiArIHRleHRDb2xvciArICc7YmFja2dyb3VuZC1jb2xvcjonICsgYmdDb2xvciArIFwiOyc+XCIgKyBcIjxhIGhyZWY9J2phdmFzY3JpcHQ6dm9pZCgwKTsnIG9uY2xpY2s9XCIgKyBvbkNsaWNrU3RyICsgXCIgY2xhc3M9J3d6cmtDbG9zZScgc3R5bGU9J2JhY2tncm91bmQtY29sb3I6XCIgKyBidG5CZyArICc7Y29sb3I6JyArIGJ0Q29sb3IgKyBcIic+JnRpbWVzOzwvYT5cIiArIFwiPGRpdiBpZD0nY29udGVudERpdicgY2xhc3M9J3d6cmsnPlwiICsgXCI8ZGl2IGNsYXNzPSd3enJrUFB0aXRsZScgc3R5bGU9J2NvbG9yOlwiICsgdGV4dENvbG9yICsgXCInPlwiICsgdGl0bGVUZXh0ICsgJzwvZGl2Pic7XG4gICAgICAgIGNvbnN0IGJvZHkgPSBcIjxkaXYgY2xhc3M9J3d6cmtQUGRzY3InIHN0eWxlPSdjb2xvcjpcIiArIHRleHRDb2xvciArIFwiJz5cIiArIGRlc2NyaXB0aW9uVGV4dCArICc8L2Rpdj4nICsgaW1hZ2VUZCArIGN0YVRleHQgKyAnPC9kaXY+PC9kaXY+JztcbiAgICAgICAgaHRtbCA9IGNzcyArIHRpdGxlICsgYm9keTtcbiAgICAgIH1cblxuICAgICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnei1pbmRleDogMjE0NzQ4MzY0NzsgZGlzcGxheTpibG9jazsgaGVpZ2h0OiAxMDAlICFpbXBvcnRhbnQ7IHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7bWluLWhlaWdodDo4MHB4ICFpbXBvcnRhbnQ7Ym9yZGVyOjBweCAhaW1wb3J0YW50OyBib3JkZXItY29sb3I6bm9uZSAhaW1wb3J0YW50OycpO1xuICAgICAgbXNnRGl2LmFwcGVuZENoaWxkKGlmcmFtZSk7IC8vIERpc3BhdGNoIGV2ZW50IGZvciBpbnRlcnN0aXRpYWwvZXhpdCBpbnRlbnQgY2xvc2VcblxuICAgICAgY29uc3QgY2xvc2VDYW1wYWlnbiA9IG5ldyBFdmVudCgnQ1RfY2FtcGFpZ25fcmVuZGVyZWQnKTtcbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoY2xvc2VDYW1wYWlnbik7XG5cbiAgICAgIGlmICh0YXJnZXRpbmdNc2dKc29uLmRpc3BsYXlbJ2N1c3RvbS1lZGl0b3InXSkge1xuICAgICAgICBodG1sID0gYXBwZW5kU2NyaXB0Rm9yQ3VzdG9tRXZlbnQodGFyZ2V0aW5nTXNnSnNvbiwgaHRtbCk7XG4gICAgICB9XG5cbiAgICAgIGlmcmFtZS5zcmNkb2MgPSBodG1sO1xuXG4gICAgICBpZnJhbWUub25sb2FkID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBjb250ZW50RGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dpei1pZnJhbWUtaW50ZW50JykuY29udGVudERvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250ZW50RGl2Jyk7XG4gICAgICAgIHNldHVwQ2xpY2tVcmwob25DbGljaywgdGFyZ2V0aW5nTXNnSnNvbiwgY29udGVudERpdiwgJ2ludGVudFByZXZpZXcnLCBsZWdhY3kpO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgaWYgKCFkb2N1bWVudC5ib2R5KSB7XG4gICAgICBpZiAoX3dpekNvdW50ZXIgPCA2KSB7XG4gICAgICAgIF93aXpDb3VudGVyKys7XG4gICAgICAgIHNldFRpbWVvdXQoX3RyLCAxMDAwLCBtc2csIHtcbiAgICAgICAgICBkZXZpY2U6IF9kZXZpY2UsXG4gICAgICAgICAgc2Vzc2lvbjogX3Nlc3Npb24sXG4gICAgICAgICAgcmVxdWVzdDogX3JlcXVlc3QsXG4gICAgICAgICAgbG9nZ2VyOiBfbG9nZ2VyXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcHJvY2Vzc05hdGl2ZURpc3BsYXlBcnIgPSBhcnJJbkFwcE5vdGlmcyA9PiB7XG4gICAgICBPYmplY3Qua2V5cyhhcnJJbkFwcE5vdGlmcykubWFwKGtleSA9PiB7XG4gICAgICAgIHZhciBlbGVtZW50SWQsIGlkO1xuXG4gICAgICAgIGlmIChhcnJJbkFwcE5vdGlmc1trZXldLmRpc3BsYXkuZGl2SWQpIHtcbiAgICAgICAgICBlbGVtZW50SWQgPSBhcnJJbkFwcE5vdGlmc1trZXldLmRpc3BsYXkuZGl2SWQ7XG4gICAgICAgICAgaWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50SWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsZW1lbnRJZCA9IGFyckluQXBwTm90aWZzW2tleV0uZGlzcGxheS5kaXZTZWxlY3RvcjtcbiAgICAgICAgICBpZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWxlbWVudElkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpZCAhPT0gbnVsbCkge1xuICAgICAgICAgIGFyckluQXBwTm90aWZzW2tleV0ubXNnQ29udGVudC50eXBlID09PSAyID8gcmVuZGVyUGVyc29uYWxpc2F0aW9uQmFubmVyKGFyckluQXBwTm90aWZzW2tleV0pIDogcmVuZGVyUGVyc29uYWxpc2F0aW9uQ2Fyb3VzZWwoYXJySW5BcHBOb3RpZnNba2V5XSk7XG4gICAgICAgICAgZGVsZXRlIGFyckluQXBwTm90aWZzW2tleV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBhZGRMb2FkTGlzdGVuZXIgPSBhcnJJbkFwcE5vdGlmcyA9PiB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcblxuICAgICAgICBpZiAoY291bnQgPCAyMCkge1xuICAgICAgICAgIGNvbnN0IHQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICBwcm9jZXNzTmF0aXZlRGlzcGxheUFycihhcnJJbkFwcE5vdGlmcyk7XG5cbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhhcnJJbkFwcE5vdGlmcykubGVuZ3RoID09PSAwIHx8IGNvdW50ID09PSAyMCkge1xuICAgICAgICAgICAgICBjbGVhckludGVydmFsKHQpO1xuICAgICAgICAgICAgICBhcnJJbkFwcE5vdGlmcyA9IHt9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBpZiAobXNnLmluYXBwX25vdGlmcyAhPSBudWxsKSB7XG4gICAgICBjb25zdCBhcnJJbkFwcE5vdGlmcyA9IHt9O1xuXG4gICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbXNnLmluYXBwX25vdGlmcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0Tm90aWYgPSBtc2cuaW5hcHBfbm90aWZzW2luZGV4XTtcblxuICAgICAgICBpZiAodGFyZ2V0Tm90aWYuZGlzcGxheS53dGFyZ2V0X3R5cGUgPT0gbnVsbCB8fCB0YXJnZXROb3RpZi5kaXNwbGF5Lnd0YXJnZXRfdHlwZSA9PT0gMCkge1xuICAgICAgICAgIHNob3dGb290ZXJOb3RpZmljYXRpb24odGFyZ2V0Tm90aWYpO1xuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldE5vdGlmLmRpc3BsYXkud3RhcmdldF90eXBlID09PSAxKSB7XG4gICAgICAgICAgLy8gaWYgZGlzcGxheVsnd3RhcmdldF90eXBlJ109PTEgdGhlbiBleGl0IGludGVudFxuICAgICAgICAgIGV4aXRpbnRlbnRPYmogPSB0YXJnZXROb3RpZjtcbiAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQuYm9keS5vbm1vdXNlbGVhdmUgPSBzaG93RXhpdEludGVudDtcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXROb3RpZi5kaXNwbGF5Lnd0YXJnZXRfdHlwZSA9PT0gMikge1xuICAgICAgICAgIC8vIGlmIGRpc3BsYXlbJ3d0YXJnZXRfdHlwZSddPT0yIHRoZW4gd2ViIG5hdGl2ZSBkaXNwbGF5XG4gICAgICAgICAgaWYgKHRhcmdldE5vdGlmLm1zZ0NvbnRlbnQudHlwZSA9PT0gMiB8fCB0YXJnZXROb3RpZi5tc2dDb250ZW50LnR5cGUgPT09IDMpIHtcbiAgICAgICAgICAgIC8vIENoZWNrIGZvciBiYW5uZXIgYW5kIGNhcm91c2VsXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gdGFyZ2V0Tm90aWYuZGlzcGxheS5kaXZJZCA/IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhcmdldE5vdGlmLmRpc3BsYXkuZGl2SWQpIDogZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXROb3RpZi5kaXNwbGF5LmRpdlNlbGVjdG9yKTtcblxuICAgICAgICAgICAgaWYgKGVsZW1lbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgdGFyZ2V0Tm90aWYubXNnQ29udGVudC50eXBlID09PSAyID8gcmVuZGVyUGVyc29uYWxpc2F0aW9uQmFubmVyKHRhcmdldE5vdGlmKSA6IHJlbmRlclBlcnNvbmFsaXNhdGlvbkNhcm91c2VsKHRhcmdldE5vdGlmKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGFyckluQXBwTm90aWZzW3RhcmdldE5vdGlmLnd6cmtfaWQuc3BsaXQoJ18nKVswXV0gPSB0YXJnZXROb3RpZjsgLy8gQWRkIHRhcmdldE5vdGlmIHRvIG9iamVjdFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0Tm90aWYubXNnQ29udGVudC50eXBlID09PSA0KSB7XG4gICAgICAgICAgICByZW5kZXJWaXN1YWxCdWlsZGVyKHRhcmdldE5vdGlmLCBmYWxzZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNob3dGb290ZXJOb3RpZmljYXRpb24odGFyZ2V0Tm90aWYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSAvLyBQcm9jZXNzIGJhbm5lciBvciBjYXJvdXNlbCBjYW1wYWlnbiBhcnJheVxuXG5cbiAgICAgIGlmIChPYmplY3Qua2V5cyhhcnJJbkFwcE5vdGlmcykubGVuZ3RoKSB7XG4gICAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICAgICAgcHJvY2Vzc05hdGl2ZURpc3BsYXlBcnIoYXJySW5BcHBOb3RpZnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZExvYWRMaXN0ZW5lcihhcnJJbkFwcE5vdGlmcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBtZXJnZUV2ZW50TWFwID0gbmV3RXZ0TWFwID0+IHtcbiAgICAgIGlmICgkY3QuZ2xvYmFsRXZlbnRzTWFwID09IG51bGwpIHtcbiAgICAgICAgJGN0Lmdsb2JhbEV2ZW50c01hcCA9IFN0b3JhZ2VNYW5hZ2VyLnJlYWRGcm9tTFNvckNvb2tpZShFVl9DT09LSUUpO1xuXG4gICAgICAgIGlmICgkY3QuZ2xvYmFsRXZlbnRzTWFwID09IG51bGwpIHtcbiAgICAgICAgICAkY3QuZ2xvYmFsRXZlbnRzTWFwID0gbmV3RXZ0TWFwO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBuZXdFdnRNYXApIHtcbiAgICAgICAgaWYgKG5ld0V2dE1hcC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgY29uc3Qgb2xkRXZ0T2JqID0gJGN0Lmdsb2JhbEV2ZW50c01hcFtrZXldO1xuICAgICAgICAgIGNvbnN0IG5ld0V2dE9iaiA9IG5ld0V2dE1hcFtrZXldO1xuXG4gICAgICAgICAgaWYgKCRjdC5nbG9iYWxFdmVudHNNYXBba2V5XSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAobmV3RXZ0T2JqWzBdICE9IG51bGwgJiYgbmV3RXZ0T2JqWzBdID4gb2xkRXZ0T2JqWzBdKSB7XG4gICAgICAgICAgICAgICRjdC5nbG9iYWxFdmVudHNNYXBba2V5XSA9IG5ld0V2dE9iajtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJGN0Lmdsb2JhbEV2ZW50c01hcFtrZXldID0gbmV3RXZ0T2JqO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVJbmJveE5vdGlmaWNhdGlvbnMgPSAoKSA9PiB7XG4gICAgICBpZiAobXNnLmluYm94X3ByZXZpZXcpIHtcbiAgICAgICAgcHJvY2Vzc0luYm94Tm90aWZzKG1zZyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKG1zZy5pbmJveF9ub3RpZnMpIHtcbiAgICAgICAgY29uc3QgbXNnQXJyID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IG1zZy5pbmJveF9ub3RpZnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgaWYgKGRvQ2FtcEhvdXNlS2VlcGluZyhtc2cuaW5ib3hfbm90aWZzW2luZGV4XSkgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBtc2dBcnIucHVzaChtc2cuaW5ib3hfbm90aWZzW2luZGV4XSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJvY2Vzc0luYm94Tm90aWZzKG1zZ0Fycik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChtc2cud2ViSW5ib3hTZXR0aW5nIHx8IG1zZy5pbmJveF9ub3RpZnMgIT0gbnVsbCkge1xuICAgICAgLyoqXG4gICAgICAgKiBXaGVuIHRoZSB1c2VyIHZpc2l0cyBhIHdlYnNpdGUgZm9yIHRoZSAxc3QgdGltZSBhZnRlciB3ZWIgaW5ib3ggY2hhbm5lbCBpcyBzZXR1cCxcbiAgICAgICAqIHdlIG5lZWQgdG8gaW5pdGlhbGlzZSB0aGUgaW5ib3ggaGVyZSBiZWNhdXNlIHRoZSBpbml0aWFsaXplV2ViSW5ib3ggbWV0aG9kIHdpdGhpbiBpbml0IHdpbGwgbm90IGJlIGV4ZWN1dGVkXG4gICAgICAgKiBhcyB3ZSB3b3VsZCBub3QgaGF2ZSBhbnkgZW50cnkgcmVsYXRlZCB0byB3ZWJJbmJveFNldHRpbmdzIGluIHRoZSBMU1xuICAgICAgICovXG4gICAgICBpZiAoaGFzV2ViSW5ib3hTZXR0aW5nc0luTFMoKSkge1xuICAgICAgICBjaGVja0FuZFJlZ2lzdGVyV2ViSW5ib3hFbGVtZW50cygpO1xuICAgICAgfVxuXG4gICAgICBpZiAoJGN0LmluYm94ID09PSBudWxsKSB7XG4gICAgICAgIG1zZy53ZWJJbmJveFNldHRpbmcgJiYgcHJvY2Vzc1dlYkluYm94U2V0dGluZ3MobXNnLndlYkluYm94U2V0dGluZyk7XG4gICAgICAgIGluaXRpYWxpemVXZWJJbmJveChfbG9nZ2VyKS50aGVuKCgpID0+IHtcbiAgICAgICAgICBoYW5kbGVJbmJveE5vdGlmaWNhdGlvbnMoKTtcbiAgICAgICAgfSkuY2F0Y2goZSA9PiB7fSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYW5kbGVJbmJveE5vdGlmaWNhdGlvbnMoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobXNnLnZhcnMpIHtcbiAgICAgICRjdC52YXJpYWJsZVN0b3JlLm1lcmdlVmFyaWFibGVzKG1zZy52YXJzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzdGFsZURhdGFVcGRhdGUgPSAoc3RhbGVkYXRhLCBjYW1wVHlwZSkgPT4ge1xuICAgICAgY29uc3QgY2FtcE9iaiA9IGdldENhbXBhaWduT2JqZWN0KCk7XG4gICAgICBjb25zdCBnbG9iYWxPYmogPSBjYW1wT2JqW2NhbXBUeXBlXS5nbG9iYWw7XG5cbiAgICAgIGlmIChnbG9iYWxPYmogIT0gbnVsbCAmJiBjYW1wVHlwZSkge1xuICAgICAgICBmb3IgKGNvbnN0IGlkeCBpbiBzdGFsZWRhdGEpIHtcbiAgICAgICAgICBpZiAoc3RhbGVkYXRhLmhhc093blByb3BlcnR5KGlkeCkpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBnbG9iYWxPYmpbc3RhbGVkYXRhW2lkeF1dO1xuXG4gICAgICAgICAgICBpZiAoU3RvcmFnZU1hbmFnZXIucmVhZChDQU1QX0NPT0tJRV9HKSkge1xuICAgICAgICAgICAgICBjb25zdCBndWlkQ2FtcE9iaiA9IEpTT04ucGFyc2UoZGVjb2RlVVJJQ29tcG9uZW50KFN0b3JhZ2VNYW5hZ2VyLnJlYWQoQ0FNUF9DT09LSUVfRykpKTtcbiAgICAgICAgICAgICAgY29uc3QgZ3VpZCA9IEpTT04ucGFyc2UoZGVjb2RlVVJJQ29tcG9uZW50KFN0b3JhZ2VNYW5hZ2VyLnJlYWQoR0NPT0tJRV9OQU1FKSkpO1xuXG4gICAgICAgICAgICAgIGlmIChndWlkQ2FtcE9ialtndWlkXSAmJiBndWlkQ2FtcE9ialtndWlkXVtjYW1wVHlwZV0gJiYgZ3VpZENhbXBPYmpbZ3VpZF1bY2FtcFR5cGVdW3N0YWxlZGF0YVtpZHhdXSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBndWlkQ2FtcE9ialtndWlkXVtjYW1wVHlwZV1bc3RhbGVkYXRhW2lkeF1dO1xuICAgICAgICAgICAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNhdmUoQ0FNUF9DT09LSUVfRywgZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGd1aWRDYW1wT2JqKSkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHNhdmVDYW1wYWlnbk9iamVjdChjYW1wT2JqKTtcbiAgICB9O1xuXG4gICAgaWYgKFN0b3JhZ2VNYW5hZ2VyLl9pc0xvY2FsU3RvcmFnZVN1cHBvcnRlZCgpKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAobXNnLmV2cHIgIT0gbnVsbCkge1xuICAgICAgICAgIGNvbnN0IGV2ZW50c01hcCA9IG1zZy5ldnByLmV2ZW50cztcbiAgICAgICAgICBjb25zdCBwcm9maWxlTWFwID0gbXNnLmV2cHIucHJvZmlsZTtcbiAgICAgICAgICBjb25zdCBzeW5jRXhwaXJ5ID0gbXNnLmV2cHIuZXhwaXJlc19pbjtcbiAgICAgICAgICBjb25zdCBub3cgPSBnZXROb3coKTtcbiAgICAgICAgICBTdG9yYWdlTWFuYWdlci5zZXRNZXRhUHJvcCgnbHNUaW1lJywgbm93KTtcbiAgICAgICAgICBTdG9yYWdlTWFuYWdlci5zZXRNZXRhUHJvcCgnZXhUcycsIHN5bmNFeHBpcnkpO1xuICAgICAgICAgIG1lcmdlRXZlbnRNYXAoZXZlbnRzTWFwKTtcbiAgICAgICAgICBTdG9yYWdlTWFuYWdlci5zYXZlVG9MU29yQ29va2llKEVWX0NPT0tJRSwgJGN0Lmdsb2JhbEV2ZW50c01hcCk7XG5cbiAgICAgICAgICBpZiAoJGN0Lmdsb2JhbFByb2ZpbGVNYXAgPT0gbnVsbCkge1xuICAgICAgICAgICAgYWRkVG9Mb2NhbFByb2ZpbGVNYXAocHJvZmlsZU1hcCwgdHJ1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFkZFRvTG9jYWxQcm9maWxlTWFwKHByb2ZpbGVNYXAsIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobXNnLmFycCAhPSBudWxsKSB7XG4gICAgICAgICAgYXJwKG1zZy5hcnApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1zZy5pbmFwcF9zdGFsZSAhPSBudWxsICYmIG1zZy5pbmFwcF9zdGFsZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgLy8gd2ViIHBvcHVwIHN0YWxlXG4gICAgICAgICAgc3RhbGVEYXRhVXBkYXRlKG1zZy5pbmFwcF9zdGFsZSwgJ3dwJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobXNnLmluYm94X3N0YWxlICE9IG51bGwgJiYgbXNnLmluYm94X3N0YWxlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAvLyB3ZWIgaW5ib3ggc3RhbGVcbiAgICAgICAgICBzdGFsZURhdGFVcGRhdGUobXNnLmluYm94X3N0YWxlLCAnd2knKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBfbG9nZ2VyLmVycm9yKCdVbmFibGUgdG8gcGVyc2lzdCBldnJwL2FycDogJyArIGUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlJDIgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImlzUGVyc29uYWxpc2F0aW9uQWN0aXZlXCIpO1xuXG4gIGNsYXNzIFVzZXIge1xuICAgIGNvbnN0cnVjdG9yKF9yZWYpIHtcbiAgICAgIGxldCB7XG4gICAgICAgIGlzUGVyc29uYWxpc2F0aW9uQWN0aXZlXG4gICAgICB9ID0gX3JlZjtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfaXNQZXJzb25hbGlzYXRpb25BY3RpdmUkMiwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlJDIpW19pc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZSQyXSA9IGlzUGVyc29uYWxpc2F0aW9uQWN0aXZlO1xuICAgIH1cblxuICAgIGdldFRvdGFsVmlzaXRzKCkge1xuICAgICAgaWYgKCFfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlJDIpW19pc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZSQyXSgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbGV0IHZpc2l0Q291bnQgPSBTdG9yYWdlTWFuYWdlci5nZXRNZXRhUHJvcCgnc2MnKTtcblxuICAgICAgaWYgKHZpc2l0Q291bnQgPT0gbnVsbCkge1xuICAgICAgICB2aXNpdENvdW50ID0gMTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZpc2l0Q291bnQ7XG4gICAgfVxuXG4gICAgZ2V0TGFzdFZpc2l0KCkge1xuICAgICAgaWYgKCFfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlJDIpW19pc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZSQyXSgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcHJldlNlc3Npb24gPSBTdG9yYWdlTWFuYWdlci5nZXRNZXRhUHJvcCgncHMnKTtcblxuICAgICAgaWYgKHByZXZTZXNzaW9uICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHByZXZTZXNzaW9uICogMTAwMCk7XG4gICAgICB9XG4gICAgfVxuXG4gIH1cblxuICBjb25zdCBsb2dMZXZlbHMgPSB7XG4gICAgRElTQUJMRTogMCxcbiAgICBFUlJPUjogMSxcbiAgICBJTkZPOiAyLFxuICAgIERFQlVHOiAzLFxuICAgIERFQlVHX1BFOiA0XG4gIH07XG5cbiAgdmFyIF9sb2dMZXZlbCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwibG9nTGV2ZWxcIik7XG5cbiAgdmFyIF9sb2cgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImxvZ1wiKTtcblxuICB2YXIgX2lzTGVnYWN5RGVidWcgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImlzTGVnYWN5RGVidWdcIik7XG5cbiAgY2xhc3MgTG9nZ2VyIHtcbiAgICBjb25zdHJ1Y3Rvcihsb2dMZXZlbCkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9pc0xlZ2FjeURlYnVnLCB7XG4gICAgICAgIGdldDogX2dldF9pc0xlZ2FjeURlYnVnLFxuICAgICAgICBzZXQ6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX2xvZywge1xuICAgICAgICB2YWx1ZTogX2xvZzJcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9sb2dMZXZlbCwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICB0aGlzLnd6cmtFcnJvciA9IHt9O1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dMZXZlbClbX2xvZ0xldmVsXSA9IGxvZ0xldmVsID09IG51bGwgPyBsb2dMZXZlbCA6IGxvZ0xldmVscy5JTkZPO1xuICAgICAgdGhpcy53enJrRXJyb3IgPSB7fTtcbiAgICB9XG5cbiAgICBnZXQgbG9nTGV2ZWwoKSB7XG4gICAgICByZXR1cm4gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dMZXZlbClbX2xvZ0xldmVsXTtcbiAgICB9XG5cbiAgICBzZXQgbG9nTGV2ZWwobG9nTGV2ZWwpIHtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nTGV2ZWwpW19sb2dMZXZlbF0gPSBsb2dMZXZlbDtcbiAgICB9XG5cbiAgICBlcnJvcihtZXNzYWdlKSB7XG4gICAgICBpZiAoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dMZXZlbClbX2xvZ0xldmVsXSA+PSBsb2dMZXZlbHMuRVJST1IpIHtcbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2cpW19sb2ddKCdlcnJvcicsIG1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGluZm8obWVzc2FnZSkge1xuICAgICAgaWYgKF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nTGV2ZWwpW19sb2dMZXZlbF0gPj0gbG9nTGV2ZWxzLklORk8pIHtcbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2cpW19sb2ddKCdsb2cnLCBtZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkZWJ1ZyhtZXNzYWdlKSB7XG4gICAgICBpZiAoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dMZXZlbClbX2xvZ0xldmVsXSA+PSBsb2dMZXZlbHMuREVCVUcgfHwgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9pc0xlZ2FjeURlYnVnKVtfaXNMZWdhY3lEZWJ1Z10pIHtcbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2cpW19sb2ddKCdkZWJ1ZycsIG1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGRlYnVnUEUobWVzc2FnZSkge1xuICAgICAgaWYgKF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nTGV2ZWwpW19sb2dMZXZlbF0gPj0gbG9nTGV2ZWxzLkRFQlVHX1BFKSB7XG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nKVtfbG9nXSgnZGVidWdfcGUnLCBtZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXBvcnRFcnJvcihjb2RlLCBkZXNjcmlwdGlvbikge1xuICAgICAgdGhpcy53enJrRXJyb3IuYyA9IGNvZGU7XG4gICAgICB0aGlzLnd6cmtFcnJvci5kID0gZGVzY3JpcHRpb247XG4gICAgICB0aGlzLmVycm9yKFwiXCIuY29uY2F0KENMRVZFUlRBUF9FUlJPUl9QUkVGSVgsIFwiIFwiKS5jb25jYXQoY29kZSwgXCI6IFwiKS5jb25jYXQoZGVzY3JpcHRpb24pKTtcbiAgICB9XG5cbiAgfVxuXG4gIHZhciBfbG9nMiA9IGZ1bmN0aW9uIF9sb2cyKGxldmVsLCBtZXNzYWdlKSB7XG4gICAgaWYgKHdpbmRvdy5jb25zb2xlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB0cyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICBjb25zb2xlW2xldmVsXShcIkNsZXZlclRhcCBbXCIuY29uY2F0KHRzLCBcIl06IFwiKS5jb25jYXQobWVzc2FnZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG4gIH07XG5cbiAgdmFyIF9nZXRfaXNMZWdhY3lEZWJ1ZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHNlc3Npb25TdG9yYWdlICE9PSAndW5kZWZpbmVkJyAmJiBzZXNzaW9uU3RvcmFnZS5XWlJLX0QgPT09ICcnO1xuICB9O1xuXG4gIHZhciBfbG9nZ2VyJDUgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImxvZ2dlclwiKTtcblxuICB2YXIgX3Nlc3Npb25JZCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwic2Vzc2lvbklkXCIpO1xuXG4gIHZhciBfaXNQZXJzb25hbGlzYXRpb25BY3RpdmUkMyA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiaXNQZXJzb25hbGlzYXRpb25BY3RpdmVcIik7XG5cbiAgY2xhc3MgU2Vzc2lvbk1hbmFnZXIge1xuICAgIC8vIFNDT09LSUVfTkFNRVxuICAgIGNvbnN0cnVjdG9yKF9yZWYpIHtcbiAgICAgIGxldCB7XG4gICAgICAgIGxvZ2dlcixcbiAgICAgICAgaXNQZXJzb25hbGlzYXRpb25BY3RpdmVcbiAgICAgIH0gPSBfcmVmO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9sb2dnZXIkNSwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX3Nlc3Npb25JZCwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlJDMsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgdGhpcy5jb29raWVOYW1lID0gdm9pZCAwO1xuICAgICAgdGhpcy5zY29va2llT2JqID0gdm9pZCAwO1xuICAgICAgdGhpcy5zZXNzaW9uSWQgPSBTdG9yYWdlTWFuYWdlci5nZXRNZXRhUHJvcCgnY3MnKTtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDUpW19sb2dnZXIkNV0gPSBsb2dnZXI7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlJDMpW19pc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZSQzXSA9IGlzUGVyc29uYWxpc2F0aW9uQWN0aXZlO1xuICAgIH1cblxuICAgIGdldCBzZXNzaW9uSWQoKSB7XG4gICAgICByZXR1cm4gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXNzaW9uSWQpW19zZXNzaW9uSWRdO1xuICAgIH1cblxuICAgIHNldCBzZXNzaW9uSWQoc2Vzc2lvbklkKSB7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3Nlc3Npb25JZClbX3Nlc3Npb25JZF0gPSBzZXNzaW9uSWQ7XG4gICAgfVxuXG4gICAgZ2V0U2Vzc2lvbkNvb2tpZU9iamVjdCgpIHtcbiAgICAgIGxldCBzY29va2llU3RyID0gU3RvcmFnZU1hbmFnZXIucmVhZENvb2tpZSh0aGlzLmNvb2tpZU5hbWUpO1xuICAgICAgbGV0IG9iaiA9IHt9O1xuXG4gICAgICBpZiAoc2Nvb2tpZVN0ciAhPSBudWxsKSB7XG4gICAgICAgIC8vIGNvbnZlcnRpbmcgYmFjayBzaW5nbGUgcXVvdGVzIHRvIGRvdWJsZSBmb3IgSlNPTiBwYXJzaW5nIC0gaHR0cDovL3d3dy5pYW5kZXZsaW4uY29tL2Jsb2cvMjAxMi8wNC9odG1sNS9jb29raWVzLWpzb24tbG9jYWxzdG9yYWdlLWFuZC1vcGVyYVxuICAgICAgICBzY29va2llU3RyID0gc2Nvb2tpZVN0ci5yZXBsYWNlKHNpbmdsZVF1b3RlUmVnZXgsICdcIicpO1xuICAgICAgICBvYmogPSBKU09OLnBhcnNlKHNjb29raWVTdHIpO1xuXG4gICAgICAgIGlmICghaXNPYmplY3Qob2JqKSkge1xuICAgICAgICAgIG9iaiA9IHt9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0eXBlb2Ygb2JqLnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAvLyBjaGVjayB0aW1lIGVsYXBzZWQgc2luY2UgbGFzdCByZXF1ZXN0XG4gICAgICAgICAgICBjb25zdCBsYXN0VGltZSA9IG9iai50O1xuICAgICAgICAgICAgY29uc3Qgbm93ID0gZ2V0Tm93KCk7XG5cbiAgICAgICAgICAgIGlmIChub3cgLSBsYXN0VGltZSA+IFNDT09LSUVfRVhQX1RJTUVfSU5fU0VDUyArIDYwKSB7XG4gICAgICAgICAgICAgIC8vIGFkZGluZyA2MCBzZWNvbmRzIHRvIGNvbXBlbnNhdGUgZm9yIGluLWpvdXJuZXkgcmVxdWVzdHNcbiAgICAgICAgICAgICAgLy8gaWRlYWxseSB0aGUgY29va2llIHNob3VsZCd2ZSBkaWVkIGFmdGVyIFNDT09LSUVfRVhQX1RJTUVfSU5fU0VDUyBidXQgaXQncyBzdGlsbCBhcm91bmQgYXMgd2UgY2FuIHJlYWRcbiAgICAgICAgICAgICAgLy8gaGVuY2Ugd2Ugc2hvdWxkbid0IHVzZSBpdC5cbiAgICAgICAgICAgICAgb2JqID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2Nvb2tpZU9iaiA9IG9iajtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuXG4gICAgc2V0U2Vzc2lvbkNvb2tpZU9iamVjdChvYmopIHtcbiAgICAgIGNvbnN0IG9ialN0ciA9IEpTT04uc3RyaW5naWZ5KG9iaik7XG4gICAgICBTdG9yYWdlTWFuYWdlci5jcmVhdGVCcm9hZENvb2tpZSh0aGlzLmNvb2tpZU5hbWUsIG9ialN0ciwgU0NPT0tJRV9FWFBfVElNRV9JTl9TRUNTLCBnZXRIb3N0TmFtZSgpKTtcbiAgICB9XG5cbiAgICBtYW5hZ2VTZXNzaW9uKHNlc3Npb24pIHtcbiAgICAgIC8vIGZpcnN0IHRpbWUuIGNoZWNrIGlmIGN1cnJlbnQgc2Vzc2lvbiBpZCBpbiBsb2NhbHN0b3JhZ2UgaXMgc2FtZVxuICAgICAgLy8gaWYgbm90IHNhbWUgdGhlbiBwcmV2ID0gY3VycmVudCBhbmQgY3VycmVudCA9IHRoaXMgbmV3IHNlc3Npb25cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5zZXNzaW9uSWQgPT09ICd1bmRlZmluZWQnIHx8IHRoaXMuc2Vzc2lvbklkICE9PSBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTZXNzaW9uSW5MUyA9IFN0b3JhZ2VNYW5hZ2VyLmdldE1ldGFQcm9wKCdjcycpOyAvLyBpZiBzZXNzaW9uSWQgaW4gbWV0YSBpcyB1bmRlZmluZWQgLSBzZXQgY3VycmVudCB0byBib3RoXG5cbiAgICAgICAgaWYgKHR5cGVvZiBjdXJyZW50U2Vzc2lvbkluTFMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgU3RvcmFnZU1hbmFnZXIuc2V0TWV0YVByb3AoJ3BzJywgc2Vzc2lvbik7XG4gICAgICAgICAgU3RvcmFnZU1hbmFnZXIuc2V0TWV0YVByb3AoJ2NzJywgc2Vzc2lvbik7XG4gICAgICAgICAgU3RvcmFnZU1hbmFnZXIuc2V0TWV0YVByb3AoJ3NjJywgMSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFNlc3Npb25JbkxTICE9PSBzZXNzaW9uKSB7XG4gICAgICAgICAgLy8gbm90IHNhbWUgYXMgc2Vzc2lvbiBpbiBsb2NhbCBzdG9yYWdlLiBuZXcgc2Vzc2lvblxuICAgICAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNldE1ldGFQcm9wKCdwcycsIGN1cnJlbnRTZXNzaW9uSW5MUyk7XG4gICAgICAgICAgU3RvcmFnZU1hbmFnZXIuc2V0TWV0YVByb3AoJ2NzJywgc2Vzc2lvbik7XG4gICAgICAgICAgbGV0IHNlc3Npb25Db3VudCA9IFN0b3JhZ2VNYW5hZ2VyLmdldE1ldGFQcm9wKCdzYycpO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBzZXNzaW9uQ291bnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBzZXNzaW9uQ291bnQgPSAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNldE1ldGFQcm9wKCdzYycsIHNlc3Npb25Db3VudCArIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXNzaW9uSWQgPSBzZXNzaW9uO1xuICAgICAgfVxuICAgIH1cblxuICAgIGdldFRpbWVFbGFwc2VkKCkge1xuICAgICAgaWYgKCFfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlJDMpW19pc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZSQzXSgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuc2Nvb2tpZU9iaiAhPSBudWxsKSB7XG4gICAgICAgIC8vIFRPRE86IGNoZWNrIGxvZ2ljP1xuICAgICAgICB0aGlzLnNjb29raWVPYmogPSB0aGlzLmdldFNlc3Npb25Db29raWVPYmplY3QoKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc2Vzc2lvblN0YXJ0ID0gdGhpcy5zY29va2llT2JqLnM7XG5cbiAgICAgIGlmIChzZXNzaW9uU3RhcnQgIT0gbnVsbCkge1xuICAgICAgICBjb25zdCB0cyA9IGdldE5vdygpO1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih0cyAtIHNlc3Npb25TdGFydCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZ2V0UGFnZUNvdW50KCkge1xuICAgICAgaWYgKCFfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlJDMpW19pc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZSQzXSgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuc2Nvb2tpZU9iaiAhPSBudWxsKSB7XG4gICAgICAgIC8vIFRPRE86IGNoZWNrIGxvZ2ljXG4gICAgICAgIHRoaXMuc2Nvb2tpZU9iaiA9IHRoaXMuZ2V0U2Vzc2lvbkNvb2tpZU9iamVjdCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5zY29va2llT2JqLnA7XG4gICAgfVxuXG4gIH1cblxuICBsZXQgc2VxTm8gPSAwO1xuICBsZXQgcmVxdWVzdFRpbWUgPSAwO1xuXG4gIHZhciBfbG9nZ2VyJDYgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImxvZ2dlclwiKTtcblxuICB2YXIgX2FjY291bnQkMiA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiYWNjb3VudFwiKTtcblxuICB2YXIgX2RldmljZSQyID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJkZXZpY2VcIik7XG5cbiAgdmFyIF9zZXNzaW9uJDIgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInNlc3Npb25cIik7XG5cbiAgdmFyIF9pc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZSQ0ID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJpc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZVwiKTtcblxuICB2YXIgX2NsZWFyQ29va2llID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJjbGVhckNvb2tpZVwiKTtcblxuICB2YXIgX2FkZFRvTG9jYWxFdmVudE1hcCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiYWRkVG9Mb2NhbEV2ZW50TWFwXCIpO1xuXG4gIGNsYXNzIFJlcXVlc3RNYW5hZ2VyIHtcbiAgICBjb25zdHJ1Y3RvcihfcmVmKSB7XG4gICAgICBsZXQge1xuICAgICAgICBsb2dnZXIsXG4gICAgICAgIGFjY291bnQsXG4gICAgICAgIGRldmljZSxcbiAgICAgICAgc2Vzc2lvbixcbiAgICAgICAgaXNQZXJzb25hbGlzYXRpb25BY3RpdmVcbiAgICAgIH0gPSBfcmVmO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9hZGRUb0xvY2FsRXZlbnRNYXAsIHtcbiAgICAgICAgdmFsdWU6IF9hZGRUb0xvY2FsRXZlbnRNYXAyXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfbG9nZ2VyJDYsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9hY2NvdW50JDIsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9kZXZpY2UkMiwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX3Nlc3Npb24kMiwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlJDQsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9jbGVhckNvb2tpZSwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIHRoaXMucHJvY2Vzc2luZ0JhY2t1cCA9IGZhbHNlO1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkNilbX2xvZ2dlciQ2XSA9IGxvZ2dlcjtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWNjb3VudCQyKVtfYWNjb3VudCQyXSA9IGFjY291bnQ7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2RldmljZSQyKVtfZGV2aWNlJDJdID0gZGV2aWNlO1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXNzaW9uJDIpW19zZXNzaW9uJDJdID0gc2Vzc2lvbjtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfaXNQZXJzb25hbGlzYXRpb25BY3RpdmUkNClbX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlJDRdID0gaXNQZXJzb25hbGlzYXRpb25BY3RpdmU7XG4gICAgICBSZXF1ZXN0RGlzcGF0Y2hlci5sb2dnZXIgPSBsb2dnZXI7XG4gICAgICBSZXF1ZXN0RGlzcGF0Y2hlci5kZXZpY2UgPSBkZXZpY2U7XG4gICAgICBSZXF1ZXN0RGlzcGF0Y2hlci5hY2NvdW50ID0gYWNjb3VudDtcbiAgICB9XG5cbiAgICBwcm9jZXNzQmFja3VwRXZlbnRzKCkge1xuICAgICAgY29uc3QgYmFja3VwTWFwID0gU3RvcmFnZU1hbmFnZXIucmVhZEZyb21MU29yQ29va2llKExDT09LSUVfTkFNRSk7XG5cbiAgICAgIGlmICh0eXBlb2YgYmFja3VwTWFwID09PSAndW5kZWZpbmVkJyB8fCBiYWNrdXBNYXAgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnByb2Nlc3NpbmdCYWNrdXAgPSB0cnVlO1xuXG4gICAgICBmb3IgKGNvbnN0IGlkeCBpbiBiYWNrdXBNYXApIHtcbiAgICAgICAgaWYgKGJhY2t1cE1hcC5oYXNPd25Qcm9wZXJ0eShpZHgpKSB7XG4gICAgICAgICAgY29uc3QgYmFja3VwRXZlbnQgPSBiYWNrdXBNYXBbaWR4XTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgYmFja3VwRXZlbnQuZmlyZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ2KVtfbG9nZ2VyJDZdLmRlYnVnKCdQcm9jZXNzaW5nIGJhY2t1cCBldmVudCA6ICcgKyBiYWNrdXBFdmVudC5xKTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBiYWNrdXBFdmVudC5xICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICBSZXF1ZXN0RGlzcGF0Y2hlci5maXJlUmVxdWVzdChiYWNrdXBFdmVudC5xKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYmFja3VwRXZlbnQuZmlyZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBTdG9yYWdlTWFuYWdlci5zYXZlVG9MU29yQ29va2llKExDT09LSUVfTkFNRSwgYmFja3VwTWFwKTtcbiAgICAgIHRoaXMucHJvY2Vzc2luZ0JhY2t1cCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGFkZFN5c3RlbURhdGFUb09iamVjdChkYXRhT2JqZWN0LCBpZ25vcmVUcmltKSB7XG4gICAgICAvLyBpZ25vcmUgdHJpbSBmb3IgY2hyb21lIG5vdGlmaWNhdGlvbnM7IHVuZGVmaW5lZCBldmVyeXdoZXJlIGVsc2VcbiAgICAgIGlmICh0eXBlb2YgaWdub3JlVHJpbSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZGF0YU9iamVjdCA9IHJlbW92ZVVuc3VwcG9ydGVkQ2hhcnMoZGF0YU9iamVjdCwgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkNilbX2xvZ2dlciQ2XSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNPYmplY3RFbXB0eShfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ2KVtfbG9nZ2VyJDZdLnd6cmtFcnJvcikpIHtcbiAgICAgICAgZGF0YU9iamVjdC53enJrX2Vycm9yID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkNilbX2xvZ2dlciQ2XS53enJrRXJyb3I7XG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDYpW19sb2dnZXIkNl0ud3pya0Vycm9yID0ge307XG4gICAgICB9XG5cbiAgICAgIGRhdGFPYmplY3QuaWQgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2FjY291bnQkMilbX2FjY291bnQkMl0uaWQ7XG5cbiAgICAgIGlmIChpc1ZhbHVlVmFsaWQoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9kZXZpY2UkMilbX2RldmljZSQyXS5nY29va2llKSkge1xuICAgICAgICBkYXRhT2JqZWN0LmcgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2RldmljZSQyKVtfZGV2aWNlJDJdLmdjb29raWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG9iaiA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfc2Vzc2lvbiQyKVtfc2Vzc2lvbiQyXS5nZXRTZXNzaW9uQ29va2llT2JqZWN0KCk7XG5cbiAgICAgIGRhdGFPYmplY3QucyA9IG9iai5zOyAvLyBzZXNzaW9uIGNvb2tpZVxuXG4gICAgICBkYXRhT2JqZWN0LnBnID0gdHlwZW9mIG9iai5wID09PSAndW5kZWZpbmVkJyA/IDEgOiBvYmoucDsgLy8gUGFnZSBjb3VudFxuXG4gICAgICBsZXQgcHJvdG8gPSBkb2N1bWVudC5sb2NhdGlvbi5wcm90b2NvbDtcbiAgICAgIHByb3RvID0gcHJvdG8ucmVwbGFjZSgnOicsICcnKTtcbiAgICAgIGRhdGFPYmplY3QuYWYgPSB7IC4uLmRhdGFPYmplY3QuYWYsXG4gICAgICAgIGxpYjogJ3dlYi1zZGstdjEuOS4yJyxcbiAgICAgICAgcHJvdG9jb2w6IHByb3RvLFxuICAgICAgICAuLi4kY3QuZmx1dHRlclZlcnNpb25cbiAgICAgIH07IC8vIGFwcCBmaWVsZHNcblxuICAgICAgaWYgKHNlc3Npb25TdG9yYWdlLmhhc093blByb3BlcnR5KCdXWlJLX0QnKSkge1xuICAgICAgICBkYXRhT2JqZWN0LmRlYnVnID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRhdGFPYmplY3Q7XG4gICAgfVxuXG4gICAgYWRkRmxhZ3MoZGF0YSkge1xuICAgICAgLy8gY2hlY2sgaWYgY29va2llIHNob3VsZCBiZSBjbGVhcmVkLlxuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9jbGVhckNvb2tpZSlbX2NsZWFyQ29va2llXSA9IFN0b3JhZ2VNYW5hZ2VyLmdldEFuZENsZWFyTWV0YVByb3AoQ0xFQVIpO1xuXG4gICAgICBpZiAoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9jbGVhckNvb2tpZSlbX2NsZWFyQ29va2llXSAhPT0gdW5kZWZpbmVkICYmIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfY2xlYXJDb29raWUpW19jbGVhckNvb2tpZV0pIHtcbiAgICAgICAgZGF0YS5yYyA9IHRydWU7XG5cbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkNilbX2xvZ2dlciQ2XS5kZWJ1ZygncmVzZXQgY29va2llIHNlbnQgaW4gcmVxdWVzdCBhbmQgY2xlYXJlZCBmcm9tIG1ldGEgZm9yIGZ1dHVyZSByZXF1ZXN0cy4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfaXNQZXJzb25hbGlzYXRpb25BY3RpdmUkNClbX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlJDRdKCkpIHtcbiAgICAgICAgY29uc3QgbGFzdFN5bmNUaW1lID0gU3RvcmFnZU1hbmFnZXIuZ2V0TWV0YVByb3AoJ2xzVGltZScpO1xuICAgICAgICBjb25zdCBleHBpcnlTZWNvbmRzID0gU3RvcmFnZU1hbmFnZXIuZ2V0TWV0YVByb3AoJ2V4VHMnKTsgLy8gZHN5bmMgbm90IGZvdW5kIGluIGxvY2FsIHN0b3JhZ2UgLSBnZXQgZGF0YSBmcm9tIHNlcnZlclxuXG4gICAgICAgIGlmICh0eXBlb2YgbGFzdFN5bmNUaW1lID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgZXhwaXJ5U2Vjb25kcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBkYXRhLmRzeW5jID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBub3cgPSBnZXROb3coKTsgLy8gbGFzdCBzeW5jIHRpbWUgaGFzIGV4cGlyZWQgLSBnZXQgZnJlc2ggZGF0YSBmcm9tIHNlcnZlclxuXG4gICAgICAgIGlmIChsYXN0U3luY1RpbWUgKyBleHBpcnlTZWNvbmRzIDwgbm93KSB7XG4gICAgICAgICAgZGF0YS5kc3luYyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IC8vIHNhdmVzIHVybCB0byBiYWNrdXAgY2FjaGUgYW5kIGZpcmVzIHRoZSByZXF1ZXN0XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IG92ZXJyaWRlIHdoZXRoZXIgdGhlIHJlcXVlc3QgY2FuIGdvIHRocm91Z2ggb3Igbm90XG4gICAgICogQHBhcmFtIHtCb29sZWFufSBzZW5kT1VMRmxhZyAtIHRydWUgaW4gY2FzZSBvZiBhIE9uIFVzZXIgTG9naW4gcmVxdWVzdFxuICAgICAqL1xuXG5cbiAgICBzYXZlQW5kRmlyZVJlcXVlc3QodXJsLCBvdmVycmlkZSwgc2VuZE9VTEZsYWcsIGV2dE5hbWUpIHtcbiAgICAgIGNvbnN0IG5vdyA9IGdldE5vdygpO1xuICAgICAgdXJsID0gYWRkVG9VUkwodXJsLCAncm4nLCArKyRjdC5nbG9iYWxDYWNoZS5SRVFfTik7XG4gICAgICBjb25zdCBkYXRhID0gdXJsICsgJyZpPScgKyBub3cgKyAnJnNuPScgKyBzZXFObztcbiAgICAgIFN0b3JhZ2VNYW5hZ2VyLmJhY2t1cEV2ZW50KGRhdGEsICRjdC5nbG9iYWxDYWNoZS5SRVFfTiwgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkNilbX2xvZ2dlciQ2XSk7IC8vIGlmIG9mZmxpbmUgaXMgc2V0IHRvIHRydWUsIHNhdmUgdGhlIHJlcXVlc3QgaW4gYmFja3VwIGFuZCByZXR1cm5cblxuICAgICAgaWYgKCRjdC5vZmZsaW5lKSByZXR1cm47IC8vIGlmIHRoZXJlIGlzIG5vIG92ZXJyaWRlXG4gICAgICAvLyBhbmQgYW4gT1VMIHJlcXVlc3QgaXMgbm90IGluIHByb2dyZXNzXG4gICAgICAvLyB0aGVuIHByb2Nlc3MgdGhlIHJlcXVlc3QgYXMgaXQgaXNcbiAgICAgIC8vIGVsc2UgYmxvY2sgdGhlIHJlcXVlc3RcbiAgICAgIC8vIG5vdGUgLSAkY3QuYmxvY2tSZXF1ZXN0IHNob3VsZCBpZGVhbGx5IGJlIHVzZWQgZm9yIG92ZXJyaWRlXG5cbiAgICAgIGlmICgoIW92ZXJyaWRlIHx8IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfY2xlYXJDb29raWUpW19jbGVhckNvb2tpZV0gIT09IHVuZGVmaW5lZCAmJiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2NsZWFyQ29va2llKVtfY2xlYXJDb29raWVdKSAmJiAhd2luZG93LmlzT1VMSW5Qcm9ncmVzcykge1xuICAgICAgICBpZiAobm93ID09PSByZXF1ZXN0VGltZSkge1xuICAgICAgICAgIHNlcU5vKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVxdWVzdFRpbWUgPSBub3c7XG4gICAgICAgICAgc2VxTm8gPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgd2luZG93Lm91bFJlcU4gPSAkY3QuZ2xvYmFsQ2FjaGUuUkVRX047XG4gICAgICAgIFJlcXVlc3REaXNwYXRjaGVyLmZpcmVSZXF1ZXN0KGRhdGEsIGZhbHNlLCBzZW5kT1VMRmxhZywgZXZ0TmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ2KVtfbG9nZ2VyJDZdLmRlYnVnKFwiTm90IGZpcmVkIGR1ZSB0byBvdmVycmlkZSAtIFwiLmNvbmNhdCgkY3QuYmxvY2tSZXF1ZXN0LCBcIiBvciBjbGVhckNvb2tpZSAtIFwiKS5jb25jYXQoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9jbGVhckNvb2tpZSlbX2NsZWFyQ29va2llXSwgXCIgb3IgT1VMIHJlcXVlc3QgaW4gcHJvZ3Jlc3MgLSBcIikuY29uY2F0KHdpbmRvdy5pc09VTEluUHJvZ3Jlc3MpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1bnJlZ2lzdGVyVG9rZW5Gb3JHdWlkKGdpdmVuR1VJRCkge1xuICAgICAgY29uc3QgcGF5bG9hZCA9IFN0b3JhZ2VNYW5hZ2VyLnJlYWRGcm9tTFNvckNvb2tpZShQVVNIX1NVQlNDUklQVElPTl9EQVRBKTsgLy8gU2VuZCB1bnJlZ2lzdGVyIGV2ZW50IG9ubHkgd2hlbiB0b2tlbiBpcyBhdmFpbGFibGVcblxuICAgICAgaWYgKHBheWxvYWQpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHt9O1xuICAgICAgICBkYXRhLnR5cGUgPSAnZGF0YSc7XG5cbiAgICAgICAgaWYgKGlzVmFsdWVWYWxpZChnaXZlbkdVSUQpKSB7XG4gICAgICAgICAgZGF0YS5nID0gZ2l2ZW5HVUlEO1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0YS5hY3Rpb24gPSAndW5yZWdpc3Rlcic7XG4gICAgICAgIGRhdGEuaWQgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2FjY291bnQkMilbX2FjY291bnQkMl0uaWQ7XG5cbiAgICAgICAgY29uc3Qgb2JqID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXNzaW9uJDIpW19zZXNzaW9uJDJdLmdldFNlc3Npb25Db29raWVPYmplY3QoKTtcblxuICAgICAgICBkYXRhLnMgPSBvYmouczsgLy8gc2Vzc2lvbiBjb29raWVcblxuICAgICAgICBjb25zdCBjb21wcmVzc2VkRGF0YSA9IGNvbXByZXNzRGF0YShKU09OLnN0cmluZ2lmeShkYXRhKSwgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkNilbX2xvZ2dlciQ2XSk7XG5cbiAgICAgICAgbGV0IHBhZ2VMb2FkVXJsID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9hY2NvdW50JDIpW19hY2NvdW50JDJdLmRhdGFQb3N0VVJMO1xuXG4gICAgICAgIHBhZ2VMb2FkVXJsID0gYWRkVG9VUkwocGFnZUxvYWRVcmwsICd0eXBlJywgJ2RhdGEnKTtcbiAgICAgICAgcGFnZUxvYWRVcmwgPSBhZGRUb1VSTChwYWdlTG9hZFVybCwgJ2QnLCBjb21wcmVzc2VkRGF0YSk7XG4gICAgICAgIFJlcXVlc3REaXNwYXRjaGVyLmZpcmVSZXF1ZXN0KHBhZ2VMb2FkVXJsLCB0cnVlKTtcbiAgICAgICAgU3RvcmFnZU1hbmFnZXIuc2F2ZVRvTFNvckNvb2tpZShGSVJFX1BVU0hfVU5SRUdJU1RFUkVELCBmYWxzZSk7XG4gICAgICB9IC8vIFJFR0lTVEVSIFRPS0VOXG5cblxuICAgICAgdGhpcy5yZWdpc3RlclRva2VuKHBheWxvYWQpO1xuICAgIH1cblxuICAgIHJlZ2lzdGVyVG9rZW4ocGF5bG9hZCkge1xuICAgICAgaWYgKCFwYXlsb2FkKSByZXR1cm47IC8vIGFkZCBnY29va2llIGV0YyB0byB0aGUgcGF5bG9hZFxuXG4gICAgICBwYXlsb2FkID0gdGhpcy5hZGRTeXN0ZW1EYXRhVG9PYmplY3QocGF5bG9hZCwgdHJ1ZSk7XG4gICAgICBwYXlsb2FkID0gSlNPTi5zdHJpbmdpZnkocGF5bG9hZCk7XG5cbiAgICAgIGxldCBwYWdlTG9hZFVybCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWNjb3VudCQyKVtfYWNjb3VudCQyXS5kYXRhUG9zdFVSTDtcblxuICAgICAgcGFnZUxvYWRVcmwgPSBhZGRUb1VSTChwYWdlTG9hZFVybCwgJ3R5cGUnLCAnZGF0YScpO1xuICAgICAgcGFnZUxvYWRVcmwgPSBhZGRUb1VSTChwYWdlTG9hZFVybCwgJ2QnLCBjb21wcmVzc0RhdGEocGF5bG9hZCwgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkNilbX2xvZ2dlciQ2XSkpO1xuICAgICAgUmVxdWVzdERpc3BhdGNoZXIuZmlyZVJlcXVlc3QocGFnZUxvYWRVcmwpOyAvLyBzZXQgaW4gbG9jYWxzdG9yYWdlXG5cbiAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNhdmUoV0VCUFVTSF9MU19LRVksICdvaycpO1xuICAgIH1cblxuICAgIHByb2Nlc3NFdmVudChkYXRhKSB7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2FkZFRvTG9jYWxFdmVudE1hcClbX2FkZFRvTG9jYWxFdmVudE1hcF0oZGF0YS5ldnROYW1lKTtcblxuICAgICAgZGF0YSA9IHRoaXMuYWRkU3lzdGVtRGF0YVRvT2JqZWN0KGRhdGEsIHVuZGVmaW5lZCk7XG4gICAgICB0aGlzLmFkZEZsYWdzKGRhdGEpO1xuICAgICAgZGF0YVtDQU1QX0NPT0tJRV9OQU1FXSA9IGdldENhbXBhaWduT2JqRm9yTGMoKTtcbiAgICAgIGNvbnN0IGNvbXByZXNzZWREYXRhID0gY29tcHJlc3NEYXRhKEpTT04uc3RyaW5naWZ5KGRhdGEpLCBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ2KVtfbG9nZ2VyJDZdKTtcblxuICAgICAgbGV0IHBhZ2VMb2FkVXJsID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9hY2NvdW50JDIpW19hY2NvdW50JDJdLmRhdGFQb3N0VVJMO1xuXG4gICAgICBwYWdlTG9hZFVybCA9IGFkZFRvVVJMKHBhZ2VMb2FkVXJsLCAndHlwZScsIEVWVF9QVVNIKTtcbiAgICAgIHBhZ2VMb2FkVXJsID0gYWRkVG9VUkwocGFnZUxvYWRVcmwsICdkJywgY29tcHJlc3NlZERhdGEpO1xuICAgICAgdGhpcy5zYXZlQW5kRmlyZVJlcXVlc3QocGFnZUxvYWRVcmwsICRjdC5ibG9ja1JlcXVlc3QsIGZhbHNlLCBkYXRhLmV2dE5hbWUpO1xuICAgIH1cblxuICAgIHBvc3QodXJsLCBib2R5KSB7XG4gICAgICByZXR1cm4gZmV0Y2godXJsLCB7XG4gICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9LFxuICAgICAgICBib2R5OiBib2R5XG4gICAgICB9KS50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IHJlc3BvbnNlO1xuICAgICAgfSkudGhlbihkYXRhID0+IHtcbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkNilbX2xvZ2dlciQ2XS5kZWJ1ZygnU3luYyBkYXRhIHN1Y2Nlc3NmdWwnLCBkYXRhKTtcblxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0pLmNhdGNoKGUgPT4ge1xuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ2KVtfbG9nZ2VyJDZdLmRlYnVnKCdFcnJvciBpbiBzeW5jaW5nIHZhcmlhYmxlcycsIGUpO1xuXG4gICAgICAgIHRocm93IGU7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgfVxuXG4gIHZhciBfYWRkVG9Mb2NhbEV2ZW50TWFwMiA9IGZ1bmN0aW9uIF9hZGRUb0xvY2FsRXZlbnRNYXAyKGV2dE5hbWUpIHtcbiAgICBpZiAoU3RvcmFnZU1hbmFnZXIuX2lzTG9jYWxTdG9yYWdlU3VwcG9ydGVkKCkpIHtcbiAgICAgIGlmICh0eXBlb2YgJGN0Lmdsb2JhbEV2ZW50c01hcCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgJGN0Lmdsb2JhbEV2ZW50c01hcCA9IFN0b3JhZ2VNYW5hZ2VyLnJlYWRGcm9tTFNvckNvb2tpZShFVl9DT09LSUUpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgJGN0Lmdsb2JhbEV2ZW50c01hcCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAkY3QuZ2xvYmFsRXZlbnRzTWFwID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3Qgbm93VHMgPSBnZXROb3coKTtcbiAgICAgIGxldCBldnREZXRhaWwgPSAkY3QuZ2xvYmFsRXZlbnRzTWFwW2V2dE5hbWVdO1xuXG4gICAgICBpZiAodHlwZW9mIGV2dERldGFpbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZXZ0RGV0YWlsWzJdID0gbm93VHM7XG4gICAgICAgIGV2dERldGFpbFswXSsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXZ0RGV0YWlsID0gW107XG4gICAgICAgIGV2dERldGFpbC5wdXNoKDEpO1xuICAgICAgICBldnREZXRhaWwucHVzaChub3dUcyk7XG4gICAgICAgIGV2dERldGFpbC5wdXNoKG5vd1RzKTtcbiAgICAgIH1cblxuICAgICAgJGN0Lmdsb2JhbEV2ZW50c01hcFtldnROYW1lXSA9IGV2dERldGFpbDtcbiAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNhdmVUb0xTb3JDb29raWUoRVZfQ09PS0lFLCAkY3QuZ2xvYmFsRXZlbnRzTWFwKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIF9yZXF1ZXN0JDQgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInJlcXVlc3RcIik7XG5cbiAgdmFyIF9hY2NvdW50JDMgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImFjY291bnRcIik7XG5cbiAgdmFyIF9vbGRWYWx1ZXMkMyA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwib2xkVmFsdWVzXCIpO1xuXG4gIHZhciBfbG9nZ2VyJDcgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImxvZ2dlclwiKTtcblxuICB2YXIgX3Byb2Nlc3NQcml2YWN5QXJyYXkgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInByb2Nlc3NQcml2YWN5QXJyYXlcIik7XG5cbiAgY2xhc3MgUHJpdmFjeSBleHRlbmRzIEFycmF5IHtcbiAgICBjb25zdHJ1Y3RvcihfcmVmLCB2YWx1ZXMpIHtcbiAgICAgIGxldCB7XG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIGFjY291bnQsXG4gICAgICAgIGxvZ2dlclxuICAgICAgfSA9IF9yZWY7XG4gICAgICBzdXBlcigpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9wcm9jZXNzUHJpdmFjeUFycmF5LCB7XG4gICAgICAgIHZhbHVlOiBfcHJvY2Vzc1ByaXZhY3lBcnJheTJcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9yZXF1ZXN0JDQsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9hY2NvdW50JDMsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9vbGRWYWx1ZXMkMywge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX2xvZ2dlciQ3LCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDcpW19sb2dnZXIkN10gPSBsb2dnZXI7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlcXVlc3QkNClbX3JlcXVlc3QkNF0gPSByZXF1ZXN0O1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9hY2NvdW50JDMpW19hY2NvdW50JDNdID0gYWNjb3VudDtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfb2xkVmFsdWVzJDMpW19vbGRWYWx1ZXMkM10gPSB2YWx1ZXM7XG4gICAgfVxuXG4gICAgcHVzaCgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBwcml2YWN5QXJyID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBwcml2YWN5QXJyW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICBpZiAoJGN0LmlzUHJpdmFjeUFyclB1c2hlZCkge1xuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3Byb2Nlc3NQcml2YWN5QXJyYXkpW19wcm9jZXNzUHJpdmFjeUFycmF5XSgkY3QucHJpdmFjeUFycmF5Lmxlbmd0aCA+IDAgPyAkY3QucHJpdmFjeUFycmF5IDogcHJpdmFjeUFycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkY3QucHJpdmFjeUFycmF5LnB1c2goLi4ucHJpdmFjeUFycik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIF9wcm9jZXNzT2xkVmFsdWVzKCkge1xuICAgICAgaWYgKF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfb2xkVmFsdWVzJDMpW19vbGRWYWx1ZXMkM10pIHtcbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9wcm9jZXNzUHJpdmFjeUFycmF5KVtfcHJvY2Vzc1ByaXZhY3lBcnJheV0oX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9vbGRWYWx1ZXMkMylbX29sZFZhbHVlcyQzXSk7XG4gICAgICB9XG5cbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfb2xkVmFsdWVzJDMpW19vbGRWYWx1ZXMkM10gPSBudWxsO1xuICAgIH1cblxuICB9XG5cbiAgdmFyIF9wcm9jZXNzUHJpdmFjeUFycmF5MiA9IGZ1bmN0aW9uIF9wcm9jZXNzUHJpdmFjeUFycmF5Mihwcml2YWN5QXJyKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocHJpdmFjeUFycikgJiYgcHJpdmFjeUFyci5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBwcml2YWN5T2JqID0gcHJpdmFjeUFyci5yZWR1Y2UoKHByZXYsIGN1cnIpID0+ICh7IC4uLnByZXYsXG4gICAgICAgIC4uLmN1cnJcbiAgICAgIH0pLCB7fSk7XG4gICAgICBsZXQgZGF0YSA9IHt9O1xuICAgICAgY29uc3QgcHJvZmlsZU9iaiA9IHt9O1xuICAgICAgdmFyIG9wdE91dCA9IGZhbHNlO1xuXG4gICAgICBpZiAocHJpdmFjeU9iai5oYXNPd25Qcm9wZXJ0eShPUFRPVVRfS0VZKSkge1xuICAgICAgICBvcHRPdXQgPSBwcml2YWN5T2JqW09QVE9VVF9LRVldO1xuXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0T3V0ID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBwcm9maWxlT2JqW0NUX09QVE9VVF9LRVldID0gb3B0T3V0OyAvLyBzaG91bGQgYmUgdHJ1ZSB3aGVuIHVzZXIgd2FudHMgdG8gb3B0IGluXG5cbiAgICAgICAgICAkY3QuaXNPcHRJblJlcXVlc3QgPSAhb3B0T3V0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwcml2YWN5T2JqLmhhc093blByb3BlcnR5KFVTRUlQX0tFWSkpIHtcbiAgICAgICAgY29uc3QgdXNlSVAgPSBwcml2YWN5T2JqW1VTRUlQX0tFWV07XG4gICAgICAgIGNvbnN0IHNob3VsZFVzZUlQID0gdHlwZW9mIHVzZUlQID09PSAnYm9vbGVhbicgPyB1c2VJUCA6IGZhbHNlO1xuICAgICAgICBTdG9yYWdlTWFuYWdlci5zZXRNZXRhUHJvcChVU0VJUF9LRVksIHNob3VsZFVzZUlQKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc09iamVjdEVtcHR5KHByb2ZpbGVPYmopKSB7XG4gICAgICAgIGRhdGEudHlwZSA9ICdwcm9maWxlJztcbiAgICAgICAgZGF0YS5wcm9maWxlID0gcHJvZmlsZU9iajtcbiAgICAgICAgZGF0YSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdCQ0KVtfcmVxdWVzdCQ0XS5hZGRTeXN0ZW1EYXRhVG9PYmplY3QoZGF0YSwgdW5kZWZpbmVkKTtcbiAgICAgICAgY29uc3QgY29tcHJlc3NlZERhdGEgPSBjb21wcmVzc0RhdGEoSlNPTi5zdHJpbmdpZnkoZGF0YSksIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDcpW19sb2dnZXIkN10pO1xuXG4gICAgICAgIGxldCBwYWdlTG9hZFVybCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWNjb3VudCQzKVtfYWNjb3VudCQzXS5kYXRhUG9zdFVSTDtcblxuICAgICAgICBwYWdlTG9hZFVybCA9IGFkZFRvVVJMKHBhZ2VMb2FkVXJsLCAndHlwZScsIEVWVF9QVVNIKTtcbiAgICAgICAgcGFnZUxvYWRVcmwgPSBhZGRUb1VSTChwYWdlTG9hZFVybCwgJ2QnLCBjb21wcmVzc2VkRGF0YSk7XG4gICAgICAgIHBhZ2VMb2FkVXJsID0gYWRkVG9VUkwocGFnZUxvYWRVcmwsIE9QVE9VVF9LRVksIG9wdE91dCA/ICd0cnVlJyA6ICdmYWxzZScpO1xuXG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdCQ0KVtfcmVxdWVzdCQ0XS5zYXZlQW5kRmlyZVJlcXVlc3QocGFnZUxvYWRVcmwsICRjdC5ibG9ja1JlcXVlc3QpO1xuXG4gICAgICAgIHByaXZhY3lBcnIuc3BsaWNlKDAsIHByaXZhY3lBcnIubGVuZ3RoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIF9vbGRWYWx1ZXMkNCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwib2xkVmFsdWVzXCIpO1xuXG4gIHZhciBfbG9nZ2VyJDggPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImxvZ2dlclwiKTtcblxuICB2YXIgX3JlcXVlc3QkNSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwicmVxdWVzdFwiKTtcblxuICB2YXIgX2FjY291bnQkNCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiYWNjb3VudFwiKTtcblxuICB2YXIgX3dpekFsZXJ0SlNQYXRoID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJ3aXpBbGVydEpTUGF0aFwiKTtcblxuICB2YXIgX2ZjbVB1YmxpY0tleSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiZmNtUHVibGljS2V5XCIpO1xuXG4gIHZhciBfc2V0VXBXZWJQdXNoID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJzZXRVcFdlYlB1c2hcIik7XG5cbiAgdmFyIF9zZXRVcFdlYlB1c2hOb3RpZmljYXRpb25zID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJzZXRVcFdlYlB1c2hOb3RpZmljYXRpb25zXCIpO1xuXG4gIHZhciBfc2V0QXBwbGljYXRpb25TZXJ2ZXJLZXkgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInNldEFwcGxpY2F0aW9uU2VydmVyS2V5XCIpO1xuXG4gIHZhciBfc2V0VXBTYWZhcmlOb3RpZmljYXRpb25zID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJzZXRVcFNhZmFyaU5vdGlmaWNhdGlvbnNcIik7XG5cbiAgdmFyIF9zZXRVcENocm9tZUZpcmVmb3hOb3RpZmljYXRpb25zID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJzZXRVcENocm9tZUZpcmVmb3hOb3RpZmljYXRpb25zXCIpO1xuXG4gIHZhciBfYWRkV2l6QWxlcnRKUyA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiYWRkV2l6QWxlcnRKU1wiKTtcblxuICB2YXIgX3JlbW92ZVdpekFsZXJ0SlMgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInJlbW92ZVdpekFsZXJ0SlNcIik7XG5cbiAgdmFyIF9oYW5kbGVOb3RpZmljYXRpb25SZWdpc3RyYXRpb24gPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImhhbmRsZU5vdGlmaWNhdGlvblJlZ2lzdHJhdGlvblwiKTtcblxuICBjbGFzcyBOb3RpZmljYXRpb25IYW5kbGVyIGV4dGVuZHMgQXJyYXkge1xuICAgIGNvbnN0cnVjdG9yKF9yZWYsIHZhbHVlcykge1xuICAgICAgbGV0IHtcbiAgICAgICAgbG9nZ2VyLFxuICAgICAgICBzZXNzaW9uLFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBhY2NvdW50XG4gICAgICB9ID0gX3JlZjtcbiAgICAgIHN1cGVyKCk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX2hhbmRsZU5vdGlmaWNhdGlvblJlZ2lzdHJhdGlvbiwge1xuICAgICAgICB2YWx1ZTogX2hhbmRsZU5vdGlmaWNhdGlvblJlZ2lzdHJhdGlvbjJcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9yZW1vdmVXaXpBbGVydEpTLCB7XG4gICAgICAgIHZhbHVlOiBfcmVtb3ZlV2l6QWxlcnRKUzJcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9hZGRXaXpBbGVydEpTLCB7XG4gICAgICAgIHZhbHVlOiBfYWRkV2l6QWxlcnRKUzJcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9zZXRVcENocm9tZUZpcmVmb3hOb3RpZmljYXRpb25zLCB7XG4gICAgICAgIHZhbHVlOiBfc2V0VXBDaHJvbWVGaXJlZm94Tm90aWZpY2F0aW9uczJcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9zZXRVcFNhZmFyaU5vdGlmaWNhdGlvbnMsIHtcbiAgICAgICAgdmFsdWU6IF9zZXRVcFNhZmFyaU5vdGlmaWNhdGlvbnMyXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfc2V0QXBwbGljYXRpb25TZXJ2ZXJLZXksIHtcbiAgICAgICAgdmFsdWU6IF9zZXRBcHBsaWNhdGlvblNlcnZlcktleTJcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9zZXRVcFdlYlB1c2hOb3RpZmljYXRpb25zLCB7XG4gICAgICAgIHZhbHVlOiBfc2V0VXBXZWJQdXNoTm90aWZpY2F0aW9uczJcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9zZXRVcFdlYlB1c2gsIHtcbiAgICAgICAgdmFsdWU6IF9zZXRVcFdlYlB1c2gyXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfb2xkVmFsdWVzJDQsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9sb2dnZXIkOCwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX3JlcXVlc3QkNSwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX2FjY291bnQkNCwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX3dpekFsZXJ0SlNQYXRoLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfZmNtUHVibGljS2V5LCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfd2l6QWxlcnRKU1BhdGgpW193aXpBbGVydEpTUGF0aF0gPSAnaHR0cHM6Ly9kMnIxeXAydzdiYnkydS5jbG91ZGZyb250Lm5ldC9qcy93enJrX2RpYWxvZy5taW4uanMnO1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9mY21QdWJsaWNLZXkpW19mY21QdWJsaWNLZXldID0gbnVsbDtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfb2xkVmFsdWVzJDQpW19vbGRWYWx1ZXMkNF0gPSB2YWx1ZXM7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ4KVtfbG9nZ2VyJDhdID0gbG9nZ2VyO1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0JDUpW19yZXF1ZXN0JDVdID0gcmVxdWVzdDtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWNjb3VudCQ0KVtfYWNjb3VudCQ0XSA9IGFjY291bnQ7XG4gICAgfVxuXG4gICAgcHVzaCgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBkaXNwbGF5QXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgZGlzcGxheUFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfc2V0VXBXZWJQdXNoKVtfc2V0VXBXZWJQdXNoXShkaXNwbGF5QXJncyk7XG5cbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIF9wcm9jZXNzT2xkVmFsdWVzKCkge1xuICAgICAgaWYgKF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfb2xkVmFsdWVzJDQpW19vbGRWYWx1ZXMkNF0pIHtcbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXRVcFdlYlB1c2gpW19zZXRVcFdlYlB1c2hdKF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfb2xkVmFsdWVzJDQpW19vbGRWYWx1ZXMkNF0pO1xuICAgICAgfVxuXG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX29sZFZhbHVlcyQ0KVtfb2xkVmFsdWVzJDRdID0gbnVsbDtcbiAgICB9XG5cbiAgICBfZW5hYmxlV2ViUHVzaChlbmFibGVkLCBhcHBsaWNhdGlvblNlcnZlcktleSkge1xuICAgICAgJGN0LndlYlB1c2hFbmFibGVkID0gZW5hYmxlZDtcblxuICAgICAgaWYgKGFwcGxpY2F0aW9uU2VydmVyS2V5ICE9IG51bGwpIHtcbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXRBcHBsaWNhdGlvblNlcnZlcktleSlbX3NldEFwcGxpY2F0aW9uU2VydmVyS2V5XShhcHBsaWNhdGlvblNlcnZlcktleSk7XG4gICAgICB9XG5cbiAgICAgIGlmICgkY3Qud2ViUHVzaEVuYWJsZWQgJiYgJGN0Lm5vdGlmQXBpLm5vdGlmRW5hYmxlZEZyb21BcGkpIHtcbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9oYW5kbGVOb3RpZmljYXRpb25SZWdpc3RyYXRpb24pW19oYW5kbGVOb3RpZmljYXRpb25SZWdpc3RyYXRpb25dKCRjdC5ub3RpZkFwaS5kaXNwbGF5QXJncyk7XG4gICAgICB9IGVsc2UgaWYgKCEkY3Qud2ViUHVzaEVuYWJsZWQgJiYgJGN0Lm5vdGlmQXBpLm5vdGlmRW5hYmxlZEZyb21BcGkpIHtcbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkOClbX2xvZ2dlciQ4XS5lcnJvcignRW5zdXJlIHRoYXQgd2ViIHB1c2ggbm90aWZpY2F0aW9ucyBhcmUgZnVsbHkgZW5hYmxlZCBhbmQgaW50ZWdyYXRlZCBiZWZvcmUgcmVxdWVzdGluZyB0aGVtJyk7XG4gICAgICB9XG4gICAgfVxuXG4gIH1cblxuICB2YXIgX3NldFVwV2ViUHVzaDIgPSBmdW5jdGlvbiBfc2V0VXBXZWJQdXNoMihkaXNwbGF5QXJncykge1xuICAgIGlmICgkY3Qud2ViUHVzaEVuYWJsZWQgJiYgZGlzcGxheUFyZ3MubGVuZ3RoID4gMCkge1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9oYW5kbGVOb3RpZmljYXRpb25SZWdpc3RyYXRpb24pW19oYW5kbGVOb3RpZmljYXRpb25SZWdpc3RyYXRpb25dKGRpc3BsYXlBcmdzKTtcbiAgICB9IGVsc2UgaWYgKCRjdC53ZWJQdXNoRW5hYmxlZCA9PSBudWxsICYmIGRpc3BsYXlBcmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICRjdC5ub3RpZkFwaS5ub3RpZkVuYWJsZWRGcm9tQXBpID0gdHJ1ZTtcbiAgICAgICRjdC5ub3RpZkFwaS5kaXNwbGF5QXJncyA9IGRpc3BsYXlBcmdzLnNsaWNlKCk7XG4gICAgfSBlbHNlIGlmICgkY3Qud2ViUHVzaEVuYWJsZWQgPT09IGZhbHNlICYmIGRpc3BsYXlBcmdzLmxlbmd0aCA+IDApIHtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDgpW19sb2dnZXIkOF0uZXJyb3IoJ01ha2Ugc3VyZSBwdXNoIG5vdGlmaWNhdGlvbnMgYXJlIGZ1bGx5IGVuYWJsZWQgYW5kIGludGVncmF0ZWQnKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIF9zZXRVcFdlYlB1c2hOb3RpZmljYXRpb25zMiA9IGZ1bmN0aW9uIF9zZXRVcFdlYlB1c2hOb3RpZmljYXRpb25zMihzdWJzY3JpcHRpb25DYWxsYmFjaywgc2VydmljZVdvcmtlclBhdGgsIGFwbnNXZWJQdXNoSWQsIGFwbnNTZXJ2aWNlVXJsKSB7XG4gICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lJykgIT09IC0xIHx8IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpICE9PSAtMSkge1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXRVcENocm9tZUZpcmVmb3hOb3RpZmljYXRpb25zKVtfc2V0VXBDaHJvbWVGaXJlZm94Tm90aWZpY2F0aW9uc10oc3Vic2NyaXB0aW9uQ2FsbGJhY2ssIHNlcnZpY2VXb3JrZXJQYXRoKTtcbiAgICB9IGVsc2UgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignU2FmYXJpJykgIT09IC0xKSB7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3NldFVwU2FmYXJpTm90aWZpY2F0aW9ucylbX3NldFVwU2FmYXJpTm90aWZpY2F0aW9uc10oc3Vic2NyaXB0aW9uQ2FsbGJhY2ssIGFwbnNXZWJQdXNoSWQsIGFwbnNTZXJ2aWNlVXJsKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIF9zZXRBcHBsaWNhdGlvblNlcnZlcktleTIgPSBmdW5jdGlvbiBfc2V0QXBwbGljYXRpb25TZXJ2ZXJLZXkyKGFwcGxpY2F0aW9uU2VydmVyS2V5KSB7XG4gICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9mY21QdWJsaWNLZXkpW19mY21QdWJsaWNLZXldID0gYXBwbGljYXRpb25TZXJ2ZXJLZXk7XG4gIH07XG5cbiAgdmFyIF9zZXRVcFNhZmFyaU5vdGlmaWNhdGlvbnMyID0gZnVuY3Rpb24gX3NldFVwU2FmYXJpTm90aWZpY2F0aW9uczIoc3Vic2NyaXB0aW9uQ2FsbGJhY2ssIGFwbnNXZWJQdXNoSWQsIGFwbnNTZXJ2aWNlVXJsKSB7XG4gICAgLy8gZW5zdXJlIHRoYXQgcHJvcGVyIGFyZ3VtZW50cyBhcmUgcGFzc2VkXG4gICAgaWYgKHR5cGVvZiBhcG5zV2ViUHVzaElkID09PSAndW5kZWZpbmVkJykge1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkOClbX2xvZ2dlciQ4XS5lcnJvcignRW5zdXJlIHRoYXQgQVBOUyBXZWIgUHVzaCBJRCBpcyBzdXBwbGllZCcpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYXBuc1NlcnZpY2VVcmwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ4KVtfbG9nZ2VyJDhdLmVycm9yKCdFbnN1cmUgdGhhdCBBUE5TIFdlYiBQdXNoIHNlcnZpY2UgcGF0aCBpcyBzdXBwbGllZCcpO1xuICAgIH1cblxuICAgIGlmICgnc2FmYXJpJyBpbiB3aW5kb3cgJiYgJ3B1c2hOb3RpZmljYXRpb24nIGluIHdpbmRvdy5zYWZhcmkpIHtcbiAgICAgIHdpbmRvdy5zYWZhcmkucHVzaE5vdGlmaWNhdGlvbi5yZXF1ZXN0UGVybWlzc2lvbihhcG5zU2VydmljZVVybCwgYXBuc1dlYlB1c2hJZCwge30sIHN1YnNjcmlwdGlvbiA9PiB7XG4gICAgICAgIGlmIChzdWJzY3JpcHRpb24ucGVybWlzc2lvbiA9PT0gJ2dyYW50ZWQnKSB7XG4gICAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uRGF0YSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc3Vic2NyaXB0aW9uKSk7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uRGF0YS5lbmRwb2ludCA9IHN1YnNjcmlwdGlvbi5kZXZpY2VUb2tlbjtcbiAgICAgICAgICBzdWJzY3JpcHRpb25EYXRhLmJyb3dzZXIgPSAnU2FmYXJpJztcbiAgICAgICAgICBTdG9yYWdlTWFuYWdlci5zYXZlVG9MU29yQ29va2llKFBVU0hfU1VCU0NSSVBUSU9OX0RBVEEsIHN1YnNjcmlwdGlvbkRhdGEpO1xuXG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0JDUpW19yZXF1ZXN0JDVdLnJlZ2lzdGVyVG9rZW4oc3Vic2NyaXB0aW9uRGF0YSk7XG5cbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ4KVtfbG9nZ2VyJDhdLmluZm8oJ1NhZmFyaSBXZWIgUHVzaCByZWdpc3RlcmVkLiBEZXZpY2UgVG9rZW46ICcgKyBzdWJzY3JpcHRpb24uZGV2aWNlVG9rZW4pO1xuICAgICAgICB9IGVsc2UgaWYgKHN1YnNjcmlwdGlvbi5wZXJtaXNzaW9uID09PSAnZGVuaWVkJykge1xuICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDgpW19sb2dnZXIkOF0uaW5mbygnRXJyb3Igc3Vic2NyaWJpbmcgdG8gU2FmYXJpIHdlYiBwdXNoJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgX3NldFVwQ2hyb21lRmlyZWZveE5vdGlmaWNhdGlvbnMyID0gZnVuY3Rpb24gX3NldFVwQ2hyb21lRmlyZWZveE5vdGlmaWNhdGlvbnMyKHN1YnNjcmlwdGlvbkNhbGxiYWNrLCBzZXJ2aWNlV29ya2VyUGF0aCkge1xuICAgIGxldCByZWdpc3RyYXRpb25TY29wZSA9ICcnO1xuXG4gICAgaWYgKCdzZXJ2aWNlV29ya2VyJyBpbiBuYXZpZ2F0b3IpIHtcbiAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKHNlcnZpY2VXb3JrZXJQYXRoKS50aGVuKHJlZ2lzdHJhdGlvbiA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgX193enJrX2FjY291bnRfaWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICAgIC8vIHNob3BpZnkgYWNjb3VudHMgLCBzaW5jZSB0aGUgc2VydmljZSB3b3JrZXIgaXMgbm90IGF0IHJvb3QsIHNlcnZpY2VXb3JrZXIucmVhZHkgaXMgbmV2ZXIgcmVzb2x2ZWQuXG4gICAgICAgICAgLy8gaGVuY2UgYWRkIGEgdGltZW91dCBhbmQgaG9wZSBzZXJ2aWNlV3Jva2VyIGlzIHJlYWR5IHdpdGhpbiB0aGF0IHRpbWUuXG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKHJlZ2lzdHJhdGlvbiksIDUwMDApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdHJhdGlvblNjb3BlID0gcmVnaXN0cmF0aW9uLnNjb3BlOyAvLyBJRiBTRVJWSUNFIFdPUktFUiBJUyBBVCBST09ULCBSRVRVUk4gVEhFIFJFQURZIFBST01JU0VcbiAgICAgICAgLy8gRUxTRSBJRiBDSFJPTUUgUkVUVVJOIFBST01JU0UgQUZURVIgNSBTRUNPTkRTXG4gICAgICAgIC8vIE9SIGdldFJlZ2lzdHJhdGlvbnMgUFJPTUlTRSBJRiBJVFMgRklSRUZPWFxuXG4gICAgICAgIGNvbnN0IHJvb3REaXJSZWdleCA9IC9eKFxcLj8pKFxcLz8pKFteL10qKS5qcyQvO1xuICAgICAgICBjb25zdCBpc1NlcnZpY2VXb3JrZXJBdFJvb3QgPSByb290RGlyUmVnZXgudGVzdChzZXJ2aWNlV29ya2VyUGF0aCk7XG5cbiAgICAgICAgaWYgKGlzU2VydmljZVdvcmtlckF0Um9vdCkge1xuICAgICAgICAgIHJldHVybiBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWFkeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUnKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZShyZWdpc3RyYXRpb24pLCA1MDAwKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5nZXRSZWdpc3RyYXRpb25zKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KS50aGVuKHNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24gPT4ge1xuICAgICAgICAvLyBJVFMgQU4gQVJSQVkgSU4gQ0FTRSBPRiBGSVJFRk9YLCBTTyBVU0UgVEhFIFJFR0lTVFJBVElPTiBXSVRIIFBST1BFUiBTQ09QRVxuICAgICAgICBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgIT09IC0xICYmIEFycmF5LmlzQXJyYXkoc2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbikpIHtcbiAgICAgICAgICBzZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uID0gc2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbi5maWx0ZXIoaSA9PiBpLnNjb3BlID09PSByZWdpc3RyYXRpb25TY29wZSlbMF07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdWJzY3JpYmVPYmogPSB7XG4gICAgICAgICAgdXNlclZpc2libGVPbmx5OiB0cnVlXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfZmNtUHVibGljS2V5KVtfZmNtUHVibGljS2V5XSAhPSBudWxsKSB7XG4gICAgICAgICAgc3Vic2NyaWJlT2JqLmFwcGxpY2F0aW9uU2VydmVyS2V5ID0gdXJsQmFzZTY0VG9VaW50OEFycmF5KF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfZmNtUHVibGljS2V5KVtfZmNtUHVibGljS2V5XSk7XG4gICAgICAgIH1cblxuICAgICAgICBzZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uLnB1c2hNYW5hZ2VyLnN1YnNjcmliZShzdWJzY3JpYmVPYmopLnRoZW4oc3Vic2NyaXB0aW9uID0+IHtcbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ4KVtfbG9nZ2VyJDhdLmluZm8oJ1NlcnZpY2UgV29ya2VyIHJlZ2lzdGVyZWQuIEVuZHBvaW50OiAnICsgc3Vic2NyaXB0aW9uLmVuZHBvaW50KTsgLy8gY29udmVydCB0aGUgc3Vic2NyaXB0aW9uIGtleXMgdG8gc3RyaW5nczsgdGhpcyBzZXRzIGl0IHVwIG5pY2VseSBmb3IgcHVzaGluZyB0byBMQ1xuXG5cbiAgICAgICAgICBjb25zdCBzdWJzY3JpcHRpb25EYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzdWJzY3JpcHRpb24pKTsgLy8gcmVtb3ZlIHRoZSBjb21tb24gY2hyb21lL2ZpcmVmb3ggZW5kcG9pbnQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgdG9rZW5cblxuICAgICAgICAgIGlmIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZScpICE9PSAtMSkge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uRGF0YS5lbmRwb2ludCA9IHN1YnNjcmlwdGlvbkRhdGEuZW5kcG9pbnQuc3BsaXQoJy8nKS5wb3AoKTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbkRhdGEuYnJvd3NlciA9ICdDaHJvbWUnO1xuICAgICAgICAgIH0gZWxzZSBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgIT09IC0xKSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25EYXRhLmVuZHBvaW50ID0gc3Vic2NyaXB0aW9uRGF0YS5lbmRwb2ludC5zcGxpdCgnLycpLnBvcCgpO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uRGF0YS5icm93c2VyID0gJ0ZpcmVmb3gnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNhdmVUb0xTb3JDb29raWUoUFVTSF9TVUJTQ1JJUFRJT05fREFUQSwgc3Vic2NyaXB0aW9uRGF0YSk7XG5cbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlcXVlc3QkNSlbX3JlcXVlc3QkNV0ucmVnaXN0ZXJUb2tlbihzdWJzY3JpcHRpb25EYXRhKTtcblxuICAgICAgICAgIGlmICh0eXBlb2Ygc3Vic2NyaXB0aW9uQ2FsbGJhY2sgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBzdWJzY3JpcHRpb25DYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uQ2FsbGJhY2soKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ4KVtfbG9nZ2VyJDhdLmVycm9yKCdFcnJvciBzdWJzY3JpYmluZzogJyArIGVycm9yKTsgLy8gdW5zdWJzY3JpYmUgZnJvbSB3ZWJwdXNoIGlmIGVycm9yXG5cblxuICAgICAgICAgIHNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24ucHVzaE1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uKCkudGhlbihzdWJzY3JpcHRpb24gPT4ge1xuICAgICAgICAgICAgaWYgKHN1YnNjcmlwdGlvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKS50aGVuKHN1Y2Nlc3NmdWwgPT4ge1xuICAgICAgICAgICAgICAgIC8vIFlvdSd2ZSBzdWNjZXNzZnVsbHkgdW5zdWJzY3JpYmVkXG4gICAgICAgICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkOClbX2xvZ2dlciQ4XS5pbmZvKCdVbnN1YnNjcmlwdGlvbiBzdWNjZXNzZnVsJyk7XG4gICAgICAgICAgICAgIH0pLmNhdGNoKGUgPT4ge1xuICAgICAgICAgICAgICAgIC8vIFVuc3Vic2NyaXB0aW9uIGZhaWxlZFxuICAgICAgICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDgpW19sb2dnZXIkOF0uZXJyb3IoJ0Vycm9yIHVuc3Vic2NyaWJpbmc6ICcgKyBlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkOClbX2xvZ2dlciQ4XS5lcnJvcignZXJyb3IgcmVnaXN0ZXJpbmcgc2VydmljZSB3b3JrZXI6ICcgKyBlcnIpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBfYWRkV2l6QWxlcnRKUzIgPSBmdW5jdGlvbiBfYWRkV2l6QWxlcnRKUzIoKSB7XG4gICAgY29uc3Qgc2NyaXB0VGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgc2NyaXB0VGFnLnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0L2phdmFzY3JpcHQnKTtcbiAgICBzY3JpcHRUYWcuc2V0QXR0cmlidXRlKCdpZCcsICd3enJrLWFsZXJ0LWpzJyk7XG4gICAgc2NyaXB0VGFnLnNldEF0dHJpYnV0ZSgnc3JjJywgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF93aXpBbGVydEpTUGF0aClbX3dpekFsZXJ0SlNQYXRoXSk7IC8vIGFkZCB0aGUgc2NyaXB0IHRhZyB0byB0aGUgZW5kIG9mIHRoZSBib2R5XG5cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdLmFwcGVuZENoaWxkKHNjcmlwdFRhZyk7XG4gICAgcmV0dXJuIHNjcmlwdFRhZztcbiAgfTtcblxuICB2YXIgX3JlbW92ZVdpekFsZXJ0SlMyID0gZnVuY3Rpb24gX3JlbW92ZVdpekFsZXJ0SlMyKCkge1xuICAgIGNvbnN0IHNjcmlwdFRhZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3enJrLWFsZXJ0LWpzJyk7XG4gICAgc2NyaXB0VGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0VGFnKTtcbiAgfTtcblxuICB2YXIgX2hhbmRsZU5vdGlmaWNhdGlvblJlZ2lzdHJhdGlvbjIgPSBmdW5jdGlvbiBfaGFuZGxlTm90aWZpY2F0aW9uUmVnaXN0cmF0aW9uMihkaXNwbGF5QXJncykge1xuICAgIC8vIG1ha2Ugc3VyZSBldmVyeXRoaW5nIGlzIHNwZWNpZmllZFxuICAgIGxldCB0aXRsZVRleHQ7XG4gICAgbGV0IGJvZHlUZXh0O1xuICAgIGxldCBva0J1dHRvblRleHQ7XG4gICAgbGV0IHJlamVjdEJ1dHRvblRleHQ7XG4gICAgbGV0IG9rQnV0dG9uQ29sb3I7XG4gICAgbGV0IHNraXBEaWFsb2c7XG4gICAgbGV0IGFza0FnYWluVGltZUluU2Vjb25kcztcbiAgICBsZXQgb2tDYWxsYmFjaztcbiAgICBsZXQgcmVqZWN0Q2FsbGJhY2s7XG4gICAgbGV0IHN1YnNjcmlwdGlvbkNhbGxiYWNrO1xuICAgIGxldCBzZXJ2aWNlV29ya2VyUGF0aDtcbiAgICBsZXQgaHR0cHNQb3B1cFBhdGg7XG4gICAgbGV0IGh0dHBzSWZyYW1lUGF0aDtcbiAgICBsZXQgYXBuc1dlYlB1c2hJZDtcbiAgICBsZXQgYXBuc1dlYlB1c2hTZXJ2aWNlVXJsO1xuXG4gICAgaWYgKGRpc3BsYXlBcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWYgKGlzT2JqZWN0KGRpc3BsYXlBcmdzWzBdKSkge1xuICAgICAgICBjb25zdCBub3RpZk9iaiA9IGRpc3BsYXlBcmdzWzBdO1xuICAgICAgICB0aXRsZVRleHQgPSBub3RpZk9iai50aXRsZVRleHQ7XG4gICAgICAgIGJvZHlUZXh0ID0gbm90aWZPYmouYm9keVRleHQ7XG4gICAgICAgIG9rQnV0dG9uVGV4dCA9IG5vdGlmT2JqLm9rQnV0dG9uVGV4dDtcbiAgICAgICAgcmVqZWN0QnV0dG9uVGV4dCA9IG5vdGlmT2JqLnJlamVjdEJ1dHRvblRleHQ7XG4gICAgICAgIG9rQnV0dG9uQ29sb3IgPSBub3RpZk9iai5va0J1dHRvbkNvbG9yO1xuICAgICAgICBza2lwRGlhbG9nID0gbm90aWZPYmouc2tpcERpYWxvZztcbiAgICAgICAgYXNrQWdhaW5UaW1lSW5TZWNvbmRzID0gbm90aWZPYmouYXNrQWdhaW5UaW1lSW5TZWNvbmRzO1xuICAgICAgICBva0NhbGxiYWNrID0gbm90aWZPYmoub2tDYWxsYmFjaztcbiAgICAgICAgcmVqZWN0Q2FsbGJhY2sgPSBub3RpZk9iai5yZWplY3RDYWxsYmFjaztcbiAgICAgICAgc3Vic2NyaXB0aW9uQ2FsbGJhY2sgPSBub3RpZk9iai5zdWJzY3JpcHRpb25DYWxsYmFjaztcbiAgICAgICAgc2VydmljZVdvcmtlclBhdGggPSBub3RpZk9iai5zZXJ2aWNlV29ya2VyUGF0aDtcbiAgICAgICAgaHR0cHNQb3B1cFBhdGggPSBub3RpZk9iai5odHRwc1BvcHVwUGF0aDtcbiAgICAgICAgaHR0cHNJZnJhbWVQYXRoID0gbm90aWZPYmouaHR0cHNJZnJhbWVQYXRoO1xuICAgICAgICBhcG5zV2ViUHVzaElkID0gbm90aWZPYmouYXBuc1dlYlB1c2hJZDtcbiAgICAgICAgYXBuc1dlYlB1c2hTZXJ2aWNlVXJsID0gbm90aWZPYmouYXBuc1dlYlB1c2hTZXJ2aWNlVXJsO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aXRsZVRleHQgPSBkaXNwbGF5QXJnc1swXTtcbiAgICAgIGJvZHlUZXh0ID0gZGlzcGxheUFyZ3NbMV07XG4gICAgICBva0J1dHRvblRleHQgPSBkaXNwbGF5QXJnc1syXTtcbiAgICAgIHJlamVjdEJ1dHRvblRleHQgPSBkaXNwbGF5QXJnc1szXTtcbiAgICAgIG9rQnV0dG9uQ29sb3IgPSBkaXNwbGF5QXJnc1s0XTtcbiAgICAgIHNraXBEaWFsb2cgPSBkaXNwbGF5QXJnc1s1XTtcbiAgICAgIGFza0FnYWluVGltZUluU2Vjb25kcyA9IGRpc3BsYXlBcmdzWzZdO1xuICAgIH1cblxuICAgIGlmIChza2lwRGlhbG9nID09IG51bGwpIHtcbiAgICAgIHNraXBEaWFsb2cgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoc2VydmljZVdvcmtlclBhdGggPT0gbnVsbCkge1xuICAgICAgc2VydmljZVdvcmtlclBhdGggPSAnL2NsZXZlcnRhcF9zdy5qcyc7XG4gICAgfSAvLyBlbnN1cmUgdGhhdCB0aGUgYnJvd3NlciBzdXBwb3J0cyBub3RpZmljYXRpb25zXG5cblxuICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaXNIVFRQID0gaHR0cHNQb3B1cFBhdGggIT0gbnVsbCAmJiBodHRwc0lmcmFtZVBhdGggIT0gbnVsbDsgLy8gbWFrZSBzdXJlIHRoZSBzaXRlIGlzIG9uIGh0dHBzIGZvciBjaHJvbWUgbm90aWZpY2F0aW9uc1xuXG4gICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCAhPT0gJ2h0dHBzOicgJiYgZG9jdW1lbnQubG9jYXRpb24uaG9zdG5hbWUgIT09ICdsb2NhbGhvc3QnICYmICFpc0hUVFApIHtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDgpW19sb2dnZXIkOF0uZXJyb3IoJ01ha2Ugc3VyZSB5b3UgYXJlIGh0dHBzIG9yIGxvY2FsaG9zdCB0byByZWdpc3RlciBmb3Igbm90aWZpY2F0aW9ucycpO1xuXG4gICAgICByZXR1cm47XG4gICAgfSAvLyByaWdodCBub3csIHdlIG9ubHkgc3VwcG9ydCBDaHJvbWUgVjUwICYgaGlnaGVyICYgRmlyZWZveFxuXG5cbiAgICBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUnKSAhPT0gLTEpIHtcbiAgICAgIGNvbnN0IGNocm9tZUFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvQ2hyb21lXFwvKFxcZCspLyk7XG5cbiAgICAgIGlmIChjaHJvbWVBZ2VudCA9PSBudWxsIHx8IHBhcnNlSW50KGNocm9tZUFnZW50WzFdLCAxMCkgPCA1MCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSAhPT0gLTEpIHtcbiAgICAgIGNvbnN0IGZpcmVmb3hBZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0ZpcmVmb3hcXC8oXFxkKykvKTtcblxuICAgICAgaWYgKGZpcmVmb3hBZ2VudCA9PSBudWxsIHx8IHBhcnNlSW50KGZpcmVmb3hBZ2VudFsxXSwgMTApIDwgNTApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdTYWZhcmknKSAhPT0gLTEpIHtcbiAgICAgIGNvbnN0IHNhZmFyaUFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvU2FmYXJpXFwvKFxcZCspLyk7XG5cbiAgICAgIGlmIChzYWZhcmlBZ2VudCA9PSBudWxsIHx8IHBhcnNlSW50KHNhZmFyaUFnZW50WzFdLCAxMCkgPCA1MCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIHdlIGNoZWNrIGZvciB0aGUgY29va2llIGluIHNldFVwQ2hyb21lTm90aWZpY2F0aW9ucygpIHRoZSB0b2tlbnMgbWF5IGhhdmUgY2hhbmdlZFxuXG5cbiAgICBpZiAoIWlzSFRUUCkge1xuICAgICAgaWYgKE5vdGlmaWNhdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gaGFuZGxlIG1pZ3JhdGlvbnMgZnJvbSBvdGhlciBzZXJ2aWNlcyAtPiBjaHJvbWUgbm90aWZpY2F0aW9ucyBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gYXNrZWQgZm9yIGJlZm9yZVxuXG5cbiAgICAgIGlmIChOb3RpZmljYXRpb24ucGVybWlzc2lvbiA9PT0gJ2dyYW50ZWQnKSB7XG4gICAgICAgIC8vIHNraXAgdGhlIGRpYWxvZyBhbmQgcmVnaXN0ZXJcbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXRVcFdlYlB1c2hOb3RpZmljYXRpb25zKVtfc2V0VXBXZWJQdXNoTm90aWZpY2F0aW9uc10oc3Vic2NyaXB0aW9uQ2FsbGJhY2ssIHNlcnZpY2VXb3JrZXJQYXRoLCBhcG5zV2ViUHVzaElkLCBhcG5zV2ViUHVzaFNlcnZpY2VVcmwpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSBpZiAoTm90aWZpY2F0aW9uLnBlcm1pc3Npb24gPT09ICdkZW5pZWQnKSB7XG4gICAgICAgIC8vIHdlJ3ZlIGxvc3QgdGhpcyBwcm9maWxlIDonKFxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChza2lwRGlhbG9nKSB7XG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfc2V0VXBXZWJQdXNoTm90aWZpY2F0aW9ucylbX3NldFVwV2ViUHVzaE5vdGlmaWNhdGlvbnNdKHN1YnNjcmlwdGlvbkNhbGxiYWNrLCBzZXJ2aWNlV29ya2VyUGF0aCwgYXBuc1dlYlB1c2hJZCwgYXBuc1dlYlB1c2hTZXJ2aWNlVXJsKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSAvLyBtYWtlIHN1cmUgdGhlIHJpZ2h0IHBhcmFtZXRlcnMgYXJlIHBhc3NlZFxuXG5cbiAgICBpZiAoIXRpdGxlVGV4dCB8fCAhYm9keVRleHQgfHwgIW9rQnV0dG9uVGV4dCB8fCAhcmVqZWN0QnV0dG9uVGV4dCkge1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkOClbX2xvZ2dlciQ4XS5lcnJvcignTWlzc2luZyBpbnB1dCBwYXJhbWV0ZXJzOyBwbGVhc2Ugc3BlY2lmeSB0aXRsZSwgYm9keSwgb2sgYnV0dG9uIGFuZCBjYW5jZWwgYnV0dG9uIHRleHQnKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gbWFrZSBzdXJlIG9rQnV0dG9uQ29sb3IgaXMgZm9ybWF0dGVkIHByb3Blcmx5XG5cblxuICAgIGlmIChva0J1dHRvbkNvbG9yID09IG51bGwgfHwgIW9rQnV0dG9uQ29sb3IubWF0Y2goL14jW2EtZlxcZF17Nn0kL2kpKSB7XG4gICAgICBva0J1dHRvbkNvbG9yID0gJyNmMjgwNDYnOyAvLyBkZWZhdWx0IGNvbG9yIGZvciBwb3NpdGl2ZSBidXR0b25cbiAgICB9IC8vIG1ha2Ugc3VyZSB0aGUgdXNlciBpc24ndCBhc2tlZCBmb3Igbm90aWZpY2F0aW9ucyBtb3JlIHRoYW4gYXNrQWdhaW5UaW1lSW5TZWNvbmRzXG5cblxuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMDtcblxuICAgIGlmIChTdG9yYWdlTWFuYWdlci5nZXRNZXRhUHJvcCgnbm90aWZfbGFzdF90aW1lJykgPT0gbnVsbCkge1xuICAgICAgU3RvcmFnZU1hbmFnZXIuc2V0TWV0YVByb3AoJ25vdGlmX2xhc3RfdGltZScsIG5vdyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChhc2tBZ2FpblRpbWVJblNlY29uZHMgPT0gbnVsbCkge1xuICAgICAgICAvLyA3IGRheXMgYnkgZGVmYXVsdFxuICAgICAgICBhc2tBZ2FpblRpbWVJblNlY29uZHMgPSA3ICogMjQgKiA2MCAqIDYwO1xuICAgICAgfVxuXG4gICAgICBpZiAobm93IC0gU3RvcmFnZU1hbmFnZXIuZ2V0TWV0YVByb3AoJ25vdGlmX2xhc3RfdGltZScpIDwgYXNrQWdhaW5UaW1lSW5TZWNvbmRzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGNvbnRpbnVlIGFza2luZ1xuICAgICAgICBTdG9yYWdlTWFuYWdlci5zZXRNZXRhUHJvcCgnbm90aWZfbGFzdF90aW1lJywgbm93KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNIVFRQKSB7XG4gICAgICAvLyBhZGQgdGhlIGh0dHBzIGlmcmFtZVxuICAgICAgY29uc3QgaHR0cHNJZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICAgIGh0dHBzSWZyYW1lLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnZGlzcGxheTpub25lOycpO1xuICAgICAgaHR0cHNJZnJhbWUuc2V0QXR0cmlidXRlKCdzcmMnLCBodHRwc0lmcmFtZVBhdGgpO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChodHRwc0lmcmFtZSk7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGV2ZW50ID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LmRhdGEgIT0gbnVsbCkge1xuICAgICAgICAgIGxldCBvYmogPSB7fTtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBvYmogPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIG5vdCBhIGNhbGwgZnJvbSBvdXIgaWZyYW1lXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG9iai5zdGF0ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAob2JqLmZyb20gPT09ICdjdCcgJiYgb2JqLnN0YXRlID09PSAnbm90Jykge1xuICAgICAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2FkZFdpekFsZXJ0SlMpW19hZGRXaXpBbGVydEpTXSgpLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBjcmVhdGUgb3VyIHdpenJvY2tldCBwb3B1cFxuICAgICAgICAgICAgICAgIHdpbmRvdy53enJrUGVybWlzc2lvblBvcHVwLndpekFsZXJ0KHtcbiAgICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZVRleHQsXG4gICAgICAgICAgICAgICAgICBib2R5OiBib2R5VGV4dCxcbiAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBva0J1dHRvblRleHQsXG4gICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uQ29sb3I6IG9rQnV0dG9uQ29sb3IsXG4gICAgICAgICAgICAgICAgICByZWplY3RCdXR0b25UZXh0OiByZWplY3RCdXR0b25UZXh0XG4gICAgICAgICAgICAgICAgfSwgZW5hYmxlZCA9PiB7XG4gICAgICAgICAgICAgICAgICAvLyBjYWxsYmFjayBmdW5jdGlvblxuICAgICAgICAgICAgICAgICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHVzZXIgYWNjZXB0ZWQgb24gdGhlIGRpYWxvZyBib3hcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBva0NhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgb2tDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgICB9IC8vIHJlZGlyZWN0IHRvIHBvcHVwLmh0bWxcblxuXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKGh0dHBzUG9wdXBQYXRoKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVqZWN0Q2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZWplY3RDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVtb3ZlV2l6QWxlcnRKUylbX3JlbW92ZVdpekFsZXJ0SlNdKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCBmYWxzZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWRkV2l6QWxlcnRKUylbX2FkZFdpekFsZXJ0SlNdKCkub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAvLyBjcmVhdGUgb3VyIHdpenJvY2tldCBwb3B1cFxuICAgICAgICB3aW5kb3cud3pya1Blcm1pc3Npb25Qb3B1cC53aXpBbGVydCh7XG4gICAgICAgICAgdGl0bGU6IHRpdGxlVGV4dCxcbiAgICAgICAgICBib2R5OiBib2R5VGV4dCxcbiAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogb2tCdXR0b25UZXh0LFxuICAgICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogb2tCdXR0b25Db2xvcixcbiAgICAgICAgICByZWplY3RCdXR0b25UZXh0OiByZWplY3RCdXR0b25UZXh0XG4gICAgICAgIH0sIGVuYWJsZWQgPT4ge1xuICAgICAgICAgIC8vIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICAgICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgICAgICAgIC8vIHRoZSB1c2VyIGFjY2VwdGVkIG9uIHRoZSBkaWFsb2cgYm94XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9rQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgb2tDYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3NldFVwV2ViUHVzaE5vdGlmaWNhdGlvbnMpW19zZXRVcFdlYlB1c2hOb3RpZmljYXRpb25zXShzdWJzY3JpcHRpb25DYWxsYmFjaywgc2VydmljZVdvcmtlclBhdGgsIGFwbnNXZWJQdXNoSWQsIGFwbnNXZWJQdXNoU2VydmljZVVybCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVqZWN0Q2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgcmVqZWN0Q2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlbW92ZVdpekFsZXJ0SlMpW19yZW1vdmVXaXpBbGVydEpTXSgpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xuXG4gIHZhciBfdmFyaWFibGVTdG9yZSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwidmFyaWFibGVTdG9yZVwiKTtcblxuICBjbGFzcyBWYXJpYWJsZSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGUgVmFyaWFibGUgY2xhc3MuXG4gICAgICpcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge1ZhcmlhYmxlU3RvcmV9IG9wdGlvbnMudmFyaWFibGVTdG9yZSAtIFRoZSBWYXJpYWJsZVN0b3JlIGluc3RhbmNlIGZvciByZWdpc3RyYXRpb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gb3B0aW9ucy5uYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHZhcmlhYmxlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3B0aW9ucy5kZWZhdWx0VmFsdWUgLSBUaGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgdmFyaWFibGUuXG4gICAgICogQHBhcmFtIHsqfSBvcHRpb25zLnZhbHVlIC0gVGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIHZhcmlhYmxlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bGx9IG9wdGlvbnMudHlwZSAtIFRoZSB0eXBlIG9mIHRoZSB2YXJpYWJsZSAoc3RyaW5nLCBudW1iZXIsIGJvb2xlYW4pLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0aW9ucy5oYWRTdGFydGVkIC0gQSBmbGFnIGluZGljYXRpbmcgd2hldGhlciB0aGUgdmFyaWFibGUgaGFzIHN0YXJ0ZWQgKHVzZWQgaW50ZXJuYWxseSkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbltdfSBvcHRpb25zLnZhbHVlQ2hhbmdlZENhbGxiYWNrcyAtIEFycmF5IHRvIHN0b3JlIGNhbGxiYWNrcyB0byBiZSBleGVjdXRlZCB3aGVuIHRoZSB2YXJpYWJsZSB2YWx1ZSBjaGFuZ2VzLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKF9yZWYpIHtcbiAgICAgIGxldCB7XG4gICAgICAgIHZhcmlhYmxlU3RvcmVcbiAgICAgIH0gPSBfcmVmO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF92YXJpYWJsZVN0b3JlLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIHRoaXMubmFtZSA9IG51bGw7XG4gICAgICB0aGlzLmRlZmF1bHRWYWx1ZSA9IG51bGw7XG4gICAgICB0aGlzLnZhbHVlID0gbnVsbDtcbiAgICAgIHRoaXMudHlwZSA9IG51bGw7XG4gICAgICB0aGlzLmhhZFN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMudmFsdWVDaGFuZ2VkQ2FsbGJhY2tzID0gW107XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3ZhcmlhYmxlU3RvcmUpW192YXJpYWJsZVN0b3JlXSA9IHZhcmlhYmxlU3RvcmU7XG4gICAgfVxuXG4gICAgZ2V0VmFsdWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9XG5cbiAgICBnZXRkZWZhdWx0VmFsdWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWZhdWx0VmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlZmluZXMgYSBuZXcgdmFyaWFibGUgd2l0aCB0aGUgcHJvdmlkZWQgbmFtZSwgZGVmYXVsdCB2YWx1ZSwgYW5kIHZhcmlhYmxlIHN0b3JlLlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSB2YXJpYWJsZS5cbiAgICAgKiBAcGFyYW0geyp9IGRlZmF1bHRWYWx1ZSAtIFRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSB2YXJpYWJsZS5cbiAgICAgKiBAcGFyYW0ge1ZhcmlhYmxlU3RvcmV9IHZhcmlhYmxlU3RvcmUgLSBUaGUgVmFyaWFibGVTdG9yZSBpbnN0YW5jZSBmb3IgcmVnaXN0cmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtWYXJpYWJsZXxudWxsfSAtIFRoZSBjcmVhdGVkIFZhcmlhYmxlIGluc3RhbmNlIG9yIG51bGwgaWYgaW52YWxpZCBwYXJhbWV0ZXJzIGFyZSBwcm92aWRlZC5cbiAgICAgKi9cblxuXG4gICAgc3RhdGljIGRlZmluZShuYW1lLCBkZWZhdWx0VmFsdWUsIHZhcmlhYmxlU3RvcmUpIHtcbiAgICAgIGlmICghbmFtZSB8fCB0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRW1wdHkgb3IgaW52YWxpZCBuYW1lIHBhcmFtZXRlciBwcm92aWRlZC4nKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmIChuYW1lLnN0YXJ0c1dpdGgoJy4nKSB8fCBuYW1lLmVuZHNXaXRoKCcuJykpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignVmFyaWFibGUgbmFtZSBzdGFydHMgb3IgZW5kcyB3aXRoIGEgYC5gIHdoaWNoIGlzIG5vdCBhbGxvd2VkOiAnICsgbmFtZSk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB0eXBlT2ZEZWZhdWx0VmFsdWUgPSB0eXBlb2YgZGVmYXVsdFZhbHVlO1xuXG4gICAgICBpZiAodHlwZU9mRGVmYXVsdFZhbHVlICE9PSAnc3RyaW5nJyAmJiB0eXBlT2ZEZWZhdWx0VmFsdWUgIT09ICdudW1iZXInICYmIHR5cGVPZkRlZmF1bHRWYWx1ZSAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ09ubHkgcHJpbWl0aXZlIHR5cGVzIChzdHJpbmcsIG51bWJlciwgYm9vbGVhbikgYXJlIGFjY2VwdGVkIGFzIHZhbHVlJyk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBleGlzdGluZyA9IHZhcmlhYmxlU3RvcmUuZ2V0VmFyaWFibGUobmFtZSk7XG5cbiAgICAgIGlmIChleGlzdGluZykge1xuICAgICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHZhckluc3RhbmNlID0gbmV3IFZhcmlhYmxlKHtcbiAgICAgICAgdmFyaWFibGVTdG9yZVxuICAgICAgfSk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHZhckluc3RhbmNlLm5hbWUgPSBuYW1lO1xuICAgICAgICB2YXJJbnN0YW5jZS5kZWZhdWx0VmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgIHZhckluc3RhbmNlLnZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICB2YXJJbnN0YW5jZS50eXBlID0gdHlwZU9mRGVmYXVsdFZhbHVlO1xuICAgICAgICB2YXJpYWJsZVN0b3JlLnJlZ2lzdGVyVmFyaWFibGUodmFySW5zdGFuY2UpO1xuICAgICAgICB2YXJJbnN0YW5jZS51cGRhdGUoZGVmYXVsdFZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFySW5zdGFuY2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIHZhcmlhYmxlJ3MgdmFsdWUsIHRyaWdnZXJpbmcgY2FsbGJhY2tzIGlmIGhhc1ZhcnNSZXF1ZXN0Q29tcGxldGVkIGlzIHJldHVybmVkIHRydWUuXG4gICAgICogQHBhcmFtIHsqfSBuZXdWYWx1ZSAtIFRoZSBuZXcgdmFsdWUgdG8gYmUgYXNzaWduZWQgdG8gdGhlIHZhcmlhYmxlLlxuICAgICAqL1xuXG5cbiAgICB1cGRhdGUobmV3VmFsdWUpIHtcbiAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgIHRoaXMudmFsdWUgPSBuZXdWYWx1ZTtcblxuICAgICAgaWYgKG5ld1ZhbHVlID09PSBudWxsICYmIG9sZFZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKG5ld1ZhbHVlICE9PSBudWxsICYmIG5ld1ZhbHVlID09PSBvbGRWYWx1ZSAmJiB0aGlzLmhhZFN0YXJ0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF92YXJpYWJsZVN0b3JlKVtfdmFyaWFibGVTdG9yZV0uaGFzVmFyc1JlcXVlc3RDb21wbGV0ZWQoKSkge1xuICAgICAgICB0aGlzLmhhZFN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnRyaWdnZXJWYWx1ZUNoYW5nZWQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSW52b2tlcyBhbGwgcmVnaXN0ZXJlZCBjYWxsYmFja3Mgd2hlbiB0aGUgdmFyaWFibGUgdmFsdWUgY2hhbmdlcy5cbiAgICAgKi9cblxuXG4gICAgdHJpZ2dlclZhbHVlQ2hhbmdlZCgpIHtcbiAgICAgIHRoaXMudmFsdWVDaGFuZ2VkQ2FsbGJhY2tzLmZvckVhY2gob25WYWx1ZUNoYW5nZWQgPT4ge1xuICAgICAgICBvblZhbHVlQ2hhbmdlZCh0aGlzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gdGhlIGFycmF5IGFuZCB0cmlnZ2VycyBpdCBpbW1lZGlhdGVseSBpZiB2YXJpYWJsZSByZXF1ZXN0cyBoYXZlIGNvbXBsZXRlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvblZhbHVlQ2hhbmdlZCAtIFRoZSBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBhZGRlZC5cbiAgICAgKi9cblxuXG4gICAgYWRkVmFsdWVDaGFuZ2VkQ2FsbGJhY2sob25WYWx1ZUNoYW5nZWQpIHtcbiAgICAgIGlmICghb25WYWx1ZUNoYW5nZWQpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0ludmFsaWQgY2FsbGJhY2sgcGFyYW1ldGVyIHByb3ZpZGVkLicpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMudmFsdWVDaGFuZ2VkQ2FsbGJhY2tzLnB1c2gob25WYWx1ZUNoYW5nZWQpO1xuXG4gICAgICBpZiAoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF92YXJpYWJsZVN0b3JlKVtfdmFyaWFibGVTdG9yZV0uaGFzVmFyc1JlcXVlc3RDb21wbGV0ZWQoKSkge1xuICAgICAgICBvblZhbHVlQ2hhbmdlZCh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGNhbGxiYWNrIGZ1bmN0aW9uIGZyb20gdGhlIGFycmF5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9uVmFsdWVDaGFuZ2VkIC0gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIHJlbW92ZWQuXG4gICAgICovXG5cblxuICAgIHJlbW92ZVZhbHVlQ2hhbmdlZENhbGxiYWNrKG9uVmFsdWVDaGFuZ2VkKSB7XG4gICAgICBjb25zdCBpbmRleCA9IHRoaXMudmFsdWVDaGFuZ2VkQ2FsbGJhY2tzLmluZGV4T2Yob25WYWx1ZUNoYW5nZWQpO1xuXG4gICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgIHRoaXMudmFsdWVDaGFuZ2VkQ2FsbGJhY2tzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc2V0cyB0aGUgYGhhZFN0YXJ0ZWRgIGZsYWcgdG8gZmFsc2UuXG4gICAgICovXG5cblxuICAgIGNsZWFyU3RhcnRGbGFnKCkge1xuICAgICAgdGhpcy5oYWRTdGFydGVkID0gZmFsc2U7XG4gICAgfVxuXG4gIH1cblxuICB2YXIgX2xvZ2dlciQ5ID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJsb2dnZXJcIik7XG5cbiAgdmFyIF9hY2NvdW50JDUgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImFjY291bnRcIik7XG5cbiAgdmFyIF9yZXF1ZXN0JDYgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInJlcXVlc3RcIik7XG5cbiAgdmFyIF9ldmVudCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiZXZlbnRcIik7XG5cbiAgdmFyIF92YXJpYWJsZXMgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInZhcmlhYmxlc1wiKTtcblxuICB2YXIgX3JlbW90ZVZhcmlhYmxlcyA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwicmVtb3RlVmFyaWFibGVzXCIpO1xuXG4gIHZhciBfZmV0Y2hDYWxsYmFjayA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiZmV0Y2hDYWxsYmFja1wiKTtcblxuICB2YXIgX3ZhcmlhYmxlc0NoYW5nZWRDYWxsYmFja3MgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInZhcmlhYmxlc0NoYW5nZWRDYWxsYmFja3NcIik7XG5cbiAgdmFyIF9vbmVUaW1lVmFyaWFibGVzQ2hhbmdlZENhbGxiYWNrcyA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwib25lVGltZVZhcmlhYmxlc0NoYW5nZWRDYWxsYmFja3NcIik7XG5cbiAgdmFyIF9oYXNWYXJzUmVxdWVzdENvbXBsZXRlZCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiaGFzVmFyc1JlcXVlc3RDb21wbGV0ZWRcIik7XG5cbiAgdmFyIF9ydW5WYXJpYWJsZXNDaGFuZ2VkQ2FsbGJhY2sgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInJ1blZhcmlhYmxlc0NoYW5nZWRDYWxsYmFja1wiKTtcblxuICBjbGFzcyBWYXJpYWJsZVN0b3JlIHtcbiAgICBjb25zdHJ1Y3RvcihfcmVmKSB7XG4gICAgICBsZXQge1xuICAgICAgICBsb2dnZXIsXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIGFjY291bnQsXG4gICAgICAgIGV2ZW50XG4gICAgICB9ID0gX3JlZjtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfcnVuVmFyaWFibGVzQ2hhbmdlZENhbGxiYWNrLCB7XG4gICAgICAgIHZhbHVlOiBfcnVuVmFyaWFibGVzQ2hhbmdlZENhbGxiYWNrMlxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX2xvZ2dlciQ5LCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfYWNjb3VudCQ1LCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfcmVxdWVzdCQ2LCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfZXZlbnQsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF92YXJpYWJsZXMsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9yZW1vdGVWYXJpYWJsZXMsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9mZXRjaENhbGxiYWNrLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfdmFyaWFibGVzQ2hhbmdlZENhbGxiYWNrcywge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX29uZVRpbWVWYXJpYWJsZXNDaGFuZ2VkQ2FsbGJhY2tzLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfaGFzVmFyc1JlcXVlc3RDb21wbGV0ZWQsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ5KVtfbG9nZ2VyJDldID0gbG9nZ2VyO1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9hY2NvdW50JDUpW19hY2NvdW50JDVdID0gYWNjb3VudDtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdCQ2KVtfcmVxdWVzdCQ2XSA9IHJlcXVlc3Q7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2V2ZW50KVtfZXZlbnRdID0gZXZlbnQ7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3ZhcmlhYmxlcylbX3ZhcmlhYmxlc10gPSB7fTtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVtb3RlVmFyaWFibGVzKVtfcmVtb3RlVmFyaWFibGVzXSA9IHt9O1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF92YXJpYWJsZXNDaGFuZ2VkQ2FsbGJhY2tzKVtfdmFyaWFibGVzQ2hhbmdlZENhbGxiYWNrc10gPSBbXTtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfb25lVGltZVZhcmlhYmxlc0NoYW5nZWRDYWxsYmFja3MpW19vbmVUaW1lVmFyaWFibGVzQ2hhbmdlZENhbGxiYWNrc10gPSBbXTtcbiAgICAgICRjdC52YXJpYWJsZVN0b3JlID0gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGEgdmFyaWFibGUgaW5zdGFuY2UgaW4gdGhlIHN0b3JlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB2YXJJbnN0YW5jZSAtIFRoZSB2YXJpYWJsZSBpbnN0YW5jZSB0byBiZSByZWdpc3RlcmVkLlxuICAgICAqL1xuXG5cbiAgICByZWdpc3RlclZhcmlhYmxlKHZhckluc3RhbmNlKSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIG5hbWVcbiAgICAgIH0gPSB2YXJJbnN0YW5jZTtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfdmFyaWFibGVzKVtfdmFyaWFibGVzXVtuYW1lXSA9IHZhckluc3RhbmNlO1xuICAgICAgY29uc29sZS5sb2coJ3JlZ2lzdGVyVmFyaWFibGUnLCBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3ZhcmlhYmxlcylbX3ZhcmlhYmxlc10pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgYSB2YXJpYWJsZSBieSBpdHMgbmFtZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSB2YXJpYWJsZSB0byByZXRyaWV2ZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSAtIFRoZSB2YXJpYWJsZSBpbnN0YW5jZS5cbiAgICAgKi9cblxuXG4gICAgZ2V0VmFyaWFibGUobmFtZSkge1xuICAgICAgcmV0dXJuIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfdmFyaWFibGVzKVtfdmFyaWFibGVzXVtuYW1lXTtcbiAgICB9XG5cbiAgICBoYXNWYXJzUmVxdWVzdENvbXBsZXRlZCgpIHtcbiAgICAgIHJldHVybiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2hhc1ZhcnNSZXF1ZXN0Q29tcGxldGVkKVtfaGFzVmFyc1JlcXVlc3RDb21wbGV0ZWRdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTeW5jaHJvbml6ZXMgdmFyaWFibGVzIHdpdGggdGhlIHNlcnZlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvblN5bmNTdWNjZXNzIC0gQ2FsbGJhY2sgZnVuY3Rpb24gb24gc3VjY2Vzc2Z1bCBzeW5jaHJvbml6YXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb25TeW5jRmFpbHVyZSAtIENhbGxiYWNrIGZ1bmN0aW9uIG9uIHN5bmNocm9uaXphdGlvbiBmYWlsdXJlLlxuICAgICAqIEB0aHJvd3MgV2lsbCB0aHJvdyBhbiBlcnJvciBpZiB0aGUgYWNjb3VudCB0b2tlbiBpcyBtaXNzaW5nLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlfSAtIFRoZSByZXN1bHQgb2YgdGhlIHN5bmNocm9uaXphdGlvbiByZXF1ZXN0LlxuICAgICAqL1xuXG5cbiAgICBzeW5jVmFyaWFibGVzKG9uU3luY1N1Y2Nlc3MsIG9uU3luY0ZhaWx1cmUpIHtcbiAgICAgIGlmICghX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9hY2NvdW50JDUpW19hY2NvdW50JDVdLnRva2VuKSB7XG4gICAgICAgIGNvbnN0IG0gPSAnQWNjb3VudCB0b2tlbiBpcyBtaXNzaW5nLic7XG5cbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkOSlbX2xvZ2dlciQ5XS5lcnJvcihtKTtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKG0pKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgICAgdHlwZTogJ3ZhcnNQYXlsb2FkJyxcbiAgICAgICAgdmFyczoge31cbiAgICAgIH07XG5cbiAgICAgIGZvciAoY29uc3QgbmFtZSBpbiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3ZhcmlhYmxlcylbX3ZhcmlhYmxlc10pIHtcbiAgICAgICAgcGF5bG9hZC52YXJzW25hbWVdID0ge1xuICAgICAgICAgIGRlZmF1bHRWYWx1ZTogX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF92YXJpYWJsZXMpW192YXJpYWJsZXNdW25hbWVdLmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICB0eXBlOiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3ZhcmlhYmxlcylbX3ZhcmlhYmxlc11bbmFtZV0udHlwZVxuICAgICAgICB9O1xuICAgICAgfSAvLyBDaGVjayBpZiBwYXlsb2FkLnZhcnMgaXMgZW1wdHlcblxuXG4gICAgICBpZiAoT2JqZWN0LmtleXMocGF5bG9hZC52YXJzKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29uc3QgbSA9ICdObyB2YXJpYWJsZXMgYXJlIGRlZmluZWQuJztcblxuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ5KVtfbG9nZ2VyJDldLmVycm9yKG0pO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IobSkpO1xuICAgICAgfVxuXG4gICAgICBsZXQgbWV0YSA9IHt9O1xuICAgICAgbWV0YSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdCQ2KVtfcmVxdWVzdCQ2XS5hZGRTeXN0ZW1EYXRhVG9PYmplY3QobWV0YSwgdW5kZWZpbmVkKTtcbiAgICAgIG1ldGEudGsgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2FjY291bnQkNSlbX2FjY291bnQkNV0udG9rZW47XG4gICAgICBtZXRhLnR5cGUgPSAnbWV0YSc7XG4gICAgICBjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoW21ldGEsIHBheWxvYWRdKTtcblxuICAgICAgY29uc3QgdXJsID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9hY2NvdW50JDUpW19hY2NvdW50JDVdLmRhdGFQb3N0UEVVUkw7XG5cbiAgICAgIHJldHVybiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlcXVlc3QkNilbX3JlcXVlc3QkNl0ucG9zdCh1cmwsIGJvZHkpLnRoZW4ociA9PiB7XG4gICAgICAgIGlmIChvblN5bmNTdWNjZXNzICYmIHR5cGVvZiBvblN5bmNTdWNjZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgb25TeW5jU3VjY2VzcyhyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByO1xuICAgICAgfSkuY2F0Y2goZSA9PiB7XG4gICAgICAgIGlmIChvblN5bmNGYWlsdXJlICYmIHR5cGVvZiBvblN5bmNGYWlsdXJlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgb25TeW5jRmFpbHVyZShlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlLnN0YXR1cyA9PT0gNDAwKSB7XG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkOSlbX2xvZ2dlciQ5XS5lcnJvcignSW52YWxpZCBzeW5jIHBheWxvYWQgb3IgY2xlYXIgdGhlIGV4aXN0aW5nIGRyYWZ0Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAoZS5zdGF0dXMgPT09IDQwMSkge1xuICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDkpW19sb2dnZXIkOV0uZXJyb3IoJ1RoaXMgaXMgbm90IGEgdGVzdCBwcm9maWxlJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkOSlbX2xvZ2dlciQ5XS5lcnJvcignU3luYyB2YXJpYWJsZSBmYWlsZWQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IGU7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmV0Y2hlcyB2YXJpYWJsZXMgZnJvbSB0aGUgc2VydmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9uRmV0Y2hDYWxsYmFjayAtIENhbGxiYWNrIGZ1bmN0aW9uIG9uIGZldGNoIGNvbXBsZXRpb24uXG4gICAgICovXG5cblxuICAgIGZldGNoVmFyaWFibGVzKG9uRmV0Y2hDYWxsYmFjaykge1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9ldmVudClbX2V2ZW50XS5wdXNoKFdaUktfRkVUQ0gsIHtcbiAgICAgICAgdDogNFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChvbkZldGNoQ2FsbGJhY2sgJiYgdHlwZW9mIG9uRmV0Y2hDYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2ZldGNoQ2FsbGJhY2spW19mZXRjaENhbGxiYWNrXSA9IG9uRmV0Y2hDYWxsYmFjaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZXJnZVZhcmlhYmxlcyh2YXJzKSB7XG4gICAgICBjb25zb2xlLmxvZygnbXNnIHZhcnMgaXMgJywgdmFycyk7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2hhc1ZhcnNSZXF1ZXN0Q29tcGxldGVkKVtfaGFzVmFyc1JlcXVlc3RDb21wbGV0ZWRdID0gdHJ1ZTtcbiAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNhdmVUb0xTb3JDb29raWUoVkFSSUFCTEVTLCB2YXJzKTtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVtb3RlVmFyaWFibGVzKVtfcmVtb3RlVmFyaWFibGVzXSA9IHZhcnM7XG5cbiAgICAgIGZvciAoY29uc3QgbmFtZSBpbiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3ZhcmlhYmxlcylbX3ZhcmlhYmxlc10pIHtcbiAgICAgICAgaWYgKHZhcnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3ZhcmlhYmxlcylbX3ZhcmlhYmxlc11bbmFtZV0udXBkYXRlKHZhcnNbbmFtZV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2ZldGNoQ2FsbGJhY2spW19mZXRjaENhbGxiYWNrXSkge1xuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2ZldGNoQ2FsbGJhY2spW19mZXRjaENhbGxiYWNrXSgpO1xuICAgICAgfVxuXG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3J1blZhcmlhYmxlc0NoYW5nZWRDYWxsYmFjaylbX3J1blZhcmlhYmxlc0NoYW5nZWRDYWxsYmFja10oKTtcbiAgICB9XG5cbiAgICBhZGRWYXJpYWJsZXNDaGFuZ2VkQ2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICAgIGlmIChjYWxsYmFjayAmJiB0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF92YXJpYWJsZXNDaGFuZ2VkQ2FsbGJhY2tzKVtfdmFyaWFibGVzQ2hhbmdlZENhbGxiYWNrc10ucHVzaChjYWxsYmFjayk7XG5cbiAgICAgICAgaWYgKHRoaXMuaGFzVmFyc1JlcXVlc3RDb21wbGV0ZWQoKSkge1xuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDkpW19sb2dnZXIkOV0uZXJyb3IoJ2NhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYWRkT25lVGltZVZhcmlhYmxlc0NoYW5nZWRDYWxsYmFjayhjYWxsYmFjaykge1xuICAgICAgaWYgKGNhbGxiYWNrICYmIHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpZiAodGhpcy5oYXNWYXJzUmVxdWVzdENvbXBsZXRlZCgpKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX29uZVRpbWVWYXJpYWJsZXNDaGFuZ2VkQ2FsbGJhY2tzKVtfb25lVGltZVZhcmlhYmxlc0NoYW5nZWRDYWxsYmFja3NdLnB1c2goY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlVmFyaWFibGVzQ2hhbmdlZENhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgICBjb25zdCBpbmRleCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfdmFyaWFibGVzQ2hhbmdlZENhbGxiYWNrcylbX3ZhcmlhYmxlc0NoYW5nZWRDYWxsYmFja3NdLmluZGV4T2YoY2FsbGJhY2spO1xuXG4gICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfdmFyaWFibGVzQ2hhbmdlZENhbGxiYWNrcylbX3ZhcmlhYmxlc0NoYW5nZWRDYWxsYmFja3NdLnNwbGljZShpbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlT25lVGltZVZhcmlhYmxlc0NoYW5nZWRDYWxsYmFjayhjYWxsYmFjaykge1xuICAgICAgY29uc3QgaW5kZXggPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX29uZVRpbWVWYXJpYWJsZXNDaGFuZ2VkQ2FsbGJhY2tzKVtfb25lVGltZVZhcmlhYmxlc0NoYW5nZWRDYWxsYmFja3NdLmluZGV4T2YoY2FsbGJhY2spO1xuXG4gICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfb25lVGltZVZhcmlhYmxlc0NoYW5nZWRDYWxsYmFja3MpW19vbmVUaW1lVmFyaWFibGVzQ2hhbmdlZENhbGxiYWNrc10uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgfVxuXG4gIHZhciBfcnVuVmFyaWFibGVzQ2hhbmdlZENhbGxiYWNrMiA9IGZ1bmN0aW9uIF9ydW5WYXJpYWJsZXNDaGFuZ2VkQ2FsbGJhY2syKCkge1xuICAgIGZvciAodmFyIGNhbGxiYWNrIG9mIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfdmFyaWFibGVzQ2hhbmdlZENhbGxiYWNrcylbX3ZhcmlhYmxlc0NoYW5nZWRDYWxsYmFja3NdKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGNhbGxCYWNrIG9mIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfb25lVGltZVZhcmlhYmxlc0NoYW5nZWRDYWxsYmFja3MpW19vbmVUaW1lVmFyaWFibGVzQ2hhbmdlZENhbGxiYWNrc10pIHtcbiAgICAgIGNhbGxCYWNrKCk7XG4gICAgfVxuXG4gICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9vbmVUaW1lVmFyaWFibGVzQ2hhbmdlZENhbGxiYWNrcylbX29uZVRpbWVWYXJpYWJsZXNDaGFuZ2VkQ2FsbGJhY2tzXS5sZW5ndGggPSAwO1xuICB9O1xuXG4gIHZhciBfbG9nZ2VyJGEgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImxvZ2dlclwiKTtcblxuICB2YXIgX2FwaSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiYXBpXCIpO1xuXG4gIHZhciBfb25sb2FkY2FsbGVkID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJvbmxvYWRjYWxsZWRcIik7XG5cbiAgdmFyIF9kZXZpY2UkMyA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiZGV2aWNlXCIpO1xuXG4gIHZhciBfc2Vzc2lvbiQzID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJzZXNzaW9uXCIpO1xuXG4gIHZhciBfYWNjb3VudCQ2ID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJhY2NvdW50XCIpO1xuXG4gIHZhciBfcmVxdWVzdCQ3ID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJyZXF1ZXN0XCIpO1xuXG4gIHZhciBfdmFyaWFibGVTdG9yZSQxID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJ2YXJpYWJsZVN0b3JlXCIpO1xuXG4gIHZhciBfaXNTcGEgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImlzU3BhXCIpO1xuXG4gIHZhciBfcHJldmlvdXNVcmwgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInByZXZpb3VzVXJsXCIpO1xuXG4gIHZhciBfYm91bmRDaGVja1BhZ2VDaGFuZ2VkID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJib3VuZENoZWNrUGFnZUNoYW5nZWRcIik7XG5cbiAgdmFyIF9kaXNtaXNzU3BhbUNvbnRyb2wgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImRpc21pc3NTcGFtQ29udHJvbFwiKTtcblxuICB2YXIgX3Byb2Nlc3NPbGRWYWx1ZXMgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInByb2Nlc3NPbGRWYWx1ZXNcIik7XG5cbiAgdmFyIF9kZWJvdW5jZSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiZGVib3VuY2VcIik7XG5cbiAgdmFyIF9jaGVja1BhZ2VDaGFuZ2VkID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJjaGVja1BhZ2VDaGFuZ2VkXCIpO1xuXG4gIHZhciBfcGluZ1JlcXVlc3QgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInBpbmdSZXF1ZXN0XCIpO1xuXG4gIHZhciBfaXNQaW5nQ29udGludW91cyA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiaXNQaW5nQ29udGludW91c1wiKTtcblxuICB2YXIgX292ZXJyaWRlRFN5bmNGbGFnID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJvdmVycmlkZURTeW5jRmxhZ1wiKTtcblxuICB2YXIgX3NlbmRMb2NhdGlvbkRhdGEgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInNlbmRMb2NhdGlvbkRhdGFcIik7XG5cbiAgY2xhc3MgQ2xldmVyVGFwIHtcbiAgICBnZXQgc3BhKCkge1xuICAgICAgcmV0dXJuIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfaXNTcGEpW19pc1NwYV07XG4gICAgfVxuXG4gICAgc2V0IHNwYSh2YWx1ZSkge1xuICAgICAgY29uc3QgaXNTcGEgPSB2YWx1ZSA9PT0gdHJ1ZTtcblxuICAgICAgaWYgKF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfaXNTcGEpW19pc1NwYV0gIT09IGlzU3BhICYmIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfb25sb2FkY2FsbGVkKVtfb25sb2FkY2FsbGVkXSA9PT0gMSkge1xuICAgICAgICAvLyBpZiBjbGV2ZXJ0YXAuc3BhIGlzIGNoYW5nZWQgYWZ0ZXIgaW5pdCBoYXMgYmVlbiBjYWxsZWQgdGhlbiB1cGRhdGUgdGhlIGNsaWNrIGxpc3RlbmVyc1xuICAgICAgICBpZiAoaXNTcGEpIHtcbiAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYm91bmRDaGVja1BhZ2VDaGFuZ2VkKVtfYm91bmRDaGVja1BhZ2VDaGFuZ2VkXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2JvdW5kQ2hlY2tQYWdlQ2hhbmdlZClbX2JvdW5kQ2hlY2tQYWdlQ2hhbmdlZF0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfaXNTcGEpW19pc1NwYV0gPSBpc1NwYTtcbiAgICB9XG5cbiAgICBnZXQgZGlzbWlzc1NwYW1Db250cm9sKCkge1xuICAgICAgcmV0dXJuIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfZGlzbWlzc1NwYW1Db250cm9sKVtfZGlzbWlzc1NwYW1Db250cm9sXTtcbiAgICB9XG5cbiAgICBzZXQgZGlzbWlzc1NwYW1Db250cm9sKHZhbHVlKSB7XG4gICAgICBjb25zdCBkaXNtaXNzU3BhbUNvbnRyb2wgPSB2YWx1ZSA9PT0gdHJ1ZTtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfZGlzbWlzc1NwYW1Db250cm9sKVtfZGlzbWlzc1NwYW1Db250cm9sXSA9IGRpc21pc3NTcGFtQ29udHJvbDtcbiAgICAgICRjdC5kaXNtaXNzU3BhbUNvbnRyb2wgPSBkaXNtaXNzU3BhbUNvbnRyb2w7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICB2YXIgX2NsZXZlcnRhcCRhY2NvdW50LCBfY2xldmVydGFwJGFjY291bnQyLCBfY2xldmVydGFwJGFjY291bnQzLCBfY2xldmVydGFwJGFjY291bnQ0LCBfY2xldmVydGFwJGFjY291bnQ1O1xuXG4gICAgICBsZXQgY2xldmVydGFwID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfc2VuZExvY2F0aW9uRGF0YSwge1xuICAgICAgICB2YWx1ZTogX3NlbmRMb2NhdGlvbkRhdGEyXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfb3ZlcnJpZGVEU3luY0ZsYWcsIHtcbiAgICAgICAgdmFsdWU6IF9vdmVycmlkZURTeW5jRmxhZzJcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9pc1BpbmdDb250aW51b3VzLCB7XG4gICAgICAgIHZhbHVlOiBfaXNQaW5nQ29udGludW91czJcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9waW5nUmVxdWVzdCwge1xuICAgICAgICB2YWx1ZTogX3BpbmdSZXF1ZXN0MlxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX2NoZWNrUGFnZUNoYW5nZWQsIHtcbiAgICAgICAgdmFsdWU6IF9jaGVja1BhZ2VDaGFuZ2VkMlxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX2RlYm91bmNlLCB7XG4gICAgICAgIHZhbHVlOiBfZGVib3VuY2UyXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfcHJvY2Vzc09sZFZhbHVlcywge1xuICAgICAgICB2YWx1ZTogX3Byb2Nlc3NPbGRWYWx1ZXMyXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfbG9nZ2VyJGEsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9hcGksIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9vbmxvYWRjYWxsZWQsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9kZXZpY2UkMywge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX3Nlc3Npb24kMywge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX2FjY291bnQkNiwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX3JlcXVlc3QkNywge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX3ZhcmlhYmxlU3RvcmUkMSwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX2lzU3BhLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfcHJldmlvdXNVcmwsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9ib3VuZENoZWNrUGFnZUNoYW5nZWQsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2NoZWNrUGFnZUNoYW5nZWQpW19jaGVja1BhZ2VDaGFuZ2VkXS5iaW5kKHRoaXMpXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfZGlzbWlzc1NwYW1Db250cm9sLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZW5hYmxlUGVyc29uYWxpemF0aW9uID0gdm9pZCAwO1xuICAgICAgdGhpcy5wb3B1cENhbGxiYWNrcyA9IHt9O1xuICAgICAgdGhpcy5wb3B1cEN1cnJlbnRXenJrSWQgPSAnJztcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfb25sb2FkY2FsbGVkKVtfb25sb2FkY2FsbGVkXSA9IDA7XG4gICAgICB0aGlzLl9pc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZSA9IHRoaXMuX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlLmJpbmQodGhpcyk7XG5cbiAgICAgIHRoaXMucmFpc2VOb3RpZmljYXRpb25DbGlja2VkID0gKCkgPT4ge307XG5cbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJGEpW19sb2dnZXIkYV0gPSBuZXcgTG9nZ2VyKGxvZ0xldmVscy5JTkZPKTtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWNjb3VudCQ2KVtfYWNjb3VudCQ2XSA9IG5ldyBBY2NvdW50KChfY2xldmVydGFwJGFjY291bnQgPSBjbGV2ZXJ0YXAuYWNjb3VudCkgPT09IG51bGwgfHwgX2NsZXZlcnRhcCRhY2NvdW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY2xldmVydGFwJGFjY291bnRbMF0sIGNsZXZlcnRhcC5yZWdpb24gfHwgKChfY2xldmVydGFwJGFjY291bnQyID0gY2xldmVydGFwLmFjY291bnQpID09PSBudWxsIHx8IF9jbGV2ZXJ0YXAkYWNjb3VudDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jbGV2ZXJ0YXAkYWNjb3VudDJbMV0pLCBjbGV2ZXJ0YXAudGFyZ2V0RG9tYWluIHx8ICgoX2NsZXZlcnRhcCRhY2NvdW50MyA9IGNsZXZlcnRhcC5hY2NvdW50KSA9PT0gbnVsbCB8fCBfY2xldmVydGFwJGFjY291bnQzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY2xldmVydGFwJGFjY291bnQzWzJdKSwgY2xldmVydGFwLnRva2VuIHx8ICgoX2NsZXZlcnRhcCRhY2NvdW50NCA9IGNsZXZlcnRhcC5hY2NvdW50KSA9PT0gbnVsbCB8fCBfY2xldmVydGFwJGFjY291bnQ0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY2xldmVydGFwJGFjY291bnQ0WzNdKSk7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2RldmljZSQzKVtfZGV2aWNlJDNdID0gbmV3IERldmljZU1hbmFnZXIoe1xuICAgICAgICBsb2dnZXI6IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJGEpW19sb2dnZXIkYV1cbiAgICAgIH0pO1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9kaXNtaXNzU3BhbUNvbnRyb2wpW19kaXNtaXNzU3BhbUNvbnRyb2xdID0gY2xldmVydGFwLmRpc21pc3NTcGFtQ29udHJvbCB8fCBmYWxzZTtcbiAgICAgIHRoaXMuc2hwZnlQcm94eVBhdGggPSBjbGV2ZXJ0YXAuc2hwZnlQcm94eVBhdGggfHwgJyc7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3Nlc3Npb24kMylbX3Nlc3Npb24kM10gPSBuZXcgU2Vzc2lvbk1hbmFnZXIoe1xuICAgICAgICBsb2dnZXI6IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJGEpW19sb2dnZXIkYV0sXG4gICAgICAgIGlzUGVyc29uYWxpc2F0aW9uQWN0aXZlOiB0aGlzLl9pc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZVxuICAgICAgfSk7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlcXVlc3QkNylbX3JlcXVlc3QkN10gPSBuZXcgUmVxdWVzdE1hbmFnZXIoe1xuICAgICAgICBsb2dnZXI6IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJGEpW19sb2dnZXIkYV0sXG4gICAgICAgIGFjY291bnQ6IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWNjb3VudCQ2KVtfYWNjb3VudCQ2XSxcbiAgICAgICAgZGV2aWNlOiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2RldmljZSQzKVtfZGV2aWNlJDNdLFxuICAgICAgICBzZXNzaW9uOiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3Nlc3Npb24kMylbX3Nlc3Npb24kM10sXG4gICAgICAgIGlzUGVyc29uYWxpc2F0aW9uQWN0aXZlOiB0aGlzLl9pc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZVxuICAgICAgfSk7XG4gICAgICB0aGlzLmVuYWJsZVBlcnNvbmFsaXphdGlvbiA9IGNsZXZlcnRhcC5lbmFibGVQZXJzb25hbGl6YXRpb24gfHwgZmFsc2U7XG4gICAgICB0aGlzLmV2ZW50ID0gbmV3IEV2ZW50SGFuZGxlcih7XG4gICAgICAgIGxvZ2dlcjogX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkYSlbX2xvZ2dlciRhXSxcbiAgICAgICAgcmVxdWVzdDogX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0JDcpW19yZXF1ZXN0JDddLFxuICAgICAgICBpc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZTogdGhpcy5faXNQZXJzb25hbGlzYXRpb25BY3RpdmVcbiAgICAgIH0sIGNsZXZlcnRhcC5ldmVudCk7XG4gICAgICB0aGlzLnByb2ZpbGUgPSBuZXcgUHJvZmlsZUhhbmRsZXIoe1xuICAgICAgICBsb2dnZXI6IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJGEpW19sb2dnZXIkYV0sXG4gICAgICAgIHJlcXVlc3Q6IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdCQ3KVtfcmVxdWVzdCQ3XSxcbiAgICAgICAgYWNjb3VudDogX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9hY2NvdW50JDYpW19hY2NvdW50JDZdLFxuICAgICAgICBpc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZTogdGhpcy5faXNQZXJzb25hbGlzYXRpb25BY3RpdmVcbiAgICAgIH0sIGNsZXZlcnRhcC5wcm9maWxlKTtcbiAgICAgIHRoaXMub25Vc2VyTG9naW4gPSBuZXcgVXNlckxvZ2luSGFuZGxlcih7XG4gICAgICAgIHJlcXVlc3Q6IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdCQ3KVtfcmVxdWVzdCQ3XSxcbiAgICAgICAgYWNjb3VudDogX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9hY2NvdW50JDYpW19hY2NvdW50JDZdLFxuICAgICAgICBzZXNzaW9uOiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3Nlc3Npb24kMylbX3Nlc3Npb24kM10sXG4gICAgICAgIGxvZ2dlcjogX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkYSlbX2xvZ2dlciRhXSxcbiAgICAgICAgZGV2aWNlOiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2RldmljZSQzKVtfZGV2aWNlJDNdXG4gICAgICB9LCBjbGV2ZXJ0YXAub25Vc2VyTG9naW4pO1xuICAgICAgdGhpcy5wcml2YWN5ID0gbmV3IFByaXZhY3koe1xuICAgICAgICByZXF1ZXN0OiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlcXVlc3QkNylbX3JlcXVlc3QkN10sXG4gICAgICAgIGFjY291bnQ6IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWNjb3VudCQ2KVtfYWNjb3VudCQ2XSxcbiAgICAgICAgbG9nZ2VyOiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciRhKVtfbG9nZ2VyJGFdXG4gICAgICB9LCBjbGV2ZXJ0YXAucHJpdmFjeSk7XG4gICAgICB0aGlzLm5vdGlmaWNhdGlvbnMgPSBuZXcgTm90aWZpY2F0aW9uSGFuZGxlcih7XG4gICAgICAgIGxvZ2dlcjogX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkYSlbX2xvZ2dlciRhXSxcbiAgICAgICAgcmVxdWVzdDogX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0JDcpW19yZXF1ZXN0JDddLFxuICAgICAgICBhY2NvdW50OiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2FjY291bnQkNilbX2FjY291bnQkNl1cbiAgICAgIH0sIGNsZXZlcnRhcC5ub3RpZmljYXRpb25zKTtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfdmFyaWFibGVTdG9yZSQxKVtfdmFyaWFibGVTdG9yZSQxXSA9IG5ldyBWYXJpYWJsZVN0b3JlKHtcbiAgICAgICAgbG9nZ2VyOiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciRhKVtfbG9nZ2VyJGFdLFxuICAgICAgICByZXF1ZXN0OiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlcXVlc3QkNylbX3JlcXVlc3QkN10sXG4gICAgICAgIGFjY291bnQ6IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWNjb3VudCQ2KVtfYWNjb3VudCQ2XSxcbiAgICAgICAgZXZlbnQ6IHRoaXMuZXZlbnRcbiAgICAgIH0pO1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9hcGkpW19hcGldID0gbmV3IENsZXZlclRhcEFQSSh7XG4gICAgICAgIGxvZ2dlcjogX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkYSlbX2xvZ2dlciRhXSxcbiAgICAgICAgcmVxdWVzdDogX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0JDcpW19yZXF1ZXN0JDddLFxuICAgICAgICBkZXZpY2U6IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfZGV2aWNlJDMpW19kZXZpY2UkM10sXG4gICAgICAgIHNlc3Npb246IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfc2Vzc2lvbiQzKVtfc2Vzc2lvbiQzXVxuICAgICAgfSk7XG4gICAgICB0aGlzLnNwYSA9IGNsZXZlcnRhcC5zcGE7XG4gICAgICB0aGlzLmRpc21pc3NTcGFtQ29udHJvbCA9IGNsZXZlcnRhcC5kaXNtaXNzU3BhbUNvbnRyb2w7XG4gICAgICB0aGlzLnVzZXIgPSBuZXcgVXNlcih7XG4gICAgICAgIGlzUGVyc29uYWxpc2F0aW9uQWN0aXZlOiB0aGlzLl9pc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZVxuICAgICAgfSk7XG4gICAgICB0aGlzLnNlc3Npb24gPSB7XG4gICAgICAgIGdldFRpbWVFbGFwc2VkOiAoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfc2Vzc2lvbiQzKVtfc2Vzc2lvbiQzXS5nZXRUaW1lRWxhcHNlZCgpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRQYWdlQ291bnQ6ICgpID0+IHtcbiAgICAgICAgICByZXR1cm4gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXNzaW9uJDMpW19zZXNzaW9uJDNdLmdldFBhZ2VDb3VudCgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmxvZ291dCA9ICgpID0+IHtcbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkYSlbX2xvZ2dlciRhXS5kZWJ1ZygnbG9nb3V0IGNhbGxlZCcpO1xuXG4gICAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNldEluc3RhbnREZWxldGVGbGFnSW5LKCk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmNsZWFyID0gKCkgPT4ge1xuICAgICAgICB0aGlzLm9uVXNlckxvZ2luLmNsZWFyKCk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmdldENsZXZlclRhcElEID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9kZXZpY2UkMylbX2RldmljZSQzXS5nZXRHdWlkKCk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmdldEFjY291bnRJRCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWNjb3VudCQ2KVtfYWNjb3VudCQ2XS5pZDtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuZ2V0U0NEb21haW4gPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2FjY291bnQkNilbX2FjY291bnQkNl0uZmluYWxUYXJnZXREb21haW47XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnNldExpYnJhcnkgPSAobGliTmFtZSwgbGliVmVyc2lvbikgPT4ge1xuICAgICAgICAkY3QuZmx1dHRlclZlcnNpb24gPSB7XG4gICAgICAgICAgW2xpYk5hbWVdOiBsaWJWZXJzaW9uXG4gICAgICAgIH07XG4gICAgICB9OyAvLyBTZXQgdGhlIFNpZ25lZCBDYWxsIHNkayB2ZXJzaW9uIGFuZCBmaXJlIHJlcXVlc3RcblxuXG4gICAgICB0aGlzLnNldFNDU0RLVmVyc2lvbiA9IHZlciA9PiB7XG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWNjb3VudCQ2KVtfYWNjb3VudCQ2XS5zY1NES1ZlcnNpb24gPSB2ZXI7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB7fTtcbiAgICAgICAgZGF0YS5hZiA9IHtcbiAgICAgICAgICBzY3Y6ICdzYy1zZGstdicgKyBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2FjY291bnQkNilbX2FjY291bnQkNl0uc2NTREtWZXJzaW9uXG4gICAgICAgIH07XG5cbiAgICAgICAgbGV0IHBhZ2VMb2FkVXJsID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9hY2NvdW50JDYpW19hY2NvdW50JDZdLmRhdGFQb3N0VVJMO1xuXG4gICAgICAgIHBhZ2VMb2FkVXJsID0gYWRkVG9VUkwocGFnZUxvYWRVcmwsICd0eXBlJywgJ3BhZ2UnKTtcbiAgICAgICAgcGFnZUxvYWRVcmwgPSBhZGRUb1VSTChwYWdlTG9hZFVybCwgJ2QnLCBjb21wcmVzc0RhdGEoSlNPTi5zdHJpbmdpZnkoZGF0YSksIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJGEpW19sb2dnZXIkYV0pKTtcblxuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlcXVlc3QkNylbX3JlcXVlc3QkN10uc2F2ZUFuZEZpcmVSZXF1ZXN0KHBhZ2VMb2FkVXJsLCAkY3QuYmxvY2tSZXF1ZXN0KTtcbiAgICAgIH07XG5cbiAgICAgIGlmIChoYXNXZWJJbmJveFNldHRpbmdzSW5MUygpKSB7XG4gICAgICAgIGNoZWNrQW5kUmVnaXN0ZXJXZWJJbmJveEVsZW1lbnRzKCk7XG4gICAgICAgIGluaXRpYWxpemVXZWJJbmJveChfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciRhKVtfbG9nZ2VyJGFdKTtcbiAgICAgIH0gLy8gR2V0IEluYm94IE1lc3NhZ2UgQ291bnRcblxuXG4gICAgICB0aGlzLmdldEluYm94TWVzc2FnZUNvdW50ID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBtc2dDb3VudCA9IGdldEluYm94TWVzc2FnZXMoKTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG1zZ0NvdW50KS5sZW5ndGg7XG4gICAgICB9OyAvLyBHZXQgSW5ib3ggVW5yZWFkIE1lc3NhZ2UgQ291bnRcblxuXG4gICAgICB0aGlzLmdldEluYm94TWVzc2FnZVVucmVhZENvdW50ID0gKCkgPT4ge1xuICAgICAgICBpZiAoJGN0LmluYm94KSB7XG4gICAgICAgICAgcmV0dXJuICRjdC5pbmJveC51bnZpZXdlZENvdW50ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkYSlbX2xvZ2dlciRhXS5kZWJ1ZygnTm8gdW5yZWFkIG1lc3NhZ2VzJyk7XG4gICAgICAgIH1cbiAgICAgIH07IC8vIEdldCBBbGwgSW5ib3ggbWVzc2FnZXNcblxuXG4gICAgICB0aGlzLmdldEFsbEluYm94TWVzc2FnZXMgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBnZXRJbmJveE1lc3NhZ2VzKCk7XG4gICAgICB9OyAvLyBHZXQgb25seSBVbnJlYWQgbWVzc2FnZXNcblxuXG4gICAgICB0aGlzLmdldFVucmVhZEluYm94TWVzc2FnZXMgPSAoKSA9PiB7XG4gICAgICAgIGlmICgkY3QuaW5ib3gpIHtcbiAgICAgICAgICByZXR1cm4gJGN0LmluYm94LnVudmlld2VkTWVzc2FnZXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkYSlbX2xvZ2dlciRhXS5kZWJ1ZygnTm8gdW5yZWFkIG1lc3NhZ2VzJyk7XG4gICAgICAgIH1cbiAgICAgIH07IC8vIEdldCBtZXNzYWdlIG9iamVjdCBiZWxvbmdpbmcgdG8gdGhlIGdpdmVuIG1lc3NhZ2UgaWQgb25seS4gTWVzc2FnZSBpZCBzaG91bGQgYmUgYSBTdHJpbmdcblxuXG4gICAgICB0aGlzLmdldEluYm94TWVzc2FnZUZvcklkID0gbWVzc2FnZUlkID0+IHtcbiAgICAgICAgY29uc3QgbWVzc2FnZXMgPSBnZXRJbmJveE1lc3NhZ2VzKCk7XG5cbiAgICAgICAgaWYgKChtZXNzYWdlSWQgIT09IG51bGwgfHwgbWVzc2FnZUlkICE9PSAnJykgJiYgbWVzc2FnZXMuaGFzT3duUHJvcGVydHkobWVzc2FnZUlkKSkge1xuICAgICAgICAgIHJldHVybiBtZXNzYWdlc1ttZXNzYWdlSWRdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJGEpW19sb2dnZXIkYV0uZXJyb3IoJ05vIG1lc3NhZ2UgYXZhaWxhYmxlIGZvciBtZXNzYWdlIElkICcgKyBtZXNzYWdlSWQpO1xuICAgICAgICB9XG4gICAgICB9OyAvLyBEZWxldGUgbWVzc2FnZSBmcm9tIHRoZSBJbmJveC4gTWVzc2FnZSBpZCBzaG91bGQgYmUgYSBTdHJpbmdcbiAgICAgIC8vIElmIHRoZSBtZXNzYWdlIHRvIGJlIGRlbGV0ZWQgaXMgdW52aWV3ZWQgdGhlbiBkZWNyZW1lbnQgdGhlIGJhZGdlIGNvdW50LCBkZWxldGUgdGhlIG1lc3NhZ2UgZnJvbSB1bnZpZXdlZE1lc3NhZ2VzIGxpc3RcbiAgICAgIC8vIFRoZW4gcmVtb3ZlIHRoZSBtZXNzYWdlIGZyb20gbG9jYWwgc3RvcmFnZSBhbmQgdXBkYXRlIGNvb2tpZVxuXG5cbiAgICAgIHRoaXMuZGVsZXRlSW5ib3hNZXNzYWdlID0gbWVzc2FnZUlkID0+IHtcbiAgICAgICAgY29uc3QgbWVzc2FnZXMgPSBnZXRJbmJveE1lc3NhZ2VzKCk7XG5cbiAgICAgICAgaWYgKChtZXNzYWdlSWQgIT09IG51bGwgfHwgbWVzc2FnZUlkICE9PSAnJykgJiYgbWVzc2FnZXMuaGFzT3duUHJvcGVydHkobWVzc2FnZUlkKSkge1xuICAgICAgICAgIGNvbnN0IGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignY3Qtd2ViLWluYm94Jykuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChtZXNzYWdlSWQpO1xuXG4gICAgICAgICAgaWYgKG1lc3NhZ2VzW21lc3NhZ2VJZF0udmlld2VkID09PSAwKSB7XG4gICAgICAgICAgICAkY3QuaW5ib3gudW52aWV3ZWRDb3VudGVyLS07XG4gICAgICAgICAgICBkZWxldGUgJGN0LmluYm94LnVudmlld2VkTWVzc2FnZXNbbWVzc2FnZUlkXTtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1bnZpZXdlZEJhZGdlJykuaW5uZXJUZXh0ID0gJGN0LmluYm94LnVudmlld2VkQ291bnRlcjtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1bnZpZXdlZEJhZGdlJykuc3R5bGUuZGlzcGxheSA9ICRjdC5pbmJveC51bnZpZXdlZENvdW50ZXIgPiAwID8gJ2ZsZXgnIDogJ25vbmUnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGVsICYmIGVsLnJlbW92ZSgpO1xuICAgICAgICAgIGRlbGV0ZSBtZXNzYWdlc1ttZXNzYWdlSWRdO1xuICAgICAgICAgIHNhdmVJbmJveE1lc3NhZ2VzKG1lc3NhZ2VzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciRhKVtfbG9nZ2VyJGFdLmVycm9yKCdObyBtZXNzYWdlIGF2YWlsYWJsZSBmb3IgbWVzc2FnZSBJZCAnICsgbWVzc2FnZUlkKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIC8qIE1hcmsgTWVzc2FnZSBhcyBSZWFkLiBNZXNzYWdlIGlkIHNob3VsZCBiZSBhIFN0cmluZ1xuICAgICAgIC0gQ2hlY2sgaWYgdGhlIG1lc3NhZ2UgSWQgZXhpc3QgaW4gdGhlIHVucmVhZCBtZXNzYWdlIGxpc3RcbiAgICAgICAtIFJlbW92ZSB0aGUgdW5yZWFkIG1hcmtlciwgdXBkYXRlIHRoZSB2aWV3ZWQgZmxhZywgZGVjcmVtZW50IHRoZSBiYWdlIENvdW50XG4gICAgICAgLSByZW5kZXJOb3RpZmljYXRpb25WaWV3ZWQgKi9cblxuXG4gICAgICB0aGlzLm1hcmtSZWFkSW5ib3hNZXNzYWdlID0gbWVzc2FnZUlkID0+IHtcbiAgICAgICAgY29uc3QgdW5yZWFkTXNnID0gJGN0LmluYm94LnVudmlld2VkTWVzc2FnZXM7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gZ2V0SW5ib3hNZXNzYWdlcygpO1xuXG4gICAgICAgIGlmICgobWVzc2FnZUlkICE9PSBudWxsIHx8IG1lc3NhZ2VJZCAhPT0gJycpICYmIHVucmVhZE1zZy5oYXNPd25Qcm9wZXJ0eShtZXNzYWdlSWQpKSB7XG4gICAgICAgICAgY29uc3QgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdjdC13ZWItaW5ib3gnKS5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKG1lc3NhZ2VJZCk7XG5cbiAgICAgICAgICBpZiAoZWwgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGVsLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoJ3VucmVhZE1hcmtlcicpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbWVzc2FnZXNbbWVzc2FnZUlkXS52aWV3ZWQgPSAxO1xuXG4gICAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1bnZpZXdlZEJhZGdlJykpIHtcbiAgICAgICAgICAgIHZhciBjb3VudGVyID0gcGFyc2VJbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Vudmlld2VkQmFkZ2UnKS5pbm5lclRleHQpIC0gMTtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1bnZpZXdlZEJhZGdlJykuaW5uZXJUZXh0ID0gY291bnRlcjtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1bnZpZXdlZEJhZGdlJykuc3R5bGUuZGlzcGxheSA9IGNvdW50ZXIgPiAwID8gJ2ZsZXgnIDogJ25vbmUnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHdpbmRvdy5jbGV2ZXJ0YXAucmVuZGVyTm90aWZpY2F0aW9uVmlld2VkKHtcbiAgICAgICAgICAgIG1zZ0lkOiBtZXNzYWdlc1ttZXNzYWdlSWRdLnd6cmtfaWQsXG4gICAgICAgICAgICBwaXZvdElkOiBtZXNzYWdlc1ttZXNzYWdlSWRdLnBpdm90SWRcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAkY3QuaW5ib3gudW52aWV3ZWRDb3VudGVyLS07XG4gICAgICAgICAgZGVsZXRlICRjdC5pbmJveC51bnZpZXdlZE1lc3NhZ2VzW21lc3NhZ2VJZF07XG4gICAgICAgICAgc2F2ZUluYm94TWVzc2FnZXMobWVzc2FnZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJGEpW19sb2dnZXIkYV0uZXJyb3IoJ05vIG1lc3NhZ2UgYXZhaWxhYmxlIGZvciBtZXNzYWdlIElkICcgKyBtZXNzYWdlSWQpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgLyogTWFyayBNZXNzYWdlIGFzIFJlYWQuIG1lc3NhZ2VJZHMgc2hvdWxkIGJlIGEgYW4gYXJyYXkgb2Ygc3RyaW5nICovXG5cblxuICAgICAgdGhpcy5tYXJrUmVhZEluYm94TWVzc2FnZXNGb3JJZHMgPSBtZXNzYWdlSWRzID0+IHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobWVzc2FnZUlkcykpIHtcbiAgICAgICAgICBmb3IgKHZhciBpZCA9IDA7IGlkIDwgbWVzc2FnZUlkcy5sZW5ndGg7IGlkKyspIHtcbiAgICAgICAgICAgIHRoaXMubWFya1JlYWRJbmJveE1lc3NhZ2UobWVzc2FnZUlkc1tpZF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIC8qIE1hcmsgYWxsIG1lc3NhZ2VzIGFzIHJlYWRcbiAgICAgICAgLSBHZXQgdGhlIGNvdW50IG9mIHVucmVhZCBtZXNzYWdlcywgdXBkYXRlIHVucmVhZCBtYXJrZXIgc3R5bGVcbiAgICAgICAgLSByZW5kZXJOb3RpZmljYXRpb25WaWV3ZWQsIHVwZGF0ZSB0aGUgYmFkZ2UgY291bnQgYW5kIHN0eWxlXG4gICAgICAqL1xuXG5cbiAgICAgIHRoaXMubWFya1JlYWRBbGxJbmJveE1lc3NhZ2UgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHVucmVhZE1zZyA9ICRjdC5pbmJveC51bnZpZXdlZE1lc3NhZ2VzO1xuICAgICAgICBjb25zdCBtZXNzYWdlcyA9IGdldEluYm94TWVzc2FnZXMoKTtcblxuICAgICAgICBpZiAoT2JqZWN0LmtleXModW5yZWFkTXNnKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY29uc3QgbXNnSWRzID0gT2JqZWN0LmtleXModW5yZWFkTXNnKTtcbiAgICAgICAgICBtc2dJZHMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdjdC13ZWItaW5ib3gnKS5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKGtleSk7XG5cbiAgICAgICAgICAgIGlmIChlbCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICBlbC5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKCd1bnJlYWRNYXJrZXInKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtZXNzYWdlc1trZXldLnZpZXdlZCA9IDE7XG4gICAgICAgICAgICB3aW5kb3cuY2xldmVydGFwLnJlbmRlck5vdGlmaWNhdGlvblZpZXdlZCh7XG4gICAgICAgICAgICAgIG1zZ0lkOiBtZXNzYWdlc1trZXldLnd6cmtfaWQsXG4gICAgICAgICAgICAgIHBpdm90SWQ6IG1lc3NhZ2VzW2tleV0ud3pya19waXZvdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Vudmlld2VkQmFkZ2UnKS5pbm5lclRleHQgPSAwO1xuICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1bnZpZXdlZEJhZGdlJykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICBzYXZlSW5ib3hNZXNzYWdlcyhtZXNzYWdlcyk7XG4gICAgICAgICAgJGN0LmluYm94LnVudmlld2VkQ291bnRlciA9IDA7XG4gICAgICAgICAgJGN0LmluYm94LnVudmlld2VkTWVzc2FnZXMgPSB7fTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciRhKVtfbG9nZ2VyJGFdLmRlYnVnKCdBbGwgbWVzc2FnZXMgYXJlIGFscmVhZHkgcmVhZCcpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnRvZ2dsZUluYm94ID0gZSA9PiB7XG4gICAgICAgIHZhciBfJGN0JGluYm94O1xuXG4gICAgICAgIHJldHVybiAoXyRjdCRpbmJveCA9ICRjdC5pbmJveCkgPT09IG51bGwgfHwgXyRjdCRpbmJveCA9PT0gdm9pZCAwID8gdm9pZCAwIDogXyRjdCRpbmJveC50b2dnbGVJbmJveChlKTtcbiAgICAgIH07IC8vIG1ldGhvZCBmb3Igbm90aWZpY2F0aW9uIHZpZXdlZFxuXG5cbiAgICAgIHRoaXMucmVuZGVyTm90aWZpY2F0aW9uVmlld2VkID0gZGV0YWlsID0+IHtcbiAgICAgICAgcHJvY2Vzc05vdGlmaWNhdGlvbkV2ZW50KE5PVElGSUNBVElPTl9WSUVXRUQsIGRldGFpbCk7XG4gICAgICB9OyAvLyBtZXRob2QgZm9yIG5vdGlmaWNhdGlvbiBjbGlja2VkXG5cblxuICAgICAgdGhpcy5yZW5kZXJOb3RpZmljYXRpb25DbGlja2VkID0gZGV0YWlsID0+IHtcbiAgICAgICAgcHJvY2Vzc05vdGlmaWNhdGlvbkV2ZW50KE5PVElGSUNBVElPTl9DTElDS0VELCBkZXRhaWwpO1xuICAgICAgfTtcblxuICAgICAgY29uc3QgcHJvY2Vzc05vdGlmaWNhdGlvbkV2ZW50ID0gKGV2ZW50TmFtZSwgZXZlbnREZXRhaWwpID0+IHtcbiAgICAgICAgaWYgKCFldmVudERldGFpbCB8fCAhZXZlbnREZXRhaWwubXNnSWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkYXRhID0ge307XG4gICAgICAgIGRhdGEudHlwZSA9ICdldmVudCc7XG4gICAgICAgIGRhdGEuZXZ0TmFtZSA9IGV2ZW50TmFtZTtcbiAgICAgICAgZGF0YS5ldnREYXRhID0ge1xuICAgICAgICAgIFtXWlJLX0lEXTogZXZlbnREZXRhaWwubXNnSWRcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoZXZlbnREZXRhaWwucGl2b3RJZCkge1xuICAgICAgICAgIGRhdGEuZXZ0RGF0YSA9IHsgLi4uZGF0YS5ldnREYXRhLFxuICAgICAgICAgICAgd3pya19waXZvdDogZXZlbnREZXRhaWwucGl2b3RJZFxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnREZXRhaWwud3pya19zbGlkZU5vKSB7XG4gICAgICAgICAgZGF0YS5ldnREYXRhID0geyAuLi5kYXRhLmV2dERhdGEsXG4gICAgICAgICAgICB3enJrX3NsaWRlTm86IGV2ZW50RGV0YWlsLnd6cmtfc2xpZGVOb1xuICAgICAgICAgIH07XG4gICAgICAgIH0gLy8gQWRkaW5nIGt2IHBhaXIgdG8gZXZlbnQgZGF0YVxuXG5cbiAgICAgICAgaWYgKGV2ZW50RGV0YWlsLmt2ICYmIGV2ZW50RGV0YWlsLmt2ICE9PSBudWxsICYmIGV2ZW50RGV0YWlsLmt2ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBldmVudERldGFpbC5rdikge1xuICAgICAgICAgICAgaWYgKGtleS5zdGFydHNXaXRoKFdaUktfUFJFRklYKSkge1xuICAgICAgICAgICAgICBkYXRhLmV2dERhdGEgPSB7IC4uLmRhdGEuZXZ0RGF0YSxcbiAgICAgICAgICAgICAgICBba2V5XTogZXZlbnREZXRhaWwua3Zba2V5XVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBBZGRpbmcgbXNnQ1RrdiB0byBldmVudCBkYXRhXG5cblxuICAgICAgICBpZiAoZXZlbnREZXRhaWwubXNnQ1RrdiAmJiBldmVudERldGFpbC5tc2dDVGt2ICE9PSBudWxsICYmIGV2ZW50RGV0YWlsLm1zZ0NUa3YgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGV2ZW50RGV0YWlsLm1zZ0NUa3YpIHtcbiAgICAgICAgICAgIGlmIChrZXkuc3RhcnRzV2l0aChXWlJLX1BSRUZJWCkpIHtcbiAgICAgICAgICAgICAgZGF0YS5ldnREYXRhID0geyAuLi5kYXRhLmV2dERhdGEsXG4gICAgICAgICAgICAgICAgW2tleV06IGV2ZW50RGV0YWlsLm1zZ0NUa3Zba2V5XVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdCQ3KVtfcmVxdWVzdCQ3XS5wcm9jZXNzRXZlbnQoZGF0YSk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnNldExvZ0xldmVsID0gbCA9PiB7XG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJGEpW19sb2dnZXIkYV0ubG9nTGV2ZWwgPSBOdW1iZXIobCk7XG5cbiAgICAgICAgaWYgKGwgPT09IDMpIHtcbiAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5XWlJLX0QgPSAnJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgc2Vzc2lvblN0b3JhZ2UuV1pSS19EO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgLyoqXG4gICAgICAqIEBwYXJhbSB7fSBrZXlcbiAgICAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgICAgKi9cblxuXG4gICAgICB0aGlzLmhhbmRsZUluY3JlbWVudFZhbHVlID0gKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgdGhpcy5wcm9maWxlLl9oYW5kbGVJbmNyZW1lbnREZWNyZW1lbnRWYWx1ZShrZXksIHZhbHVlLCBDT01NQU5EX0lOQ1JFTUVOVCk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmhhbmRsZURlY3JlbWVudFZhbHVlID0gKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgdGhpcy5wcm9maWxlLl9oYW5kbGVJbmNyZW1lbnREZWNyZW1lbnRWYWx1ZShrZXksIHZhbHVlLCBDT01NQU5EX0RFQ1JFTUVOVCk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnNldE11bHRpVmFsdWVzRm9yS2V5ID0gKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgdGhpcy5wcm9maWxlLl9oYW5kbGVNdWx0aVZhbHVlU2V0KGtleSwgdmFsdWUsIENPTU1BTkRfU0VUKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdzZXRNdWx0aVZhbHVlc0ZvcktleSBzaG91bGQgYmUgY2FsbGVkIHdpdGggYSB2YWx1ZSBvZiB0eXBlIGFycmF5Jyk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHRoaXMuYWRkTXVsdGlWYWx1ZUZvcktleSA9IChrZXksIHZhbHVlKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICB0aGlzLnByb2ZpbGUuX2hhbmRsZU11bHRpVmFsdWVBZGQoa2V5LCB2YWx1ZSwgQ09NTUFORF9BREQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2FkZE11bHRpVmFsdWVGb3JLZXkgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIGEgdmFsdWUgb2YgdHlwZSBzdHJpbmcgb3IgbnVtYmVyLicpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmFkZE11bHRpVmFsdWVzRm9yS2V5ID0gKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgdGhpcy5wcm9maWxlLl9oYW5kbGVNdWx0aVZhbHVlQWRkKGtleSwgdmFsdWUsIENPTU1BTkRfQUREKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdhZGRNdWx0aVZhbHVlc0ZvcktleSBzaG91bGQgYmUgY2FsbGVkIHdpdGggYSB2YWx1ZSBvZiB0eXBlIGFycmF5LicpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnJlbW92ZU11bHRpVmFsdWVGb3JLZXkgPSAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgdGhpcy5wcm9maWxlLl9oYW5kbGVNdWx0aVZhbHVlUmVtb3ZlKGtleSwgdmFsdWUsIENPTU1BTkRfUkVNT1ZFKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdyZW1vdmVNdWx0aVZhbHVlRm9yS2V5IHNob3VsZCBiZSBjYWxsZWQgd2l0aCBhIHZhbHVlIG9mIHR5cGUgc3RyaW5nIG9yIG51bWJlci4nKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGhpcy5yZW1vdmVNdWx0aVZhbHVlc0ZvcktleSA9IChrZXksIHZhbHVlKSA9PiB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgIHRoaXMucHJvZmlsZS5faGFuZGxlTXVsdGlWYWx1ZVJlbW92ZShrZXksIHZhbHVlLCBDT01NQU5EX1JFTU9WRSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcigncmVtb3ZlTXVsdGlWYWx1ZXNGb3JLZXkgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIGEgdmFsdWUgb2YgdHlwZSBhcnJheS4nKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGhpcy5yZW1vdmVWYWx1ZUZvcktleSA9IGtleSA9PiB7XG4gICAgICAgIHRoaXMucHJvZmlsZS5faGFuZGxlTXVsdGlWYWx1ZURlbGV0ZShrZXksIENPTU1BTkRfREVMRVRFKTtcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IF9oYW5kbGVFbWFpbFN1YnNjcmlwdGlvbiA9IChzdWJzY3JpcHRpb24sIHJlRW5jb2RlZCwgZmV0Y2hHcm91cHMpID0+IHtcbiAgICAgICAgaGFuZGxlRW1haWxTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uLCByZUVuY29kZWQsIGZldGNoR3JvdXBzLCBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2FjY291bnQkNilbX2FjY291bnQkNl0sIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJGEpW19sb2dnZXIkYV0pO1xuICAgICAgfTtcbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsYXRcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsbmdcbiAgICAgICAqIEBwYXJhbSB7Y2FsbGJhY2sgZnVuY3Rpb259IGhhbmRsZUNvb3JkaW5hdGVzXG4gICAgICAgKiBAcmV0dXJuc1xuICAgICAgKi9cblxuXG4gICAgICB0aGlzLmdldExvY2F0aW9uID0gZnVuY3Rpb24gKGxhdCwgbG5nKSB7XG4gICAgICAgIC8vIGxhdGl0dWRlIGFuZCBsb25naXR1ZGUgc2hvdWxkIGJlIG51bWJlciB0eXBlXG4gICAgICAgIGlmIChsYXQgJiYgdHlwZW9mIGxhdCAhPT0gJ251bWJlcicgfHwgbG5nICYmIHR5cGVvZiBsbmcgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ0xhdGl0dWRlIGFuZCBMb25naXR1ZGUgbXVzdCBiZSBvZiBudW1iZXIgdHlwZScpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsYXQgJiYgbG5nKSB7XG4gICAgICAgICAgLy8gdmFsaWQgbGF0aXR1ZGUgcmFuZ2VzIGJ3ICstOTBcbiAgICAgICAgICBpZiAobGF0IDw9IC05MCB8fCBsYXQgPiA5MCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0EgdmFpZCBsYXRpdHVkZSBtdXN0IHJhbmdlIGJldHdlZW4gLTkwIGFuZCA5MCcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gLy8gdmFsaWQgbG9uZ2l0dWRlIHJhbmdlcyBidyArLTE4MFxuXG5cbiAgICAgICAgICBpZiAobG5nIDw9IC0xODAgfHwgbG5nID4gMTgwKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnQSB2YWxpZCBsb25naXR1ZGUgbXVzdCByYW5nZSBiZXR3ZWVuIC0xODAgYW5kIDE4MCcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgICRjdC5sb2NhdGlvbiA9IHtcbiAgICAgICAgICAgIExhdGl0dWRlOiBsYXQsXG4gICAgICAgICAgICBMb25naXR1ZGU6IGxuZ1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3NlbmRMb2NhdGlvbkRhdGEpW19zZW5kTG9jYXRpb25EYXRhXSh7XG4gICAgICAgICAgICBMYXRpdHVkZTogbGF0LFxuICAgICAgICAgICAgTG9uZ2l0dWRlOiBsbmdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAobmF2aWdhdG9yLmdlb2xvY2F0aW9uKSB7XG4gICAgICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKHNob3dQb3NpdGlvbi5iaW5kKHRoaXMpLCBzaG93RXJyb3IpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnR2VvbG9jYXRpb24gaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXIuJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmdW5jdGlvbiBzaG93UG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICAgICAgdmFyIGxhdCA9IHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZTtcbiAgICAgICAgdmFyIGxuZyA9IHBvc2l0aW9uLmNvb3Jkcy5sb25naXR1ZGU7XG4gICAgICAgICRjdC5sb2NhdGlvbiA9IHtcbiAgICAgICAgICBMYXRpdHVkZTogbGF0LFxuICAgICAgICAgIExvbmdpdHVkZTogbG5nXG4gICAgICAgIH07XG5cbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZW5kTG9jYXRpb25EYXRhKVtfc2VuZExvY2F0aW9uRGF0YV0oe1xuICAgICAgICAgIExhdGl0dWRlOiBsYXQsXG4gICAgICAgICAgTG9uZ2l0dWRlOiBsbmdcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNob3dFcnJvcihlcnJvcikge1xuICAgICAgICBzd2l0Y2ggKGVycm9yLmNvZGUpIHtcbiAgICAgICAgICBjYXNlIGVycm9yLlBFUk1JU1NJT05fREVOSUVEOlxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1VzZXIgZGVuaWVkIHRoZSByZXF1ZXN0IGZvciBHZW9sb2NhdGlvbi4nKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBlcnJvci5QT1NJVElPTl9VTkFWQUlMQUJMRTpcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdMb2NhdGlvbiBpbmZvcm1hdGlvbiBpcyB1bmF2YWlsYWJsZS4nKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBlcnJvci5USU1FT1VUOlxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1RoZSByZXF1ZXN0IHRvIGdldCB1c2VyIGxvY2F0aW9uIHRpbWVkIG91dC4nKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBlcnJvci5VTktOT1dOX0VSUk9SOlxuICAgICAgICAgICAgY29uc29sZS5sb2coJ0FuIHVua25vd24gZXJyb3Igb2NjdXJyZWQuJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBhcGkgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2FwaSlbX2FwaV07XG5cbiAgICAgIGFwaS5sb2dvdXQgPSB0aGlzLmxvZ291dDtcbiAgICAgIGFwaS5jbGVhciA9IHRoaXMuY2xlYXI7XG5cbiAgICAgIGFwaS5jbG9zZUlmcmFtZSA9IChjYW1wYWlnbklkLCBkaXZJZElnbm9yZWQpID0+IHtcbiAgICAgICAgY2xvc2VJZnJhbWUoY2FtcGFpZ25JZCwgZGl2SWRJZ25vcmVkLCBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3Nlc3Npb24kMylbX3Nlc3Npb24kM10uc2Vzc2lvbklkKTtcbiAgICAgIH07XG5cbiAgICAgIGFwaS5lbmFibGVXZWJQdXNoID0gKGVuYWJsZWQsIGFwcGxpY2F0aW9uU2VydmVyS2V5KSA9PiB7XG4gICAgICAgIHRoaXMubm90aWZpY2F0aW9ucy5fZW5hYmxlV2ViUHVzaChlbmFibGVkLCBhcHBsaWNhdGlvblNlcnZlcktleSk7XG4gICAgICB9O1xuXG4gICAgICBhcGkudHIgPSBtc2cgPT4ge1xuICAgICAgICBfdHIobXNnLCB7XG4gICAgICAgICAgZGV2aWNlOiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2RldmljZSQzKVtfZGV2aWNlJDNdLFxuICAgICAgICAgIHNlc3Npb246IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfc2Vzc2lvbiQzKVtfc2Vzc2lvbiQzXSxcbiAgICAgICAgICByZXF1ZXN0OiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlcXVlc3QkNylbX3JlcXVlc3QkN10sXG4gICAgICAgICAgbG9nZ2VyOiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciRhKVtfbG9nZ2VyJGFdXG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgYXBpLnNldEVudW0gPSBlbnVtVmFsID0+IHtcbiAgICAgICAgc2V0RW51bShlbnVtVmFsLCBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciRhKVtfbG9nZ2VyJGFdKTtcbiAgICAgIH07XG5cbiAgICAgIGFwaS5pc19vbmxvYWRjYWxsZWQgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX29ubG9hZGNhbGxlZClbX29ubG9hZGNhbGxlZF0gPT09IDE7XG4gICAgICB9O1xuXG4gICAgICBhcGkuc3ViRW1haWwgPSByZUVuY29kZWQgPT4ge1xuICAgICAgICBfaGFuZGxlRW1haWxTdWJzY3JpcHRpb24oJzEnLCByZUVuY29kZWQpO1xuICAgICAgfTtcblxuICAgICAgYXBpLmdldEVtYWlsID0gKHJlRW5jb2RlZCwgd2l0aEdyb3VwcykgPT4ge1xuICAgICAgICBfaGFuZGxlRW1haWxTdWJzY3JpcHRpb24oJy0xJywgcmVFbmNvZGVkLCB3aXRoR3JvdXBzKTtcbiAgICAgIH07XG5cbiAgICAgIGFwaS51blN1YkVtYWlsID0gcmVFbmNvZGVkID0+IHtcbiAgICAgICAgX2hhbmRsZUVtYWlsU3Vic2NyaXB0aW9uKCcwJywgcmVFbmNvZGVkKTtcbiAgICAgIH07XG5cbiAgICAgIGFwaS51bnN1YkVtYWlsR3JvdXBzID0gcmVFbmNvZGVkID0+IHtcbiAgICAgICAgJGN0LnVuc3ViR3JvdXBzID0gW107XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY3QtdW5zdWItZ3JvdXAtaW5wdXQtaXRlbScpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBlbGVtZW50ID0gZWxlbWVudHNbaV07XG5cbiAgICAgICAgICBpZiAoZWxlbWVudC5uYW1lKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgICAgICBuYW1lOiBlbGVtZW50Lm5hbWUsXG4gICAgICAgICAgICAgIGlzVW5zdWJzY3JpYmVkOiBlbGVtZW50LmNoZWNrZWRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAkY3QudW5zdWJHcm91cHMucHVzaChkYXRhKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfaGFuZGxlRW1haWxTdWJzY3JpcHRpb24oR1JPVVBfU1VCU0NSSVBUSU9OX1JFUVVFU1RfSUQsIHJlRW5jb2RlZCk7XG4gICAgICB9O1xuXG4gICAgICBhcGkuc2V0U3Vic2NyaXB0aW9uR3JvdXBzID0gdmFsdWUgPT4ge1xuICAgICAgICAkY3QudW5zdWJHcm91cHMgPSB2YWx1ZTtcbiAgICAgIH07XG5cbiAgICAgIGFwaS5nZXRTdWJzY3JpcHRpb25Hcm91cHMgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiAkY3QudW5zdWJHcm91cHM7XG4gICAgICB9O1xuXG4gICAgICBhcGkuY2hhbmdlU3Vic2NyaXB0aW9uR3JvdXBzID0gKHJlRW5jb2RlZCwgdXBkYXRlZEdyb3VwcykgPT4ge1xuICAgICAgICBhcGkuc2V0U3Vic2NyaXB0aW9uR3JvdXBzKHVwZGF0ZWRHcm91cHMpO1xuXG4gICAgICAgIF9oYW5kbGVFbWFpbFN1YnNjcmlwdGlvbihHUk9VUF9TVUJTQ1JJUFRJT05fUkVRVUVTVF9JRCwgcmVFbmNvZGVkKTtcbiAgICAgIH07XG5cbiAgICAgIGFwaS5pc0dsb2JhbFVuc3Vic2NyaWJlID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gJGN0Lmdsb2JhbFVuc3Vic2NyaWJlO1xuICAgICAgfTtcblxuICAgICAgYXBpLnNldElzR2xvYmFsVW5zdWJzY3JpYmUgPSB2YWx1ZSA9PiB7XG4gICAgICAgICRjdC5nbG9iYWxVbnN1YnNjcmliZSA9IHZhbHVlO1xuICAgICAgfTtcblxuICAgICAgYXBpLnNldFVwZGF0ZWRDYXRlZ29yeUxvbmcgPSBwcm9maWxlID0+IHtcbiAgICAgICAgaWYgKHByb2ZpbGVbY2F0ZWdvcnlMb25nS2V5XSkge1xuICAgICAgICAgICRjdC51cGRhdGVkQ2F0ZWdvcnlMb25nID0gcHJvZmlsZVtjYXRlZ29yeUxvbmdLZXldO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB3aW5kb3cuJENMVFBfV1IgPSB3aW5kb3cuJFdaUktfV1IgPSBhcGk7XG5cbiAgICAgIGlmICgoX2NsZXZlcnRhcCRhY2NvdW50NSA9IGNsZXZlcnRhcC5hY2NvdW50KSA9PT0gbnVsbCB8fCBfY2xldmVydGFwJGFjY291bnQ1ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY2xldmVydGFwJGFjY291bnQ1WzBdLmlkKSB7XG4gICAgICAgIC8vIFRoZSBhY2NvdW50SWQgaXMgcHJlc2VudCBzbyBjYW4gaW5pdCB3aXRoIGVtcHR5IHZhbHVlcy5cbiAgICAgICAgLy8gTmVlZGVkIHRvIG1haW50YWluIGJhY2t3YXJkIGNvbXBhdGFiaWxpdHkgd2l0aCBsZWdhY3kgaW1wbGVtZW50YXRpb25zLlxuICAgICAgICAvLyBOcG0gaW1wb3J0cy9yZXF1aXJlIHdpbGwgbmVlZCB0byBjYWxsIGluaXQgZXhwbGljdGx5IHdpdGggYWNjb3VudElkXG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgfVxuICAgIH0gLy8gc3RhcnRzIGhlcmVcblxuXG4gICAgaW5pdChhY2NvdW50SWQsIHJlZ2lvbiwgdGFyZ2V0RG9tYWluLCB0b2tlbikge1xuICAgICAgaWYgKF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfb25sb2FkY2FsbGVkKVtfb25sb2FkY2FsbGVkXSA9PT0gMSkge1xuICAgICAgICAvLyBhbHJlYWR5IGluaXRhaWxzZWRcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjaGVja0J1aWxkZXIoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkYSlbX2xvZ2dlciRhXSwgYWNjb3VudElkKTtcbiAgICAgIFN0b3JhZ2VNYW5hZ2VyLnJlbW92ZUNvb2tpZSgnV1pSS19QJywgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lKTtcblxuICAgICAgaWYgKCFfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2FjY291bnQkNilbX2FjY291bnQkNl0uaWQpIHtcbiAgICAgICAgaWYgKCFhY2NvdW50SWQpIHtcbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciRhKVtfbG9nZ2VyJGFdLmVycm9yKEVNQkVEX0VSUk9SKTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWNjb3VudCQ2KVtfYWNjb3VudCQ2XS5pZCA9IGFjY291bnRJZDtcbiAgICAgIH1cblxuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXNzaW9uJDMpW19zZXNzaW9uJDNdLmNvb2tpZU5hbWUgPSBTQ09PS0lFX1BSRUZJWCArICdfJyArIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWNjb3VudCQ2KVtfYWNjb3VudCQ2XS5pZDtcblxuICAgICAgaWYgKHJlZ2lvbikge1xuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2FjY291bnQkNilbX2FjY291bnQkNl0ucmVnaW9uID0gcmVnaW9uO1xuICAgICAgfVxuXG4gICAgICBpZiAodGFyZ2V0RG9tYWluKSB7XG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWNjb3VudCQ2KVtfYWNjb3VudCQ2XS50YXJnZXREb21haW4gPSB0YXJnZXREb21haW47XG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbikge1xuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2FjY291bnQkNilbX2FjY291bnQkNl0udG9rZW4gPSB0b2tlbjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY3VyckxvY2F0aW9uID0gbG9jYXRpb24uaHJlZjtcbiAgICAgIGNvbnN0IHVybFBhcmFtcyA9IGdldFVSTFBhcmFtcyhjdXJyTG9jYXRpb24udG9Mb3dlckNhc2UoKSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblxuICAgICAgaWYgKHR5cGVvZiB1cmxQYXJhbXMuZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdXJsUGFyYW1zLnd6cmtfZXggPT0gJzAnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgJGN0LmlzUHJpdmFjeUFyclB1c2hlZCA9IHRydWU7XG5cbiAgICAgIGlmICgkY3QucHJpdmFjeUFycmF5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5wcml2YWN5LnB1c2goJGN0LnByaXZhY3lBcnJheSk7XG4gICAgICB9XG5cbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcHJvY2Vzc09sZFZhbHVlcylbX3Byb2Nlc3NPbGRWYWx1ZXNdKCk7XG5cbiAgICAgIHRoaXMucGFnZUNoYW5nZWQoKTtcbiAgICAgIGNvbnN0IGJhY2t1cEludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICBpZiAoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9kZXZpY2UkMylbX2RldmljZSQzXS5nY29va2llKSB7XG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChiYWNrdXBJbnRlcnZhbCk7XG5cbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlcXVlc3QkNylbX3JlcXVlc3QkN10ucHJvY2Vzc0JhY2t1cEV2ZW50cygpO1xuICAgICAgICB9XG4gICAgICB9LCAzMDAwKTtcblxuICAgICAgaWYgKF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfaXNTcGEpW19pc1NwYV0pIHtcbiAgICAgICAgLy8gbGlzdGVuIHRvIGNsaWNrIG9uIHRoZSBkb2N1bWVudCBhbmQgY2hlY2sgaWYgVVJMIGhhcyBjaGFuZ2VkLlxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYm91bmRDaGVja1BhZ2VDaGFuZ2VkKVtfYm91bmRDaGVja1BhZ2VDaGFuZ2VkXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyByZW1vdmUgZXhpc3RpbmcgY2xpY2sgbGlzdGVuZXJzIGlmIGFueVxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYm91bmRDaGVja1BhZ2VDaGFuZ2VkKVtfYm91bmRDaGVja1BhZ2VDaGFuZ2VkXSk7XG4gICAgICB9XG5cbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfb25sb2FkY2FsbGVkKVtfb25sb2FkY2FsbGVkXSA9IDE7XG4gICAgfSAvLyBwcm9jZXNzIHRoZSBvcHRpb24gYXJyYXkgcHJvdmlkZWQgdG8gdGhlIGNsZXZlcnRhcCBvYmplY3RcbiAgICAvLyBhZnRlciBpdHMgYmVlbiBpbml0aWFsaXplZFxuXG5cbiAgICBwYWdlQ2hhbmdlZCgpIHtcbiAgICAgIGNvbnN0IGN1cnJMb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgY29uc3QgdXJsUGFyYW1zID0gZ2V0VVJMUGFyYW1zKGN1cnJMb2NhdGlvbi50b0xvd2VyQ2FzZSgpKTsgLy8gLS0gdXBkYXRlIHBhZ2UgY291bnRcblxuICAgICAgY29uc3Qgb2JqID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXNzaW9uJDMpW19zZXNzaW9uJDNdLmdldFNlc3Npb25Db29raWVPYmplY3QoKTtcblxuICAgICAgbGV0IHBnQ291bnQgPSB0eXBlb2Ygb2JqLnAgPT09ICd1bmRlZmluZWQnID8gMCA6IG9iai5wO1xuICAgICAgb2JqLnAgPSArK3BnQ291bnQ7XG5cbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfc2Vzc2lvbiQzKVtfc2Vzc2lvbiQzXS5zZXRTZXNzaW9uQ29va2llT2JqZWN0KG9iaik7IC8vIC0tIHVwZGF0ZSBwYWdlIGNvdW50XG5cblxuICAgICAgbGV0IGRhdGEgPSB7fTtcbiAgICAgIGxldCByZWZlcnJlckRvbWFpbiA9IGdldERvbWFpbihkb2N1bWVudC5yZWZlcnJlcik7XG5cbiAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgIT09IHJlZmVycmVyRG9tYWluKSB7XG4gICAgICAgIGNvbnN0IG1heExlbiA9IDEyMDtcblxuICAgICAgICBpZiAocmVmZXJyZXJEb21haW4gIT09ICcnKSB7XG4gICAgICAgICAgcmVmZXJyZXJEb21haW4gPSByZWZlcnJlckRvbWFpbi5sZW5ndGggPiBtYXhMZW4gPyByZWZlcnJlckRvbWFpbi5zdWJzdHJpbmcoMCwgbWF4TGVuKSA6IHJlZmVycmVyRG9tYWluO1xuICAgICAgICAgIGRhdGEucmVmZXJyZXIgPSByZWZlcnJlckRvbWFpbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB1dG1Tb3VyY2UgPSB1cmxQYXJhbXMudXRtX3NvdXJjZSB8fCB1cmxQYXJhbXMud3pya19zb3VyY2U7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB1dG1Tb3VyY2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdXRtU291cmNlID0gdXRtU291cmNlLmxlbmd0aCA+IG1heExlbiA/IHV0bVNvdXJjZS5zdWJzdHJpbmcoMCwgbWF4TGVuKSA6IHV0bVNvdXJjZTtcbiAgICAgICAgICBkYXRhLnVzID0gdXRtU291cmNlOyAvLyB1dG1fc291cmNlXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdXRtTWVkaXVtID0gdXJsUGFyYW1zLnV0bV9tZWRpdW0gfHwgdXJsUGFyYW1zLnd6cmtfbWVkaXVtO1xuXG4gICAgICAgIGlmICh0eXBlb2YgdXRtTWVkaXVtICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHV0bU1lZGl1bSA9IHV0bU1lZGl1bS5sZW5ndGggPiBtYXhMZW4gPyB1dG1NZWRpdW0uc3Vic3RyaW5nKDAsIG1heExlbikgOiB1dG1NZWRpdW07XG4gICAgICAgICAgZGF0YS51bSA9IHV0bU1lZGl1bTsgLy8gdXRtX21lZGl1bVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHV0bUNhbXBhaWduID0gdXJsUGFyYW1zLnV0bV9jYW1wYWlnbiB8fCB1cmxQYXJhbXMud3pya19jYW1wYWlnbjtcblxuICAgICAgICBpZiAodHlwZW9mIHV0bUNhbXBhaWduICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHV0bUNhbXBhaWduID0gdXRtQ2FtcGFpZ24ubGVuZ3RoID4gbWF4TGVuID8gdXRtQ2FtcGFpZ24uc3Vic3RyaW5nKDAsIG1heExlbikgOiB1dG1DYW1wYWlnbjtcbiAgICAgICAgICBkYXRhLnVjID0gdXRtQ2FtcGFpZ247IC8vIHV0bV9jYW1wYWlnblxuICAgICAgICB9IC8vIGFsc28gaW5kZXBlbmRlbnRseSBzZW5kIHd6cmtfbWVkaXVtIHRvIHRoZSBiYWNrZW5kXG5cblxuICAgICAgICBpZiAodHlwZW9mIHVybFBhcmFtcy53enJrX21lZGl1bSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBjb25zdCB3bSA9IHVybFBhcmFtcy53enJrX21lZGl1bTtcblxuICAgICAgICAgIGlmICh3bS5tYXRjaCgvXmVtYWlsJHxec29jaWFsJHxec2VhcmNoJC8pKSB7XG4gICAgICAgICAgICBkYXRhLndtID0gd207IC8vIHd6cmtfbWVkaXVtXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGRhdGEgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlcXVlc3QkNylbX3JlcXVlc3QkN10uYWRkU3lzdGVtRGF0YVRvT2JqZWN0KGRhdGEsIHVuZGVmaW5lZCk7XG4gICAgICBkYXRhLmNwZyA9IGN1cnJMb2NhdGlvbjtcbiAgICAgIGRhdGFbQ0FNUF9DT09LSUVfTkFNRV0gPSBnZXRDYW1wYWlnbk9iakZvckxjKCk7XG5cbiAgICAgIGxldCBwYWdlTG9hZFVybCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWNjb3VudCQ2KVtfYWNjb3VudCQ2XS5kYXRhUG9zdFVSTDtcblxuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0JDcpW19yZXF1ZXN0JDddLmFkZEZsYWdzKGRhdGEpOyAvLyBzZW5kIGRzeW5jIGZsYWcgd2hlbiBwYWdlID0gMVxuXG5cbiAgICAgIGlmIChwYXJzZUludChkYXRhLnBnKSA9PT0gMSkge1xuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX292ZXJyaWRlRFN5bmNGbGFnKVtfb3ZlcnJpZGVEU3luY0ZsYWddKGRhdGEpO1xuICAgICAgfVxuXG4gICAgICBwYWdlTG9hZFVybCA9IGFkZFRvVVJMKHBhZ2VMb2FkVXJsLCAndHlwZScsICdwYWdlJyk7XG4gICAgICBwYWdlTG9hZFVybCA9IGFkZFRvVVJMKHBhZ2VMb2FkVXJsLCAnZCcsIGNvbXByZXNzRGF0YShKU09OLnN0cmluZ2lmeShkYXRhKSwgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkYSlbX2xvZ2dlciRhXSkpO1xuXG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlcXVlc3QkNylbX3JlcXVlc3QkN10uc2F2ZUFuZEZpcmVSZXF1ZXN0KHBhZ2VMb2FkVXJsLCAkY3QuYmxvY2tSZXF1ZXN0KTtcblxuICAgICAgaWYgKHBhcnNlSW50KGRhdGEucGcpID09PSAxKSB7XG4gICAgICAgIHRoaXMuZXZlbnQucHVzaChXWlJLX0ZFVENILCB7XG4gICAgICAgICAgdDogNFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9wcmV2aW91c1VybClbX3ByZXZpb3VzVXJsXSA9IGN1cnJMb2NhdGlvbjtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAocGdDb3VudCA8PSAzKSB7XG4gICAgICAgICAgLy8gc2VuZCBwaW5nIGZvciB1cCB0byAzIHBhZ2VzXG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9waW5nUmVxdWVzdClbX3BpbmdSZXF1ZXN0XSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfaXNQaW5nQ29udGludW91cylbX2lzUGluZ0NvbnRpbnVvdXNdKCkpIHtcbiAgICAgICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3BpbmdSZXF1ZXN0KVtfcGluZ1JlcXVlc3RdKCk7XG4gICAgICAgICAgfSwgQ09OVElOVU9VU19QSU5HX0ZSRVFfSU5fTUlMTElTKTtcbiAgICAgICAgfVxuICAgICAgfSwgRklSU1RfUElOR19GUkVRX0lOX01JTExJUyk7XG4gICAgfVxuXG4gICAgX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlKCkge1xuICAgICAgcmV0dXJuIFN0b3JhZ2VNYW5hZ2VyLl9pc0xvY2FsU3RvcmFnZVN1cHBvcnRlZCgpICYmIHRoaXMuZW5hYmxlUGVyc29uYWxpemF0aW9uO1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBhY2Nlc3Nvci1wYWlyc1xuICAgIHNldCBwb3B1cENhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLnBvcHVwQ2FsbGJhY2tzW3RoaXMucG9wdXBDdXJyZW50V3pya0lkXSA9IGNhbGxiYWNrO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwYXlsb2FkXG4gICAgICovXG5cblxuICAgIC8vIG9mZmxpbmUgbW9kZVxuXG4gICAgLyoqXG4gICAgICogZXZlbnRzIHdpbGwgYmUgcmVjb3JkZWQgYW5kIHF1ZXVlZCBsb2NhbGx5IHdoZW4gcGFzc2VkIHdpdGggdHJ1ZVxuICAgICAqIGJ1dCB3aWxsIG5vdCBiZSBzZW50IHRvIHRoZSBzZXJ2ZXIgdW50aWwgb2ZmbGluZSBpcyBkaXNhYmxlZCBieSBwYXNzaW5nIGZhbHNlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBhcmdcbiAgICAgKi9cbiAgICBzZXRPZmZsaW5lKGFyZykge1xuICAgICAgaWYgKHR5cGVvZiBhcmcgIT09ICdib29sZWFuJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdzZXRPZmZsaW5lIHNob3VsZCBiZSBjYWxsZWQgd2l0aCBhIHZhbHVlIG9mIHR5cGUgYm9vbGVhbicpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICRjdC5vZmZsaW5lID0gYXJnOyAvLyBpZiBvZmZsaW5lIGlzIGRpc2FibGVkXG4gICAgICAvLyBwcm9jZXNzIGV2ZW50cyBmcm9tIGNhY2hlXG5cbiAgICAgIGlmICghYXJnKSB7XG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdCQ3KVtfcmVxdWVzdCQ3XS5wcm9jZXNzQmFja3VwRXZlbnRzKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZ2V0U0RLVmVyc2lvbigpIHtcbiAgICAgIHJldHVybiAnd2ViLXNkay12MS45LjInO1xuICAgIH1cblxuICAgIGRlZmluZVZhcmlhYmxlKG5hbWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuIFZhcmlhYmxlLmRlZmluZShuYW1lLCBkZWZhdWx0VmFsdWUsIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfdmFyaWFibGVTdG9yZSQxKVtfdmFyaWFibGVTdG9yZSQxXSk7XG4gICAgfVxuXG4gICAgc3luY1ZhcmlhYmxlcyhvblN5bmNTdWNjZXNzLCBvblN5bmNGYWlsdXJlKSB7XG4gICAgICBpZiAoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkYSlbX2xvZ2dlciRhXS5sb2dMZXZlbCA9PT0gNCkge1xuICAgICAgICByZXR1cm4gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF92YXJpYWJsZVN0b3JlJDEpW192YXJpYWJsZVN0b3JlJDFdLnN5bmNWYXJpYWJsZXMob25TeW5jU3VjY2Vzcywgb25TeW5jRmFpbHVyZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBtID0gJ0FwcCBsb2cgbGV2ZWwgaXMgbm90IHNldCB0byA0JztcblxuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciRhKVtfbG9nZ2VyJGFdLmVycm9yKG0pO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IobSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZldGNoVmFyaWFibGVzKG9uRmV0Y2hDYWxsYmFjaykge1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF92YXJpYWJsZVN0b3JlJDEpW192YXJpYWJsZVN0b3JlJDFdLmZldGNoVmFyaWFibGVzKG9uRmV0Y2hDYWxsYmFjayk7XG4gICAgfVxuXG4gICAgYWRkVmFyaWFibGVzQ2hhbmdlZENhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3ZhcmlhYmxlU3RvcmUkMSlbX3ZhcmlhYmxlU3RvcmUkMV0uYWRkVmFyaWFibGVzQ2hhbmdlZENhbGxiYWNrKGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICBhZGRPbmVUaW1lVmFyaWFibGVzQ2hhbmdlZENhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3ZhcmlhYmxlU3RvcmUkMSlbX3ZhcmlhYmxlU3RvcmUkMV0uYWRkT25lVGltZVZhcmlhYmxlc0NoYW5nZWRDYWxsYmFjayhjYWxsYmFjayk7XG4gICAgfVxuXG4gIH1cblxuICB2YXIgX3Byb2Nlc3NPbGRWYWx1ZXMyID0gZnVuY3Rpb24gX3Byb2Nlc3NPbGRWYWx1ZXMyKCkge1xuICAgIHRoaXMub25Vc2VyTG9naW4uX3Byb2Nlc3NPbGRWYWx1ZXMoKTtcblxuICAgIHRoaXMucHJpdmFjeS5fcHJvY2Vzc09sZFZhbHVlcygpO1xuXG4gICAgdGhpcy5ldmVudC5fcHJvY2Vzc09sZFZhbHVlcygpO1xuXG4gICAgdGhpcy5wcm9maWxlLl9wcm9jZXNzT2xkVmFsdWVzKCk7XG5cbiAgICB0aGlzLm5vdGlmaWNhdGlvbnMuX3Byb2Nlc3NPbGRWYWx1ZXMoKTtcbiAgfTtcblxuICB2YXIgX2RlYm91bmNlMiA9IGZ1bmN0aW9uIF9kZWJvdW5jZTIoZnVuYykge1xuICAgIGxldCBkZWxheSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMzAwO1xuICAgIGxldCB0aW1lb3V0O1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jLCBkZWxheSk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgX2NoZWNrUGFnZUNoYW5nZWQyID0gZnVuY3Rpb24gX2NoZWNrUGFnZUNoYW5nZWQyKCkge1xuICAgIGNvbnN0IGRlYm91bmNlZFBhZ2VDaGFuZ2VkID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9kZWJvdW5jZSlbX2RlYm91bmNlXSgoKSA9PiB7XG4gICAgICBpZiAoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9wcmV2aW91c1VybClbX3ByZXZpb3VzVXJsXSAhPT0gbG9jYXRpb24uaHJlZikge1xuICAgICAgICB0aGlzLnBhZ2VDaGFuZ2VkKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBkZWJvdW5jZWRQYWdlQ2hhbmdlZCgpO1xuICB9O1xuXG4gIHZhciBfcGluZ1JlcXVlc3QyID0gZnVuY3Rpb24gX3BpbmdSZXF1ZXN0MigpIHtcbiAgICBsZXQgcGFnZUxvYWRVcmwgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2FjY291bnQkNilbX2FjY291bnQkNl0uZGF0YVBvc3RVUkw7XG5cbiAgICBsZXQgZGF0YSA9IHt9O1xuICAgIGRhdGEgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlcXVlc3QkNylbX3JlcXVlc3QkN10uYWRkU3lzdGVtRGF0YVRvT2JqZWN0KGRhdGEsIHVuZGVmaW5lZCk7XG4gICAgcGFnZUxvYWRVcmwgPSBhZGRUb1VSTChwYWdlTG9hZFVybCwgJ3R5cGUnLCBFVlRfUElORyk7XG4gICAgcGFnZUxvYWRVcmwgPSBhZGRUb1VSTChwYWdlTG9hZFVybCwgJ2QnLCBjb21wcmVzc0RhdGEoSlNPTi5zdHJpbmdpZnkoZGF0YSksIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJGEpW19sb2dnZXIkYV0pKTtcblxuICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdCQ3KVtfcmVxdWVzdCQ3XS5zYXZlQW5kRmlyZVJlcXVlc3QocGFnZUxvYWRVcmwsICRjdC5ibG9ja1JlcXVlc3QpO1xuICB9O1xuXG4gIHZhciBfaXNQaW5nQ29udGludW91czIgPSBmdW5jdGlvbiBfaXNQaW5nQ29udGludW91czIoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cud3pya19kICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cud3pya19kLnBpbmcgPT09ICdjb250aW51b3VzJztcbiAgfTtcblxuICB2YXIgX292ZXJyaWRlRFN5bmNGbGFnMiA9IGZ1bmN0aW9uIF9vdmVycmlkZURTeW5jRmxhZzIoZGF0YSkge1xuICAgIGlmICh0aGlzLl9pc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZSgpKSB7XG4gICAgICBkYXRhLmRzeW5jID0gdHJ1ZTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIF9zZW5kTG9jYXRpb25EYXRhMiA9IGZ1bmN0aW9uIF9zZW5kTG9jYXRpb25EYXRhMihwYXlsb2FkKSB7XG4gICAgLy8gU2VuZCB0aGUgdXBkYXRlZCB2YWx1ZSB0byBMQ1xuICAgIGxldCBkYXRhID0ge307XG4gICAgZGF0YS5hZiA9IHt9O1xuICAgIGNvbnN0IHByb2ZpbGVPYmogPSB7fTtcbiAgICBkYXRhLnR5cGUgPSAncHJvZmlsZSc7XG5cbiAgICBpZiAocHJvZmlsZU9iai50eiA9PSBudWxsKSB7XG4gICAgICBwcm9maWxlT2JqLnR6ID0gbmV3IERhdGUoKS50b1N0cmluZygpLm1hdGNoKC8oW0EtWl0rW1xcKy1dWzAtOV0rKS8pWzFdO1xuICAgIH1cblxuICAgIGRhdGEucHJvZmlsZSA9IHByb2ZpbGVPYmo7XG5cbiAgICBpZiAocGF5bG9hZCkge1xuICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHBheWxvYWQpO1xuICAgICAga2V5cy5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGRhdGEuYWZba2V5XSA9IHBheWxvYWRba2V5XTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICgkY3QubG9jYXRpb24pIHtcbiAgICAgIGRhdGEuYWYgPSB7IC4uLmRhdGEuYWYsXG4gICAgICAgIC4uLiRjdC5sb2NhdGlvblxuICAgICAgfTtcbiAgICB9XG5cbiAgICBkYXRhID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0JDcpW19yZXF1ZXN0JDddLmFkZFN5c3RlbURhdGFUb09iamVjdChkYXRhLCB0cnVlKTtcblxuICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdCQ3KVtfcmVxdWVzdCQ3XS5hZGRGbGFncyhkYXRhKTtcblxuICAgIGNvbnN0IGNvbXByZXNzZWREYXRhID0gY29tcHJlc3NEYXRhKEpTT04uc3RyaW5naWZ5KGRhdGEpLCBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciRhKVtfbG9nZ2VyJGFdKTtcblxuICAgIGxldCBwYWdlTG9hZFVybCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWNjb3VudCQ2KVtfYWNjb3VudCQ2XS5kYXRhUG9zdFVSTDtcblxuICAgIHBhZ2VMb2FkVXJsID0gYWRkVG9VUkwocGFnZUxvYWRVcmwsICd0eXBlJywgRVZUX1BVU0gpO1xuICAgIHBhZ2VMb2FkVXJsID0gYWRkVG9VUkwocGFnZUxvYWRVcmwsICdkJywgY29tcHJlc3NlZERhdGEpO1xuXG4gICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0JDcpW19yZXF1ZXN0JDddLnNhdmVBbmRGaXJlUmVxdWVzdChwYWdlTG9hZFVybCwgJGN0LmJsb2NrUmVxdWVzdCk7XG4gIH07XG5cbiAgY29uc3QgY2xldmVydGFwID0gbmV3IENsZXZlclRhcCh3aW5kb3cuY2xldmVydGFwKTtcbiAgd2luZG93LmNsZXZlcnRhcCA9IHdpbmRvdy53aXpyb2NrZXQgPSBjbGV2ZXJ0YXA7XG5cbiAgcmV0dXJuIGNsZXZlcnRhcDtcblxufSkpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNsZXZlcnRhcC5qcy5tYXBcbiIsIi8qKlxuICogTG9kYXNoIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQnVpbGQ6IGBsb2Rhc2ggbW9kdWxhcml6ZSBleHBvcnRzPVwibnBtXCIgLW8gLi9gXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pzLmZvdW5kYXRpb24vPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG5cbi8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xudmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbi8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xudmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZmlsdGVyYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNvbWVgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheVNvbWUoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBgY2FjaGVgIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBjYWNoZSBUaGUgY2FjaGUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gY2FjaGVIYXMoY2FjaGUsIGtleSkge1xuICByZXR1cm4gY2FjaGUuaGFzKGtleSk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gKi9cbmZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsXG4gICAgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgIFN5bWJvbCA9IHJvb3QuU3ltYm9sLFxuICAgIFVpbnQ4QXJyYXkgPSByb290LlVpbnQ4QXJyYXksXG4gICAgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZSxcbiAgICBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZSxcbiAgICBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLFxuICAgIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUocm9vdCwgJ0RhdGFWaWV3JyksXG4gICAgTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdNYXAnKSxcbiAgICBQcm9taXNlID0gZ2V0TmF0aXZlKHJvb3QsICdQcm9taXNlJyksXG4gICAgU2V0ID0gZ2V0TmF0aXZlKHJvb3QsICdTZXQnKSxcbiAgICBXZWFrTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdXZWFrTWFwJyksXG4gICAgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xudmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIC0tdGhpcy5zaXplO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgKyt0aGlzLnNpemU7XG4gICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG5MaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG5MaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgdGhpcy5zaXplID0gMDtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICB9O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG4vKipcbiAqXG4gKiBDcmVhdGVzIGFuIGFycmF5IGNhY2hlIG9iamVjdCB0byBzdG9yZSB1bmlxdWUgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcyA9PSBudWxsID8gMCA6IHZhbHVlcy5sZW5ndGg7XG5cbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgfVxufVxuXG4vKipcbiAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGFkZFxuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAYWxpYXMgcHVzaFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcbiAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cblNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBTdGFja1xuICovXG5mdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgIHZhciBwYWlycyA9IGRhdGEuX19kYXRhX187XG4gICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgdGhpcy5zaXplID0gKytkYXRhLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUocGFpcnMpO1xuICB9XG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcblN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcblN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcblN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcblN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICovXG5mdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gKiBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAqICAxIC0gVW5vcmRlcmVkIGNvbXBhcmlzb25cbiAqICAyIC0gUGFydGlhbCBjb21wYXJpc29uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykge1xuICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzT2JqZWN0TGlrZShvdGhlcikpKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gIH1cbiAgcmV0dXJuIGJhc2VJc0VxdWFsRGVlcCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGJhc2VJc0VxdWFsLCBzdGFjayk7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbGAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICogcmVmZXJlbmNlcyB0byBiZSBjb21wYXJlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWxEZWVwKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIG9iaklzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgb3RoSXNBcnIgPSBpc0FycmF5KG90aGVyKSxcbiAgICAgIG9ialRhZyA9IG9iaklzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob2JqZWN0KSxcbiAgICAgIG90aFRhZyA9IG90aElzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob3RoZXIpO1xuXG4gIG9ialRhZyA9IG9ialRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb2JqVGFnO1xuICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcblxuICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgb3RoSXNPYmogPSBvdGhUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgaXNTYW1lVGFnID0gb2JqVGFnID09IG90aFRhZztcblxuICBpZiAoaXNTYW1lVGFnICYmIGlzQnVmZmVyKG9iamVjdCkpIHtcbiAgICBpZiAoIWlzQnVmZmVyKG90aGVyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBvYmpJc0FyciA9IHRydWU7XG4gICAgb2JqSXNPYmogPSBmYWxzZTtcbiAgfVxuICBpZiAoaXNTYW1lVGFnICYmICFvYmpJc09iaikge1xuICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgcmV0dXJuIChvYmpJc0FyciB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KSlcbiAgICAgID8gZXF1YWxBcnJheXMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaylcbiAgICAgIDogZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCBvYmpUYWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICB9XG4gIGlmICghKGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRykpIHtcbiAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICBvdGhJc1dyYXBwZWQgPSBvdGhJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCAnX193cmFwcGVkX18nKTtcblxuICAgIGlmIChvYmpJc1dyYXBwZWQgfHwgb3RoSXNXcmFwcGVkKSB7XG4gICAgICB2YXIgb2JqVW53cmFwcGVkID0gb2JqSXNXcmFwcGVkID8gb2JqZWN0LnZhbHVlKCkgOiBvYmplY3QsXG4gICAgICAgICAgb3RoVW53cmFwcGVkID0gb3RoSXNXcmFwcGVkID8gb3RoZXIudmFsdWUoKSA6IG90aGVyO1xuXG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpVbndyYXBwZWQsIG90aFVud3JhcHBlZCwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spO1xuICAgIH1cbiAgfVxuICBpZiAoIWlzU2FtZVRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICByZXR1cm4gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtBcnJheX0gb3RoZXIgVGhlIG90aGVyIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBhcnJheWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuXG4gIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChhcnJheSk7XG4gIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHtcbiAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgfVxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICBzZWVuID0gKGJpdG1hc2sgJiBDT01QQVJFX1VOT1JERVJFRF9GTEFHKSA/IG5ldyBTZXRDYWNoZSA6IHVuZGVmaW5lZDtcblxuICBzdGFjay5zZXQoYXJyYXksIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgLy8gSWdub3JlIG5vbi1pbmRleCBwcm9wZXJ0aWVzLlxuICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltpbmRleF07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgYXJyVmFsdWUsIGluZGV4LCBvdGhlciwgYXJyYXksIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIoYXJyVmFsdWUsIG90aFZhbHVlLCBpbmRleCwgYXJyYXksIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIGlmIChjb21wYXJlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoY29tcGFyZWQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmIChzZWVuKSB7XG4gICAgICBpZiAoIWFycmF5U29tZShvdGhlciwgZnVuY3Rpb24ob3RoVmFsdWUsIG90aEluZGV4KSB7XG4gICAgICAgICAgICBpZiAoIWNhY2hlSGFzKHNlZW4sIG90aEluZGV4KSAmJlxuICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgICByZXR1cm4gc2Vlbi5wdXNoKG90aEluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSkge1xuICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghKFxuICAgICAgICAgIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fFxuICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBjb21wYXJpbmcgb2JqZWN0cyBvZlxuICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNvbXBhcmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0cyB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAob2JqZWN0LmJ5dGVPZmZzZXQgIT0gb3RoZXIuYnl0ZU9mZnNldCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gb2JqZWN0LmJ1ZmZlcjtcbiAgICAgIG90aGVyID0gb3RoZXIuYnVmZmVyO1xuXG4gICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAhZXF1YWxGdW5jKG5ldyBVaW50OEFycmF5KG9iamVjdCksIG5ldyBVaW50OEFycmF5KG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBjYXNlIGJvb2xUYWc6XG4gICAgY2FzZSBkYXRlVGFnOlxuICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgIC8vIEludmFsaWQgZGF0ZXMgYXJlIGNvZXJjZWQgdG8gYE5hTmAuXG4gICAgICByZXR1cm4gZXEoK29iamVjdCwgK290aGVyKTtcblxuICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICByZXR1cm4gb2JqZWN0Lm5hbWUgPT0gb3RoZXIubmFtZSAmJiBvYmplY3QubWVzc2FnZSA9PSBvdGhlci5tZXNzYWdlO1xuXG4gICAgY2FzZSByZWdleHBUYWc6XG4gICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAvLyBDb2VyY2UgcmVnZXhlcyB0byBzdHJpbmdzIGFuZCB0cmVhdCBzdHJpbmdzLCBwcmltaXRpdmVzIGFuZCBvYmplY3RzLFxuICAgICAgLy8gYXMgZXF1YWwuIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHJldHVybiBvYmplY3QgPT0gKG90aGVyICsgJycpO1xuXG4gICAgY2FzZSBtYXBUYWc6XG4gICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICBjYXNlIHNldFRhZzpcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUc7XG4gICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgIGlmIChvYmplY3Quc2l6ZSAhPSBvdGhlci5zaXplICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgfVxuICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHO1xuXG4gICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgaWYgKHN5bWJvbFZhbHVlT2YpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YuY2FsbChvYmplY3QpID09IHN5bWJvbFZhbHVlT2YuY2FsbChvdGhlcik7XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgb2JqUHJvcHMgPSBnZXRBbGxLZXlzKG9iamVjdCksXG4gICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoUHJvcHMubGVuZ3RoO1xuXG4gIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICBpZiAoc3RhY2tlZCAmJiBzdGFjay5nZXQob3RoZXIpKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHRydWU7XG4gIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpO1xuXG4gIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDtcbiAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSwga2V5LCBvYmplY3QsIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmICghKGNvbXBhcmVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICA/IChvYmpWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKG9ialZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKVxuICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpO1xuICB9XG4gIGlmIChyZXN1bHQgJiYgIXNraXBDdG9yKSB7XG4gICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgIC8vIE5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsLlxuICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICEodHlwZW9mIG9iakN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJlxuICAgICAgICAgIHR5cGVvZiBvdGhDdG9yID09ICdmdW5jdGlvbicgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgOiBkYXRhLm1hcDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gKi9cbnZhciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICByZXR1cm4gYXJyYXlGaWx0ZXIobmF0aXZlR2V0U3ltYm9scyhvYmplY3QpLCBmdW5jdGlvbihzeW1ib2wpIHtcbiAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xudmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbi8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbmlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fCByZUlzVWludC50ZXN0KHZhbHVlKSkgJiZcbiAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgIDogKHZhbHVlID09PSBudWxsKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbn07XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG4vKipcbiAqIFBlcmZvcm1zIGEgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmVcbiAqIGVxdWl2YWxlbnQuXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHN1cHBvcnRzIGNvbXBhcmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLFxuICogZGF0ZSBvYmplY3RzLCBlcnJvciBvYmplY3RzLCBtYXBzLCBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLFxuICogc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkIGFycmF5cy4gYE9iamVjdGAgb2JqZWN0cyBhcmUgY29tcGFyZWRcbiAqIGJ5IHRoZWlyIG93biwgbm90IGluaGVyaXRlZCwgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLiBGdW5jdGlvbnMgYW5kIERPTVxuICogbm9kZXMgYXJlIGNvbXBhcmVkIGJ5IHN0cmljdCBlcXVhbGl0eSwgaS5lLiBgPT09YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5pc0VxdWFsKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIG9iamVjdCA9PT0gb3RoZXI7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0VxdWFsKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXMobmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy5rZXlzKCdoaScpO1xuICogLy8gPT4gWycwJywgJzEnXVxuICovXG5mdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG59XG5cbi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAqIC8vID0+IFtbXSwgW11dXG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICByZXR1cm4gW107XG59XG5cbi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICovXG5mdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0VxdWFsO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogIENvcHlyaWdodCAyMDIwIExlYW5wbHVtIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0OlxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIENvbnN0YW50c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0NvbnN0YW50c1wiKSk7XG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG4vKipcbiAqIExlYW5wbHVtIEFyZ3NCdWlsZGVyLCB1c2UgdG8gY29uc3RydWN0IHJlcXVlc3QgcGF5bG9hZC5cbiAqL1xudmFyIEFyZ3NCdWlsZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBlbXB0eSByZXF1ZXN0IGFyZ3VtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEFyZ3NCdWlsZGVyKCkge1xuICAgICAgICB0aGlzLmFyZ1N0cmluZyA9ICcnO1xuICAgICAgICB0aGlzLmFyZ1ZhbHVlcyA9IHt9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgZ2l2ZW4ga2V5LCB2YWx1ZSB0byB0aGUgcGF5bG9hZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgZm9yIHRoZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xib29sZWFufSB2YWx1ZSBUaGUgdmFsdWUgZm9yIGdpdmVuIGtleS5cbiAgICAgKiBAcmV0dXJuIHtBcmdzQnVpbGRlcn0gUmV0dXJucyBhbiBvYmplY3Qgb2YgQXJnc0J1aWxkZXIuXG4gICAgICovXG4gICAgQXJnc0J1aWxkZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5hcmdTdHJpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuYXJnU3RyaW5nICs9ICcmJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmFsID0gJyc7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICB2YWwgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YWwgPSBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXJnU3RyaW5nICs9IFwiXCIuY29uY2F0KGtleSwgXCI9XCIpLmNvbmNhdCh2YWwpO1xuICAgICAgICB0aGlzLmFyZ1ZhbHVlc1trZXldID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQXJnc0J1aWxkZXIucHJvdG90eXBlLmJvZHkgPSBmdW5jdGlvbiAoYm9keSkge1xuICAgICAgICBpZiAoYm9keSkge1xuICAgICAgICAgICAgdGhpcy5fYm9keSA9IGJvZHk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fYm9keTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENvbnZlbmllbmNlIG1ldGhvZCB0byBhdHRhY2ggZ2l2ZW4gYXBwSWQgYW5kIGFwcEtleSB0byByZXF1ZXN0LlxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gYXBwSWQgVGhlIGFwcElkIHRvIGF0dGFjaC5cbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IGNsaWVudEtleSBUaGUgYXBwS2V5IHRvIGF0dGFjaC5cbiAgICAgKiBAcmV0dXJuIHtBcmdzQnVpbGRlcn0gUmV0dXJucyBhbiBvYmplY3Qgb2YgQXJnc0J1aWxkZXIuXG4gICAgICovXG4gICAgQXJnc0J1aWxkZXIucHJvdG90eXBlLmF0dGFjaEFwaUtleXMgPSBmdW5jdGlvbiAoYXBwSWQsIGNsaWVudEtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuQVBQX0lELCBhcHBJZClcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuQ0xJRU5ULCBDb25zdGFudHNfMS5kZWZhdWx0LkNMSUVOVClcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuQ0xJRU5UX0tFWSwgY2xpZW50S2V5KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgYXJndW1lbnRzLlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gQXJndW1lbnRzIHN0cmluZy5cbiAgICAgKi9cbiAgICBBcmdzQnVpbGRlci5wcm90b3R5cGUuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFyZ1N0cmluZztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgYXJndW1lbnQgdmFsdWVzLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIGFyZ3VtZW50IHZhbHVlcy5cbiAgICAgKi9cbiAgICBBcmdzQnVpbGRlci5wcm90b3R5cGUuYnVpbGREaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcmdWYWx1ZXM7XG4gICAgfTtcbiAgICByZXR1cm4gQXJnc0J1aWxkZXI7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gQXJnc0J1aWxkZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiAgQ29weXJpZ2h0IDIwMjAgTGVhbnBsdW0gSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyBCcm93c2VyIGRldGVjdGlvbi4gU291cmNlOiBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2pzL2RldGVjdC5odG1sXG4vKipcbiAqIEhlbHBlciBjbGFzcyB0byBkZXRlY3Qgd2hpY2ggYnJvd3NlciBjbGllbnQgaXMgdXNpbmcuXG4gKi9cbnZhciBCcm93c2VyRGV0ZWN0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIG9iamVjdCB3aXRoIGN1cnJlbnQgYnJvd3NlciBzZXR0aW5ncy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBCcm93c2VyRGV0ZWN0b3Iod25kKSB7XG4gICAgICAgIHRoaXMuYnJvd3NlciA9IHRoaXMuc2VhcmNoU3RyaW5nKHRoaXMuZ2V0QnJvd3NlckRhdGEod25kKSkgfHwgJ1Vua25vd24gQnJvd3Nlcic7XG4gICAgICAgIHRoaXMudmVyc2lvbiA9ICh0aGlzLnNlYXJjaFZlcnNpb24od25kLm5hdmlnYXRvci51c2VyQWdlbnQpIHx8XG4gICAgICAgICAgICB0aGlzLnNlYXJjaFZlcnNpb24od25kLm5hdmlnYXRvci5hcHBWZXJzaW9uKSB8fFxuICAgICAgICAgICAgJ1Vua25vd24gVmVyc2lvbicpO1xuICAgICAgICB0aGlzLk9TID0gdGhpcy5zZWFyY2hTdHJpbmcodGhpcy5nZXRPU0RhdGEod25kKSkgfHwgJ1Vua25vd24gT1MnO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXRjaGVzIHRoZSBjbGllbnQncyBzeXN0ZW0gdG8gdGhlIHByZWRlZmluZWQgc3lzdGVtIGxpc3QuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgVGhlIGRhdGEgb2JqZWN0IHRvIHNjYW4uXG4gICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgZm91bmQgaWRlbnRpdHkgc3RyaW5nLlxuICAgICAqL1xuICAgIEJyb3dzZXJEZXRlY3Rvci5wcm90b3R5cGUuc2VhcmNoU3RyaW5nID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgZGF0YVN0cmluZyA9IGRhdGFbaV0uc3RyaW5nO1xuICAgICAgICAgICAgdmFyIGRhdGFQcm9wID0gZGF0YVtpXS5wcm9wO1xuICAgICAgICAgICAgdGhpcy52ZXJzaW9uU2VhcmNoU3RyaW5nID0gZGF0YVtpXS52ZXJzaW9uU2VhcmNoIHx8IGRhdGFbaV0uaWRlbnRpdHk7XG4gICAgICAgICAgICBpZiAoZGF0YVN0cmluZykge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhU3RyaW5nLmluZGV4T2YoZGF0YVtpXS5zdWJTdHJpbmcpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVtpXS5pZGVudGl0eTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChkYXRhUHJvcCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhW2ldLmlkZW50aXR5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBGaW5kcyB0aGUgY3VycmVudCB2ZXJzaW9uIG9mIHRoZSBnaXZlbiBzeXN0ZW0uXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGFTdHJpbmcgVGhlIGRhdGEgb2JqZWN0IHRvIHNjYW4uXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgZm91bmQgbnVtYmVyLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgQnJvd3NlckRldGVjdG9yLnByb3RvdHlwZS5zZWFyY2hWZXJzaW9uID0gZnVuY3Rpb24gKGRhdGFTdHJpbmcpIHtcbiAgICAgICAgaWYgKCFkYXRhU3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbmRleCA9IGRhdGFTdHJpbmcuaW5kZXhPZih0aGlzLnZlcnNpb25TZWFyY2hTdHJpbmcpO1xuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGRhdGFTdHJpbmcuc3Vic3RyaW5nKGluZGV4ICsgdGhpcy52ZXJzaW9uU2VhcmNoU3RyaW5nLmxlbmd0aCArIDEpKTtcbiAgICB9O1xuICAgIEJyb3dzZXJEZXRlY3Rvci5wcm90b3R5cGUuZ2V0QnJvd3NlckRhdGEgPSBmdW5jdGlvbiAod25kKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nOiB3bmQubmF2aWdhdG9yLnVzZXJBZ2VudCxcbiAgICAgICAgICAgICAgICBzdWJTdHJpbmc6ICdDaHJvbWUnLFxuICAgICAgICAgICAgICAgIGlkZW50aXR5OiAnQ2hyb21lJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nOiB3bmQubmF2aWdhdG9yLnVzZXJBZ2VudCxcbiAgICAgICAgICAgICAgICBzdWJTdHJpbmc6ICdPbW5pV2ViJyxcbiAgICAgICAgICAgICAgICBpZGVudGl0eTogJ09tbmlXZWInLFxuICAgICAgICAgICAgICAgIHZlcnNpb25TZWFyY2g6ICdPbW5pV2ViLycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmluZzogd25kLm5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgICAgICAgICAgc3ViU3RyaW5nOiAnQ3JpT1MnLFxuICAgICAgICAgICAgICAgIGlkZW50aXR5OiAnQ2hyb21lJyxcbiAgICAgICAgICAgICAgICB2ZXJzaW9uU2VhcmNoOiAnQ3JpT1MnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHJpbmc6IHduZC5uYXZpZ2F0b3IudXNlckFnZW50LFxuICAgICAgICAgICAgICAgIHN1YlN0cmluZzogJ0Z4aU9TJyxcbiAgICAgICAgICAgICAgICBpZGVudGl0eTogJ0ZpcmVmb3gnLFxuICAgICAgICAgICAgICAgIHZlcnNpb25TZWFyY2g6ICdGeGlPUycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmluZzogd25kLm5hdmlnYXRvci52ZW5kb3IsXG4gICAgICAgICAgICAgICAgc3ViU3RyaW5nOiAnQXBwbGUnLFxuICAgICAgICAgICAgICAgIGlkZW50aXR5OiAnU2FmYXJpJyxcbiAgICAgICAgICAgICAgICB2ZXJzaW9uU2VhcmNoOiAnVmVyc2lvbicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHByb3A6IHduZC5vcGVyYSxcbiAgICAgICAgICAgICAgICBpZGVudGl0eTogJ09wZXJhJyxcbiAgICAgICAgICAgICAgICB2ZXJzaW9uU2VhcmNoOiAnVmVyc2lvbicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmluZzogd25kLm5hdmlnYXRvci52ZW5kb3IsXG4gICAgICAgICAgICAgICAgc3ViU3RyaW5nOiAnaUNhYicsXG4gICAgICAgICAgICAgICAgaWRlbnRpdHk6ICdpQ2FiJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nOiB3bmQubmF2aWdhdG9yLnZlbmRvcixcbiAgICAgICAgICAgICAgICBzdWJTdHJpbmc6ICdLREUnLFxuICAgICAgICAgICAgICAgIGlkZW50aXR5OiAnS29ucXVlcm9yJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nOiB3bmQubmF2aWdhdG9yLnVzZXJBZ2VudCxcbiAgICAgICAgICAgICAgICBzdWJTdHJpbmc6ICdGaXJlZm94JyxcbiAgICAgICAgICAgICAgICBpZGVudGl0eTogJ0ZpcmVmb3gnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHJpbmc6IHduZC5uYXZpZ2F0b3IudmVuZG9yLFxuICAgICAgICAgICAgICAgIHN1YlN0cmluZzogJ0NhbWlubycsXG4gICAgICAgICAgICAgICAgaWRlbnRpdHk6ICdDYW1pbm8nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHJpbmc6IHduZC5uYXZpZ2F0b3IudXNlckFnZW50LFxuICAgICAgICAgICAgICAgIHN1YlN0cmluZzogJ05ldHNjYXBlJyxcbiAgICAgICAgICAgICAgICBpZGVudGl0eTogJ05ldHNjYXBlJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nOiB3bmQubmF2aWdhdG9yLnVzZXJBZ2VudCxcbiAgICAgICAgICAgICAgICBzdWJTdHJpbmc6ICdNU0lFJyxcbiAgICAgICAgICAgICAgICBpZGVudGl0eTogJ0V4cGxvcmVyJyxcbiAgICAgICAgICAgICAgICB2ZXJzaW9uU2VhcmNoOiAnTVNJRScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmluZzogd25kLm5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgICAgICAgICAgc3ViU3RyaW5nOiAnQW5kcm9pZCcsXG4gICAgICAgICAgICAgICAgaWRlbnRpdHk6ICdBbmRyb2lkIEJyb3dzZXInLFxuICAgICAgICAgICAgICAgIHZlcnNpb25TZWFyY2g6ICdWZXJzaW9uJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nOiB3bmQubmF2aWdhdG9yLnVzZXJBZ2VudCxcbiAgICAgICAgICAgICAgICBzdWJTdHJpbmc6ICdHZWNrbycsXG4gICAgICAgICAgICAgICAgaWRlbnRpdHk6ICdNb3ppbGxhJyxcbiAgICAgICAgICAgICAgICB2ZXJzaW9uU2VhcmNoOiAncnYnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHJpbmc6IHduZC5uYXZpZ2F0b3IudXNlckFnZW50LFxuICAgICAgICAgICAgICAgIHN1YlN0cmluZzogJ01vemlsbGEnLFxuICAgICAgICAgICAgICAgIGlkZW50aXR5OiAnTmV0c2NhcGUnLFxuICAgICAgICAgICAgICAgIHZlcnNpb25TZWFyY2g6ICdNb3ppbGxhJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF07XG4gICAgfTtcbiAgICBCcm93c2VyRGV0ZWN0b3IucHJvdG90eXBlLmdldE9TRGF0YSA9IGZ1bmN0aW9uICh3bmQpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHJpbmc6IHduZC5uYXZpZ2F0b3IucGxhdGZvcm0sXG4gICAgICAgICAgICAgICAgc3ViU3RyaW5nOiAnV2luJyxcbiAgICAgICAgICAgICAgICBpZGVudGl0eTogJ1dpbmRvd3MnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHJpbmc6IHduZC5uYXZpZ2F0b3IucGxhdGZvcm0sXG4gICAgICAgICAgICAgICAgc3ViU3RyaW5nOiAnTWFjJyxcbiAgICAgICAgICAgICAgICBpZGVudGl0eTogJ01hYyBPUycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmluZzogd25kLm5hdmlnYXRvci5wbGF0Zm9ybSxcbiAgICAgICAgICAgICAgICBzdWJTdHJpbmc6ICdpUGFkJyxcbiAgICAgICAgICAgICAgICBpZGVudGl0eTogJ2lPUycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmluZzogd25kLm5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgICAgICAgICAgc3ViU3RyaW5nOiAnaVBob25lJyxcbiAgICAgICAgICAgICAgICBpZGVudGl0eTogJ2lPUycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmluZzogd25kLm5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgICAgICAgICAgc3ViU3RyaW5nOiAnQW5kcm9pZCcsXG4gICAgICAgICAgICAgICAgaWRlbnRpdHk6ICdBbmRyb2lkJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nOiB3bmQubmF2aWdhdG9yLnBsYXRmb3JtLFxuICAgICAgICAgICAgICAgIHN1YlN0cmluZzogJ0xpbnV4JyxcbiAgICAgICAgICAgICAgICBpZGVudGl0eTogJ0xpbnV4JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF07XG4gICAgfTtcbiAgICByZXR1cm4gQnJvd3NlckRldGVjdG9yO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IEJyb3dzZXJEZXRlY3RvcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLypcbiAqXG4gKiAgQ29weXJpZ2h0IDIwMjAgTGVhbnBsdW0gSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2VcbiAqXG4gKi9cbmV4cG9ydHMuZGVmYXVsdCA9IHtcbiAgICBNRVRIT0RTOiB7XG4gICAgICAgIFNUQVJUOiAnc3RhcnQnLFxuICAgICAgICBTVE9QOiAnc3RvcCcsXG4gICAgICAgIEFEVkFOQ0U6ICdhZHZhbmNlJyxcbiAgICAgICAgVFJBQ0s6ICd0cmFjaycsXG4gICAgICAgIFBBVVNFX1NFU1NJT046ICdwYXVzZVNlc3Npb24nLFxuICAgICAgICBSRVNVTUVfU0VTU0lPTjogJ3Jlc3VtZVNlc3Npb24nLFxuICAgICAgICBQQVVTRV9TVEFURTogJ3BhdXNlU3RhdGUnLFxuICAgICAgICBSRVNVTUVfU1RBVEU6ICdyZXN1bWVTdGF0ZScsXG4gICAgICAgIERPV05MT0FEX0ZJTEU6ICdkb3dubG9hZEZpbGUnLFxuICAgICAgICBNVUxUSTogJ211bHRpJyxcbiAgICAgICAgU0VUX1ZBUlM6ICdzZXRWYXJzJyxcbiAgICAgICAgR0VUX1ZBUlM6ICdnZXRWYXJzJyxcbiAgICAgICAgU0VUX1VTRVJfQVRUUklCVVRFUzogJ3NldFVzZXJBdHRyaWJ1dGVzJyxcbiAgICAgICAgU0VUX0RFVklDRV9BVFRSSUJVVEVTOiAnc2V0RGV2aWNlQXR0cmlidXRlcycsXG4gICAgICAgIFVQTE9BRF9GSUxFOiAndXBsb2FkRmlsZScsXG4gICAgICAgIFJFR0lTVEVSX0RFVklDRTogJ3JlZ2lzdGVyRGV2aWNlJyxcbiAgICB9LFxuICAgIFNES19WRVJTSU9OOiAnMS45LjEtZGV2ZWxvcC4yJyxcbiAgICBDTElFTlQ6ICdqcycsXG4gICAgUEFSQU1TOiB7XG4gICAgICAgIEFDVElPTjogJ2FjdGlvbicsXG4gICAgICAgIEFQUF9JRDogJ2FwcElkJyxcbiAgICAgICAgQ0xJRU5UOiAnY2xpZW50JyxcbiAgICAgICAgQ0xJRU5UX0tFWTogJ2NsaWVudEtleScsXG4gICAgICAgIENUOiAnY3QnLFxuICAgICAgICBDVVJSRU5DWV9DT0RFOiAnY3VycmVuY3lDb2RlJyxcbiAgICAgICAgREVWSUNFX0lEOiAnZGV2aWNlSWQnLFxuICAgICAgICBTREtfVkVSU0lPTjogJ3Nka1ZlcnNpb24nLFxuICAgICAgICBVU0VSX0lEOiAndXNlcklkJyxcbiAgICAgICAgTkVXX1VTRVJfSUQ6ICduZXdVc2VySWQnLFxuICAgICAgICBERVZfTU9ERTogJ2Rldk1vZGUnLFxuICAgICAgICBWRVJTSU9OX05BTUU6ICd2ZXJzaW9uTmFtZScsXG4gICAgICAgIFNZU1RFTV9OQU1FOiAnc3lzdGVtTmFtZScsXG4gICAgICAgIFNZU1RFTV9WRVJTSU9OOiAnc3lzdGVtVmVyc2lvbicsXG4gICAgICAgIEJST1dTRVJfTkFNRTogJ2Jyb3dzZXJOYW1lJyxcbiAgICAgICAgQlJPV1NFUl9WRVJTSU9OOiAnYnJvd3NlclZlcnNpb24nLFxuICAgICAgICBERVZJQ0VfTkFNRTogJ2RldmljZU5hbWUnLFxuICAgICAgICBERVZJQ0VfTU9ERUw6ICdkZXZpY2VNb2RlbCcsXG4gICAgICAgIFVTRVJfQVRUUklCVVRFUzogJ3VzZXJBdHRyaWJ1dGVzJyxcbiAgICAgICAgTE9DQUxFOiAnbG9jYWxlJyxcbiAgICAgICAgQ09VTlRSWTogJ2NvdW50cnknLFxuICAgICAgICBSRUdJT046ICdyZWdpb24nLFxuICAgICAgICBDSVRZOiAnY2l0eScsXG4gICAgICAgIExPQ0FUSU9OOiAnbG9jYXRpb24nLFxuICAgICAgICBTVEFURTogJ3N0YXRlJyxcbiAgICAgICAgSU5GTzogJ2luZm8nLFxuICAgICAgICBFVkVOVDogJ2V2ZW50JyxcbiAgICAgICAgVkFMVUU6ICd2YWx1ZScsXG4gICAgICAgIEZJTEVOQU1FOiAnZmlsZW5hbWUnLFxuICAgICAgICBUSU1FOiAndGltZScsXG4gICAgICAgIERBVEE6ICdkYXRhJyxcbiAgICAgICAgVkFSUzogJ3ZhcnMnLFxuICAgICAgICBGSUxFOiAnZmlsZScsXG4gICAgICAgIFNJWkU6ICdzaXplJyxcbiAgICAgICAgVkFSSUFUSU9OOiAndmFyaWF0aW9uJyxcbiAgICAgICAgSEFTSDogJ2hhc2gnLFxuICAgICAgICBFTUFJTDogJ2VtYWlsJyxcbiAgICAgICAgVkFSSUFCTEVTOiAndmFycycsXG4gICAgICAgIEFDVElPTl9ERUZJTklUSU9OUzogJ2FjdGlvbkRlZmluaXRpb25zJyxcbiAgICAgICAgUEFSQU1TOiAncGFyYW1zJyxcbiAgICAgICAgSU5DTFVERV9ERUZBVUxUUzogJ2luY2x1ZGVEZWZhdWx0cycsXG4gICAgICAgIElOQ0xVREVfVkFSSUFOVF9ERUJVR19JTkZPOiAnaW5jbHVkZVZhcmlhbnREZWJ1Z0luZm8nLFxuICAgICAgICBORVdTRkVFRF9NRVNTQUdFUzogJ25ld3NmZWVkTWVzc2FnZXMnLFxuICAgICAgICBNRVNTQUdFX0lEOiAnbWVzc2FnZUlkJyxcbiAgICAgICAgV0VCX1BVU0hfU1VCU0NSSVBUSU9OOiAnd2ViUHVzaFN1YnNjcmlwdGlvbicsXG4gICAgfSxcbiAgICBLRVlTOiB7XG4gICAgICAgIElTX1JFR0lTVEVSRUQ6ICdpc1JlZ2lzdGVyZWQnLFxuICAgICAgICBMQVRFU1RfVkVSU0lPTjogJ2xhdGVzdFZlcnNpb24nLFxuICAgICAgICBTWU5DX0lOQk9YOiAnc3luY05ld3NmZWVkJyxcbiAgICAgICAgTUVTU0FHRVM6ICdtZXNzYWdlcycsXG4gICAgICAgIFZBUlM6ICd2YXJzJyxcbiAgICAgICAgVkFSSUFOVFM6ICd2YXJpYW50cycsXG4gICAgICAgIFZBUklBTlRfREVCVUdfSU5GTzogJ3ZhcmlhbnREZWJ1Z0luZm8nLFxuICAgICAgICBBQ1RJT05fREVGSU5JVElPTlM6ICdhY3Rpb25EZWZpbml0aW9ucycsXG4gICAgICAgIFRPS0VOOiAndG9rZW4nLFxuICAgIH0sXG4gICAgREVGQVVMVF9LRVlTOiB7XG4gICAgICAgIENPVU5UOiAnX19sZWFucGx1bV91bnN5bmNlZCcsXG4gICAgICAgIElURU06ICdfX2xlYW5wbHVtX3Vuc3luY2VkXycsXG4gICAgICAgIFZBUklBQkxFUzogJ19fbGVhbnBsdW1fdmFyaWFibGVzJyxcbiAgICAgICAgVkFSSUFOVFM6ICdfX2xlYW5wbHVtX3ZhcmlhbnRzJyxcbiAgICAgICAgVkFSSUFOVF9ERUJVR19JTkZPOiAnX19sZWFucGx1bV92YXJpYW50X2RlYnVnX2luZm8nLFxuICAgICAgICBBQ1RJT05fREVGSU5JVElPTlM6ICdfX2xlYW5wbHVtX2FjdGlvbl9kZWZpbml0aW9ucycsXG4gICAgICAgIEhPU1RfQ09ORklHOiAnX19sZWFucGx1bV9ob3N0cycsXG4gICAgICAgIElOQk9YX01FU1NBR0VTOiAnX19sZWFucGx1bV9pbmJveF9tZXNzYWdlcycsXG4gICAgICAgIFRPS0VOOiAnX19sZWFucGx1bV90b2tlbicsXG4gICAgICAgIERFVklDRV9JRDogJ19fbGVhbnBsdW1fZGV2aWNlX2lkJyxcbiAgICAgICAgVVNFUl9JRDogJ19fbGVhbnBsdW1fdXNlcl9pZCcsXG4gICAgICAgIFNFU1NJT046ICdfX2xlYW5wbHVtX3Nlc3Npb24nLFxuICAgICAgICBNRVNTQUdFX09DQ1VSUkVOQ0VTOiAnX19sZWFucGx1bV9tZXNzYWdlX29jY3VycmVuY2VzJyxcbiAgICAgICAgTUVTU0FHRV9DQUNIRTogJ19fbGVhbnBsdW1fbWVzc2FnZV9jYWNoZScsXG4gICAgICAgIE1JR1JBVElPTl9TVEFURTogJ19fbGVhbnBsdW1fbWlncmF0aW9uX3N0YXRlJyxcbiAgICAgICAgUFVTSF9TVUJTQ1JJUFRJT046ICdfX2xlYW5wbHVtX3B1c2hfc3Vic2NyaXB0aW9uJyxcbiAgICB9LFxuICAgIFZBTFVFUzoge1xuICAgICAgICBERVRFQ1Q6ICcoZGV0ZWN0KScsXG4gICAgICAgIERFRkFVTFRfUFVTSF9BQ1RJT046ICdPcGVuIGFjdGlvbicsXG4gICAgfSxcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFdmVudEVtaXR0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICAgICAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gICAgfVxuICAgIEV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmhhbmRsZXJzLnB1c2goeyBldmVudE5hbWU6IGV2ZW50TmFtZSwgY2FsbGJhY2s6IGNhbGxiYWNrIH0pO1xuICAgIH07XG4gICAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmhhbmRsZXJzID0gdGhpcy5oYW5kbGVycy5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguZXZlbnROYW1lICE9PSBldmVudE5hbWUgfHwgeC5jYWxsYmFjayAhPT0gY2FsbGJhY2s7IH0pO1xuICAgIH07XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBhcmdzKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICAgICAgaWYgKGhhbmRsZXIuZXZlbnROYW1lID09PSBldmVudE5hbWUpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyLmNhbGxiYWNrKGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBFdmVudEVtaXR0ZXI7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gRXZlbnRFbWl0dGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogIENvcHlyaWdodCAyMDIwIExlYW5wbHVtIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0OlxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEludGVybmFsU3RhdGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSW50ZXJuYWxTdGF0ZSgpIHtcbiAgICAgICAgdGhpcy5zdGFydEhhbmRsZXJzID0gW107XG4gICAgICAgIHRoaXMuZGV2TW9kZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmhhc1N0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zdGFydFN1Y2Nlc3NmdWwgPSBmYWxzZTtcbiAgICAgICAgdGhpcy52YXJpYW50RGVidWdJbmZvRW5hYmxlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBJbnRlcm5hbFN0YXRlLnByb3RvdHlwZS5hZGRTdGFydFJlc3BvbnNlSGFuZGxlciA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuc3RhcnRIYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuICAgICAgICBpZiAodGhpcy5oYXNTdGFydGVkKSB7XG4gICAgICAgICAgICBoYW5kbGVyKHRoaXMuc3RhcnRTdWNjZXNzZnVsKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW50ZXJuYWxTdGF0ZS5wcm90b3R5cGUucmVtb3ZlU3RhcnRSZXNwb25zZUhhbmRsZXIgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICB2YXIgaWR4ID0gdGhpcy5zdGFydEhhbmRsZXJzLmluZGV4T2YoaGFuZGxlcik7XG4gICAgICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgICAgICAgdGhpcy5zdGFydEhhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnRlcm5hbFN0YXRlLnByb3RvdHlwZS50cmlnZ2VyU3RhcnRIYW5kbGVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN0YXJ0SGFuZGxlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRIYW5kbGVyc1tpXSh0aGlzLnN0YXJ0U3VjY2Vzc2Z1bCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBJbnRlcm5hbFN0YXRlO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IEludGVybmFsU3RhdGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiAgQ29weXJpZ2h0IDIwMjAgTGVhbnBsdW0gSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQ29uc3RhbnRzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vQ29uc3RhbnRzXCIpKTtcbnZhciBMZWFucGx1bUludGVybmFsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vTGVhbnBsdW1JbnRlcm5hbFwiKSk7XG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG52YXIgTGVhbnBsdW0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTGVhbnBsdW0oKSB7XG4gICAgfVxuICAgIExlYW5wbHVtLnNldEFwaVBhdGggPSBmdW5jdGlvbiAoYXBpUGF0aCkge1xuICAgICAgICBMZWFucGx1bS5fbHAuc2V0QXBpUGF0aChhcGlQYXRoKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnNldEVtYWlsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBkZXByZWNhdGVkXG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBuZXR3b3JrIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNlY29uZHMgVGhlIHRpbWVvdXQgaW4gc2Vjb25kcy5cbiAgICAgKi9cbiAgICBMZWFucGx1bS5zZXROZXR3b3JrVGltZW91dCA9IGZ1bmN0aW9uIChzZWNvbmRzKSB7XG4gICAgICAgIExlYW5wbHVtLl9scC5zZXROZXR3b3JrVGltZW91dChzZWNvbmRzKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnNldEFwcElkRm9yRGV2ZWxvcG1lbnRNb2RlID0gZnVuY3Rpb24gKGFwcElkLCBhY2Nlc3NLZXkpIHtcbiAgICAgICAgTGVhbnBsdW0uX2xwLnNldEFwcElkRm9yRGV2ZWxvcG1lbnRNb2RlKGFwcElkLCBhY2Nlc3NLZXkpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uc2V0QXBwSWRGb3JQcm9kdWN0aW9uTW9kZSA9IGZ1bmN0aW9uIChhcHBJZCwgYWNjZXNzS2V5KSB7XG4gICAgICAgIExlYW5wbHVtLl9scC5zZXRBcHBJZEZvclByb2R1Y3Rpb25Nb2RlKGFwcElkLCBhY2Nlc3NLZXkpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uc2V0U29ja2V0SG9zdCA9IGZ1bmN0aW9uIChob3N0KSB7XG4gICAgICAgIExlYW5wbHVtLl9scC5zZXRTb2NrZXRIb3N0KGhvc3QpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uc2V0RGV2aWNlSWQgPSBmdW5jdGlvbiAoZGV2aWNlSWQpIHtcbiAgICAgICAgTGVhbnBsdW0uX2xwLnNldERldmljZUlkKGRldmljZUlkKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnNldExvY2FsZSA9IGZ1bmN0aW9uIChsb2NhbGUpIHtcbiAgICAgICAgTGVhbnBsdW0uX2xwLnNldExvY2FsZShsb2NhbGUpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uc2V0QXBwVmVyc2lvbiA9IGZ1bmN0aW9uICh2ZXJzaW9uTmFtZSkge1xuICAgICAgICBMZWFucGx1bS5fbHAuc2V0QXBwVmVyc2lvbih2ZXJzaW9uTmFtZSk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5zZXREZXZpY2VOYW1lID0gZnVuY3Rpb24gKGRldmljZU5hbWUpIHtcbiAgICAgICAgTGVhbnBsdW0uX2xwLnNldERldmljZU5hbWUoZGV2aWNlTmFtZSk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5zZXREZXZpY2VNb2RlbCA9IGZ1bmN0aW9uIChkZXZpY2VNb2RlbCkge1xuICAgICAgICBMZWFucGx1bS5fbHAuc2V0RGV2aWNlTW9kZWwoZGV2aWNlTW9kZWwpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uc2V0UmVxdWVzdEJhdGNoaW5nID0gZnVuY3Rpb24gKGJhdGNoRW5hYmxlZCwgY29vbGRvd25TZWNvbmRzKSB7XG4gICAgICAgIExlYW5wbHVtLl9scC5zZXRSZXF1ZXN0QmF0Y2hpbmcoYmF0Y2hFbmFibGVkLCBjb29sZG93blNlY29uZHMpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uc2V0U3lzdGVtTmFtZSA9IGZ1bmN0aW9uIChzeXN0ZW1OYW1lKSB7XG4gICAgICAgIExlYW5wbHVtLl9scC5zZXRTeXN0ZW1OYW1lKHN5c3RlbU5hbWUpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uc2V0U3lzdGVtVmVyc2lvbiA9IGZ1bmN0aW9uIChzeXN0ZW1WZXJzaW9uKSB7XG4gICAgICAgIExlYW5wbHVtLl9scC5zZXRTeXN0ZW1WZXJzaW9uKHN5c3RlbVZlcnNpb24pO1xuICAgIH07XG4gICAgTGVhbnBsdW0uc2V0VmFyaWFibGVzID0gZnVuY3Rpb24gKHZhcmlhYmxlcykge1xuICAgICAgICBMZWFucGx1bS5fbHAuc2V0VmFyaWFibGVzKHZhcmlhYmxlcyk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5zZXRWYXJpYW50RGVidWdJbmZvRW5hYmxlZCA9IGZ1bmN0aW9uICh2YXJpYW50RGVidWdJbmZvRW5hYmxlZCkge1xuICAgICAgICBMZWFucGx1bS5fbHAuc2V0VmFyaWFudERlYnVnSW5mb0VuYWJsZWQodmFyaWFudERlYnVnSW5mb0VuYWJsZWQpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uZW5hYmxlUmljaEluQXBwTWVzc2FnZXMgPSBmdW5jdGlvbiAoZW5hYmxlZCkge1xuICAgICAgICBMZWFucGx1bS5fbHAuZW5hYmxlUmljaEluQXBwTWVzc2FnZXMoZW5hYmxlZCk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5wcm9jZXNzTWVzc2FnZUV2ZW50ID0gZnVuY3Rpb24gKG1lc3NhZ2VJZCwgbWVzc2FnZSkge1xuICAgICAgICBMZWFucGx1bS5fbHAucHJvY2Vzc01lc3NhZ2VFdmVudChtZXNzYWdlSWQsIG1lc3NhZ2UpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uZ2V0VmFyaWFudERlYnVnSW5mbyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIExlYW5wbHVtLl9scC5nZXRWYXJpYW50RGVidWdJbmZvKCk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5nZXRWYXJpYWJsZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBMZWFucGx1bS5fbHAuZ2V0VmFyaWFibGVzKCk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5nZXRWYXJpYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoX2EgPSBMZWFucGx1bS5fbHApLmdldFZhcmlhYmxlLmFwcGx5KF9hLCBhcmdzKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLmdldFZhcmlhbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gTGVhbnBsdW0uX2xwLmdldFZhcmlhbnRzKCk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5pbmJveCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIExlYW5wbHVtLl9scC5pbmJveCgpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uYWRkU3RhcnRSZXNwb25zZUhhbmRsZXIgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICBMZWFucGx1bS5fbHAuYWRkU3RhcnRSZXNwb25zZUhhbmRsZXIoaGFuZGxlcik7XG4gICAgfTtcbiAgICBMZWFucGx1bS5yZW1vdmVTdGFydFJlc3BvbnNlSGFuZGxlciA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIExlYW5wbHVtLl9scC5yZW1vdmVTdGFydFJlc3BvbnNlSGFuZGxlcihoYW5kbGVyKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLmFkZFZhcmlhYmxlc0NoYW5nZWRIYW5kbGVyID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgTGVhbnBsdW0uX2xwLmFkZFZhcmlhYmxlc0NoYW5nZWRIYW5kbGVyKGhhbmRsZXIpO1xuICAgIH07XG4gICAgTGVhbnBsdW0ucmVtb3ZlVmFyaWFibGVzQ2hhbmdlZEhhbmRsZXIgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICBMZWFucGx1bS5fbHAucmVtb3ZlVmFyaWFibGVzQ2hhbmdlZEhhbmRsZXIoaGFuZGxlcik7XG4gICAgfTtcbiAgICBMZWFucGx1bS5mb3JjZUNvbnRlbnRVcGRhdGUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgTGVhbnBsdW0uX2xwLmZvcmNlQ29udGVudFVwZGF0ZShjYWxsYmFjayk7XG4gICAgfTtcbiAgICBMZWFucGx1bS51c2VTZXNzaW9uTGVuZ3RoID0gZnVuY3Rpb24gKHNlY29uZHMpIHtcbiAgICAgICAgTGVhbnBsdW0uX2xwLnVzZVNlc3Npb25MZW5ndGgoc2Vjb25kcyk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5zdGFydCA9IGZ1bmN0aW9uICh1c2VySWQsIHVzZXJBdHRyaWJ1dGVzLCBjYWxsYmFjaykge1xuICAgICAgICBMZWFucGx1bS5fbHAuc3RhcnQodXNlcklkLCB1c2VyQXR0cmlidXRlcywgY2FsbGJhY2spO1xuICAgIH07XG4gICAgTGVhbnBsdW0uc3RhcnRGcm9tQ2FjaGUgPSBmdW5jdGlvbiAodXNlcklkLCB1c2VyQXR0cmlidXRlcywgY2FsbGJhY2spIHtcbiAgICAgICAgTGVhbnBsdW0uX2xwLnN0YXJ0RnJvbUNhY2hlKHVzZXJJZCwgdXNlckF0dHJpYnV0ZXMsIGNhbGxiYWNrKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnN0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIExlYW5wbHVtLl9scC5zdG9wKCk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5wYXVzZVNlc3Npb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIExlYW5wbHVtLl9scC5wYXVzZVNlc3Npb24oKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnJlc3VtZVNlc3Npb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIExlYW5wbHVtLl9scC5yZXN1bWVTZXNzaW9uKCk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5wYXVzZVN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBMZWFucGx1bS5fbHAucGF1c2VTdGF0ZSgpO1xuICAgIH07XG4gICAgTGVhbnBsdW0ucmVzdW1lU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIExlYW5wbHVtLl9scC5yZXN1bWVTdGF0ZSgpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uZ2V0VXNlcklkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbHAuZ2V0VXNlcklkKCk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5zZXRVc2VySWQgPSBmdW5jdGlvbiAodXNlcklkKSB7XG4gICAgICAgIExlYW5wbHVtLnNldFVzZXJBdHRyaWJ1dGVzKHVzZXJJZCk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5zZXRVc2VyQXR0cmlidXRlcyA9IGZ1bmN0aW9uICh1c2VySWQsIHVzZXJBdHRyaWJ1dGVzKSB7XG4gICAgICAgIExlYW5wbHVtLl9scC5zZXRVc2VyQXR0cmlidXRlcyh1c2VySWQsIHVzZXJBdHRyaWJ1dGVzKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnRyYWNrID0gZnVuY3Rpb24gKGV2ZW50LCB2YWx1ZSwgaW5mbywgcGFyYW1zKSB7XG4gICAgICAgIExlYW5wbHVtLl9scC50cmFjayhldmVudCwgdmFsdWUsIGluZm8sIHBhcmFtcyk7XG4gICAgfTtcbiAgICBMZWFucGx1bS50cmFja1B1cmNoYXNlID0gZnVuY3Rpb24gKHZhbHVlLCBjdXJyZW5jeUNvZGUsIHBhcmFtcywgZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50ID09PSB2b2lkIDApIHsgZXZlbnQgPSAnUHVyY2hhc2UnOyB9XG4gICAgICAgIExlYW5wbHVtLl9scC50cmFja1B1cmNoYXNlKHZhbHVlLCBjdXJyZW5jeUNvZGUsIHBhcmFtcywgZXZlbnQpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uYWR2YW5jZVRvID0gZnVuY3Rpb24gKHN0YXRlLCBpbmZvLCBwYXJhbXMpIHtcbiAgICAgICAgTGVhbnBsdW0uX2xwLmFkdmFuY2VUbyhzdGF0ZSwgaW5mbywgcGFyYW1zKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgd2ViIHB1c2ggaXMgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyLlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IFRydWUgaWYgc3VwcG9ydGVkLCBlbHNlIGZhbHNlLlxuICAgICAqL1xuICAgIExlYW5wbHVtLmlzV2ViUHVzaFN1cHBvcnRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIExlYW5wbHVtLl9scC5pc1dlYlB1c2hTdXBwb3J0ZWQoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgd2ViIHB1c2ggaXMgc3Vic2NyaWJlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlcyBpZiB0cnVlLCByZWplY3RzIGlmIGZhbHNlLlxuICAgICAqL1xuICAgIExlYW5wbHVtLmlzV2ViUHVzaFN1YnNjcmliZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBMZWFucGx1bS5fbHAuaXNXZWJQdXNoU3Vic2NyaWJlZCgpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uc2V0V2ViUHVzaE9wdGlvbnMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gTGVhbnBsdW0uX2xwLnNldFdlYlB1c2hPcHRpb25zKG9wdGlvbnMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgdGhlIGJyb3dzZXIgZm9yIHdlYiBwdXNoLlxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gICBzZXJ2aWNlV29ya2VyVXJsIFRoZSB1cmwgb24geW91ciBzZXJ2ZXIgdGhhdCBob3N0cyB0aGVcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvc3cubWluLmpzIHNlcnZpY2Ugd29ya2VyIGpzIGZpbGUuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gICAgICAgICAgICAgICAgICAgUmVzb2x2ZXMgaWYgcmVnaXN0cmF0aW9uIHN1Y2Nlc3NmdWwsXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJ3aXNlIGZhaWxzLlxuICAgICAqL1xuICAgIExlYW5wbHVtLnJlZ2lzdGVyRm9yV2ViUHVzaCA9IGZ1bmN0aW9uIChzZXJ2aWNlV29ya2VyVXJsKSB7XG4gICAgICAgIHJldHVybiBMZWFucGx1bS5fbHAucmVnaXN0ZXJGb3JXZWJQdXNoKHNlcnZpY2VXb3JrZXJVcmwpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVW5yZWdpc3RlcnMgdGhlIGJyb3dzZXIgZm9ybSB3ZWIgcHVzaC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgICAgIFJlc29sdmVzIG9uIHN1Y2Nlc3MsIG90aGVyd2lzZSByZWplY3RzLlxuICAgICAqL1xuICAgIExlYW5wbHVtLnVucmVnaXN0ZXJGcm9tV2ViUHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIExlYW5wbHVtLl9scC51bnJlZ2lzdGVyRnJvbVdlYlB1c2goKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENsZWFycyBjYWNoZWQgdmFsdWVzIGZvciBtZXNzYWdlcywgdmFyaWFibGVzIGFuZCB0ZXN0IGFzc2lnbm1lbnRzLlxuICAgICAqIFVzZSBzcGFyaW5nbHkgYXMgaWYgdGhlIGFwcCBpcyB1cGRhdGVkLCB5b3UnbGwgaGF2ZSB0byBkZWFsIHdpdGggcG90ZW50aWFsbHlcbiAgICAgKiBpbmNvbnNpc3RlbnQgc3RhdGUgb3IgdXNlciBleHBlcmllbmNlLlxuICAgICAqL1xuICAgIExlYW5wbHVtLmNsZWFyVXNlckNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIExlYW5wbHVtLl9scC5jbGVhclVzZXJDb250ZW50KCk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5kZWZpbmVBY3Rpb24gPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICBMZWFucGx1bS5fbHAuZGVmaW5lQWN0aW9uKG9wdGlvbnMpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uYXBwbHlRdWV1ZSA9IGZ1bmN0aW9uIChxdWV1ZSkge1xuICAgICAgICBMZWFucGx1bS5fbHAuYXBwbHlRdWV1ZShxdWV1ZSk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5vbiA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICAgICAgTGVhbnBsdW0uX2xwLm9uKGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgfTtcbiAgICBMZWFucGx1bS5vZmYgPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gICAgICAgIExlYW5wbHVtLl9scC5vZmYoZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLmdldEZpbGVVcmwgPSBmdW5jdGlvbiAoZmlsZW5hbWUpIHtcbiAgICAgICAgcmV0dXJuIExlYW5wbHVtLl9scC5nZXRGaWxlVXJsKGZpbGVuYW1lKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLl9fZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fbHAgPSBuZXcgTGVhbnBsdW1JbnRlcm5hbF8xLmRlZmF1bHQod2luZG93KTtcbiAgICB9O1xuICAgIExlYW5wbHVtLl9scCA9IG5ldyBMZWFucGx1bUludGVybmFsXzEuZGVmYXVsdCh3aW5kb3cpO1xuICAgIExlYW5wbHVtLlZFUlNJT04gPSBDb25zdGFudHNfMS5kZWZhdWx0LlNES19WRVJTSU9OO1xuICAgIHJldHVybiBMZWFucGx1bTtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBMZWFucGx1bTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTGVhbnBsdW1JbmJveE1lc3NhZ2UgPSB2b2lkIDA7XG52YXIgQXJnc0J1aWxkZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9BcmdzQnVpbGRlclwiKSk7XG52YXIgQ29uc3RhbnRzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vQ29uc3RhbnRzXCIpKTtcbnZhciBTdG9yYWdlTWFuYWdlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL1N0b3JhZ2VNYW5hZ2VyXCIpKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG52YXIgdmFsdWVzID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBvYmpba2V5XTsgfSk7XG59O1xudmFyIExlYW5wbHVtSW5ib3ggPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTGVhbnBsdW1JbmJveChjcmVhdGVSZXF1ZXN0LCBvbkFjdGlvbikge1xuICAgICAgICB0aGlzLmNyZWF0ZVJlcXVlc3QgPSBjcmVhdGVSZXF1ZXN0O1xuICAgICAgICB0aGlzLm9uQWN0aW9uID0gb25BY3Rpb247XG4gICAgICAgIHRoaXMubWVzc2FnZU1hcCA9IHt9O1xuICAgICAgICB0aGlzLmNoYW5nZUhhbmRsZXJzID0gW107XG4gICAgICAgIHRoaXMubG9hZCgpO1xuICAgIH1cbiAgICBMZWFucGx1bUluYm94LnByb3RvdHlwZS5kb3dubG9hZE1lc3NhZ2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmNyZWF0ZVJlcXVlc3QoJ2dldE5ld3NmZWVkTWVzc2FnZXMnLCB1bmRlZmluZWQsIHtcbiAgICAgICAgICAgIHF1ZXVlZDogdHJ1ZSxcbiAgICAgICAgICAgIHNlbmROb3c6IHRydWUsXG4gICAgICAgICAgICByZXNwb25zZTogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSBkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGEucmVzcG9uc2VbMF07XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLm5ld3NmZWVkTWVzc2FnZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubWVzc2FnZU1hcCA9IHJlc3BvbnNlLm5ld3NmZWVkTWVzc2FnZXM7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnRyaWdnZXJDaGFuZ2VIYW5kbGVycygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbmJveC5wcm90b3R5cGUubWFya0FzUmVhZCA9IGZ1bmN0aW9uIChtZXNzYWdlSWQpIHtcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSB0aGlzLm1lc3NhZ2VNYXBbbWVzc2FnZUlkXTtcbiAgICAgICAgaWYgKCFtZXNzYWdlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtZXNzYWdlLmlzUmVhZCkge1xuICAgICAgICAgICAgbWVzc2FnZS5pc1JlYWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyQ2hhbmdlSGFuZGxlcnMoKTtcbiAgICAgICAgICAgIHZhciBhcmdzID0gbmV3IEFyZ3NCdWlsZGVyXzEuZGVmYXVsdCgpO1xuICAgICAgICAgICAgYXJncy5hZGQoJ25ld3NmZWVkTWVzc2FnZUlkJywgbWVzc2FnZUlkKTtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlUmVxdWVzdCgnbWFya05ld3NmZWVkTWVzc2FnZUFzUmVhZCcsIGFyZ3MsIHt9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTGVhbnBsdW1JbmJveC5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uIChtZXNzYWdlSWQpIHtcbiAgICAgICAgdGhpcy5tYXJrQXNSZWFkKG1lc3NhZ2VJZCk7XG4gICAgICAgIHZhciBpbmJveE1lc3NhZ2UgPSB0aGlzLm1lc3NhZ2UobWVzc2FnZUlkKTtcbiAgICAgICAgdmFyIGlkID0gbWVzc2FnZUlkLnNwbGl0KCcjIycpWzBdO1xuICAgICAgICB2YXIgb3BlbkFjdGlvbiA9IChpbmJveE1lc3NhZ2UgPT09IG51bGwgfHwgaW5ib3hNZXNzYWdlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbmJveE1lc3NhZ2Uub3BlbkFjdGlvbigpKSB8fCBudWxsO1xuICAgICAgICB0aGlzLm9uQWN0aW9uKGlkLCBvcGVuQWN0aW9uKTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW5ib3gucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChtZXNzYWdlSWQpIHtcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSB0aGlzLm1lc3NhZ2VNYXBbbWVzc2FnZUlkXTtcbiAgICAgICAgaWYgKCFtZXNzYWdlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIHRoaXMubWVzc2FnZU1hcFttZXNzYWdlSWRdO1xuICAgICAgICB0aGlzLnRyaWdnZXJDaGFuZ2VIYW5kbGVycygpO1xuICAgICAgICB2YXIgYXJncyA9IG5ldyBBcmdzQnVpbGRlcl8xLmRlZmF1bHQoKTtcbiAgICAgICAgYXJncy5hZGQoJ25ld3NmZWVkTWVzc2FnZUlkJywgbWVzc2FnZUlkKTtcbiAgICAgICAgdGhpcy5jcmVhdGVSZXF1ZXN0KCdkZWxldGVOZXdzZmVlZE1lc3NhZ2UnLCBhcmdzLCB7fSk7XG4gICAgfTtcbiAgICBMZWFucGx1bUluYm94LnByb3RvdHlwZS5vbkNoYW5nZWQgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmNoYW5nZUhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5jaGFuZ2VIYW5kbGVycyA9IF90aGlzLmNoYW5nZUhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoeCkgeyByZXR1cm4geCAhPT0gaGFuZGxlcjsgfSk7IH07XG4gICAgfTtcbiAgICBMZWFucGx1bUluYm94LnByb3RvdHlwZS50cmlnZ2VyQ2hhbmdlSGFuZGxlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlSGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gaGFuZGxlcigpOyB9KTtcbiAgICAgICAgdGhpcy5zYXZlKCk7XG4gICAgfTtcbiAgICBMZWFucGx1bUluYm94LnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQuc2F2ZShDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5JTkJPWF9NRVNTQUdFUywgSlNPTi5zdHJpbmdpZnkodGhpcy5tZXNzYWdlTWFwKSwgJ3Nlc3Npb24nKTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW5ib3gucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IFN0b3JhZ2VNYW5hZ2VyXzEuZGVmYXVsdC5nZXQoQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuSU5CT1hfTUVTU0FHRVMsICdzZXNzaW9uJyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2VNYXAgPSBKU09OLnBhcnNlKHN0YXRlKSB8fCB7fTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy5tZXNzYWdlTWFwID0ge307XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExlYW5wbHVtSW5ib3gucHJvdG90eXBlLmNvdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdmFsdWVzKHRoaXMubWVzc2FnZU1hcCkubGVuZ3RoO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbmJveC5wcm90b3R5cGUudW5yZWFkQ291bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZXModGhpcy5tZXNzYWdlTWFwKS5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuICF4LmlzUmVhZDsgfSkubGVuZ3RoO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbmJveC5wcm90b3R5cGUubWVzc2FnZXMgPSBmdW5jdGlvbiAoZmlsdGVyKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaWQgaW4gdGhpcy5tZXNzYWdlTWFwKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMubWVzc2FnZU1hcFtpZF07XG4gICAgICAgICAgICBpZiAoZmlsdGVyKGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goTGVhbnBsdW1JbmJveE1lc3NhZ2UuY3JlYXRlKGlkLCBkYXRhKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIExlYW5wbHVtSW5ib3gucHJvdG90eXBlLmFsbE1lc3NhZ2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlcyhmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9KTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW5ib3gucHJvdG90eXBlLnVucmVhZE1lc3NhZ2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlcyhmdW5jdGlvbiAoeCkgeyByZXR1cm4gIXguaXNSZWFkOyB9KTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW5ib3gucHJvdG90eXBlLm1lc3NhZ2VJZHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLm1lc3NhZ2VNYXApO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbmJveC5wcm90b3R5cGUubWVzc2FnZSA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB2YXIgbWVzc2FnZSA9IHRoaXMubWVzc2FnZU1hcFtpZF07XG4gICAgICAgIGlmICghbWVzc2FnZSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIExlYW5wbHVtSW5ib3hNZXNzYWdlLmNyZWF0ZShpZCwgbWVzc2FnZSk7XG4gICAgfTtcbiAgICByZXR1cm4gTGVhbnBsdW1JbmJveDtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBMZWFucGx1bUluYm94O1xudmFyIExlYW5wbHVtSW5ib3hNZXNzYWdlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExlYW5wbHVtSW5ib3hNZXNzYWdlKF9pZCwgX3RpdGxlLCBfc3VidGl0bGUsIF9kYXRhLCBfdGltZXN0YW1wLCBfaXNSZWFkLCBfaW1hZ2VVcmwsIF9vcGVuQWN0aW9uKSB7XG4gICAgICAgIHRoaXMuX2lkID0gX2lkO1xuICAgICAgICB0aGlzLl90aXRsZSA9IF90aXRsZTtcbiAgICAgICAgdGhpcy5fc3VidGl0bGUgPSBfc3VidGl0bGU7XG4gICAgICAgIHRoaXMuX2RhdGEgPSBfZGF0YTtcbiAgICAgICAgdGhpcy5fdGltZXN0YW1wID0gX3RpbWVzdGFtcDtcbiAgICAgICAgdGhpcy5faXNSZWFkID0gX2lzUmVhZDtcbiAgICAgICAgdGhpcy5faW1hZ2VVcmwgPSBfaW1hZ2VVcmw7XG4gICAgICAgIHRoaXMuX29wZW5BY3Rpb24gPSBfb3BlbkFjdGlvbjtcbiAgICB9XG4gICAgTGVhbnBsdW1JbmJveE1lc3NhZ2UuY3JlYXRlID0gZnVuY3Rpb24gKGlkLCBtZXNzYWdlSW5mbykge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfaiwgX2ssIF9sO1xuICAgICAgICB2YXIgcGFyZW50Q2FtcGFpZ25JZCA9IChfYSA9IG1lc3NhZ2VJbmZvLm1lc3NhZ2VEYXRhKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucGFyZW50Q2FtcGFpZ25JZDtcbiAgICAgICAgdmFyIGFjdGlvbiA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCAoX2MgPSAoX2IgPSBtZXNzYWdlSW5mby5tZXNzYWdlRGF0YSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnZhcnMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY1tDb25zdGFudHNfMS5kZWZhdWx0LlZBTFVFUy5ERUZBVUxUX1BVU0hfQUNUSU9OXSksIHsgcGFyZW50Q2FtcGFpZ25JZDogcGFyZW50Q2FtcGFpZ25JZCB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBMZWFucGx1bUluYm94TWVzc2FnZShpZCwgKF9lID0gKF9kID0gbWVzc2FnZUluZm8ubWVzc2FnZURhdGEpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC52YXJzKSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2UuVGl0bGUsIChfZyA9IChfZiA9IG1lc3NhZ2VJbmZvLm1lc3NhZ2VEYXRhKSA9PT0gbnVsbCB8fCBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2YudmFycykgPT09IG51bGwgfHwgX2cgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9nLlN1YnRpdGxlLCAoX2ogPSAoX2ggPSBtZXNzYWdlSW5mby5tZXNzYWdlRGF0YSkgPT09IG51bGwgfHwgX2ggPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9oLnZhcnMpID09PSBudWxsIHx8IF9qID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfai5EYXRhLCBtZXNzYWdlSW5mby5kZWxpdmVyeVRpbWVzdGFtcCwgbWVzc2FnZUluZm8uaXNSZWFkLCAoX2wgPSAoX2sgPSBtZXNzYWdlSW5mby5tZXNzYWdlRGF0YSkgPT09IG51bGwgfHwgX2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9rLnZhcnMpID09PSBudWxsIHx8IF9sID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbC5JbWFnZSwgYWN0aW9uKTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW5ib3hNZXNzYWdlLnByb3RvdHlwZS5pZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbmJveE1lc3NhZ2UucHJvdG90eXBlLnRpdGxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGl0bGU7XG4gICAgfTtcbiAgICBMZWFucGx1bUluYm94TWVzc2FnZS5wcm90b3R5cGUuc3VidGl0bGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdWJ0aXRsZTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW5ib3hNZXNzYWdlLnByb3RvdHlwZS5kYXRhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW5ib3hNZXNzYWdlLnByb3RvdHlwZS50aW1lc3RhbXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90aW1lc3RhbXA7XG4gICAgfTtcbiAgICBMZWFucGx1bUluYm94TWVzc2FnZS5wcm90b3R5cGUuaXNSZWFkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNSZWFkO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbmJveE1lc3NhZ2UucHJvdG90eXBlLmltYWdlVXJsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW1hZ2VVcmw7XG4gICAgfTtcbiAgICBMZWFucGx1bUluYm94TWVzc2FnZS5wcm90b3R5cGUub3BlbkFjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wZW5BY3Rpb247XG4gICAgfTtcbiAgICByZXR1cm4gTGVhbnBsdW1JbmJveE1lc3NhZ2U7XG59KCkpO1xuZXhwb3J0cy5MZWFucGx1bUluYm94TWVzc2FnZSA9IExlYW5wbHVtSW5ib3hNZXNzYWdlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEFyZ3NCdWlsZGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vQXJnc0J1aWxkZXJcIikpO1xudmFyIEJyb3dzZXJEZXRlY3Rvcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0Jyb3dzZXJEZXRlY3RvclwiKSk7XG52YXIgQ29uc3RhbnRzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vQ29uc3RhbnRzXCIpKTtcbnZhciBJbnRlcm5hbFN0YXRlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vSW50ZXJuYWxTdGF0ZVwiKSk7XG52YXIgTGVhbnBsdW1JbmJveF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0xlYW5wbHVtSW5ib3hcIikpO1xudmFyIExlYW5wbHVtUmVxdWVzdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0xlYW5wbHVtUmVxdWVzdFwiKSk7XG52YXIgTGVhbnBsdW1Tb2NrZXRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9MZWFucGx1bVNvY2tldFwiKSk7XG52YXIgU3RvcmFnZU1hbmFnZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9TdG9yYWdlTWFuYWdlclwiKSk7XG52YXIgUHVzaE1hbmFnZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9QdXNoTWFuYWdlclwiKSk7XG52YXIgTWVzc2FnZXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9NZXNzYWdlc1wiKSk7XG52YXIgRXZlbnRFbWl0dGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vRXZlbnRFbWl0dGVyXCIpKTtcbnZhciBNaWdyYXRpb25NYW5hZ2VyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vTWlncmF0aW9uTWFuYWdlclwiKSk7XG52YXIgcHVibGljXzEgPSByZXF1aXJlKFwiLi90eXBlcy9wdWJsaWNcIik7XG52YXIgaW50ZXJuYWxfMSA9IHJlcXVpcmUoXCIuL3R5cGVzL2ludGVybmFsXCIpO1xudmFyIFZhckNhY2hlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vVmFyQ2FjaGVcIikpO1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlcyAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xudmFyIFNFU1NJT05fS0VZID0gQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuU0VTU0lPTjtcbnZhciBMZWFucGx1bUludGVybmFsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExlYW5wbHVtSW50ZXJuYWwod25kKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMud25kID0gd25kO1xuICAgICAgICB0aGlzLl9taWdyYXRpb24gPSBuZXcgTWlncmF0aW9uTWFuYWdlcl8xLmRlZmF1bHQodGhpcy5jcmVhdGVSZXF1ZXN0LmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRFbWl0dGVyXzEuZGVmYXVsdCgpO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbFN0YXRlID0gbmV3IEludGVybmFsU3RhdGVfMS5kZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuX2xwSW5ib3ggPSBuZXcgTGVhbnBsdW1JbmJveF8xLmRlZmF1bHQodGhpcy5jcmVhdGVSZXF1ZXN0LmJpbmQodGhpcyksIHRoaXMub25JbmJveEFjdGlvbi5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5fbHBSZXF1ZXN0ID0gbmV3IExlYW5wbHVtUmVxdWVzdF8xLmRlZmF1bHQodGhpcy5fZXZlbnRzKTtcbiAgICAgICAgdGhpcy5fdmFyQ2FjaGUgPSBuZXcgVmFyQ2FjaGVfMS5kZWZhdWx0KHRoaXMuY3JlYXRlUmVxdWVzdC5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5fbHBTb2NrZXQgPSBuZXcgTGVhbnBsdW1Tb2NrZXRfMS5kZWZhdWx0KHRoaXMuX3ZhckNhY2hlLCB0aGlzLmNyZWF0ZVJlcXVlc3QuYmluZCh0aGlzKSwgdGhpcy5fbHBSZXF1ZXN0LmdldExhc3RSZXNwb25zZS5iaW5kKHRoaXMuX2xwUmVxdWVzdCksIHRoaXMuX2V2ZW50cyk7XG4gICAgICAgIHRoaXMuX3B1c2hNYW5hZ2VyID0gbmV3IFB1c2hNYW5hZ2VyXzEuZGVmYXVsdCh0aGlzLmNyZWF0ZVJlcXVlc3QuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuX21lc3NhZ2VzID0gbmV3IE1lc3NhZ2VzXzEuZGVmYXVsdCh0aGlzLl9ldmVudHMsIHRoaXMuY3JlYXRlUmVxdWVzdC5iaW5kKHRoaXMpLCB0aGlzLmdldEZpbGVVcmwuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuX2Jyb3dzZXJEZXRlY3RvciA9IG5ldyBCcm93c2VyRGV0ZWN0b3JfMS5kZWZhdWx0KHduZCk7XG4gICAgICAgIHRoaXMuX2V2ZW50cy5vbignbmF2aWdhdGlvbkNoYW5nZScsIGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgICAgIHZhciBwcmV2ZW50ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIF90aGlzLl9ldmVudHMuZW1pdCgnb3BlblVybCcsIHtcbiAgICAgICAgICAgICAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJldmVudGVkID0gdHJ1ZTsgfSxcbiAgICAgICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCFwcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy53bmQubG9jYXRpb24uYXNzaWduKHVybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9ldmVudHMub24oJ3JlZ2lzdGVyRm9yUHVzaCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnJlZ2lzdGVyRm9yV2ViUHVzaCgpOyB9KTtcbiAgICAgICAgdGhpcy5fZXZlbnRzLm9uKCd1cGRhdGVEZXZTZXJ2ZXJIb3N0JywgZnVuY3Rpb24gKGhvc3QpIHsgcmV0dXJuIF90aGlzLnNldFNvY2tldEhvc3QoaG9zdCk7IH0pO1xuICAgICAgICB0aGlzLl9ldmVudHMub24oJ21pZ3JhdGVTdGF0ZVJlY2VpdmVkJywgZnVuY3Rpb24gKHNoYSkgeyByZXR1cm4gX3RoaXMuX21pZ3JhdGlvbi52ZXJpZnlTdGF0ZShzaGEpOyB9KTtcbiAgICB9XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUuc2V0QXBpUGF0aCA9IGZ1bmN0aW9uIChhcGlQYXRoKSB7XG4gICAgICAgIGlmICghdGhpcy5fbHBSZXF1ZXN0LmFwaVBhdGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9scFJlcXVlc3QuYXBpUGF0aCA9IGFwaVBhdGg7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBuZXR3b3JrIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNlY29uZHMgVGhlIHRpbWVvdXQgaW4gc2Vjb25kcy5cbiAgICAgKi9cbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5zZXROZXR3b3JrVGltZW91dCA9IGZ1bmN0aW9uIChzZWNvbmRzKSB7XG4gICAgICAgIHRoaXMuX2xwUmVxdWVzdC5zZXROZXR3b3JrVGltZW91dChzZWNvbmRzKTtcbiAgICAgICAgdGhpcy5fbHBTb2NrZXQuc2V0TmV0d29ya1RpbWVvdXQoc2Vjb25kcyk7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5zZXRBcHBJZEZvckRldmVsb3BtZW50TW9kZSA9IGZ1bmN0aW9uIChhcHBJZCwgYWNjZXNzS2V5KSB7XG4gICAgICAgIHRoaXMuX2xwUmVxdWVzdC5hcHBJZCA9IGFwcElkO1xuICAgICAgICB0aGlzLl9scFJlcXVlc3QuY2xpZW50S2V5ID0gYWNjZXNzS2V5O1xuICAgICAgICB0aGlzLl9pbnRlcm5hbFN0YXRlLmRldk1vZGUgPSB0cnVlO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUuc2V0QXBwSWRGb3JQcm9kdWN0aW9uTW9kZSA9IGZ1bmN0aW9uIChhcHBJZCwgYWNjZXNzS2V5KSB7XG4gICAgICAgIHRoaXMuX2xwUmVxdWVzdC5hcHBJZCA9IGFwcElkO1xuICAgICAgICB0aGlzLl9scFJlcXVlc3QuY2xpZW50S2V5ID0gYWNjZXNzS2V5O1xuICAgICAgICB0aGlzLl9pbnRlcm5hbFN0YXRlLmRldk1vZGUgPSBmYWxzZTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLnNldFNvY2tldEhvc3QgPSBmdW5jdGlvbiAoaG9zdCkge1xuICAgICAgICB0aGlzLl9scFNvY2tldC5zZXRTb2NrZXRIb3N0KGhvc3QpO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUuc2V0RGV2aWNlSWQgPSBmdW5jdGlvbiAoZGV2aWNlSWQpIHtcbiAgICAgICAgdGhpcy5fbHBSZXF1ZXN0LmRldmljZUlkID0gZGV2aWNlSWQ7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5zZXRMb2NhbGUgPSBmdW5jdGlvbiAobG9jYWxlKSB7XG4gICAgICAgIHRoaXMuX2xvY2FsZSA9IGxvY2FsZTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLnNldEFwcFZlcnNpb24gPSBmdW5jdGlvbiAodmVyc2lvbk5hbWUpIHtcbiAgICAgICAgdGhpcy5fbHBSZXF1ZXN0LnZlcnNpb25OYW1lID0gdmVyc2lvbk5hbWU7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5zZXREZXZpY2VOYW1lID0gZnVuY3Rpb24gKGRldmljZU5hbWUpIHtcbiAgICAgICAgdGhpcy5fZGV2aWNlTmFtZSA9IGRldmljZU5hbWU7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5zZXREZXZpY2VNb2RlbCA9IGZ1bmN0aW9uIChkZXZpY2VNb2RlbCkge1xuICAgICAgICB0aGlzLl9kZXZpY2VNb2RlbCA9IGRldmljZU1vZGVsO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUuc2V0UmVxdWVzdEJhdGNoaW5nID0gZnVuY3Rpb24gKGJhdGNoRW5hYmxlZCwgY29vbGRvd25TZWNvbmRzKSB7XG4gICAgICAgIHRoaXMuX2xwUmVxdWVzdC5iYXRjaEVuYWJsZWQgPSBiYXRjaEVuYWJsZWQ7XG4gICAgICAgIHRoaXMuX2xwUmVxdWVzdC5iYXRjaENvb2xkb3duID0gY29vbGRvd25TZWNvbmRzO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUuc2V0U3lzdGVtTmFtZSA9IGZ1bmN0aW9uIChzeXN0ZW1OYW1lKSB7XG4gICAgICAgIHRoaXMuX3N5c3RlbU5hbWUgPSBzeXN0ZW1OYW1lO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUuc2V0U3lzdGVtVmVyc2lvbiA9IGZ1bmN0aW9uIChzeXN0ZW1WZXJzaW9uKSB7XG4gICAgICAgIHRoaXMuX3N5c3RlbVZlcnNpb24gPSBzeXN0ZW1WZXJzaW9uO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUuc2V0VmFyaWFibGVzID0gZnVuY3Rpb24gKHZhcmlhYmxlcykge1xuICAgICAgICB0aGlzLl92YXJDYWNoZS5zZXRWYXJpYWJsZXModmFyaWFibGVzKTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLnNldFZhcmlhbnREZWJ1Z0luZm9FbmFibGVkID0gZnVuY3Rpb24gKHZhcmlhbnREZWJ1Z0luZm9FbmFibGVkKSB7XG4gICAgICAgIHRoaXMuX2ludGVybmFsU3RhdGUudmFyaWFudERlYnVnSW5mb0VuYWJsZWQgPSB2YXJpYW50RGVidWdJbmZvRW5hYmxlZDtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLmVuYWJsZVJpY2hJbkFwcE1lc3NhZ2VzID0gZnVuY3Rpb24gKGVuYWJsZWQpIHtcbiAgICAgICAgdGhpcy5fbWVzc2FnZXMuZW5hYmxlUmljaEluQXBwTWVzc2FnZXMoZW5hYmxlZCk7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5wcm9jZXNzTWVzc2FnZUV2ZW50ID0gZnVuY3Rpb24gKG1lc3NhZ2VJZCwgbWVzc2FnZSkge1xuICAgICAgICB0aGlzLl9tZXNzYWdlcy5wcm9jZXNzTWVzc2FnZUV2ZW50KG1lc3NhZ2VJZCwgbWVzc2FnZSk7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5nZXRWYXJpYW50RGVidWdJbmZvID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFyQ2FjaGUuZ2V0VmFyaWFudERlYnVnSW5mbygpO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUuZ2V0VmFyaWFibGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFyQ2FjaGUuZ2V0VmFyaWFibGVzKCk7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5nZXRWYXJpYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoX2EgPSB0aGlzLl92YXJDYWNoZSkuZ2V0VmFyaWFibGUuYXBwbHkoX2EsIGFyZ3MpO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUuZ2V0VmFyaWFudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YXJDYWNoZS52YXJpYW50cyB8fCBbXTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLmluYm94ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbHBJbmJveDtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgICAgICB0aGlzLl9ldmVudHMub24oZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRzLm9mZihldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUub25JbmJveEFjdGlvbiA9IGZ1bmN0aW9uIChtZXNzYWdlSWQsIGFjdGlvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl9tZXNzYWdlcy50cmFja01lc3NhZ2UobWVzc2FnZUlkLCB7IGV2ZW50OiAnT3BlbicgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gYWN0aW9uICYmIF90aGlzLl9tZXNzYWdlcy5vbkFjdGlvbihhY3Rpb24pOyB9KTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLmRlZmluZUFjdGlvbiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX3ZhckNhY2hlLnJlZ2lzdGVyQWN0aW9uRGVmaW5pdGlvbihfX2Fzc2lnbih7IGtpbmQ6IHB1YmxpY18xLk1lc3NhZ2VLaW5kLlRlbXBsYXRlIH0sIG9wdGlvbnMpKTtcbiAgICB9O1xuICAgIC8vIFRPRE8oYnJlYWtpbmcgY2hhbmdlKTogcmVwbGFjZSB3aXRoIGV2ZW50cyBhbmQgcmVtb3ZlIHN0YXRlZnVsIGhhbmRsZXJzXG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUuYWRkU3RhcnRSZXNwb25zZUhhbmRsZXIgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICB0aGlzLl9pbnRlcm5hbFN0YXRlLmFkZFN0YXJ0UmVzcG9uc2VIYW5kbGVyKGhhbmRsZXIpO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUucmVtb3ZlU3RhcnRSZXNwb25zZUhhbmRsZXIgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICB0aGlzLl9pbnRlcm5hbFN0YXRlLnJlbW92ZVN0YXJ0UmVzcG9uc2VIYW5kbGVyKGhhbmRsZXIpO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUuYWRkVmFyaWFibGVzQ2hhbmdlZEhhbmRsZXIgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICB0aGlzLl92YXJDYWNoZS5hZGRWYXJpYWJsZXNDaGFuZ2VkSGFuZGxlcihoYW5kbGVyKTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLnJlbW92ZVZhcmlhYmxlc0NoYW5nZWRIYW5kbGVyID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5fdmFyQ2FjaGUucmVtb3ZlVmFyaWFibGVzQ2hhbmdlZEhhbmRsZXIoaGFuZGxlcik7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5nZXRGaWxlVXJsID0gZnVuY3Rpb24gKGZpbGVuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9scFJlcXVlc3QuZ2V0RmlsZVVybChmaWxlbmFtZSk7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5mb3JjZUNvbnRlbnRVcGRhdGUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJnc0J1aWxkZXJfMS5kZWZhdWx0KClcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuSU5DTFVERV9ERUZBVUxUUywgZmFsc2UpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLklOQ0xVREVfVkFSSUFOVF9ERUJVR19JTkZPLCB0aGlzLl9pbnRlcm5hbFN0YXRlLnZhcmlhbnREZWJ1Z0luZm9FbmFibGVkKTtcbiAgICAgICAgdGhpcy5jcmVhdGVSZXF1ZXN0KENvbnN0YW50c18xLmRlZmF1bHQuTUVUSE9EUy5HRVRfVkFSUywgYXJncywge1xuICAgICAgICAgICAgcXVldWVkOiBmYWxzZSxcbiAgICAgICAgICAgIHNlbmROb3c6IHRydWUsXG4gICAgICAgICAgICByZXNwb25zZTogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGdldFZhcnNSZXNwb25zZSA9IF90aGlzLl9scFJlcXVlc3QuZ2V0TGFzdFJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB2YXIgaXNTdWNjZXNzID0gX3RoaXMuX2xwUmVxdWVzdC5pc1Jlc3BvbnNlU3VjY2VzcyhnZXRWYXJzUmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIGlmIChpc1N1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3ZhckNhY2hlLmFwcGx5RGlmZnMoZ2V0VmFyc1Jlc3BvbnNlW0NvbnN0YW50c18xLmRlZmF1bHQuS0VZUy5WQVJTXSwgZ2V0VmFyc1Jlc3BvbnNlW0NvbnN0YW50c18xLmRlZmF1bHQuS0VZUy5WQVJJQU5UU10sIGdldFZhcnNSZXNwb25zZVtDb25zdGFudHNfMS5kZWZhdWx0LktFWVMuQUNUSU9OX0RFRklOSVRJT05TXSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl92YXJDYWNoZS5zZXRWYXJpYW50RGVidWdJbmZvKGdldFZhcnNSZXNwb25zZVtDb25zdGFudHNfMS5kZWZhdWx0LktFWVMuVkFSSUFOVF9ERUJVR19JTkZPXSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9ldmVudHMuZW1pdCgnbWVzc2FnZXNSZWNlaXZlZCcsIGdldFZhcnNSZXNwb25zZVtDb25zdGFudHNfMS5kZWZhdWx0LktFWVMuTUVTU0FHRVNdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGlzU3VjY2Vzcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS51c2VTZXNzaW9uTGVuZ3RoID0gZnVuY3Rpb24gKHNlY29uZHMpIHtcbiAgICAgICAgdGhpcy5fc2Vzc2lvbkxlbmd0aCA9IHNlY29uZHM7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uICh1c2VySWQsIHVzZXJBdHRyaWJ1dGVzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodHlwZW9mIHVzZXJJZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FsbGJhY2sgPSB1c2VySWQ7XG4gICAgICAgICAgICB1c2VyQXR0cmlidXRlcyA9IHt9O1xuICAgICAgICAgICAgdXNlcklkID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdXNlcklkID09PSAnb2JqZWN0JyAmJiB1c2VySWQgIT09IG51bGwgJiYgdXNlcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gdXNlckF0dHJpYnV0ZXM7XG4gICAgICAgICAgICB1c2VyQXR0cmlidXRlcyA9IHVzZXJJZDtcbiAgICAgICAgICAgIHVzZXJJZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHVzZXJBdHRyaWJ1dGVzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IHVzZXJBdHRyaWJ1dGVzO1xuICAgICAgICAgICAgdXNlckF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oYXNBY3RpdmVTZXNzaW9uKCkgJiYgIXRoaXMuX2ludGVybmFsU3RhdGUuZGV2TW9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnRGcm9tQ2FjaGUodXNlcklkLCB1c2VyQXR0cmlidXRlcywgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX21pZ3JhdGlvbi5nZXRTdGF0ZShmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gaW50ZXJuYWxfMS5NaWdyYXRpb25TdGF0ZS5EVVBMSUNBVEUpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fY3QgPSBfdGhpcy5fbWlncmF0aW9uLmluaXRDbGV2ZXJUYXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHN0YXRlID09PSBpbnRlcm5hbF8xLk1pZ3JhdGlvblN0YXRlLkNMRVZFUlRBUCkge1xuICAgICAgICAgICAgICAgIF90aGlzLl9jdCA9IF90aGlzLl9taWdyYXRpb24uaW5pdENsZXZlclRhcCgpO1xuICAgICAgICAgICAgICAgIF90aGlzLm1pZ3JhdGVQdXNoVG9rZW4oKTtcbiAgICAgICAgICAgICAgICBPYmplY3QudmFsdWVzKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTKVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICFbXG4gICAgICAgICAgICAgICAgICAgIENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLlVTRVJfSUQsXG4gICAgICAgICAgICAgICAgICAgIENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLkRFVklDRV9JRCxcbiAgICAgICAgICAgICAgICAgICAgQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuVE9LRU4sXG4gICAgICAgICAgICAgICAgICAgIENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLk1JR1JBVElPTl9TVEFURSxcbiAgICAgICAgICAgICAgICBdLmluY2x1ZGVzKGtleSk7IH0pXG4gICAgICAgICAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIFN0b3JhZ2VNYW5hZ2VyXzEuZGVmYXVsdC5yZW1vdmUoa2V5KTsgfSk7XG4gICAgICAgICAgICAgICAgX3RoaXMuX21lc3NhZ2VzLmNsZWFudXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLl9scFJlcXVlc3QudXNlcklkID0gdXNlcklkO1xuICAgICAgICAgICAgaWYgKHVzZXJJZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLl9taWdyYXRpb24uaWRlbnRpdHkuc2V0VXNlcklkKHVzZXJJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5hZGRTdGFydFJlc3BvbnNlSGFuZGxlcihjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5fdmFyQ2FjaGUub25VcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3ZhckNhY2hlLnRyaWdnZXJWYXJpYWJsZXNDaGFuZ2VkSGFuZGxlcnMoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgYXJncyA9IG5ldyBBcmdzQnVpbGRlcl8xLmRlZmF1bHQoKVxuICAgICAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuVVNFUl9BVFRSSUJVVEVTLCBKU09OLnN0cmluZ2lmeSh1c2VyQXR0cmlidXRlcykpXG4gICAgICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5DT1VOVFJZLCBDb25zdGFudHNfMS5kZWZhdWx0LlZBTFVFUy5ERVRFQ1QpXG4gICAgICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5SRUdJT04sIENvbnN0YW50c18xLmRlZmF1bHQuVkFMVUVTLkRFVEVDVClcbiAgICAgICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLkNJVFksIENvbnN0YW50c18xLmRlZmF1bHQuVkFMVUVTLkRFVEVDVClcbiAgICAgICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLkxPQ0FUSU9OLCBDb25zdGFudHNfMS5kZWZhdWx0LlZBTFVFUy5ERVRFQ1QpXG4gICAgICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5TWVNURU1fTkFNRSwgX3RoaXMuX3N5c3RlbU5hbWUgfHwgX3RoaXMuX2Jyb3dzZXJEZXRlY3Rvci5PUylcbiAgICAgICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLlNZU1RFTV9WRVJTSU9OLCAoX3RoaXMuX3N5c3RlbVZlcnNpb24gfHwgJycpLnRvU3RyaW5nKCkpXG4gICAgICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5CUk9XU0VSX05BTUUsIF90aGlzLl9icm93c2VyRGV0ZWN0b3IuYnJvd3NlcilcbiAgICAgICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLkJST1dTRVJfVkVSU0lPTiwgX3RoaXMuX2Jyb3dzZXJEZXRlY3Rvci52ZXJzaW9uLnRvU3RyaW5nKCkpXG4gICAgICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5MT0NBTEUsIF90aGlzLl9sb2NhbGUgfHwgQ29uc3RhbnRzXzEuZGVmYXVsdC5WQUxVRVMuREVURUNUKVxuICAgICAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuREVWSUNFX05BTUUsIF90aGlzLl9kZXZpY2VOYW1lIHx8XG4gICAgICAgICAgICAgICAgXCJcIi5jb25jYXQoX3RoaXMuX2Jyb3dzZXJEZXRlY3Rvci5icm93c2VyLCBcIiBcIikuY29uY2F0KF90aGlzLl9icm93c2VyRGV0ZWN0b3IudmVyc2lvbikpXG4gICAgICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5ERVZJQ0VfTU9ERUwsIF90aGlzLl9kZXZpY2VNb2RlbCB8fCAnV2ViIEJyb3dzZXInKVxuICAgICAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuTkVXU0ZFRURfTUVTU0FHRVMsIF90aGlzLl9scEluYm94Lm1lc3NhZ2VJZHMoKSlcbiAgICAgICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLklOQ0xVREVfREVGQVVMVFMsIGZhbHNlKVxuICAgICAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuSU5DTFVERV9WQVJJQU5UX0RFQlVHX0lORk8sIF90aGlzLl9pbnRlcm5hbFN0YXRlLnZhcmlhbnREZWJ1Z0luZm9FbmFibGVkKTtcbiAgICAgICAgICAgIF90aGlzLmNyZWF0ZVJlcXVlc3QoQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLlNUQVJULCBhcmdzLCB7XG4gICAgICAgICAgICAgICAgcXVldWVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNlbmROb3c6IHRydWUsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2U6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5faW50ZXJuYWxTdGF0ZS5oYXNTdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0UmVzcG9uc2UgPSBfdGhpcy5fbHBSZXF1ZXN0LmdldExhc3RSZXNwb25zZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpc1N1Y2Nlc3MgPSBfdGhpcy5fbHBSZXF1ZXN0LmlzUmVzcG9uc2VTdWNjZXNzKHN0YXJ0UmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5faW50ZXJuYWxTdGF0ZS5zdGFydFN1Y2Nlc3NmdWwgPSBpc1N1Y2Nlc3M7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1N1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnVwZGF0ZVNlc3Npb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlcyA9IHN0YXJ0UmVzcG9uc2VbQ29uc3RhbnRzXzEuZGVmYXVsdC5LRVlTLk1FU1NBR0VTXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGFydFJlc3BvbnNlLmFjdGlvbkRlZmluaXRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZXMuYWN0aW9uRGVmaW5pdGlvbnMgPSBzdGFydFJlc3BvbnNlLmFjdGlvbkRlZmluaXRpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2V2ZW50cy5lbWl0KCdtZXNzYWdlc1JlY2VpdmVkJywgbWVzc2FnZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0UmVzcG9uc2VbQ29uc3RhbnRzXzEuZGVmYXVsdC5LRVlTLlNZTkNfSU5CT1hdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2xwSW5ib3guZG93bmxvYWRNZXNzYWdlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9pbnRlcm5hbFN0YXRlLmRldk1vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGF0ZXN0VmVyc2lvbiA9IHN0YXJ0UmVzcG9uc2VbQ29uc3RhbnRzXzEuZGVmYXVsdC5LRVlTLkxBVEVTVF9WRVJTSU9OXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF0ZXN0VmVyc2lvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkEgbmV3ZXIgdmVyc2lvbiBvZiB0aGUgTGVhbnBsdW0gU0RLLCBcIi5jb25jYXQobGF0ZXN0VmVyc2lvbiwgXCIsIGlzIGF2YWlsYWJsZS5cXG4gIFVzZSBcXFwibnBtIHVwZGF0ZSBsZWFucGx1bS1zZGtcXFwiIG9yIGdvIHRvIGh0dHBzOi8vZG9jcy5sZWFucGx1bS5jb20vcmVmZXJlbmNlI2phdmFzY3JpcHQtc2V0dXAgdG8gZG93bmxvYWQgaXQuXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29ubmVjdFNvY2tldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3ZhckNhY2hlLmFwcGx5RGlmZnMoc3RhcnRSZXNwb25zZVtDb25zdGFudHNfMS5kZWZhdWx0LktFWVMuVkFSU10sIHN0YXJ0UmVzcG9uc2VbQ29uc3RhbnRzXzEuZGVmYXVsdC5LRVlTLlZBUklBTlRTXSwgc3RhcnRSZXNwb25zZVtDb25zdGFudHNfMS5kZWZhdWx0LktFWVMuQUNUSU9OX0RFRklOSVRJT05TXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fdmFyQ2FjaGUuc2V0VmFyaWFudERlYnVnSW5mbyhzdGFydFJlc3BvbnNlW0NvbnN0YW50c18xLmRlZmF1bHQuS0VZUy5WQVJJQU5UX0RFQlVHX0lORk9dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl92YXJDYWNoZS50b2tlbiA9IHN0YXJ0UmVzcG9uc2VbQ29uc3RhbnRzXzEuZGVmYXVsdC5LRVlTLlRPS0VOXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl92YXJDYWNoZS5sb2FkRGlmZnMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fZXZlbnRzLmVtaXQoJ3N0YXJ0JywgeyBzdWNjZXNzOiBpc1N1Y2Nlc3MgfSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9pbnRlcm5hbFN0YXRlLnRyaWdnZXJTdGFydEhhbmRsZXJzKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLnN0YXJ0RnJvbUNhY2hlID0gZnVuY3Rpb24gKHVzZXJJZCwgdXNlckF0dHJpYnV0ZXMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0eXBlb2YgdXNlcklkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IHVzZXJJZDtcbiAgICAgICAgICAgIHVzZXJBdHRyaWJ1dGVzID0ge307XG4gICAgICAgICAgICB1c2VySWQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB1c2VySWQgPT09ICdvYmplY3QnICYmIHVzZXJJZCAhPT0gbnVsbCAmJiB1c2VySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY2FsbGJhY2sgPSB1c2VyQXR0cmlidXRlcztcbiAgICAgICAgICAgIHVzZXJBdHRyaWJ1dGVzID0gdXNlcklkO1xuICAgICAgICAgICAgdXNlcklkID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdXNlckF0dHJpYnV0ZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gdXNlckF0dHJpYnV0ZXM7XG4gICAgICAgICAgICB1c2VyQXR0cmlidXRlcyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlU2Vzc2lvbigpO1xuICAgICAgICB0aGlzLl9scFJlcXVlc3QudXNlcklkID0gdXNlcklkO1xuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuYWRkU3RhcnRSZXNwb25zZUhhbmRsZXIoY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2ludGVybmFsU3RhdGUuaGFzU3RhcnRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX2ludGVybmFsU3RhdGUuc3RhcnRTdWNjZXNzZnVsID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fbWlncmF0aW9uLmdldFN0YXRlKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICAgICAgaWYgKHN0YXRlID09PSBpbnRlcm5hbF8xLk1pZ3JhdGlvblN0YXRlLkRVUExJQ0FURSB8fCBzdGF0ZSA9PT0gaW50ZXJuYWxfMS5NaWdyYXRpb25TdGF0ZS5DTEVWRVJUQVApIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fY3QgPSBfdGhpcy5fbWlncmF0aW9uLmluaXRDbGV2ZXJUYXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0aGlzLl9pbnRlcm5hbFN0YXRlLmRldk1vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdFNvY2tldCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ZhckNhY2hlLmxvYWREaWZmcygpO1xuICAgICAgICB0aGlzLl9ldmVudHMuZW1pdCgncmVzdW1lJyk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsU3RhdGUudHJpZ2dlclN0YXJ0SGFuZGxlcnMoKTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY3JlYXRlUmVxdWVzdChDb25zdGFudHNfMS5kZWZhdWx0Lk1FVEhPRFMuU1RPUCwgdW5kZWZpbmVkLCB7XG4gICAgICAgICAgICBzZW5kTm93OiB0cnVlLFxuICAgICAgICAgICAgcXVldWVkOiB0cnVlLFxuICAgICAgICAgICAgcmVzcG9uc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQucmVtb3ZlKFNFU1NJT05fS0VZKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUucGF1c2VTZXNzaW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNyZWF0ZVJlcXVlc3QoQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLlBBVVNFX1NFU1NJT04sIHVuZGVmaW5lZCwge1xuICAgICAgICAgICAgc2VuZE5vdzogdHJ1ZSxcbiAgICAgICAgICAgIHF1ZXVlZDogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5yZXN1bWVTZXNzaW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9ldmVudHMuZW1pdCgncmVzdW1lJyk7XG4gICAgICAgIHRoaXMuY3JlYXRlUmVxdWVzdChDb25zdGFudHNfMS5kZWZhdWx0Lk1FVEhPRFMuUkVTVU1FX1NFU1NJT04sIHVuZGVmaW5lZCwge1xuICAgICAgICAgICAgc2VuZE5vdzogdHJ1ZSxcbiAgICAgICAgICAgIHF1ZXVlZDogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5wYXVzZVN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNyZWF0ZVJlcXVlc3QoQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLlBBVVNFX1NUQVRFLCB1bmRlZmluZWQsIHtcbiAgICAgICAgICAgIHF1ZXVlZDogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5yZXN1bWVTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jcmVhdGVSZXF1ZXN0KENvbnN0YW50c18xLmRlZmF1bHQuTUVUSE9EUy5SRVNVTUVfU1RBVEUsIHVuZGVmaW5lZCwge1xuICAgICAgICAgICAgcXVldWVkOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLmdldFVzZXJJZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xwUmVxdWVzdC51c2VySWQ7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5zZXRVc2VySWQgPSBmdW5jdGlvbiAodXNlcklkKSB7XG4gICAgICAgIHRoaXMuc2V0VXNlckF0dHJpYnV0ZXModXNlcklkKTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLnNldFVzZXJBdHRyaWJ1dGVzID0gZnVuY3Rpb24gKHVzZXJJZCwgdXNlckF0dHJpYnV0ZXMpIHtcbiAgICAgICAgaWYgKHVzZXJBdHRyaWJ1dGVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdXNlcklkID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHVzZXJBdHRyaWJ1dGVzID0gdXNlcklkO1xuICAgICAgICAgICAgICAgIHVzZXJJZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB1c2VySWQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0xlYW5wbHVtOiBzZXRVc2VyQXR0cmlidXRlcyBleHBlY3RzIGEgc3RyaW5nIG9yIGFuICcgK1xuICAgICAgICAgICAgICAgICAgICAnb2JqZWN0Jyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBhcmdzID0gbmV3IEFyZ3NCdWlsZGVyXzEuZGVmYXVsdCgpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLlVTRVJfQVRUUklCVVRFUywgdXNlckF0dHJpYnV0ZXMgPyBKU09OLnN0cmluZ2lmeSh1c2VyQXR0cmlidXRlcykgOiB1bmRlZmluZWQpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLk5FV19VU0VSX0lELCB1c2VySWQpO1xuICAgICAgICB0aGlzLl9ldmVudHMuZW1pdCgnc2V0VXNlckF0dHJpYnV0ZScsIHVzZXJBdHRyaWJ1dGVzKTtcbiAgICAgICAgdGhpcy5jcmVhdGVSZXF1ZXN0KENvbnN0YW50c18xLmRlZmF1bHQuTUVUSE9EUy5TRVRfVVNFUl9BVFRSSUJVVEVTLCBhcmdzLCB7XG4gICAgICAgICAgICBxdWV1ZWQ6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodXNlcklkKSB7XG4gICAgICAgICAgICB0aGlzLl9scFJlcXVlc3QudXNlcklkID0gdXNlcklkO1xuICAgICAgICAgICAgU3RvcmFnZU1hbmFnZXJfMS5kZWZhdWx0LnNhdmUoQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuVVNFUl9JRCwgdGhpcy5fbHBSZXF1ZXN0LnVzZXJJZCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLnRyYWNrID0gZnVuY3Rpb24gKGV2ZW50LCB2YWx1ZSwgaW5mbywgcGFyYW1zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHBhcmFtcyA9IHZhbHVlO1xuICAgICAgICAgICAgaW5mbyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHBhcmFtcyA9IGluZm87XG4gICAgICAgICAgICBpbmZvID0gdmFsdWU7XG4gICAgICAgICAgICB2YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgaW5mbyA9PT0gJ29iamVjdCcgJiYgaW5mbyAhPT0gbnVsbCAmJiBpbmZvICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHBhcmFtcyA9IGluZm87XG4gICAgICAgICAgICBpbmZvID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhcmdzID0gbmV3IEFyZ3NCdWlsZGVyXzEuZGVmYXVsdCgpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLkVWRU5ULCBldmVudClcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuVkFMVUUsIHZhbHVlIHx8IDAuMClcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuSU5GTywgaW5mbylcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuUEFSQU1TLCBKU09OLnN0cmluZ2lmeShwYXJhbXMpKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzLmVtaXQoJ3RyYWNrJywgeyBldmVudE5hbWU6IGV2ZW50LCBwYXJhbXM6IHBhcmFtcyB9KTtcbiAgICAgICAgdGhpcy5jcmVhdGVSZXF1ZXN0KENvbnN0YW50c18xLmRlZmF1bHQuTUVUSE9EUy5UUkFDSywgYXJncywge1xuICAgICAgICAgICAgcXVldWVkOiB0cnVlLFxuICAgICAgICAgICAgcmVzcG9uc2U6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnVwZGF0ZVNlc3Npb24oKTsgfSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS50cmFja1B1cmNoYXNlID0gZnVuY3Rpb24gKHZhbHVlLCBjdXJyZW5jeUNvZGUsIHBhcmFtcywgZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50ID09PSB2b2lkIDApIHsgZXZlbnQgPSAnUHVyY2hhc2UnOyB9XG4gICAgICAgIHZhciBhcmdzID0gbmV3IEFyZ3NCdWlsZGVyXzEuZGVmYXVsdCgpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLkVWRU5ULCBldmVudClcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuVkFMVUUsIHZhbHVlIHx8IDAuMClcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuUEFSQU1TLCBKU09OLnN0cmluZ2lmeShwYXJhbXMpKTtcbiAgICAgICAgaWYgKGN1cnJlbmN5Q29kZSkge1xuICAgICAgICAgICAgYXJncy5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuQ1VSUkVOQ1lfQ09ERSwgY3VycmVuY3lDb2RlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9ldmVudHMuZW1pdCgndHJhY2snLCB7IGV2ZW50TmFtZTogZXZlbnQgfSk7XG4gICAgICAgIHRoaXMuY3JlYXRlUmVxdWVzdChDb25zdGFudHNfMS5kZWZhdWx0Lk1FVEhPRFMuVFJBQ0ssIGFyZ3MsIHtcbiAgICAgICAgICAgIHF1ZXVlZDogdHJ1ZSxcbiAgICAgICAgICAgIGlzUHVyY2hhc2U6IHRydWUsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUuYWR2YW5jZVRvID0gZnVuY3Rpb24gKHN0YXRlLCBpbmZvLCBwYXJhbXMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbmZvID09PSAnb2JqZWN0JyAmJiBpbmZvICE9PSBudWxsICYmIGluZm8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcGFyYW1zID0gaW5mbztcbiAgICAgICAgICAgIGluZm8gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJnc0J1aWxkZXJfMS5kZWZhdWx0KClcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuU1RBVEUsIHN0YXRlKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5JTkZPLCBpbmZvKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5QQVJBTVMsIEpTT04uc3RyaW5naWZ5KHBhcmFtcykpO1xuICAgICAgICB0aGlzLl9ldmVudHMuZW1pdCgnYWR2YW5jZVN0YXRlJywgeyBzdGF0ZTogc3RhdGUsIHBhcmFtczogcGFyYW1zIH0pO1xuICAgICAgICB0aGlzLmNyZWF0ZVJlcXVlc3QoQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLkFEVkFOQ0UsIGFyZ3MsIHtcbiAgICAgICAgICAgIHF1ZXVlZDogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIHdlYiBwdXNoIGlzIHN1cHBvcnRlZCBpbiB0aGUgYnJvd3Nlci5cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSBUcnVlIGlmIHN1cHBvcnRlZCwgZWxzZSBmYWxzZS5cbiAgICAgKi9cbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5pc1dlYlB1c2hTdXBwb3J0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wdXNoTWFuYWdlci5pc1dlYlB1c2hTdXBwb3J0ZWQoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgd2ViIHB1c2ggaXMgc3Vic2NyaWJlZC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlcyBpZiB0cnVlLCByZWplY3RzIGlmIGZhbHNlLlxuICAgICAqL1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLmlzV2ViUHVzaFN1YnNjcmliZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIGNsaWVudFVybCA9ICgoX2EgPSB0aGlzLl93ZWJQdXNoT3B0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNsaWVudFVybCkgfHwgJyc7XG4gICAgICAgIHJldHVybiB0aGlzLl9wdXNoTWFuYWdlci5pc1dlYlB1c2hTdWJzY3JpYmVkKGNsaWVudFVybCk7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5zZXRXZWJQdXNoT3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX3dlYlB1c2hPcHRpb25zID0gX19hc3NpZ24oe30sIG9wdGlvbnMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgdGhlIGJyb3dzZXIgZm9yIHdlYiBwdXNoLlxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gICBzZXJ2aWNlV29ya2VyVXJsIFRoZSB1cmwgb24geW91ciBzZXJ2ZXIgdGhhdCBob3N0cyB0aGVcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvc3cubWluLmpzIHNlcnZpY2Ugd29ya2VyIGpzIGZpbGUuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gICAgICAgICAgICAgICAgICAgUmVzb2x2ZXMgaWYgcmVnaXN0cmF0aW9uIHN1Y2Nlc3NmdWwsXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJ3aXNlIGZhaWxzLlxuICAgICAqL1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLnJlZ2lzdGVyRm9yV2ViUHVzaCA9IGZ1bmN0aW9uIChzZXJ2aWNlV29ya2VyVXJsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLl9wdXNoTWFuYWdlci5pc1dlYlB1c2hTdXBwb3J0ZWQoKSkge1xuICAgICAgICAgICAgdmFyIHN1YnNjcmliZSA9IGZ1bmN0aW9uIChpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5fcHVzaE1hbmFnZXIuc3Vic2NyaWJlVXNlcigpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5fd2ViUHVzaE9wdGlvbnMgfHwge307XG4gICAgICAgICAgICB2YXIgd29ya2VyVXJsID0gc2VydmljZVdvcmtlclVybCB8fCBvcHRpb25zLnNlcnZpY2VXb3JrZXJVcmw7XG4gICAgICAgICAgICB2YXIgc2NvcGUgPSBvcHRpb25zICYmIG9wdGlvbnMuc2NvcGUgPyB7IHNjb3BlOiBvcHRpb25zLnNjb3BlIH0gOiBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3B1c2hNYW5hZ2VyLnJlZ2lzdGVyKHdvcmtlclVybCwgc2NvcGUsIHN1YnNjcmliZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ0xlYW5wbHVtOiBXZWJQdXNoIGlzIG5vdCBzdXBwb3J0ZWQuJyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFVucmVnaXN0ZXJzIHRoZSBicm93c2VyIGZvcm0gd2ViIHB1c2guXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gICAgICAgICAgICBSZXNvbHZlcyBvbiBzdWNjZXNzLCBvdGhlcndpc2UgcmVqZWN0cy5cbiAgICAgKi9cbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS51bnJlZ2lzdGVyRnJvbVdlYlB1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIGNsaWVudFVybCA9ICgoX2EgPSB0aGlzLl93ZWJQdXNoT3B0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNsaWVudFVybCkgfHwgJyc7XG4gICAgICAgIHJldHVybiB0aGlzLl9wdXNoTWFuYWdlci51bnN1YnNjcmliZVVzZXIoY2xpZW50VXJsKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENsZWFycyBjYWNoZWQgdmFsdWVzIGZvciBtZXNzYWdlcywgdmFyaWFibGVzIGFuZCB0ZXN0IGFzc2lnbm1lbnRzLlxuICAgICAqIFVzZSBzcGFyaW5nbHkgYXMgaWYgdGhlIGFwcCBpcyB1cGRhdGVkLCB5b3UnbGwgaGF2ZSB0byBkZWFsIHdpdGggcG90ZW50aWFsbHlcbiAgICAgKiBpbmNvbnNpc3RlbnQgc3RhdGUgb3IgdXNlciBleHBlcmllbmNlLlxuICAgICAqL1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLmNsZWFyVXNlckNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3ZhckNhY2hlLmNsZWFyVXNlckNvbnRlbnQoKTtcbiAgICB9O1xuICAgIC8vIHVzZWQgYnkgR29vZ2xlIFRhZyBNYW5hZ2VyIHRvIGFwcGx5IGNvbW1hbmRzIHF1ZXVlZCBkdXJpbmcgYXN5bmMgc2NyaXB0IGxvYWRpbmdcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5hcHBseVF1ZXVlID0gZnVuY3Rpb24gKHF1ZXVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKGludm9jYXRpb24pIHsgcmV0dXJuIF90aGlzW2ludm9jYXRpb24ubmFtZV0uYXBwbHkoX3RoaXMsIGludm9jYXRpb24uYXJncyk7IH0pO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUuY3JlYXRlUmVxdWVzdCA9IGZ1bmN0aW9uIChhY3Rpb24sIGFyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgdmFyIHN1cHByZXNzID0gdGhpcy5fbWlncmF0aW9uLmR1cGxpY2F0ZVJlcXVlc3QoYWN0aW9uLCBhcmdzLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKCFzdXBwcmVzcykge1xuICAgICAgICAgICAgdGhpcy5fbHBSZXF1ZXN0LnJlcXVlc3QoYWN0aW9uLCBhcmdzLCBfX2Fzc2lnbih7IGRldk1vZGU6IHRoaXMuX2ludGVybmFsU3RhdGUuZGV2TW9kZSB9LCBvcHRpb25zKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLmNvbm5lY3RTb2NrZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2xwU29ja2V0LmNvbm5lY3Qoe1xuICAgICAgICAgICAgYXBwSWQ6IHRoaXMuX2xwUmVxdWVzdC5hcHBJZCxcbiAgICAgICAgICAgIGRldmljZUlkOiB0aGlzLl9scFJlcXVlc3QuZGV2aWNlSWQsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUuaGFzQWN0aXZlU2Vzc2lvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9zZXNzaW9uTGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGN1cnJlbnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdmFyIGxhc3RBY3RpdmUgPSBwYXJzZUludChTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQuZ2V0KFNFU1NJT05fS0VZKSk7XG4gICAgICAgIGlmIChpc05hTihsYXN0QWN0aXZlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50VGltZSAtIGxhc3RBY3RpdmUgPCB0aGlzLl9zZXNzaW9uTGVuZ3RoICogMTAwMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUudXBkYXRlU2Vzc2lvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgU3RvcmFnZU1hbmFnZXJfMS5kZWZhdWx0LnNhdmUoU0VTU0lPTl9LRVksIFN0cmluZyhEYXRlLm5vdygpKSk7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5taWdyYXRlUHVzaFRva2VuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoU3RvcmFnZU1hbmFnZXJfMS5kZWZhdWx0LmdldChDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5QVVNIX1NVQlNDUklQVElPTikpIHtcbiAgICAgICAgICAgIC8vIG1vdmUgc3Vic2NyaXB0aW9uIGluIENUXG4gICAgICAgICAgICB0aGlzLmlzV2ViUHVzaFN1YnNjcmliZWQoKS50aGVuKGZ1bmN0aW9uIChpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgaWYgKGlzU3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fcHVzaE1hbmFnZXIudW5zdWJzY3JpYmVVc2VyKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZXJ2aWNlV29ya2VyUGF0aCA9IChfYSA9IF90aGlzLl93ZWJQdXNoT3B0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNlcnZpY2VXb3JrZXJVcmw7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXRoID0gc2VydmljZVdvcmtlclBhdGggPyB7IHNlcnZpY2VXb3JrZXJQYXRoOiBzZXJ2aWNlV29ya2VyUGF0aCB9IDoge307XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9jdCAmJiBfdGhpcy5fY3Qubm90aWZpY2F0aW9ucy5wdXNoKF9fYXNzaWduKHsgdGl0bGVUZXh0OiAnJywgYm9keVRleHQ6ICcnLCBva0J1dHRvblRleHQ6ICcnLCByZWplY3RCdXR0b25UZXh0OiAnJyB9LCBwYXRoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBMZWFucGx1bUludGVybmFsO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IExlYW5wbHVtSW50ZXJuYWw7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiAgQ29weXJpZ2h0IDIwMjAgTGVhbnBsdW0gSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEFyZ3NCdWlsZGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vQXJnc0J1aWxkZXJcIikpO1xudmFyIENvbnN0YW50c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0NvbnN0YW50c1wiKSk7XG52YXIgU3RvcmFnZU1hbmFnZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9TdG9yYWdlTWFuYWdlclwiKSk7XG52YXIgTmV0d29ya18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL05ldHdvcmtcIikpO1xudmFyIExlYW5wbHVtUmVxdWVzdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMZWFucGx1bVJlcXVlc3QoZXZlbnRzLCBuZXR3b3JrKSB7XG4gICAgICAgIGlmIChuZXR3b3JrID09PSB2b2lkIDApIHsgbmV0d29yayA9IG5ldyBOZXR3b3JrXzEuZGVmYXVsdCgpOyB9XG4gICAgICAgIHRoaXMuZXZlbnRzID0gZXZlbnRzO1xuICAgICAgICB0aGlzLm5ldHdvcmsgPSBuZXR3b3JrO1xuICAgICAgICB0aGlzLmNvb2xkb3duVGltZW91dCA9IG51bGw7XG4gICAgICAgIHRoaXMubGFzdFJlcXVlc3RUaW1lID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnVzZXJJZFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmFwaVBhdGggPSAnaHR0cHM6Ly9hcGkubGVhbnBsdW0uY29tL2FwaSc7XG4gICAgICAgIHRoaXMuYmF0Y2hDb29sZG93biA9IDU7XG4gICAgICAgIHRoaXMuYmF0Y2hFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5sb2FkSG9zdENvbmZpZygpO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTGVhbnBsdW1SZXF1ZXN0LnByb3RvdHlwZSwgXCJ1c2VySWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICByZXR1cm4gKF9iID0gKF9hID0gdGhpcy51c2VySWRWYWx1ZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdGhpcy5sb2FkTG9jYWwoQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuVVNFUl9JRCkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHRoaXMuZGV2aWNlSWQ7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHVzZXJJZCkge1xuICAgICAgICAgICAgdGhpcy51c2VySWRWYWx1ZSA9IHVzZXJJZDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIExlYW5wbHVtUmVxdWVzdC5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIChhY3Rpb24sIHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zIHx8IG5ldyBBcmdzQnVpbGRlcl8xLmRlZmF1bHQoKTtcbiAgICAgICAgLy8gR2V0IG9yIGNyZWF0ZSBkZXZpY2UgSUQgYW5kIHVzZXIgSUQuXG4gICAgICAgIGlmICghdGhpcy5kZXZpY2VJZCkge1xuICAgICAgICAgICAgdGhpcy5kZXZpY2VJZCA9IHRoaXMubG9hZExvY2FsKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLkRFVklDRV9JRCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmRldmljZUlkKSB7XG4gICAgICAgICAgICB2YXIgaWQgPSAnJztcbiAgICAgICAgICAgIHZhciBwb3NzaWJsZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSc7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZCArPSBwb3NzaWJsZS5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcG9zc2libGUubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRldmljZUlkID0gaWQ7XG4gICAgICAgICAgICB0aGlzLnNhdmVMb2NhbChDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5ERVZJQ0VfSUQsIGlkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNhdmVMb2NhbChDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5VU0VSX0lELCB0aGlzLnVzZXJJZCk7XG4gICAgICAgIHZhciBhcmdzQnVpbGRlciA9IHBhcmFtc1xuICAgICAgICAgICAgLmF0dGFjaEFwaUtleXModGhpcy5hcHBJZCwgdGhpcy5jbGllbnRLZXkpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLlNES19WRVJTSU9OLCBDb25zdGFudHNfMS5kZWZhdWx0LlNES19WRVJTSU9OKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5ERVZJQ0VfSUQsIHRoaXMuZGV2aWNlSWQpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLlVTRVJfSUQsIHRoaXMudXNlcklkKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5BQ1RJT04sIGFjdGlvbilcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuVkVSU0lPTl9OQU1FLCB0aGlzLnZlcnNpb25OYW1lKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5ERVZfTU9ERSwgb3B0aW9ucy5kZXZNb2RlKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5USU1FLCAobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKS50b1N0cmluZygpKTtcbiAgICAgICAgdmFyIHN1Y2Nlc3MgPSBvcHRpb25zLnN1Y2Nlc3MgfHwgb3B0aW9ucy5yZXNwb25zZTtcbiAgICAgICAgdmFyIGVycm9yID0gb3B0aW9ucy5lcnJvciB8fCBvcHRpb25zLnJlc3BvbnNlO1xuICAgICAgICBpZiAoIXRoaXMuYXBwSWQgfHwgIXRoaXMuY2xpZW50S2V5KSB7XG4gICAgICAgICAgICB2YXIgZXJyID0gJ0xlYW5wbHVtIEFwcCBJRCBhbmQgY2xpZW50IGtleSBhcmUgbm90IHNldC4gTWFrZSBzdXJlIHlvdSAnICtcbiAgICAgICAgICAgICAgICAnYXJlIGNhbGxpbmcgc2V0QXBwSWRGb3JEZXZlbG9wbWVudE1vZGUgb3Igc2V0QXBwSWRGb3JQcm9kdWN0aW9uTW9kZSAnICtcbiAgICAgICAgICAgICAgICAnYmVmb3JlIGlzc3VpbmcgQVBJIGNhbGxzLic7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1zLmJvZHkoKSkge1xuICAgICAgICAgICAgdGhpcy5zZW5kUmVxdWVzdChcIj9cIi5jb25jYXQoYXJnc0J1aWxkZXIuYnVpbGQoKSksIHBhcmFtcy5ib2R5KCksIHN1Y2Nlc3MsIGVycm9yLCBvcHRpb25zLnF1ZXVlZCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNlbmROb3cgPSBvcHRpb25zLmRldk1vZGUgfHwgb3B0aW9ucy5zZW5kTm93IHx8ICF0aGlzLmJhdGNoRW5hYmxlZDtcbiAgICAgICAgdmFyIHNlbmRVbnNlbnRSZXF1ZXN0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXF1ZXN0c1RvU2VuZCA9IF90aGlzLnBvcFVuc2VudFJlcXVlc3RzKCk7XG4gICAgICAgICAgICBpZiAocmVxdWVzdHNUb1NlbmQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHZhciByZXF1ZXN0RGF0YSA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgJ2RhdGEnOiByZXF1ZXN0c1RvU2VuZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB2YXIgbXVsdGlSZXF1ZXN0QXJncyA9IG5ldyBBcmdzQnVpbGRlcl8xLmRlZmF1bHQoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0YWNoQXBpS2V5cyhfdGhpcy5hcHBJZCwgX3RoaXMuY2xpZW50S2V5KVxuICAgICAgICAgICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLlNES19WRVJTSU9OLCBDb25zdGFudHNfMS5kZWZhdWx0LlNES19WRVJTSU9OKVxuICAgICAgICAgICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLkFDVElPTiwgQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLk1VTFRJKVxuICAgICAgICAgICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLlRJTUUsIChuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDApLnRvU3RyaW5nKCkudG9TdHJpbmcoKSlcbiAgICAgICAgICAgICAgICAgICAgLmJ1aWxkKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2VuZFJlcXVlc3QoXCI/XCIuY29uY2F0KG11bHRpUmVxdWVzdEFyZ3MpLCByZXF1ZXN0RGF0YSwgc3VjY2VzcywgZXJyb3IsIG9wdGlvbnMucXVldWVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gRGVhbCB3aXRoIGNvb2xkb3duLlxuICAgICAgICBpZiAoIXNlbmROb3cgJiYgdGhpcy5iYXRjaENvb2xkb3duKSB7XG4gICAgICAgICAgICB2YXIgbm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmxhc3RSZXF1ZXN0VGltZSB8fCBub3cgLSB0aGlzLmxhc3RSZXF1ZXN0VGltZSA+PSB0aGlzLmJhdGNoQ29vbGRvd24pIHtcbiAgICAgICAgICAgICAgICBzZW5kTm93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RSZXF1ZXN0VGltZSA9IG5vdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCF0aGlzLmNvb2xkb3duVGltZW91dCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29vbGRvd25UaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNvb2xkb3duVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmxhc3RSZXF1ZXN0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMDtcbiAgICAgICAgICAgICAgICAgICAgc2VuZFVuc2VudFJlcXVlc3RzKCk7XG4gICAgICAgICAgICAgICAgfSwgKHRoaXMuYmF0Y2hDb29sZG93biAtIChub3cgLSB0aGlzLmxhc3RSZXF1ZXN0VGltZSkpICogMTAwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zYXZlUmVxdWVzdEZvckxhdGVyKGFyZ3NCdWlsZGVyLmJ1aWxkRGljdCgpKTtcbiAgICAgICAgaWYgKHNlbmROb3cpIHtcbiAgICAgICAgICAgIHNlbmRVbnNlbnRSZXF1ZXN0cygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBMZWFucGx1bVJlcXVlc3QucHJvdG90eXBlLmdldEZpbGVVcmwgPSBmdW5jdGlvbiAoZmlsZW5hbWUpIHtcbiAgICAgICAgaWYgKCFmaWxlbmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIGlmICgvXmh0dHBzPzovLnRlc3QoZmlsZW5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmlsZW5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJnc0J1aWxkZXJfMS5kZWZhdWx0KClcbiAgICAgICAgICAgIC5hdHRhY2hBcGlLZXlzKHRoaXMuYXBwSWQsIHRoaXMuY2xpZW50S2V5KVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5TREtfVkVSU0lPTiwgQ29uc3RhbnRzXzEuZGVmYXVsdC5TREtfVkVSU0lPTilcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuQUNUSU9OLCAnZG93bmxvYWRGaWxlJylcbiAgICAgICAgICAgIC5hZGQoJ2ZpbGVuYW1lJywgZmlsZW5hbWUpO1xuICAgICAgICByZXR1cm4gXCJcIi5jb25jYXQodGhpcy5hcGlQYXRoLCBcIj9cIikuY29uY2F0KGFyZ3MuYnVpbGQoKSk7XG4gICAgfTtcbiAgICBMZWFucGx1bVJlcXVlc3QucHJvdG90eXBlLnNldE5ldHdvcmtUaW1lb3V0ID0gZnVuY3Rpb24gKHNlY29uZHMpIHtcbiAgICAgICAgdGhpcy5uZXR3b3JrLnNldE5ldHdvcmtUaW1lb3V0KHNlY29uZHMpO1xuICAgIH07XG4gICAgTGVhbnBsdW1SZXF1ZXN0LnByb3RvdHlwZS5nZXRMYXN0UmVzcG9uc2UgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIHZhciBjb3VudCA9IChfYiA9IChfYSA9IHJlc3BvbnNlID09PSBudWxsIHx8IHJlc3BvbnNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXNwb25zZS5yZXNwb25zZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMDtcbiAgICAgICAgcmV0dXJuIChjb3VudCA+IDApID8gKF9jID0gcmVzcG9uc2UgPT09IG51bGwgfHwgcmVzcG9uc2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlc3BvbnNlLnJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2NbY291bnQgLSAxXSA6IG51bGw7XG4gICAgfTtcbiAgICBMZWFucGx1bVJlcXVlc3QucHJvdG90eXBlLmdldEZpcnN0UmVzcG9uc2UgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIHZhciBjb3VudCA9IChfYiA9IChfYSA9IHJlc3BvbnNlID09PSBudWxsIHx8IHJlc3BvbnNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXNwb25zZS5yZXNwb25zZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMDtcbiAgICAgICAgcmV0dXJuIChjb3VudCA+IDApID8gKF9jID0gcmVzcG9uc2UgPT09IG51bGwgfHwgcmVzcG9uc2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlc3BvbnNlLnJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2NbMF0gOiBudWxsO1xuICAgIH07XG4gICAgTGVhbnBsdW1SZXF1ZXN0LnByb3RvdHlwZS5pc1Jlc3BvbnNlU3VjY2VzcyA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbihyZXNwb25zZSA9PT0gbnVsbCB8fCByZXNwb25zZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVzcG9uc2Uuc3VjY2Vzcyk7XG4gICAgfTtcbiAgICBMZWFucGx1bVJlcXVlc3QucHJvdG90eXBlLnNhdmVSZXF1ZXN0Rm9yTGF0ZXIgPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICB2YXIgY291bnQgPSB0aGlzLmxvYWRMb2NhbChDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5DT1VOVCkgfHwgMDtcbiAgICAgICAgdmFyIGl0ZW1LZXkgPSBDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5JVEVNICsgY291bnQ7XG4gICAgICAgIHRoaXMuc2F2ZUxvY2FsKGl0ZW1LZXksIEpTT04uc3RyaW5naWZ5KGFyZ3MpKTtcbiAgICAgICAgY291bnQrKztcbiAgICAgICAgdGhpcy5zYXZlTG9jYWwoQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuQ09VTlQsIGNvdW50KTtcbiAgICB9O1xuICAgIExlYW5wbHVtUmVxdWVzdC5wcm90b3R5cGUuc2VuZFJlcXVlc3QgPSBmdW5jdGlvbiAocXVlcnksIGRhdGEsIHN1Y2Nlc3MsIGVycm9yLCBxdWV1ZWQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5uZXR3b3JrLmFqYXgoJ1BPU1QnLCBcIlwiLmNvbmNhdCh0aGlzLmFwaVBhdGgpLmNvbmNhdChxdWVyeSksIGRhdGEsIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgdmFyIG1ldGhvZFJlc3BvbnNlID0gX3RoaXMuZ2V0Rmlyc3RSZXNwb25zZShyZXNwb25zZSk7XG4gICAgICAgICAgICB2YXIgc2hhMjU2ID0gKChfYSA9IHJlc3BvbnNlLm1pZ3JhdGVTdGF0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNoYTI1NikgfHwgbWV0aG9kUmVzcG9uc2Uuc2hhMjU2O1xuICAgICAgICAgICAgaWYgKCEvXFxiZ2V0TWlncmF0ZVN0YXRlXFxiLy50ZXN0KGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZXZlbnRzLmVtaXQoJ21pZ3JhdGVTdGF0ZVJlY2VpdmVkJywgc2hhMjU2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbWV0aG9kUmVzcG9uc2Uuc3VjY2VzcyAmJiBtZXRob2RSZXNwb25zZS5hcGlIb3N0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGFwaUhvc3QgPSBtZXRob2RSZXNwb25zZS5hcGlIb3N0LCBhcGlQYXRoID0gbWV0aG9kUmVzcG9uc2UuYXBpUGF0aCwgZGV2U2VydmVySG9zdCA9IG1ldGhvZFJlc3BvbnNlLmRldlNlcnZlckhvc3Q7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2F2ZUxvY2FsKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLkhPU1RfQ09ORklHLCBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgIGFwaUhvc3Q6IGFwaUhvc3QsXG4gICAgICAgICAgICAgICAgICAgIGFwaVBhdGg6IGFwaVBhdGgsXG4gICAgICAgICAgICAgICAgICAgIGRldlNlcnZlckhvc3Q6IGRldlNlcnZlckhvc3QsXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIF90aGlzLmFwaVBhdGggPSBcImh0dHBzOi8vXCIuY29uY2F0KGFwaUhvc3QsIFwiL1wiKS5jb25jYXQoYXBpUGF0aCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2VuZFJlcXVlc3QocXVlcnksIGRhdGEsIHN1Y2Nlc3MsIGVycm9yLCBxdWV1ZWQpO1xuICAgICAgICAgICAgICAgIF90aGlzLmV2ZW50cy5lbWl0KCd1cGRhdGVEZXZTZXJ2ZXJIb3N0JywgZGV2U2VydmVySG9zdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgc3VjY2VzcyhyZXNwb25zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGVycm9yLCBxdWV1ZWQpO1xuICAgIH07XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBMZWFucGx1bVJlcXVlc3QucHJvdG90eXBlLnBvcFVuc2VudFJlcXVlc3RzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcmVxdWVzdERhdGEgPSBbXTtcbiAgICAgICAgdmFyIGNvdW50ID0gdGhpcy5sb2FkTG9jYWwoQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuQ09VTlQpIHx8IDA7XG4gICAgICAgIHRoaXMucmVtb3ZlTG9jYWwoQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuQ09VTlQpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtS2V5ID0gQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuSVRFTSArIGk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJlcXVlc3REYXRhLnB1c2goSlNPTi5wYXJzZSh0aGlzLmxvYWRMb2NhbChpdGVtS2V5KSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGlnbm9yZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBEbyBub3RoaW5nLlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZW1vdmVMb2NhbChpdGVtS2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVxdWVzdERhdGE7XG4gICAgfTtcbiAgICBMZWFucGx1bVJlcXVlc3QucHJvdG90eXBlLmxvYWRIb3N0Q29uZmlnID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaG9zdENvbmZpZyA9IEpTT04ucGFyc2UodGhpcy5sb2FkTG9jYWwoQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuSE9TVF9DT05GSUcpIHx8ICdudWxsJyk7XG4gICAgICAgIGlmIChob3N0Q29uZmlnKSB7XG4gICAgICAgICAgICB2YXIgYXBpSG9zdCA9IGhvc3RDb25maWcuYXBpSG9zdCwgYXBpUGF0aCA9IGhvc3RDb25maWcuYXBpUGF0aCwgZGV2U2VydmVySG9zdCA9IGhvc3RDb25maWcuZGV2U2VydmVySG9zdDtcbiAgICAgICAgICAgIHRoaXMuYXBpUGF0aCA9IFwiaHR0cHM6Ly9cIi5jb25jYXQoYXBpSG9zdCwgXCIvXCIpLmNvbmNhdChhcGlQYXRoKTtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzLmVtaXQoJ3VwZGF0ZURldlNlcnZlckhvc3QnLCBkZXZTZXJ2ZXJIb3N0KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTGVhbnBsdW1SZXF1ZXN0LnByb3RvdHlwZS5sb2FkTG9jYWwgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQuZ2V0KGtleSk7XG4gICAgfTtcbiAgICBMZWFucGx1bVJlcXVlc3QucHJvdG90eXBlLnNhdmVMb2NhbCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIFN0b3JhZ2VNYW5hZ2VyXzEuZGVmYXVsdC5zYXZlKGtleSwgdmFsdWUpO1xuICAgIH07XG4gICAgTGVhbnBsdW1SZXF1ZXN0LnByb3RvdHlwZS5yZW1vdmVMb2NhbCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgU3RvcmFnZU1hbmFnZXJfMS5kZWZhdWx0LnJlbW92ZShrZXkpO1xuICAgIH07XG4gICAgcmV0dXJuIExlYW5wbHVtUmVxdWVzdDtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBMZWFucGx1bVJlcXVlc3Q7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKlxuICogIENvcHlyaWdodCAyMDIwIExlYW5wbHVtIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGxvZGFzaF9pc2VxdWFsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImxvZGFzaC5pc2VxdWFsXCIpKTtcbnZhciBBcmdzQnVpbGRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0FyZ3NCdWlsZGVyXCIpKTtcbnZhciBDb25zdGFudHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9Db25zdGFudHNcIikpO1xudmFyIFNvY2tldElvQ2xpZW50XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vU29ja2V0SW9DbGllbnRcIikpO1xudmFyIExlYW5wbHVtU29ja2V0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExlYW5wbHVtU29ja2V0KGNhY2hlLCBjcmVhdGVSZXF1ZXN0LCBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGdldExhc3RSZXNwb25zZSwgZXZlbnRzKSB7XG4gICAgICAgIHRoaXMuY2FjaGUgPSBjYWNoZTtcbiAgICAgICAgdGhpcy5jcmVhdGVSZXF1ZXN0ID0gY3JlYXRlUmVxdWVzdDtcbiAgICAgICAgdGhpcy5nZXRMYXN0UmVzcG9uc2UgPSBnZXRMYXN0UmVzcG9uc2U7XG4gICAgICAgIHRoaXMuZXZlbnRzID0gZXZlbnRzO1xuICAgICAgICB0aGlzLm5ldHdvcmtUaW1lb3V0U2Vjb25kcyA9IDEwO1xuICAgICAgICB0aGlzLnNvY2tldENsaWVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuc29ja2V0SG9zdCA9ICdkZXYubGVhbnBsdW0uY29tJztcbiAgICAgICAgdGhpcy5hdXRoID0gbnVsbDtcbiAgICB9XG4gICAgTGVhbnBsdW1Tb2NrZXQucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAoYXV0aCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIVdlYlNvY2tldCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1lvdXIgYnJvd3NlciBkb2VzblxcJ3Qgc3VwcG9ydCBXZWJTb2NrZXRzLicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXV0aCA9IGF1dGg7XG4gICAgICAgIHZhciBhdXRoU2VudCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNvY2tldENsaWVudCA9IG5ldyBTb2NrZXRJb0NsaWVudF8xLmRlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5zb2NrZXRDbGllbnQuc2V0TmV0d29ya1RpbWVvdXQodGhpcy5uZXR3b3JrVGltZW91dFNlY29uZHMpO1xuICAgICAgICB0aGlzLnNvY2tldENsaWVudC5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBpZiAoIWF1dGhTZW50KSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0xlYW5wbHVtOiBDb25uZWN0ZWQgdG8gZGV2ZWxvcG1lbnQgc2VydmVyLicpO1xuICAgICAgICAgICAgICAgIF90aGlzLnNvY2tldENsaWVudC5zZW5kKCdhdXRoJywgKF9hID0ge30sXG4gICAgICAgICAgICAgICAgICAgIF9hW0NvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLkFQUF9JRF0gPSBhdXRoLmFwcElkLFxuICAgICAgICAgICAgICAgICAgICBfYVtDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5ERVZJQ0VfSURdID0gYXV0aC5kZXZpY2VJZCxcbiAgICAgICAgICAgICAgICAgICAgX2EpKTtcbiAgICAgICAgICAgICAgICBhdXRoU2VudCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc29ja2V0Q2xpZW50Lm9uZXJyb3IgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdMZWFucGx1bTogU29ja2V0IGVycm9yJywgZXZlbnQpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNvY2tldENsaWVudC5vbm1lc3NhZ2UgPSB0aGlzLm9uTWVzc2FnZVJlY2VpdmVkLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc29ja2V0Q2xpZW50Lm9uY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnTGVhbnBsdW06IERpc2Nvbm5lY3RlZCBmcm9tIGRldmVsb3BtZW50IHNlcnZlci4nKTtcbiAgICAgICAgICAgIGF1dGhTZW50ID0gZmFsc2U7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc29ja2V0Q2xpZW50LmNvbm5lY3QodGhpcy5zb2NrZXRIb3N0KTtcbiAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5zb2NrZXRDbGllbnQuY29ubmVjdGVkICYmICFfdGhpcy5zb2NrZXRDbGllbnQuY29ubmVjdGluZykge1xuICAgICAgICAgICAgICAgIF90aGlzLnNvY2tldENsaWVudC5jb25uZWN0KF90aGlzLnNvY2tldEhvc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCA1MDAwKTtcbiAgICB9O1xuICAgIExlYW5wbHVtU29ja2V0LnByb3RvdHlwZS5zZXRTb2NrZXRIb3N0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc29ja2V0SG9zdCA9IHZhbHVlO1xuICAgICAgICBpZiAodGhpcy5zb2NrZXRDbGllbnQuY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLnNvY2tldENsaWVudC5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3QodGhpcy5hdXRoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbmV0d29yayB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSBzZWNvbmRzIFRoZSB0aW1lb3V0IGluIHNlY29uZHMuXG4gICAgICovXG4gICAgTGVhbnBsdW1Tb2NrZXQucHJvdG90eXBlLnNldE5ldHdvcmtUaW1lb3V0ID0gZnVuY3Rpb24gKHNlY29uZHMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLm5ldHdvcmtUaW1lb3V0U2Vjb25kcyA9IHNlY29uZHM7XG4gICAgICAgIChfYSA9IHRoaXMuc29ja2V0Q2xpZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0TmV0d29ya1RpbWVvdXQoc2Vjb25kcyk7XG4gICAgfTtcbiAgICBMZWFucGx1bVNvY2tldC5wcm90b3R5cGUub25NZXNzYWdlUmVjZWl2ZWQgPSBmdW5jdGlvbiAoZXZlbnQsIGFyZ3MpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKGV2ZW50ID09PSAndXBkYXRlVmFycycpIHtcbiAgICAgICAgICAgIHZhciBhcmdzXzEgPSBuZXcgQXJnc0J1aWxkZXJfMS5kZWZhdWx0KCkuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLklOQ0xVREVfREVGQVVMVFMsIGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlUmVxdWVzdChDb25zdGFudHNfMS5kZWZhdWx0Lk1FVEhPRFMuR0VUX1ZBUlMsIGFyZ3NfMSwge1xuICAgICAgICAgICAgICAgIHF1ZXVlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2VuZE5vdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICByZXNwb25zZTogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBnZXRWYXJzUmVzcG9uc2UgPSBfdGhpcy5nZXRMYXN0UmVzcG9uc2UocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVzID0gZ2V0VmFyc1Jlc3BvbnNlW0NvbnN0YW50c18xLmRlZmF1bHQuS0VZUy5WQVJTXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhcmlhbnRzID0gZ2V0VmFyc1Jlc3BvbnNlW0NvbnN0YW50c18xLmRlZmF1bHQuS0VZUy5WQVJJQU5UU107XG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpb25EZWZpbml0aW9ucyA9IGdldFZhcnNSZXNwb25zZVtDb25zdGFudHNfMS5kZWZhdWx0LktFWVMuQUNUSU9OX0RFRklOSVRJT05TXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoMCwgbG9kYXNoX2lzZXF1YWxfMS5kZWZhdWx0KSh2YWx1ZXMsIF90aGlzLmNhY2hlLmRpZmZzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY2FjaGUuYXBwbHlEaWZmcyh2YWx1ZXMsIHZhcmlhbnRzLCBhY3Rpb25EZWZpbml0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXZlbnQgPT09ICdnZXRWYXJpYWJsZXMnKSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlLnNlbmRWYXJpYWJsZXMoKTtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0Q2xpZW50LnNlbmQoJ2dldENvbnRlbnRSZXNwb25zZScsIHtcbiAgICAgICAgICAgICAgICAndXBkYXRlZCc6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChldmVudCA9PT0gJ2dldEFjdGlvbnMnKSB7XG4gICAgICAgICAgICB2YXIgdXBkYXRlZCA9IHRoaXMuY2FjaGUuc2VuZEFjdGlvbnMoKTtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0Q2xpZW50LnNlbmQoJ2dldENvbnRlbnRSZXNwb25zZScsIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVkOiB1cGRhdGVkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXZlbnQgPT09ICdyZWdpc3RlckRldmljZScpIHtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gYXJnc1swXTtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hbGVydFxuICAgICAgICAgICAgYWxlcnQoXCJZb3VyIGRldmljZSBoYXMgYmVlbiByZWdpc3RlcmVkIHRvIFwiLmNvbmNhdChtZXNzYWdlLmVtYWlsLCBcIi5cIikpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGV2ZW50ID09PSAndHJpZ2dlcicpIHtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gYXJnc1swXTtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzLmVtaXQoJ3ByZXZpZXdSZXF1ZXN0JywgbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBMZWFucGx1bVNvY2tldDtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBMZWFucGx1bVNvY2tldDtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBDb25zdGFudHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9Db25zdGFudHNcIikpO1xudmFyIEFyZ3NCdWlsZGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vQXJnc0J1aWxkZXJcIikpO1xudmFyIE5ldHdvcmtfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9OZXR3b3JrXCIpKTtcbnZhciBsb2Rhc2hfaXNlcXVhbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJsb2Rhc2guaXNlcXVhbFwiKSk7XG52YXIgU3RvcmFnZU1hbmFnZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9TdG9yYWdlTWFuYWdlclwiKSk7XG52YXIgVmFsdWVUcmFuc2Zvcm1zXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vVmFsdWVUcmFuc2Zvcm1zXCIpKTtcbnZhciBPY2N1cnJlbmNlVHJhY2tlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPY2N1cnJlbmNlVHJhY2tlcigpIHtcbiAgICAgICAgdGhpcy5zZXNzaW9uID0ge307XG4gICAgICAgIHRoaXMudHJpZ2dlcnMgPSB7fTtcbiAgICAgICAgdGhpcy5vY2N1cnJlbmNlcyA9IHt9O1xuICAgIH1cbiAgICBPY2N1cnJlbmNlVHJhY2tlci5wcm90b3R5cGUucmVjb3JkT2NjdXJyZW5jZSA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB2YXIgc2Vzc2lvbk9jY3VycmVuY2VzID0gKHRoaXMuc2Vzc2lvbltpZF0gfHwgMCkgKyAxO1xuICAgICAgICB0aGlzLnNlc3Npb25baWRdID0gc2Vzc2lvbk9jY3VycmVuY2VzO1xuICAgICAgICB2YXIgb2NjdXJyZW5jZXMgPSAodGhpcy5vY2N1cnJlbmNlc1tpZF0gfHwgW10pO1xuICAgICAgICBvY2N1cnJlbmNlcy5wdXNoKERhdGUubm93KCkpO1xuICAgICAgICB0aGlzLm9jY3VycmVuY2VzW2lkXSA9IG9jY3VycmVuY2VzO1xuICAgICAgICB0aGlzLnNhdmUoKTtcbiAgICB9O1xuICAgIE9jY3VycmVuY2VUcmFja2VyLnByb3RvdHlwZS5yZWNvcmRUcmlnZ2VyT2NjdXJyZW5jZSA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB2YXIgdHJpZ2dlck9jY3VycmVuY2VzID0gdGhpcy50cmlnZ2Vyc1tpZF0gfHwgW107XG4gICAgICAgIHRyaWdnZXJPY2N1cnJlbmNlcy5wdXNoKERhdGUubm93KCkpO1xuICAgICAgICB0aGlzLnRyaWdnZXJzW2lkXSA9IHRyaWdnZXJPY2N1cnJlbmNlcztcbiAgICAgICAgdGhpcy5zYXZlKCk7XG4gICAgICAgIHJldHVybiB0cmlnZ2VyT2NjdXJyZW5jZXMubGVuZ3RoO1xuICAgIH07XG4gICAgT2NjdXJyZW5jZVRyYWNrZXIucHJvdG90eXBlLmdldFNlc3Npb25PY2N1cnJhbmNlQ291bnQgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2Vzc2lvbltpZF0gfHwgMDtcbiAgICB9O1xuICAgIE9jY3VycmVuY2VUcmFja2VyLnByb3RvdHlwZS5nZXRPY2N1cnJlbmNlcyA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vY2N1cnJlbmNlc1tpZF0gfHwgW107XG4gICAgfTtcbiAgICBPY2N1cnJlbmNlVHJhY2tlci5wcm90b3R5cGUuY2xlYXJTZXNzaW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnNlc3Npb24gPSB7fTtcbiAgICB9O1xuICAgIE9jY3VycmVuY2VUcmFja2VyLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY2FjaGUgPSBTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQuZ2V0KENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLk1FU1NBR0VfT0NDVVJSRU5DRVMpO1xuICAgICAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgICAgIHZhciBqc29uID0gbWF5YmVKU09OKGNhY2hlKTtcbiAgICAgICAgICAgIGlmIChqc29uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXNzaW9uID0ganNvbi5zZXNzaW9uO1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcnMgPSBqc29uLnRyaWdnZXJzO1xuICAgICAgICAgICAgICAgIHRoaXMub2NjdXJyZW5jZXMgPSBqc29uLm9jY3VycmVuY2VzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBPY2N1cnJlbmNlVHJhY2tlci5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGtleSA9IENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLk1FU1NBR0VfT0NDVVJSRU5DRVM7XG4gICAgICAgIFN0b3JhZ2VNYW5hZ2VyXzEuZGVmYXVsdC5zYXZlKGtleSwgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgc2Vzc2lvbjogdGhpcy5zZXNzaW9uLFxuICAgICAgICAgICAgdHJpZ2dlcnM6IHRoaXMudHJpZ2dlcnMsXG4gICAgICAgICAgICBvY2N1cnJlbmNlczogdGhpcy5vY2N1cnJlbmNlcyxcbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgcmV0dXJuIE9jY3VycmVuY2VUcmFja2VyO1xufSgpKTtcbnZhciB2ZXJiVG9JbnRlcnZhbCA9IGZ1bmN0aW9uICh2ZXJiKSB7XG4gICAgdmFyIFNFQ09ORCA9IDEwMDA7XG4gICAgdmFyIE1JTlVURSA9IDYwICogU0VDT05EO1xuICAgIHZhciBIT1VSID0gNjAgKiBNSU5VVEU7XG4gICAgdmFyIERBWSA9IDI0ICogSE9VUjtcbiAgICBzd2l0Y2ggKHZlcmIpIHtcbiAgICAgICAgY2FzZSAnbGltaXRTZWNvbmQnOiByZXR1cm4gU0VDT05EO1xuICAgICAgICBjYXNlICdsaW1pdE1pbnV0ZSc6IHJldHVybiBNSU5VVEU7XG4gICAgICAgIGNhc2UgJ2xpbWl0SG91cic6IHJldHVybiBIT1VSO1xuICAgICAgICBjYXNlICdsaW1pdERheSc6IHJldHVybiBEQVk7XG4gICAgfVxufTtcbnZhciBtYXliZUpTT04gPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59O1xudmFyIE1lc3NhZ2VzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1lc3NhZ2VzKGV2ZW50cywgY3JlYXRlUmVxdWVzdCwgZ2V0RmlsZVVybCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmV2ZW50cyA9IGV2ZW50cztcbiAgICAgICAgdGhpcy5jcmVhdGVSZXF1ZXN0ID0gY3JlYXRlUmVxdWVzdDtcbiAgICAgICAgdGhpcy5nZXRGaWxlVXJsID0gZ2V0RmlsZVVybDtcbiAgICAgICAgdGhpcy5fbWVzc2FnZUNhY2hlID0ge307XG4gICAgICAgIHRoaXMub2NjdXJyZW5jZVRyYWNrZXIgPSBuZXcgT2NjdXJyZW5jZVRyYWNrZXIoKTtcbiAgICAgICAgdGhpcy5fc2hvd1JpY2hJQU0gPSBmYWxzZTtcbiAgICAgICAgZXZlbnRzLm9uKCdwcmV2aWV3UmVxdWVzdCcsIHRoaXMub25NZXNzYWdlUHJldmlldy5iaW5kKHRoaXMpKTtcbiAgICAgICAgZXZlbnRzLm9uKCdtZXNzYWdlc1JlY2VpdmVkJywgdGhpcy5vbk1lc3NhZ2VzUmVjZWl2ZWQuYmluZCh0aGlzKSk7XG4gICAgICAgIGV2ZW50cy5vbignc3RhcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5vY2N1cnJlbmNlVHJhY2tlci5sb2FkKCk7XG4gICAgICAgICAgICBfdGhpcy5vY2N1cnJlbmNlVHJhY2tlci5jbGVhclNlc3Npb24oKTtcbiAgICAgICAgICAgIF90aGlzLm9uVHJpZ2dlcih7IHRyaWdnZXI6ICdzdGFydCcgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBldmVudHMub24oJ3Jlc3VtZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5NRVNTQUdFX0NBQ0hFO1xuICAgICAgICAgICAgdmFyIGNhY2hlID0gbWF5YmVKU09OKFN0b3JhZ2VNYW5hZ2VyXzEuZGVmYXVsdC5nZXQoa2V5KSk7XG4gICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUNhY2hlID0gY2FjaGUgfHwgX3RoaXMuX21lc3NhZ2VDYWNoZTtcbiAgICAgICAgICAgIF90aGlzLm9jY3VycmVuY2VUcmFja2VyLmxvYWQoKTtcbiAgICAgICAgICAgIF90aGlzLm9uVHJpZ2dlcih7IHRyaWdnZXI6ICdyZXN1bWUnIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgZXZlbnRzLm9uKCd0cmFjaycsIGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgICBfdGhpcy5vblRyaWdnZXIoe1xuICAgICAgICAgICAgICAgIHRyaWdnZXI6ICdldmVudCcsXG4gICAgICAgICAgICAgICAgZXZlbnROYW1lOiBhcmdzLmV2ZW50TmFtZSxcbiAgICAgICAgICAgICAgICBwYXJhbXM6IGFyZ3MucGFyYW1zIHx8IHt9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBldmVudHMub24oJ2FkdmFuY2VTdGF0ZScsIGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMub25UcmlnZ2VyKHtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyOiAnc3RhdGUnLFxuICAgICAgICAgICAgICAgIHN0YXRlOiBhcmdzLnN0YXRlLFxuICAgICAgICAgICAgICAgIHBhcmFtczogYXJncy5wYXJhbXMgfHwge30sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGV2ZW50cy5vbignc2V0VXNlckF0dHJpYnV0ZScsIGZ1bmN0aW9uIChhdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMub25UcmlnZ2VyKHsgdHJpZ2dlcjogJ3VzZXJBdHRyaWJ1dGUnLCBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgTWVzc2FnZXMucHJvdG90eXBlLmNsZWFudXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIFN0b3JhZ2VNYW5hZ2VyXzEuZGVmYXVsdC5yZW1vdmUoQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuTUVTU0FHRV9DQUNIRSk7XG4gICAgICAgIHRoaXMuX21lc3NhZ2VDYWNoZSA9IHt9O1xuICAgICAgICB0aGlzLm9uVHJpZ2dlciA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICB9O1xuICAgIE1lc3NhZ2VzLnByb3RvdHlwZS5lbmFibGVSaWNoSW5BcHBNZXNzYWdlcyA9IGZ1bmN0aW9uIChlbmFibGVkKSB7XG4gICAgICAgIHRoaXMuX3Nob3dSaWNoSUFNID0gZW5hYmxlZDtcbiAgICB9O1xuICAgIE1lc3NhZ2VzLnByb3RvdHlwZS5vblRyaWdnZXIgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgbWVzc2FnZXMgPSB0aGlzLmdldE1lc3NhZ2VzKCk7XG4gICAgICAgIHZhciBtZXNzYWdlSWRzID0gT2JqZWN0LmtleXMobWVzc2FnZXMpO1xuICAgICAgICBtZXNzYWdlSWRzXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gX3RoaXMuc2hvdWxkU2hvd01lc3NhZ2UoaWQsIG1lc3NhZ2VzW2lkXSwgY29udGV4dCk7IH0pXG4gICAgICAgICAgICAuc2xpY2UoMCwgMSkgLy8gVE9ETzogY2hvb3NlIHJhbmRvbWx5XG4gICAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHsgcmV0dXJuIF90aGlzLnNob3dNZXNzYWdlKGlkLCBtZXNzYWdlc1tpZF0pOyB9KTtcbiAgICB9O1xuICAgIE1lc3NhZ2VzLnByb3RvdHlwZS5vbk1lc3NhZ2VQcmV2aWV3ID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgdmFyIHZhcnMgPSBtZXNzYWdlLmFjdGlvbjtcbiAgICAgICAgdmFyIGNvbnRleHQgPSB7XG4gICAgICAgICAgICB0cmFjazogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50SW5mbyA9IGV2ZW50ID8gXCJldmVudCAnXCIuY29uY2F0KGV2ZW50LCBcIidcIikgOiAnaW1wcmVzc2lvbic7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJUcmFja2luZyBcIi5jb25jYXQoZXZlbnRJbmZvLCBcIiBmb3IgXCIpLmNvbmNhdChtZXNzYWdlLm1lc3NhZ2VJZCkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJ1bkFjdGlvbk5hbWVkOiBmdW5jdGlvbiAoYWN0aW9uTmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmxvZyhcIlJ1bm5pbmcgdW50cmFja2VkIGFjdGlvbiAnXCIuY29uY2F0KGFjdGlvbk5hbWUsIFwiJ1wiKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcnVuVHJhY2tlZEFjdGlvbk5hbWVkOiBmdW5jdGlvbiAoYWN0aW9uTmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmxvZyhcIlJ1bm5pbmcgdHJhY2tlZCBhY3Rpb24gJ1wiLmNvbmNhdChhY3Rpb25OYW1lLCBcIidcIikpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVNZXNzYWdlKHtcbiAgICAgICAgICAgIGlzUHJldmlldzogdHJ1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHRoaXMuYWRkRGVmYXVsdHMoX19hc3NpZ24oeyBtZXNzYWdlSWQ6IG1lc3NhZ2UubWVzc2FnZUlkIH0sIHZhcnMpKSxcbiAgICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgTWVzc2FnZXMucHJvdG90eXBlLm9uTWVzc2FnZXNSZWNlaXZlZCA9IGZ1bmN0aW9uIChyZWNlaXZlZE1lc3NhZ2VzKSB7XG4gICAgICAgIHZhciBtZXNzYWdlcyA9IHJlY2VpdmVkTWVzc2FnZXMgfHwge307XG4gICAgICAgIHRoaXMuX21lc3NhZ2VDYWNoZSA9IG1lc3NhZ2VzO1xuICAgICAgICBTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQuc2F2ZShDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5NRVNTQUdFX0NBQ0hFLCBKU09OLnN0cmluZ2lmeShtZXNzYWdlcykpO1xuICAgIH07XG4gICAgTWVzc2FnZXMucHJvdG90eXBlLnNob3VsZFNob3dNZXNzYWdlID0gZnVuY3Rpb24gKGlkLCBtZXNzYWdlLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICB2YXIgbWF0Y2hlc1RyaWdnZXIgPSB0aGlzLm1hdGNoZXNUcmlnZ2VyKG1lc3NhZ2Uud2hlblRyaWdnZXJzLCBjb250ZXh0KTtcbiAgICAgICAgdmFyIG1hdGNoZXNVbmxlc3MgPSB0aGlzLm1hdGNoZXNUcmlnZ2VyKG1lc3NhZ2UudW5sZXNzVHJpZ2dlcnMsIGNvbnRleHQpO1xuICAgICAgICBpZiAoIW1hdGNoZXNUcmlnZ2VyIHx8IG1hdGNoZXNVbmxlc3MpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdHJpZ2dlcnNDb3VudCA9IHRoaXMub2NjdXJyZW5jZVRyYWNrZXIucmVjb3JkVHJpZ2dlck9jY3VycmVuY2UoaWQpO1xuICAgICAgICBpZiAoIXRoaXMubWF0Y2hlc0xpbWl0cyhpZCwgbWVzc2FnZS53aGVuTGltaXRzLCB0cmlnZ2Vyc0NvdW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnN0YXJ0VGltZSAmJiBtZXNzYWdlLmVuZFRpbWUpIHtcbiAgICAgICAgICAgIHZhciBvdXRzaWRlQWN0aXZlUGVyaW9kID0gbm93IDwgbWVzc2FnZS5zdGFydFRpbWUgfHwgbWVzc2FnZS5lbmRUaW1lIDwgbm93O1xuICAgICAgICAgICAgaWYgKG91dHNpZGVBY3RpdmVQZXJpb2QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBNZXNzYWdlcy5wcm90b3R5cGUuc2hvd01lc3NhZ2UgPSBmdW5jdGlvbiAoaWQsIG1lc3NhZ2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHZhcnMgPSB0aGlzLmFkZERlZmF1bHRzKF9fYXNzaWduKHt9LCBtZXNzYWdlLnZhcnMpKTtcbiAgICAgICAgdmFyIGNvbnRleHQgPSB7XG4gICAgICAgICAgICB0cmFjazogZnVuY3Rpb24gKGV2ZW50LCB2YWx1ZSwgaW5mbywgcGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMub2NjdXJyZW5jZVRyYWNrZXIucmVjb3JkT2NjdXJyZW5jZShpZCk7XG4gICAgICAgICAgICAgICAgX3RoaXMudHJhY2tNZXNzYWdlKGlkLCB7IGV2ZW50OiBldmVudCwgdmFsdWU6IHZhbHVlLCBpbmZvOiBpbmZvLCBwYXJhbXM6IHBhcmFtcyB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBydW5BY3Rpb25OYW1lZDogZnVuY3Rpb24gKGFjdGlvbk5hbWUpIHsgcmV0dXJuIF90aGlzLm9uQWN0aW9uKHZhcnNbYWN0aW9uTmFtZV0sIGlkKTsgfSxcbiAgICAgICAgICAgIHJ1blRyYWNrZWRBY3Rpb25OYW1lZDogZnVuY3Rpb24gKGFjdGlvbk5hbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSBhY3Rpb25OYW1lLnJlcGxhY2UoLyBhY3Rpb24kLywgJycpO1xuICAgICAgICAgICAgICAgIF90aGlzLnRyYWNrTWVzc2FnZShpZCwgeyBldmVudDogZXZlbnQgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMub25BY3Rpb24odmFyc1thY3Rpb25OYW1lXSwgaWQpOyB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlTWVzc2FnZSh7XG4gICAgICAgICAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgICAgICAgICAgbWVzc2FnZTogX19hc3NpZ24oeyBtZXNzYWdlSWQ6IGlkIH0sIHZhcnMpLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE1lc3NhZ2VzLnByb3RvdHlwZS5wcm9jZXNzTWVzc2FnZUV2ZW50ID0gZnVuY3Rpb24gKG1lc3NhZ2VJZCwgZXZlbnRVcmwpIHtcbiAgICAgICAgdmFyIGlmcmFtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibHAtbWVzc2FnZS1cIi5jb25jYXQobWVzc2FnZUlkKSk7XG4gICAgICAgIGlmICghaWZyYW1lKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnbWVzc2FnZSBjbG9zZWQsIHNraXBwaW5nIGV2ZW50IHByb2Nlc3NpbmcnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2EgPSBldmVudFVybC5yZXBsYWNlKC9eaHR0cDpcXC9cXC9sZWFucGx1bVxcLy8sICcnKS5zcGxpdCgnPycpLCBldmVudCA9IF9hWzBdLCBfYiA9IF9hWzFdLCBxdWVyeSA9IF9iID09PSB2b2lkIDAgPyAnJyA6IF9iO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB2YXIgcGFyYW1zID0gcXVlcnkuc3BsaXQoJyYnKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGFyYW0pIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHBhcmFtLnNwbGl0KCc9JyksIGtleSA9IF9hWzBdLCB2YWx1ZSA9IF9hWzFdO1xuICAgICAgICAgICAgYWNjW2tleV0gPSBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfSwge30pO1xuICAgICAgICB2YXIgX2MgPSBpZnJhbWUubWV0YWRhdGEsIG1lc3NhZ2UgPSBfYy5tZXNzYWdlLCBjb250ZXh0ID0gX2MuY29udGV4dDtcbiAgICAgICAgc3dpdGNoIChldmVudCkge1xuICAgICAgICAgICAgY2FzZSAnbG9hZEZpbmlzaGVkJzpcbiAgICAgICAgICAgICAgICBpZnJhbWUuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcbiAgICAgICAgICAgICAgICBpZnJhbWUuc3R5bGUubGVmdCA9ICcwJztcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZVsnSFRNTCBIZWlnaHQnXSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gbWVzc2FnZVsnSFRNTCBXaWR0aCddO1xuICAgICAgICAgICAgICAgICAgICBpZnJhbWUuc3R5bGUuaGVpZ2h0ID0gXCJcIi5jb25jYXQobWVzc2FnZVsnSFRNTCBIZWlnaHQnXSwgXCJweFwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWZyYW1lLnN0eWxlLndpZHRoID0gd2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIGlmcmFtZS5zdHlsZS5sZWZ0ID0gXCJjYWxjKCgxMDAlIC0gXCIuY29uY2F0KHdpZHRoLCBcIikgLyAyKVwiKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFuY2hvclByb3AgPSBtZXNzYWdlWydIVE1MIEFsaWduJ10udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFsdFByb3AgPSBhbmNob3JQcm9wID09PSAndG9wJyA/ICdib3R0b20nIDogJ3RvcCc7XG4gICAgICAgICAgICAgICAgICAgIGlmcmFtZS5zdHlsZVthbmNob3JQcm9wXSA9ICcwJztcbiAgICAgICAgICAgICAgICAgICAgaWZyYW1lLnN0eWxlW2FsdFByb3BdID0gJyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZnJhbWUuc3R5bGUudG9wID0gJzAnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZnJhbWUuY29udGVudFdpbmRvdy5mb2N1cygpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQudHJhY2soKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3RyYWNrJzpcbiAgICAgICAgICAgICAgICBjb250ZXh0LnRyYWNrKHBhcmFtcy5ldmVudCwgcGFyc2VGbG9hdChwYXJhbXMudmFsdWUpLCBwYXJhbXMuaW5mbywgbWF5YmVKU09OKHBhcmFtcy5wYXJhbWV0ZXJzKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdydW5BY3Rpb24nOlxuICAgICAgICAgICAgY2FzZSAncnVuVHJhY2tlZEFjdGlvbic6XG4gICAgICAgICAgICAgICAgY29udGV4dFtcIlwiLmNvbmNhdChldmVudCwgXCJOYW1lZFwiKV0ocGFyYW1zLmFjdGlvbik7XG4gICAgICAgICAgICAvLyBmYWxsIHRocm91Z2ggYW5kIGNsb3NlXG4gICAgICAgICAgICBjYXNlICdjbG9zZSc6XG4gICAgICAgICAgICAgICAgaWZyYW1lLm1ldGFkYXRhID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZnJhbWUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNZXNzYWdlcy5wcm90b3R5cGUuaGFuZGxlTWVzc2FnZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLl9zaG93UmljaElBTSAmJiBvcHRpb25zLm1lc3NhZ2UuX19uYW1lX18gPT09ICdIVE1MJykge1xuICAgICAgICAgICAgdGhpcy5yZXNvbHZlRmlsZXMob3B0aW9ucy5tZXNzYWdlKTtcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZU5hbWUgPSBvcHRpb25zLm1lc3NhZ2VbJ1RlbXBsYXRlJ10gfHwgJyc7XG4gICAgICAgICAgICBuZXcgTmV0d29ya18xLmRlZmF1bHQoKS5hamF4KCdnZXQnLCB0ZW1wbGF0ZU5hbWUucmVwbGFjZSgnLTEwLmh0bWwnLCAnLTExLmh0bWwnKSwgJycsIGZ1bmN0aW9uICh0ZW1wbGF0ZSkgeyByZXR1cm4gX3RoaXMucmVuZGVyUmljaEluQXBwTWVzc2FnZSh0ZW1wbGF0ZSwgb3B0aW9ucyk7IH0sIGZ1bmN0aW9uICgpIHsgfSwgZmFsc2UsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5ldmVudHMuZW1pdCgnc2hvd01lc3NhZ2UnLCB0aGlzLnJlc29sdmVGaWVsZHMob3B0aW9ucykpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNZXNzYWdlcy5wcm90b3R5cGUucmVuZGVyUmljaEluQXBwTWVzc2FnZSA9IGZ1bmN0aW9uICh0ZW1wbGF0ZSwgb3B0aW9ucykge1xuICAgICAgICB2YXIgbWVzc2FnZUlkID0gb3B0aW9ucy5tZXNzYWdlLm1lc3NhZ2VJZDtcbiAgICAgICAgdmFyIHZhcnMgPSBKU09OLnN0cmluZ2lmeShvcHRpb25zLm1lc3NhZ2UpO1xuICAgICAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ2lkJywgXCJscC1tZXNzYWdlLVwiLmNvbmNhdChtZXNzYWdlSWQpKTtcbiAgICAgICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgndGl0bGUnLCAnUG9wdXAnKTtcbiAgICAgICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgnYXJpYS1tb2RhbCcsICd0cnVlJyk7XG4gICAgICAgIGlmcmFtZS5zdHlsZS5jc3NUZXh0ID0gW1xuICAgICAgICAgICAgJ2JvcmRlci13aWR0aDogMCcsXG4gICAgICAgICAgICAncG9zaXRpb246IGZpeGVkJyxcbiAgICAgICAgICAgICd0b3A6IC0xMDAlJyxcbiAgICAgICAgICAgICdsZWZ0OiAtMTAwJScsXG4gICAgICAgICAgICAnd2lkdGg6IDEwMCUnLFxuICAgICAgICAgICAgJ2hlaWdodDogMTAwJScsXG4gICAgICAgICAgICAndmlzaWJpbGl0eTogaGlkZGVuJyxcbiAgICAgICAgICAgICd6LWluZGV4OiAxMDAwMDAnLFxuICAgICAgICBdLmpvaW4oJzsnKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5pbnNlcnRCZWZvcmUoaWZyYW1lLCBkb2N1bWVudC5ib2R5LmZpcnN0Q2hpbGQpO1xuICAgICAgICAvLyBwYXNzIG1lc3NhZ2UgaW5mb1xuICAgICAgICBpZnJhbWUubWV0YWRhdGEgPSBvcHRpb25zO1xuICAgICAgICBpZnJhbWUuY29udGVudFdpbmRvdy5tZXNzYWdlSWQgPSBtZXNzYWdlSWQ7XG4gICAgICAgIHZhciBjb250ZW50ID0gdGVtcGxhdGVcbiAgICAgICAgICAgIC5yZXBsYWNlKCcjI1ZhcnMjIycsIHZhcnMpXG4gICAgICAgICAgICAucmVwbGFjZSgnPGJvZHk+JywgXCI8Ym9keT48c2NyaXB0PndpbmRvdy5tZXNzYWdlSWQ9J1wiLmNvbmNhdChtZXNzYWdlSWQsIFwiJzwvc2NyaXB0PlwiKSk7XG4gICAgICAgIGlmICgnc3JjZG9jJyBpbiBpZnJhbWUpIHtcbiAgICAgICAgICAgIGlmcmFtZS5zcmNkb2MgPSBjb250ZW50O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGRvYyA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICAgICAgICAgICAgZG9jLm9wZW4oKTtcbiAgICAgICAgICAgIGRvYy53cml0ZShjb250ZW50KTtcbiAgICAgICAgICAgIGRvYy5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNZXNzYWdlcy5wcm90b3R5cGUudHJhY2tNZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2VJZCwgdHJhY2tPcHRpb25zLCByZXNwb25zZSkge1xuICAgICAgICBpZiAodHJhY2tPcHRpb25zID09PSB2b2lkIDApIHsgdHJhY2tPcHRpb25zID0geyBldmVudDogbnVsbCB9OyB9XG4gICAgICAgIGlmIChyZXNwb25zZSA9PT0gdm9pZCAwKSB7IHJlc3BvbnNlID0gZnVuY3Rpb24gKCkgeyB9OyB9XG4gICAgICAgIHZhciBhcmdzID0gbmV3IEFyZ3NCdWlsZGVyXzEuZGVmYXVsdCgpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLk1FU1NBR0VfSUQsIG1lc3NhZ2VJZCk7XG4gICAgICAgIHZhciBkZWZpbmVkID0gZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHR5cGVvZiB4ICE9PSAndW5kZWZpbmVkJzsgfTtcbiAgICAgICAgaWYgKHRyYWNrT3B0aW9ucy5ldmVudCkge1xuICAgICAgICAgICAgYXJncy5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuRVZFTlQsIHRyYWNrT3B0aW9ucy5ldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlZmluZWQodHJhY2tPcHRpb25zLnZhbHVlKSkge1xuICAgICAgICAgICAgYXJncy5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuVkFMVUUsIHRyYWNrT3B0aW9ucy52YWx1ZSB8fCAwLjApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWZpbmVkKHRyYWNrT3B0aW9ucy5pbmZvKSkge1xuICAgICAgICAgICAgYXJncy5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuSU5GTywgdHJhY2tPcHRpb25zLmluZm8pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWZpbmVkKHRyYWNrT3B0aW9ucy5wYXJhbXMpKSB7XG4gICAgICAgICAgICBhcmdzLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5QQVJBTVMsIEpTT04uc3RyaW5naWZ5KHRyYWNrT3B0aW9ucy5wYXJhbXMpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNyZWF0ZVJlcXVlc3QoQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLlRSQUNLLCBhcmdzLCB7XG4gICAgICAgICAgICBxdWV1ZWQ6IHRydWUsXG4gICAgICAgICAgICBzZW5kTm93OiB0cnVlLFxuICAgICAgICAgICAgcmVzcG9uc2U6IHJlc3BvbnNlLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE1lc3NhZ2VzLnByb3RvdHlwZS5vbkFjdGlvbiA9IGZ1bmN0aW9uIChhY3Rpb24sIHBhcmVudE1lc3NhZ2VJZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAocGFyZW50TWVzc2FnZUlkID09PSB2b2lkIDApIHsgcGFyZW50TWVzc2FnZUlkID0gJyc7IH1cbiAgICAgICAgaWYgKCFhY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWVzc2FnZXMgPSB0aGlzLl9tZXNzYWdlQ2FjaGU7XG4gICAgICAgIGlmIChhY3Rpb24uX19uYW1lX18gPT09ICdDaGFpbiB0byBFeGlzdGluZyBNZXNzYWdlJykge1xuICAgICAgICAgICAgdmFyIGNoYWluZWRNZXNzYWdlSWRfMSA9IGFjdGlvblsnQ2hhaW5lZCBtZXNzYWdlJ107XG4gICAgICAgICAgICB2YXIgbWVzc2FnZV8xID0gbWVzc2FnZXNbY2hhaW5lZE1lc3NhZ2VJZF8xXTtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlXzEuYWN0aW9uID09PSAnT3BlbiBVUkwnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50cmFja01lc3NhZ2UoY2hhaW5lZE1lc3NhZ2VJZF8xLCB7IGV2ZW50OiAnVmlldycgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMub25BY3Rpb24obWVzc2FnZV8xLnZhcnMsIGNoYWluZWRNZXNzYWdlSWRfMSk7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobWVzc2FnZV8xLmFjdGlvbiA9PT0gJ1JlZ2lzdGVyIEZvciBQdXNoJykge1xuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRzLmVtaXQoJ3JlZ2lzdGVyRm9yUHVzaCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93TWVzc2FnZShjaGFpbmVkTWVzc2FnZUlkXzEsIG1lc3NhZ2VfMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gaGFuZGxlIGFwcCBmdW5jdGlvblxuICAgICAgICB2YXIgcHJvY2Vzc0FjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBuYW1lID0gYWN0aW9uLl9fbmFtZV9fO1xuICAgICAgICAgICAgaWYgKGFjdGlvbi5fX25hbWVfXyA9PT0gJ09wZW4gVVJMJykge1xuICAgICAgICAgICAgICAgIF90aGlzLmV2ZW50cy5lbWl0KCduYXZpZ2F0aW9uQ2hhbmdlJywgYWN0aW9uLlVSTCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhY3Rpb24uX19uYW1lX18gPT09ICdSZWdpc3RlciBGb3IgUHVzaCcpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5ldmVudHMuZW1pdCgncmVnaXN0ZXJGb3JQdXNoJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgLy8gZW1iZWRkZWQgY2hhaW5lZCBtZXNzYWdlXG4gICAgICAgICAgICAgICAgX3RoaXMuc2hvd01lc3NhZ2UocGFyZW50TWVzc2FnZUlkLCB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VJZDogcGFyZW50TWVzc2FnZUlkLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHZhcnM6IGFjdGlvbiwgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgbWVzc2FnZUlkID0gdGhpcy5tZXNzYWdlSWRGcm9tQWN0aW9uKGFjdGlvbik7XG4gICAgICAgIGlmIChtZXNzYWdlSWQpIHtcbiAgICAgICAgICAgIHRoaXMudHJhY2tNZXNzYWdlKG1lc3NhZ2VJZCwgeyBldmVudDogbnVsbCB9LCBwcm9jZXNzQWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHByb2Nlc3NBY3Rpb24oKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWVzc2FnZXMucHJvdG90eXBlLmdldE1lc3NhZ2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWVzc2FnZUNhY2hlIHx8IHt9O1xuICAgIH07XG4gICAgTWVzc2FnZXMucHJvdG90eXBlLmFkZERlZmF1bHRzID0gZnVuY3Rpb24gKHZhcnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGRlZmluaXRpb25zID0gdGhpcy5nZXRNZXNzYWdlcygpLmFjdGlvbkRlZmluaXRpb25zIHx8IHt9O1xuICAgICAgICB2YXIgZGVmaW5pdGlvbiA9IGRlZmluaXRpb25zW3ZhcnMuX19uYW1lX19dO1xuICAgICAgICB2YXIga2luZHMgPSBkZWZpbml0aW9uID09PSBudWxsIHx8IGRlZmluaXRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlZmluaXRpb24ua2luZHM7XG4gICAgICAgIGlmICghZGVmaW5pdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHZhcnM7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHVzZURlZmF1bHRzID0gZnVuY3Rpb24gKG9iaiwgZGVmYXVsdFZhbHVlcywgcGF0aCkge1xuICAgICAgICAgICAgaWYgKHBhdGggPT09IHZvaWQgMCkgeyBwYXRoID0gJyc7IH1cbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBPYmplY3Qua2V5cyhkZWZhdWx0VmFsdWVzKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGRlZmF1bHRWYWx1ZXNba2V5XTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICBvYmpba2V5XSA9IHVzZURlZmF1bHRzKG9ialtrZXldIHx8IHt9LCB2YWx1ZSwgXCJcIi5jb25jYXQocGF0aCkuY29uY2F0KGtleSwgXCIuXCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIG9ialtrZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICBvYmpba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoa2luZHNbXCJcIi5jb25jYXQocGF0aCkuY29uY2F0KGtleSldID09PSAnRklMRScpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqW2tleV0gPSBfdGhpcy5nZXRGaWxlVXJsKG9ialtrZXldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdXNlRGVmYXVsdHMoX19hc3NpZ24oe30sIHZhcnMpLCBkZWZpbml0aW9uLnZhbHVlcyk7XG4gICAgfTtcbiAgICBNZXNzYWdlcy5wcm90b3R5cGUucmVzb2x2ZUZpbGVzID0gZnVuY3Rpb24gKHZhcnMpIHtcbiAgICAgICAgdmFyIGZpbGVQcmVmaXggPSAvXl9fZmlsZV9fLztcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHZhcnMpIHtcbiAgICAgICAgICAgIGlmIChmaWxlUHJlZml4LnRlc3Qoa2V5KSkge1xuICAgICAgICAgICAgICAgIHZhciBuYW1lID0ga2V5LnJlcGxhY2UoZmlsZVByZWZpeCwgJycpO1xuICAgICAgICAgICAgICAgIHZhcnNbbmFtZV0gPSB0aGlzLmdldEZpbGVVcmwodmFyc1trZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YXJzW2tleV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgdmFyc1trZXldID0gdGhpcy5yZXNvbHZlRmlsZXModmFyc1trZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFycztcbiAgICB9O1xuICAgIE1lc3NhZ2VzLnByb3RvdHlwZS5yZXNvbHZlRmllbGRzID0gZnVuY3Rpb24gKHZhcnMpIHtcbiAgICAgICAgdmFyIGNvbG9yU3VmZml4ID0gL1xcYmNvbG9yL2k7XG4gICAgICAgIHZhciBmaWxlUHJlZml4ID0gL15fX2ZpbGVfXy87XG4gICAgICAgIGZvciAodmFyIGtleSBpbiB2YXJzKSB7XG4gICAgICAgICAgICBpZiAoZmlsZVByZWZpeC50ZXN0KGtleSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IGtleS5yZXBsYWNlKGZpbGVQcmVmaXgsICcnKTtcbiAgICAgICAgICAgICAgICB2YXJzW25hbWUgKyAnIFVSTCddID0gdGhpcy5nZXRGaWxlVXJsKHZhcnNba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjb2xvclN1ZmZpeC50ZXN0KGtleSkpIHtcbiAgICAgICAgICAgICAgICB2YXJzW2tleV0gPSBWYWx1ZVRyYW5zZm9ybXNfMS5kZWZhdWx0LmRlY29kZUNvbG9yKHZhcnNba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFyc1trZXldID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHZhcnNba2V5XSA9IHRoaXMucmVzb2x2ZUZpZWxkcyh2YXJzW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YXJzO1xuICAgIH07XG4gICAgTWVzc2FnZXMucHJvdG90eXBlLm1lc3NhZ2VJZEZyb21BY3Rpb24gPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIHZhciBtZXNzYWdlcyA9IHRoaXMuX21lc3NhZ2VDYWNoZTtcbiAgICAgICAgdmFyIHZhcnMgPSBfX2Fzc2lnbih7fSwgYWN0aW9uKTtcbiAgICAgICAgZGVsZXRlIHZhcnNbJ3BhcmVudENhbXBhaWduSWQnXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IE9iamVjdC5rZXlzKG1lc3NhZ2VzKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBpZCA9IF9hW19pXTtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gbWVzc2FnZXNbaWRdO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UucGFyZW50Q2FtcGFpZ25JZCAhPT0gYWN0aW9uLnBhcmVudENhbXBhaWduSWQpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgoMCwgbG9kYXNoX2lzZXF1YWxfMS5kZWZhdWx0KShtZXNzYWdlLnZhcnMsIHZhcnMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBNZXNzYWdlcy5wcm90b3R5cGUubWF0Y2hlc1RyaWdnZXIgPSBmdW5jdGlvbiAod2hlblRyaWdnZXJzLCBjb250ZXh0KSB7XG4gICAgICAgIGlmICghd2hlblRyaWdnZXJzKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGlnbm9yZUNhc2VFcXVhbHMgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgaWYgKGIgPT09IHZvaWQgMCkgeyBiID0gJyc7IH1cbiAgICAgICAgICAgIHJldHVybiBhLnRvU3RyaW5nKCkubG9jYWxlQ29tcGFyZShiLnRvU3RyaW5nKCksIHVuZGVmaW5lZCwgeyBzZW5zaXRpdml0eTogJ2FjY2VudCcgfSkgPT09IDA7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBtYXRjaGVzVHJpZ2dlcnMgPSBmdW5jdGlvbiAoY29udGV4dE5vdW4sIHBhcmFtcywgdHJpZ2dlcikge1xuICAgICAgICAgICAgdmFyIG1hdGNoZXNOb3VuID0gY29udGV4dE5vdW4gPT09IHRyaWdnZXIubm91bjtcbiAgICAgICAgICAgIGlmICh0cmlnZ2VyLnZlcmIgPT09ICd0cmlnZ2VycycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hlc05vdW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0cmlnZ2VyLnZlcmIgPT09ICd0cmlnZ2Vyc1dpdGhQYXJhbWV0ZXInKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hID0gdHJpZ2dlci5vYmplY3RzLCBwYXJhbWV0ZXIgPSBfYVswXSwgdmFsdWUgPSBfYVsxXTtcbiAgICAgICAgICAgICAgICB2YXIgY29udGFpbnNQYXJhbSA9IHBhcmFtZXRlciBpbiBwYXJhbXM7XG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoZXNQYXJhbSA9IGNvbnRhaW5zUGFyYW0gJiYgaWdub3JlQ2FzZUVxdWFscyh2YWx1ZSwgcGFyYW1zW3BhcmFtZXRlcl0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVzTm91biAmJiBtYXRjaGVzUGFyYW07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB3aGVuVHJpZ2dlcnMuY2hpbGRyZW4uc29tZShmdW5jdGlvbiAodHJpZ2dlcikge1xuICAgICAgICAgICAgdmFyIHN1YmplY3QgPSB0cmlnZ2VyLnN1YmplY3Q7XG4gICAgICAgICAgICBzd2l0Y2ggKGNvbnRleHQudHJpZ2dlcikge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3N0YXJ0JzogcmV0dXJuIHN1YmplY3QgPT09ICdzdGFydCcgfHwgc3ViamVjdCA9PT0gJ3Jlc3VtZSc7XG4gICAgICAgICAgICAgICAgY2FzZSAncmVzdW1lJzogcmV0dXJuIHN1YmplY3QgPT09ICdyZXN1bWUnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2V2ZW50JzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YmplY3QgIT09ICdldmVudCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hlc1RyaWdnZXJzKGNvbnRleHQuZXZlbnROYW1lLCBjb250ZXh0LnBhcmFtcywgdHJpZ2dlcik7XG4gICAgICAgICAgICAgICAgY2FzZSAndXNlckF0dHJpYnV0ZSc6XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJqZWN0ICE9PSAndXNlckF0dHJpYnV0ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgY29udGFpbnNBdHRyaWJ1dGUgPSB0cmlnZ2VyLm5vdW4gaW4gY29udGV4dC5hdHRyaWJ1dGVzO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHJpZ2dlci52ZXJiID09PSAnY2hhbmdlcycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250YWluc0F0dHJpYnV0ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0cmlnZ2VyLnZlcmIgPT09ICdjaGFuZ2VzVG8nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbnRhaW5zQXR0cmlidXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRleHRWYWx1ZV8xID0gY29udGV4dC5hdHRyaWJ1dGVzW3RyaWdnZXIubm91bl07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJpZ2dlci5vYmplY3RzLnNvbWUoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsICYmIGNvbnRleHRWYWx1ZV8xID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgJiYgY29udGV4dFZhbHVlXzEgJiYgaWdub3JlQ2FzZUVxdWFscyh2YWx1ZSwgY29udGV4dFZhbHVlXzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3RhdGUnOlxuICAgICAgICAgICAgICAgICAgICBpZiAoc3ViamVjdCAhPT0gJ3N0YXRlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVzVHJpZ2dlcnMoY29udGV4dC5zdGF0ZSwgY29udGV4dC5wYXJhbXMsIHRyaWdnZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE1lc3NhZ2VzLnByb3RvdHlwZS5tYXRjaGVzTGltaXRzID0gZnVuY3Rpb24gKGlkLCB3aGVuTGltaXRzLCB0cmlnZ2VyT2NjdXJyZW5jZXMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF3aGVuTGltaXRzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd2hlbkxpbWl0cy5jaGlsZHJlbi5ldmVyeShmdW5jdGlvbiAobGltaXQpIHtcbiAgICAgICAgICAgIHZhciBzdWJqZWN0ID0gbGltaXQuc3ViamVjdCwgdmVyYiA9IGxpbWl0LnZlcmI7XG4gICAgICAgICAgICB2YXIgbm91biA9IHBhcnNlSW50KGxpbWl0Lm5vdW4udG9TdHJpbmcoKSk7XG4gICAgICAgICAgICBpZiAoc3ViamVjdCA9PT0gJ3RpbWVzJykge1xuICAgICAgICAgICAgICAgIGlmICh2ZXJiID09PSAnbGltaXRTZXNzaW9uJykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2Vzc2lvbk9jY3VycmVuY2VzID0gX3RoaXMub2NjdXJyZW5jZVRyYWNrZXIuZ2V0U2Vzc2lvbk9jY3VycmFuY2VDb3VudChpZCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXNzaW9uT2NjdXJyZW5jZXMgKyAxID09PSBub3VuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2ZXJiID09PSAnbGltaXRVc2VyJykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb2NjdXJyZW5jZXMgPSBfdGhpcy5vY2N1cnJlbmNlVHJhY2tlci5nZXRPY2N1cnJlbmNlcyhpZCkubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2NjdXJyZW5jZXMgKyAxIDw9IG5vdW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBYIGluIFkgKHNlY29uZHN8bWludXRlc3xkYXlzfGhvdXJzKVxuICAgICAgICAgICAgICAgICAgICB2YXIgcGVySW50ZXJ2YWwgPSBwYXJzZUludChsaW1pdC5vYmplY3RzWzBdLnRvU3RyaW5nKCkpIHx8IDE7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aW1lU2xvdCA9IHZlcmJUb0ludGVydmFsKHZlcmIpICogcGVySW50ZXJ2YWw7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvY2N1cnJlbmNlcyA9IF90aGlzLm9jY3VycmVuY2VUcmFja2VyLmdldE9jY3VycmVuY2VzKGlkKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvdW50ID0gb2NjdXJyZW5jZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY291bnQgPCBub3VuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzbGljZSA9IG9jY3VycmVuY2VzLnNsaWNlKGNvdW50IC0gbm91biwgY291bnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgdGhlIHRpbWUgb2YgdGhlIGZpcnN0IG9mIHRoZSBsYXN0IE4gb2NjdXJyZW5jZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzbGljZVswXSA8IERhdGUubm93KCkgLSB0aW1lU2xvdDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHN1YmplY3QgPT09ICdvbk50aE9jY3VycmVuY2UnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyaWdnZXJPY2N1cnJlbmNlcyA9PT0gbm91bjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHN1YmplY3QgPT09ICdldmVyeU50aE9jY3VycmVuY2UnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0cmlnZ2VyT2NjdXJyZW5jZXMgJSBub3VuKSA9PT0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gTWVzc2FnZXM7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gTWVzc2FnZXM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSWRlbnRpdHlNYW5hZ2VyID0gZXhwb3J0cy5JZGVudGl0eVN0YXRlID0gdm9pZCAwO1xudmFyIGNsZXZlcnRhcF93ZWJfc2RrXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImNsZXZlcnRhcC13ZWItc2RrXCIpKTtcbnZhciBpbnRlcm5hbF8xID0gcmVxdWlyZShcIi4vdHlwZXMvaW50ZXJuYWxcIik7XG52YXIgU3RvcmFnZU1hbmFnZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9TdG9yYWdlTWFuYWdlclwiKSk7XG52YXIgQ29uc3RhbnRzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vQ29uc3RhbnRzXCIpKTtcbnZhciBBcmdzQnVpbGRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0FyZ3NCdWlsZGVyXCIpKTtcbnZhciBub29wID0gZnVuY3Rpb24gKCkgeyB9O1xudmFyIHRvTWlncmF0aW9uU3RhdGUgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgc3dpdGNoIChvYmogPT09IG51bGwgfHwgb2JqID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmouc2RrKSB7XG4gICAgICAgIGNhc2UgJ2xwJzpcbiAgICAgICAgICAgIHJldHVybiBpbnRlcm5hbF8xLk1pZ3JhdGlvblN0YXRlLkxFQU5QTFVNO1xuICAgICAgICBjYXNlICdscCtjdCc6XG4gICAgICAgICAgICByZXR1cm4gaW50ZXJuYWxfMS5NaWdyYXRpb25TdGF0ZS5EVVBMSUNBVEU7XG4gICAgICAgIGNhc2UgJ2N0JzpcbiAgICAgICAgICAgIHJldHVybiBpbnRlcm5hbF8xLk1pZ3JhdGlvblN0YXRlLkNMRVZFUlRBUDtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBpbnRlcm5hbF8xLk1pZ3JhdGlvblN0YXRlLlVOS05PV047XG4gICAgfVxufTtcbnZhciBNaWdyYXRpb25NYW5hZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1pZ3JhdGlvbk1hbmFnZXIoY3JlYXRlUmVxdWVzdCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMuY3JlYXRlUmVxdWVzdCA9IGNyZWF0ZVJlcXVlc3Q7XG4gICAgICAgIHRoaXMucmVzcG9uc2UgPSBudWxsO1xuICAgICAgICB0aGlzLl9mZXRjaGluZyA9IG51bGw7XG4gICAgICAgIHZhciBzYXZlZFJlc3BvbnNlID0gU3RvcmFnZU1hbmFnZXJfMS5kZWZhdWx0LmdldChDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5NSUdSQVRJT05fU1RBVEUpO1xuICAgICAgICB2YXIgZGV2aWNlSWQgPSBTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQuZ2V0KENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLkRFVklDRV9JRCk7XG4gICAgICAgIHZhciB1c2VySWQgPSAoX2EgPSBTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQuZ2V0KENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLlVTRVJfSUQpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBkZXZpY2VJZDtcbiAgICAgICAgdGhpcy5pZGVudGl0eSA9IG5ldyBJZGVudGl0eU1hbmFnZXIodXNlcklkLCBkZXZpY2VJZCk7XG4gICAgICAgIGlmIChzYXZlZFJlc3BvbnNlKSB7XG4gICAgICAgICAgICB0aGlzLnJlc3BvbnNlID0gSlNPTi5wYXJzZShzYXZlZFJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBNaWdyYXRpb25NYW5hZ2VyLnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICBpZiAoY2FsbGJhY2sgPT09IHZvaWQgMCkgeyBjYWxsYmFjayA9IG5vb3A7IH1cbiAgICAgICAgdmFyIHJlc3BvbnNlID0gdGhpcy5yZXNwb25zZTtcbiAgICAgICAgdmFyIHN0YXRlID0gdG9NaWdyYXRpb25TdGF0ZSh0aGlzLnJlc3BvbnNlKTtcbiAgICAgICAgaWYgKHJlc3BvbnNlICYmIHN0YXRlICE9PSBpbnRlcm5hbF8xLk1pZ3JhdGlvblN0YXRlLlVOS05PV04pIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKHN0YXRlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdldE1pZ3JhdGlvblN0YXRlKGNhbGxiYWNrKTtcbiAgICB9O1xuICAgIE1pZ3JhdGlvbk1hbmFnZXIucHJvdG90eXBlLnZlcmlmeVN0YXRlID0gZnVuY3Rpb24gKHNoYSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmIChzaGEgJiYgKChfYSA9IHRoaXMucmVzcG9uc2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zaGEyNTYpICE9PSBzaGEpIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0TWlncmF0aW9uU3RhdGUoZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgICAgICBpZiAocyA9PT0gaW50ZXJuYWxfMS5NaWdyYXRpb25TdGF0ZS5EVVBMSUNBVEUgfHwgcyA9PT0gaW50ZXJuYWxfMS5NaWdyYXRpb25TdGF0ZS5DTEVWRVJUQVApIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuaW5pdENsZXZlclRhcCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV90aGlzLmlkZW50aXR5LmlzQW5vbnltb3VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGV2ZXJ0YXBfd2ViX3Nka18xLmRlZmF1bHQub25Vc2VyTG9naW4ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU2l0ZTogX3RoaXMuaWRlbnRpdHkucHJvZmlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1pZ3JhdGlvbk1hbmFnZXIucHJvdG90eXBlLmluaXRDbGV2ZXJUYXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIGNvbmZpZyA9IChfYSA9IHRoaXMucmVzcG9uc2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jdDtcbiAgICAgICAgaWYgKCFjb25maWcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjbGV2ZXJ0YXBfd2ViX3Nka18xLmRlZmF1bHQuaW5pdChjb25maWcuYWNjb3VudElkLCBjb25maWcucmVnaW9uQ29kZSwgJycsIGNvbmZpZy50b2tlbik7XG4gICAgICAgIHJldHVybiBjbGV2ZXJ0YXBfd2ViX3Nka18xLmRlZmF1bHQ7XG4gICAgfTtcbiAgICBNaWdyYXRpb25NYW5hZ2VyLnByb3RvdHlwZS5kdXBsaWNhdGVSZXF1ZXN0ID0gZnVuY3Rpb24gKGFjdGlvbiwgYXJncywgb3B0aW9ucykge1xuICAgICAgICB2YXIgc3RhdGUgPSB0b01pZ3JhdGlvblN0YXRlKHRoaXMucmVzcG9uc2UpO1xuICAgICAgICBpZiAoc3RhdGUgPT09IGludGVybmFsXzEuTWlncmF0aW9uU3RhdGUuTEVBTlBMVU0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWFyZ3MpIHtcbiAgICAgICAgICAgIGFyZ3MgPSBuZXcgQXJnc0J1aWxkZXJfMS5kZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlID09PSBpbnRlcm5hbF8xLk1pZ3JhdGlvblN0YXRlLkRVUExJQ0FURSkge1xuICAgICAgICAgICAgYXJncy5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuQ1QsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhcmdzRGljdCA9IChhcmdzID09PSBudWxsIHx8IGFyZ3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFyZ3MuYnVpbGREaWN0KCkpIHx8IHt9O1xuICAgICAgICB2YXIgdXNlcklkID0gYXJnc0RpY3RbQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuVVNFUl9JRF07XG4gICAgICAgIGlmICh1c2VySWQpIHtcbiAgICAgICAgICAgIHRoaXMuaWRlbnRpdHkuc2V0VXNlcklkKHVzZXJJZCk7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLlNUQVJUOlxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pZGVudGl0eS5pc0Fub255bW91cykge1xuICAgICAgICAgICAgICAgICAgICBjbGV2ZXJ0YXBfd2ViX3Nka18xLmRlZmF1bHQub25Vc2VyTG9naW4ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBTaXRlOiB0aGlzLmlkZW50aXR5LnByb2ZpbGUsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLlRSQUNLOlxuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRQdXNoKGFyZ3NEaWN0LCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLkFEVkFOQ0U6XG4gICAgICAgICAgICAgICAgYXJnc0RpY3QuZXZlbnQgPSBcInN0YXRlX1wiLmNvbmNhdChhcmdzRGljdC5zdGF0ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudFB1c2goYXJnc0RpY3QsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBDb25zdGFudHNfMS5kZWZhdWx0Lk1FVEhPRFMuU0VUX1VTRVJfQVRUUklCVVRFUzpcbiAgICAgICAgICAgICAgICB0aGlzLnByb2ZpbGVQdXNoKGFyZ3NEaWN0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhdGUgPT09IGludGVybmFsXzEuTWlncmF0aW9uU3RhdGUuQ0xFVkVSVEFQO1xuICAgIH07XG4gICAgTWlncmF0aW9uTWFuYWdlci5wcm90b3R5cGUucHJvZmlsZVB1c2ggPSBmdW5jdGlvbiAoYXJnc0RpY3QpIHtcbiAgICAgICAgdmFyIHVzZXJJZCA9IGFyZ3NEaWN0W0NvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLk5FV19VU0VSX0lEXTtcbiAgICAgICAgdmFyIGF0dHJzID0gdGhpcy5tYXBBdHRyaWJ1dGVzKHRoaXMuY29udmVydEFycmF5cyhKU09OLnBhcnNlKGFyZ3NEaWN0LnVzZXJBdHRyaWJ1dGVzIHx8ICd7fScpKSk7XG4gICAgICAgIGlmICh1c2VySWQpIHtcbiAgICAgICAgICAgIHRoaXMuaWRlbnRpdHkuc2V0VXNlcklkKHVzZXJJZCk7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGF0dHJzLCB0aGlzLmlkZW50aXR5LnByb2ZpbGUpO1xuICAgICAgICAgICAgY2xldmVydGFwX3dlYl9zZGtfMS5kZWZhdWx0Lm9uVXNlckxvZ2luLnB1c2goeyBTaXRlOiBhdHRycyB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNsZXZlcnRhcF93ZWJfc2RrXzEuZGVmYXVsdC5wcm9maWxlLnB1c2goeyBTaXRlOiBhdHRycyB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWlncmF0aW9uTWFuYWdlci5wcm90b3R5cGUuZXZlbnRQdXNoID0gZnVuY3Rpb24gKGFyZ3NEaWN0LCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBpc0VuZ2FnZW1lbnRFdmVudCA9IGFyZ3NEaWN0W0NvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLk1FU1NBR0VfSURdO1xuICAgICAgICB2YXIgZXZlbnROYW1lID0gb3B0aW9ucy5pc1B1cmNoYXNlID8gJ0NoYXJnZWQnIDogYXJnc0RpY3QuZXZlbnQ7XG4gICAgICAgIGlmIChldmVudE5hbWUgJiYgIWlzRW5nYWdlbWVudEV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgZXZlbnRQYXJhbXMgPSB7fTtcbiAgICAgICAgICAgIGlmIChhcmdzRGljdC5wYXJhbXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gdGhpcy5jb252ZXJ0QXJyYXlzKEpTT04ucGFyc2UoYXJnc0RpY3QucGFyYW1zKSk7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihldmVudFBhcmFtcywgcGFyYW1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhcmdzRGljdC52YWx1ZSkge1xuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oZXZlbnRQYXJhbXMsIHsgdmFsdWU6IGFyZ3NEaWN0LnZhbHVlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFyZ3NEaWN0LmluZm8pIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGV2ZW50UGFyYW1zLCB7IGluZm86IGFyZ3NEaWN0LmluZm8gfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5pc1B1cmNoYXNlICYmIGFyZ3NEaWN0LmN1cnJlbmN5Q29kZSkge1xuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oZXZlbnRQYXJhbXMsIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVuY3lDb2RlOiBhcmdzRGljdC5jdXJyZW5jeUNvZGUsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjbGV2ZXJ0YXBfd2ViX3Nka18xLmRlZmF1bHQuZXZlbnQucHVzaChldmVudE5hbWUsIGV2ZW50UGFyYW1zKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWlncmF0aW9uTWFuYWdlci5wcm90b3R5cGUuY29udmVydEFycmF5cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyciA9IG9ialtrZXldO1xuICAgICAgICAgICAgICAgIGFjY1trZXldID0gXCJbXCIuY29uY2F0KGFyci5qb2luKCcsJyksIFwiXVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGFjY1trZXldID0gb2JqW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LCB7fSk7XG4gICAgfTtcbiAgICBNaWdyYXRpb25NYW5hZ2VyLnByb3RvdHlwZS5tYXBBdHRyaWJ1dGVzID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB2YXIgbWFwcGluZyA9IChfYiA9IChfYSA9IHRoaXMucmVzcG9uc2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jdCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmF0dHJpYnV0ZU1hcHBpbmdzO1xuICAgICAgICBpZiAoIW1hcHBpbmcpXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgICAgICAgICBpZiAobWFwcGluZ1trZXldKSB7XG4gICAgICAgICAgICAgICAgYWNjW21hcHBpbmdba2V5XV0gPSBvYmpba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGFjY1trZXldID0gb2JqW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LCB7fSk7XG4gICAgfTtcbiAgICBNaWdyYXRpb25NYW5hZ2VyLnByb3RvdHlwZS5nZXRNaWdyYXRpb25TdGF0ZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5fZmV0Y2hpbmcgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZldGNoaW5nID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY3JlYXRlUmVxdWVzdCgnZ2V0TWlncmF0ZVN0YXRlJywgbmV3IEFyZ3NCdWlsZGVyXzEuZGVmYXVsdCgpLCB7XG4gICAgICAgICAgICAgICAgICAgIHNlbmROb3c6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlOiBmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0gKF9hID0gciA9PT0gbnVsbCB8fCByID09PSB2b2lkIDAgPyB2b2lkIDAgOiByLnJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSB0b01pZ3JhdGlvblN0YXRlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZSAmJiBzdGF0ZSAhPT0gaW50ZXJuYWxfMS5NaWdyYXRpb25TdGF0ZS5VTktOT1dOKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RvcmFnZU1hbmFnZXJfMS5kZWZhdWx0LnNhdmUoQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuTUlHUkFUSU9OX1NUQVRFLCBKU09OLnN0cmluZ2lmeShyZXNwb25zZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2ZldGNoaW5nLnRoZW4oY2FsbGJhY2spXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fZmV0Y2hpbmcgPSBudWxsOyB9KTtcbiAgICB9O1xuICAgIHJldHVybiBNaWdyYXRpb25NYW5hZ2VyO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IE1pZ3JhdGlvbk1hbmFnZXI7XG52YXIgSWRlbnRpdHlTdGF0ZTtcbihmdW5jdGlvbiAoSWRlbnRpdHlTdGF0ZSkge1xuICAgIElkZW50aXR5U3RhdGVbXCJBTk9OWU1PVVNcIl0gPSBcImFub255bW91c1wiO1xuICAgIElkZW50aXR5U3RhdGVbXCJJREVOVElGSUVEXCJdID0gXCJpZGVudGlmaWVkXCI7XG59KShJZGVudGl0eVN0YXRlID0gZXhwb3J0cy5JZGVudGl0eVN0YXRlIHx8IChleHBvcnRzLklkZW50aXR5U3RhdGUgPSB7fSkpO1xudmFyIElkZW50aXR5TWFuYWdlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBJZGVudGl0eU1hbmFnZXIodXNlcklkLCBkZXZpY2VJZCkge1xuICAgICAgICB0aGlzLnVzZXJJZCA9IHVzZXJJZDtcbiAgICAgICAgdGhpcy5kZXZpY2VJZCA9IGRldmljZUlkO1xuICAgICAgICB0aGlzLnN0YXRlID0gSWRlbnRpdHlTdGF0ZS5BTk9OWU1PVVM7XG4gICAgICAgIHRoaXMuaWRlbnRpZnkoKTtcbiAgICB9XG4gICAgSWRlbnRpdHlNYW5hZ2VyLnByb3RvdHlwZS5zZXRVc2VySWQgPSBmdW5jdGlvbiAodXNlcklkKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlID09PSBJZGVudGl0eVN0YXRlLkFOT05ZTU9VUykge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IElkZW50aXR5U3RhdGUuSURFTlRJRklFRDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVzZXJJZCA9IHVzZXJJZDtcbiAgICB9O1xuICAgIElkZW50aXR5TWFuYWdlci5wcm90b3R5cGUuaWRlbnRpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzQW5vbnltb3VzKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gSWRlbnRpdHlTdGF0ZS5BTk9OWU1PVVM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlkZW50aWZ5Tm9uQW5vbnltb3VzKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElkZW50aXR5TWFuYWdlci5wcm90b3R5cGUuaWRlbnRpZnlOb25Bbm9ueW1vdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBJZGVudGl0eVN0YXRlLklERU5USUZJRUQ7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSWRlbnRpdHlNYW5hZ2VyLnByb3RvdHlwZSwgXCJwcm9maWxlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4geyBJZGVudGl0eTogdGhpcy51c2VySWQgfTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJZGVudGl0eU1hbmFnZXIucHJvdG90eXBlLCBcImlzQW5vbnltb3VzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy51c2VySWQgPT09IHRoaXMuZGV2aWNlSWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gSWRlbnRpdHlNYW5hZ2VyO1xufSgpKTtcbmV4cG9ydHMuSWRlbnRpdHlNYW5hZ2VyID0gSWRlbnRpdHlNYW5hZ2VyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEFqYXggZnVuY3Rpb25zIGZyb206XG4gKlxuICogUGFyc2UgSmF2YVNjcmlwdCBTREtcbiAqIFZlcnNpb246IDEuMS41XG4gKiBCdWlsdDogTW9uIE9jdCAwMSAyMDEyIDE3OjU3OjEzXG4gKiBodHRwOi8vcGFyc2UuY29tXG4gKlxuICogQ29weXJpZ2h0IDIwMTIgUGFyc2UsIEluYy5cbiAqIFRoZSBQYXJzZSBKYXZhU2NyaXB0IFNESyBpcyBmcmVlbHkgZGlzdHJpYnV0YWJsZSB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HXG4gKiBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSXG4gKiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBOZXR3b3JrID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE5ldHdvcmsoKSB7XG4gICAgICAgIHRoaXMubmV0d29ya1RpbWVvdXRTZWNvbmRzID0gMTA7XG4gICAgICAgIHRoaXMucmVxdWVzdFF1ZXVlID0gW107XG4gICAgICAgIHRoaXMucnVubmluZ1JlcXVlc3QgPSBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbmV0d29yayB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzZWNvbmRzIFRoZSB0aW1lb3V0IGluIHNlY29uZHMuXG4gICAgICovXG4gICAgTmV0d29yay5wcm90b3R5cGUuc2V0TmV0d29ya1RpbWVvdXQgPSBmdW5jdGlvbiAoc2Vjb25kcykge1xuICAgICAgICB0aGlzLm5ldHdvcmtUaW1lb3V0U2Vjb25kcyA9IHNlY29uZHM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNYWtlIGFuIGFqYXggcmVxdWVzdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kIFRoZSBodHRwIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSB1cmwgdG8gb3Blbi5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheUJ1ZmZlcnxCbG9ifERvY3VtZW50fEZvcm1EYXRhfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHNlbnQgaW4gYm9keS5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdWNjZXNzIEEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIHN1Y2Nlc3MuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gZXJyb3IgQSBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgb24gZXJyb3IuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBxdWV1ZWQgV2hldGhlciB0aGUgcmVxdWVzdCBzaG91bGQgYmUgcXVldWVkIG9yIGltbWVkaWF0ZWx5IHNlbnQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcGxhaW5UZXh0XSBXaGV0aGVyIHRoZSByZXNwb25zZSBzaG91bGQgYmUgcmV0dXJuZWQgYXMgcGxhaW4gdGV4dCBvciBqc29uLlxuICAgICAqIEByZXR1cm4geyp9XG4gICAgICovXG4gICAgTmV0d29yay5wcm90b3R5cGUuYWpheCA9IGZ1bmN0aW9uIChtZXRob2QsIHVybCwgZGF0YSwgc3VjY2VzcywgZXJyb3IsIHF1ZXVlZCwgcGxhaW5UZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChxdWV1ZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJ1bm5pbmdSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVucXVldWVSZXF1ZXN0KGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJ1bm5pbmdSZXF1ZXN0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIFhEb21haW5SZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaWYgKGxvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cDonICYmIHVybC5pbmRleE9mKCdodHRwczonKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHVybCA9IFwiaHR0cDpcIi5jb25jYXQodXJsLnN1YnN0cmluZyg2KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hamF4SUU4KG1ldGhvZCwgdXJsLCBkYXRhLCBzdWNjZXNzLCBlcnJvciwgcXVldWVkLCBwbGFpblRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBoYW5kbGVkID0gZmFsc2U7XG4gICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgICAgIGlmIChoYW5kbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGFuZGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlXzE7XG4gICAgICAgICAgICAgICAgdmFyIHBhcnNlRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAocGxhaW5UZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlXzEgPSB4aHIucmVzcG9uc2VUZXh0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlXzEgPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IobnVsbCwgeGhyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghcGFyc2VFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDMwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyhyZXNwb25zZV8xLCB4aHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yKHJlc3BvbnNlXzEsIHhocik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHF1ZXVlZCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5ydW5uaW5nUmVxdWVzdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5kZXF1ZXVlUmVxdWVzdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGJsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgeGhyLm9uZXJyb3IgPSB4aHIub250aW1lb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBibG9ja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfdGhpcy5yZXF1ZXN0UXVldWUuc3BsaWNlKDAsIF90aGlzLnJlcXVlc3RRdWV1ZS5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAoIWJsb2NrZWQpIHtcbiAgICAgICAgICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTtcbiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAndGV4dC9wbGFpbicpOyAvLyBBdm9pZCBwcmUtZmxpZ2h0LlxuICAgICAgICAgICAgeGhyLnNlbmQoZGF0YSk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWhhbmRsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgeGhyLmFib3J0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcy5uZXR3b3JrVGltZW91dFNlY29uZHMgKiAxMDAwKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogTWFrZSBhbiBhamF4IHJlcXVlc3QgZm9yIElFOC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kIFRoZSBodHRwIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSB1cmwgdG8gb3Blbi5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheUJ1ZmZlcnxCbG9ifERvY3VtZW50fEZvcm1EYXRhfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHNlbnQgaW4gYm9keS5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdWNjZXNzIEEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIHN1Y2Nlc3MuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gZXJyb3IgQSBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgb24gZXJyb3IuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBxdWV1ZWQgV2hldGhlciB0aGUgcmVxdWVzdCBzaG91bGQgYmUgcXVldWVkIG9yIGltbWVkaWF0ZWx5IHNlbnQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBwbGFpblRleHQgV2hldGhlciB0aGUgcmVzcG9uc2Ugc2hvdWxkIGJlIHJldHVybmVkIGFzIHBsYWluIHRleHQgb3IganNvbi5cbiAgICAgKi9cbiAgICBOZXR3b3JrLnByb3RvdHlwZS5hamF4SUU4ID0gZnVuY3Rpb24gKG1ldGhvZCwgdXJsLCBkYXRhLCBzdWNjZXNzLCBlcnJvciwgcXVldWVkLCBwbGFpblRleHQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHhkciA9IG5ldyBYRG9tYWluUmVxdWVzdCgpO1xuICAgICAgICB4ZHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlO1xuICAgICAgICAgICAgdmFyIHBhcnNlRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChwbGFpblRleHQpIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IHhkci5yZXNwb25zZVRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IEpTT04ucGFyc2UoeGRyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IobnVsbCwgeGRyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcGFyc2VFcnJvcikge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyhyZXNwb25zZSwgeGRyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHF1ZXVlZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnJ1bm5pbmdSZXF1ZXN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgX3RoaXMuZGVxdWV1ZVJlcXVlc3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgeGRyLm9uZXJyb3IgPSB4ZHIub250aW1lb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yKG51bGwsIHhkcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICBpZiAocXVldWVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucnVubmluZ1JlcXVlc3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBfdGhpcy5kZXF1ZXVlUmVxdWVzdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB4ZHIub25wcm9ncmVzcyA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICAgICAgeGRyLm9wZW4obWV0aG9kLCB1cmwpO1xuICAgICAgICB4ZHIudGltZW91dCA9IHRoaXMubmV0d29ya1RpbWVvdXRTZWNvbmRzICogMTAwMDtcbiAgICAgICAgeGRyLnNlbmQoZGF0YSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBZGRzIHRoZSByZXF1ZXN0IHRvIHRoZSByZXF1ZXN0IHF1ZXVlLlxuICAgICAqIEBwYXJhbSByZXF1ZXN0QXJndW1lbnRzIFRoZSByZXF1ZXN0IGFyZ3VtZW50cyBmcm9tIHRoZSBpbml0aWFsIG1ldGhvZCBjYWxsLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgTmV0d29yay5wcm90b3R5cGUuZW5xdWV1ZVJlcXVlc3QgPSBmdW5jdGlvbiAocmVxdWVzdEFyZ3VtZW50cykge1xuICAgICAgICB0aGlzLnJlcXVlc3RRdWV1ZS5wdXNoKHJlcXVlc3RBcmd1bWVudHMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgcmVxdWVzdCBmcm9tIHRoZSByZXF1ZXN0IHF1ZXVlLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgTmV0d29yay5wcm90b3R5cGUuZGVxdWV1ZVJlcXVlc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gdGhpcy5yZXF1ZXN0UXVldWUuc2hpZnQoKTtcbiAgICAgICAgaWYgKGFyZ3MpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItc3ByZWFkXG4gICAgICAgICAgICB0aGlzLmFqYXguYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBOZXR3b3JrO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IE5ldHdvcms7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiAgQ29weXJpZ2h0IDIwMjAgTGVhbnBsdW0gSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEFyZ3NCdWlsZGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vQXJnc0J1aWxkZXJcIikpO1xudmFyIENvbnN0YW50c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0NvbnN0YW50c1wiKSk7XG52YXIgU3RvcmFnZU1hbmFnZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9TdG9yYWdlTWFuYWdlclwiKSk7XG52YXIgQVBQTElDQVRJT05fU0VSVkVSX1BVQkxJQ19LRVkgPSAnQkluV1BwV250ZlIzOXJnWFNQMDRwcWRtRWRER2E1MHo2enFiTXZ4eXhKQ3d6WEl1U3BTaDhDODg4LUNmSjgyV0VMbDdYZThjakFuZkN0LTN2SzBDaTY4Jztcbi8qKlxuICogUHVzaCBNYW5hZ2VyIGhhbmRsZXMgdGhlIHJlZ2lzdHJhdGlvbiBhbmQgc3Vic2NyaXB0aW9uIGZvciB3ZWIgcHVzaC5cbiAqL1xudmFyIFB1c2hNYW5hZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFB1c2hNYW5hZ2VyKGNyZWF0ZVJlcXVlc3QpIHtcbiAgICAgICAgdGhpcy5jcmVhdGVSZXF1ZXN0ID0gY3JlYXRlUmVxdWVzdDtcbiAgICAgICAgdGhpcy5zZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uID0gbnVsbDtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFB1c2hNYW5hZ2VyLnByb3RvdHlwZSwgXCJzZXJ2aWNlV29ya2VyXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci5zZXJ2aWNlV29ya2VyO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3Qgd2ViIHB1c2ggaXMgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyLlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IFRydWUgaWYgc3VwcG9ydGVkLCBlbHNlIGZhbHNlLlxuICAgICAqL1xuICAgIFB1c2hNYW5hZ2VyLnByb3RvdHlwZS5pc1dlYlB1c2hTdXBwb3J0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKCh3aW5kb3cgPT09IG51bGwgfHwgd2luZG93ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB3aW5kb3cubmF2aWdhdG9yKSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAnc2VydmljZVdvcmtlcicgaW4gd2luZG93Lm5hdmlnYXRvciAmJlxuICAgICAgICAgICAgJ1B1c2hNYW5hZ2VyJyBpbiB3aW5kb3cpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3QgdGhlIGJyb3dzZXIgaXMgc3Vic2NyaWJlZCB0byB3ZWIgcHVzaCBub3RpZmljYXRpb25zLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFRydWUgaWYgc3Vic2NyaWJlZCwgZWxzZSBmYWxzZS5cbiAgICAgKi9cbiAgICBQdXNoTWFuYWdlci5wcm90b3R5cGUuaXNXZWJQdXNoU3Vic2NyaWJlZCA9IGZ1bmN0aW9uIChjbGllbnRVcmwpIHtcbiAgICAgICAgaWYgKGNsaWVudFVybCA9PT0gdm9pZCAwKSB7IGNsaWVudFVybCA9ICcnOyB9XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCBQcm9taXNlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVnaXN0cmF0aW9uLCBzdWJzY3JpcHRpb24sIGlzU3Vic2NyaWJlZDtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc1dlYlB1c2hTdXBwb3J0ZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmYWxzZV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmdldFNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24oY2xpZW50VXJsKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lzdHJhdGlvbiA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVnaXN0cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZhbHNlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlZ2lzdHJhdGlvbi5wdXNoTWFuYWdlci5nZXRTdWJzY3JpcHRpb24oKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU3Vic2NyaWJlZCA9IHN1YnNjcmlwdGlvbiAhPT0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZU5ld1N1YnNjcmlwdGlvbk9uU2VydmVyKHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgaXNTdWJzY3JpYmVkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBmb3IgV2ViUHVzaC5cbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgc2VydmljZVdvcmtlclVybCBUaGUgdXJsIHRoYXQgc2VydmVzIHRoZSBzZXJ2aWNlIHdvcmtlciBvbiB5b3VyIGRvbWFpbi5cbiAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2FsbGJhY2sgICAgICAgICBUaGUgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIHdpdGggcmVzdWx0LlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFRydWUgaWYgc3Vic2NyaWJlZCwgZWxzZSBmYWxzZS5cbiAgICAgKi9cbiAgICBQdXNoTWFuYWdlci5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiAoc2VydmljZVdvcmtlclVybCwgc2NvcGUsIGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCBQcm9taXNlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EsIHN1YnNjcmlwdGlvbiwgaXNTdWJzY3JpYmVkLCBlcnJvcl8xO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzV2ViUHVzaFN1cHBvcnRlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0xlYW5wbHVtOiBQdXNoIG1lc3NhZ2luZyBpcyBub3Qgc3VwcG9ydGVkLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBjYWxsYmFjayhmYWxzZSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzEsIDQsICwgNV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKHNlcnZpY2VXb3JrZXJVcmwgfHwgJy9zdy5taW4uanMnLCBzY29wZSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uID0gX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5zZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uLnB1c2hNYW5hZ2VyLmdldFN1YnNjcmlwdGlvbigpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNTdWJzY3JpYmVkID0gc3Vic2NyaXB0aW9uICE9PSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzU3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTmV3U3Vic2NyaXB0aW9uT25TZXJ2ZXIoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBjYWxsYmFjayhpc1N1YnNjcmliZWQpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JfMSA9IF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdMZWFucGx1bTogU2VydmljZSBXb3JrZXIgRXJyb3I6ICcsIGVycm9yXzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGNhbGxiYWNrKGZhbHNlKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZSB0aGUgdXNlciAoYnJvd3NlcikgdG8gcHVzaC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlcyBpZiBzdWJzY3JpcHRpb24gc3VjY2Vzc2Z1bCwgb3RoZXJ3aXNlIHJlamVjdHMuXG4gICAgICovXG4gICAgUHVzaE1hbmFnZXIucHJvdG90eXBlLnN1YnNjcmliZVVzZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCBQcm9taXNlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXBwbGljYXRpb25TZXJ2ZXJLZXksIHN1YnNjcmlwdGlvbiwgZXJyb3JfMjtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uU2VydmVyS2V5ID0gdGhpcy51cmxCNjRUb1VpbnQ4QXJyYXkoQVBQTElDQVRJT05fU0VSVkVSX1BVQkxJQ19LRVkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzEsIDMsICwgNF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5zZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uLnB1c2hNYW5hZ2VyLnN1YnNjcmliZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJWaXNpYmxlT25seTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwbGljYXRpb25TZXJ2ZXJLZXk6IGFwcGxpY2F0aW9uU2VydmVyS2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTmV3U3Vic2NyaXB0aW9uT25TZXJ2ZXIoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcl8yID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTGVhbnBsdW06IEZhaWxlZCB0byBzdWJzY3JpYmUgdGhlIHVzZXI6IFwiLmNvbmNhdChlcnJvcl8yKSk7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRydWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFVuc3Vic2NyaWJlIHRoZSB1c2VyKGJyb3dzZXIpIGZyb20gcHVzaC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXNvbHZlcyBpZiB1bnN1YnNjcmliZWQsIG90aGVyd2lzZSByZWplY3RzLlxuICAgICAqL1xuICAgIFB1c2hNYW5hZ2VyLnByb3RvdHlwZS51bnN1YnNjcmliZVVzZXIgPSBmdW5jdGlvbiAoY2xpZW50VXJsKSB7XG4gICAgICAgIGlmIChjbGllbnRVcmwgPT09IHZvaWQgMCkgeyBjbGllbnRVcmwgPSAnJzsgfVxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgUHJvbWlzZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHN1YnNjcmliZWQsIHN1YnNjcmlwdGlvbiwgZXJyb3JfMztcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5pc1dlYlB1c2hTdWJzY3JpYmVkKGNsaWVudFVybCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVkID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVkKSByZXR1cm4gWzMgLypicmVhayovLCA2XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2EudHJ5cy5wdXNoKFsyLCA1LCAsIDZdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbi5wdXNoTWFuYWdlci5nZXRTdWJzY3JpcHRpb24oKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcl8zID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTGVhbnBsdW06IEVycm9yIHVuc3Vic2NyaWJpbmc6IFwiLmNvbmNhdChlcnJvcl8zKSk7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgc2VydmljZSB3b3JrZXIgcmVnaXN0cmF0aW9uIG9iamVjdCBmcm9tIGJyb3dzZXIuXG4gICAgICogQHJldHVybiB7b2JqZWN0fSBSZXR1cm5zIHRoZSByZWdpc3RyYXRpb24gb3IgbnVsbC5cbiAgICAgKi9cbiAgICBQdXNoTWFuYWdlci5wcm90b3R5cGUuZ2V0U2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbiA9IGZ1bmN0aW9uIChjbGllbnRVcmwpIHtcbiAgICAgICAgaWYgKGNsaWVudFVybCA9PT0gdm9pZCAwKSB7IGNsaWVudFVybCA9ICcnOyB9XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCBQcm9taXNlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISF0aGlzLnNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24pIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5zZXJ2aWNlV29ya2VyLmdldFJlZ2lzdHJhdGlvbihjbGllbnRVcmwpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbiA9IF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy5zZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBFbmNvZGVzIGEgYmFzZTY0IFVSTCBzdHJpbmcgdG8gYW4gVWludDggYXJyYXkuXG4gICAgICovXG4gICAgUHVzaE1hbmFnZXIucHJvdG90eXBlLnVybEI2NFRvVWludDhBcnJheSA9IGZ1bmN0aW9uIChiYXNlNjRTdHJpbmcpIHtcbiAgICAgICAgdmFyIHBhZGRpbmcgPSAnPScucmVwZWF0KCg0IC0gYmFzZTY0U3RyaW5nLmxlbmd0aCAlIDQpICUgNCk7XG4gICAgICAgIHZhciBiYXNlNjQgPSAoYmFzZTY0U3RyaW5nICsgcGFkZGluZykucmVwbGFjZSgvLS9nLCAnKycpLnJlcGxhY2UoL18vZywgJy8nKTtcbiAgICAgICAgdmFyIHJhd0RhdGEgPSB0aGlzLmRlY29kZURhdGEoYmFzZTY0KTtcbiAgICAgICAgdmFyIG91dHB1dEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkocmF3RGF0YS5sZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhd0RhdGEubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIG91dHB1dEFycmF5W2ldID0gcmF3RGF0YS5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRwdXRBcnJheTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNlbmQgYSBuZXcgc3Vic2NyaXB0aW9uIG9iamVjdCB0byB0aGUgTGVhbnBsdW0gc2VydmVyLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBzdWJzY3JpcHRpb24gVGhlIHN1YnNjcmlwdGlvbi5cbiAgICAgKi9cbiAgICBQdXNoTWFuYWdlci5wcm90b3R5cGUudXBkYXRlTmV3U3Vic2NyaXB0aW9uT25TZXJ2ZXIgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIGlmIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHZhciBwcmVwYXJlZFN1YnNjcmlwdGlvbiA9IHRoaXMucHJlcGFyZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgdmFyIHByZXBhcmVkU3Vic2NyaXB0aW9uU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkocHJlcGFyZWRTdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgdmFyIGV4aXN0aW5nU3Vic2NyaXB0aW9uU3RyaW5nID0gU3RvcmFnZU1hbmFnZXJfMS5kZWZhdWx0LmdldChDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5QVVNIX1NVQlNDUklQVElPTik7XG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdTdWJzY3JpcHRpb25TdHJpbmcgIT09IHByZXBhcmVkU3Vic2NyaXB0aW9uU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgU3RvcmFnZU1hbmFnZXJfMS5kZWZhdWx0LnNhdmUoQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuUFVTSF9TVUJTQ1JJUFRJT04sIHByZXBhcmVkU3Vic2NyaXB0aW9uU3RyaW5nKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN1YnNjcmlwdGlvbihwcmVwYXJlZFN1YnNjcmlwdGlvblN0cmluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFB1c2hNYW5hZ2VyLnByb3RvdHlwZS5wcmVwYXJlU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgICB2YXIga2V5ID0gKCdnZXRLZXknIGluIHN1YnNjcmlwdGlvbikgPyBzdWJzY3JpcHRpb24uZ2V0S2V5KCdwMjU2ZGgnKSA6IFtdO1xuICAgICAgICB2YXIgYXV0aCA9ICgnZ2V0S2V5JyBpbiBzdWJzY3JpcHRpb24pID8gc3Vic2NyaXB0aW9uLmdldEtleSgnYXV0aCcpIDogW107XG4gICAgICAgIHZhciBrZXlBc2NpaSA9IHRoaXMuZW5jb2RlRGF0YShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KGtleSkpKTtcbiAgICAgICAgdmFyIGF1dGhBc2NpaSA9IHRoaXMuZW5jb2RlRGF0YShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KGF1dGgpKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlbmRwb2ludDogc3Vic2NyaXB0aW9uLmVuZHBvaW50LFxuICAgICAgICAgICAga2V5OiBrZXlBc2NpaSxcbiAgICAgICAgICAgIGF1dGg6IGF1dGhBc2NpaSxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNlbmQgdGhlIHN1YnNjcmlwdGlvbiB0byB0aGUgTGVhbnBsdW0gc2VydmVyLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdWJzY3JpcHRpb24gVGhlIHN1YnNjcmlwdGlvbiBzdHJpbmcuXG4gICAgICovXG4gICAgUHVzaE1hbmFnZXIucHJvdG90eXBlLnNldFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJnc0J1aWxkZXJfMS5kZWZhdWx0KCkuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLldFQl9QVVNIX1NVQlNDUklQVElPTiwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlUmVxdWVzdChDb25zdGFudHNfMS5kZWZhdWx0Lk1FVEhPRFMuU0VUX0RFVklDRV9BVFRSSUJVVEVTLCBhcmdzLCB7XG4gICAgICAgICAgICAgICAgcXVldWVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzZW5kTm93OiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFB1c2hNYW5hZ2VyLnByb3RvdHlwZS5lbmNvZGVEYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5idG9hKGRhdGEpO1xuICAgIH07XG4gICAgUHVzaE1hbmFnZXIucHJvdG90eXBlLmRlY29kZURhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICByZXR1cm4gd2luZG93LmF0b2IoZGF0YSk7XG4gICAgfTtcbiAgICByZXR1cm4gUHVzaE1hbmFnZXI7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gUHVzaE1hbmFnZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiAgQ29weXJpZ2h0IDIwMjAgTGVhbnBsdW0gSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgTmV0d29ya18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL05ldHdvcmtcIikpO1xuLyoqXG4gKiBTb2NrZXQuaW8gMS4wIGNsaWVudCBjbGFzcy5cbiAqL1xudmFyIFNvY2tldElvQ2xpZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGEgbmV3IFNvY2tldElvQ2xpZW50LCBub3QgY29ubmVjdGVkIGJ5IGRlZmF1bHQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU29ja2V0SW9DbGllbnQoKSB7XG4gICAgICAgIHRoaXMubmV0d29yayA9IG5ldyBOZXR3b3JrXzEuZGVmYXVsdCgpO1xuICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb25uZWN0aW5nID0gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbm5lY3RzIHRvIHRoZSBnaXZlbiBzb2NrZXRIb3N0LlxuICAgICAqIEBwYXJhbSBzb2NrZXRIb3N0IFRoZSBob3N0IHRvIGNvbm5lY3QgdG8uXG4gICAgICovXG4gICAgU29ja2V0SW9DbGllbnQucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAoc29ja2V0SG9zdCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmNvbm5lY3RpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLm5ldHdvcmsuYWpheCgnUE9TVCcsIFwiaHR0cHM6Ly9cIi5jb25jYXQoc29ja2V0SG9zdCwgXCIvc29ja2V0LmlvLzFcIiksICcnLCBmdW5jdGlvbiAobGluZSkge1xuICAgICAgICAgICAgdmFyIHBhcnRzID0gbGluZS5zcGxpdCgnOicpO1xuICAgICAgICAgICAgdmFyIHNlc3Npb24gPSBwYXJ0c1swXTtcbiAgICAgICAgICAgIHZhciBoZWFydGJlYXQgPSBwYXJzZUludChwYXJ0c1sxXSkgLyAyICogMTAwMDtcbiAgICAgICAgICAgIF90aGlzLnNvY2tldCA9IG5ldyBXZWJTb2NrZXQoXCJ3c3M6Ly9cIi5jb25jYXQoc29ja2V0SG9zdCwgXCIvc29ja2V0LmlvLzEvd2Vic29ja2V0L1wiKS5jb25jYXQoc2Vzc2lvbikpO1xuICAgICAgICAgICAgdmFyIGhlYXJ0YmVhdEludGVydmFsID0gbnVsbDtcbiAgICAgICAgICAgIF90aGlzLnNvY2tldC5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfdGhpcy5jb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLm9ub3Blbikge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vbm9wZW4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGVhcnRiZWF0SW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNvY2tldC5zZW5kKCcyOjo6Jyk7XG4gICAgICAgICAgICAgICAgfSwgaGVhcnRiZWF0KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpcy5zb2NrZXQub25jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGhlYXJ0YmVhdEludGVydmFsKTtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMub25jbG9zZSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vbmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIF90aGlzLnNvY2tldC5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZVBhcnRzID0gZXZlbnQuZGF0YS5zcGxpdCgnOicpO1xuICAgICAgICAgICAgICAgIHZhciBjb2RlID0gcGFyc2VJbnQobWVzc2FnZVBhcnRzWzBdKTtcbiAgICAgICAgICAgICAgICBpZiAoY29kZSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zb2NrZXQuc2VuZCgnMjo6Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNvZGUgPT09IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2VJZCA9IG1lc3NhZ2VQYXJ0c1sxXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKG1lc3NhZ2VQYXJ0cy5zbGljZSgzKS5qb2luKCc6JykpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZUV2ZW50ID0gZGF0YS5uYW1lO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IGRhdGEuYXJncztcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2VJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc29ja2V0LnNlbmQoXCI2Ojo6XCIuY29uY2F0KG1lc3NhZ2VJZCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5vbm1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm9ubWVzc2FnZShtZXNzYWdlRXZlbnQsIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNvZGUgPT09IDcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJTb2NrZXQgZXJyb3I6IFwiLmNvbmNhdChldmVudC5kYXRhKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIF90aGlzLnNvY2tldC5vbmVycm9yID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc29ja2V0LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLm9uZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub25lcnJvcihldmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSwgbnVsbCwgZmFsc2UsIHRydWUgLy8gbnVsbCwgcXVldWVkLCBwbGFpblRleHRcbiAgICAgICAgKTtcbiAgICB9O1xuICAgIFNvY2tldElvQ2xpZW50LnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnNvY2tldC5jbG9zZSgpO1xuICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNlbmRzIGdpdmVuIGV2ZW50IHdpdGggYXJndW1lbnRzIHRvIHRoZSBzZXJ2ZXIuXG4gICAgICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgZXZlbnQuXG4gICAgICogQHBhcmFtIGFyZ3MgQXJndW1lbnRzIHRvIHNlbmQuXG4gICAgICovXG4gICAgU29ja2V0SW9DbGllbnQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAobmFtZSwgYXJncykge1xuICAgICAgICBpZiAoIXRoaXMuY29ubmVjdGVkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnTGVhbnBsdW06IFNvY2tldCBpcyBub3QgY29ubmVjdGVkLicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhcmdzSnNvbiA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBhcmdzOiBhcmdzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zb2NrZXQuc2VuZChcIjU6OjpcIi5jb25jYXQoYXJnc0pzb24pKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG5ldHdvcmsgdGltZW91dC5cbiAgICAgKiBAcGFyYW0gVGhlIHRpbWVvdXQgaW4gc2Vjb25kcy5cbiAgICAgKi9cbiAgICBTb2NrZXRJb0NsaWVudC5wcm90b3R5cGUuc2V0TmV0d29ya1RpbWVvdXQgPSBmdW5jdGlvbiAoc2Vjb25kcykge1xuICAgICAgICB0aGlzLm5ldHdvcmsuc2V0TmV0d29ya1RpbWVvdXQoc2Vjb25kcyk7XG4gICAgfTtcbiAgICByZXR1cm4gU29ja2V0SW9DbGllbnQ7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gU29ja2V0SW9DbGllbnQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKlxuICogIENvcHlyaWdodCAyMDIwIExlYW5wbHVtIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgc3RvcmFnZUVuYWJsZWQgPSB7XG4gICAgbG9jYWw6IHRydWUsXG4gICAgc2Vzc2lvbjogdHJ1ZSxcbn07XG52YXIgYWx0ZXJuYXRlU3RvcmFnZSA9IHtcbiAgICBsb2NhbDoge30sXG4gICAgc2Vzc2lvbjoge30sXG59O1xudmFyIFN0b3JhZ2VNYW5hZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN0b3JhZ2VNYW5hZ2VyKCkge1xuICAgIH1cbiAgICBTdG9yYWdlTWFuYWdlci5nZXQgPSBmdW5jdGlvbiAoa2V5LCB0eXBlKSB7XG4gICAgICAgIGlmICh0eXBlID09PSB2b2lkIDApIHsgdHlwZSA9ICdsb2NhbCc7IH1cbiAgICAgICAgaWYgKCFzdG9yYWdlRW5hYmxlZFt0eXBlXSkge1xuICAgICAgICAgICAgcmV0dXJuIGFsdGVybmF0ZVN0b3JhZ2VbdHlwZV1ba2V5XTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdsb2NhbCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxTdG9yYWdlW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBzdG9yYWdlRW5hYmxlZFt0eXBlXSA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIGFsdGVybmF0ZVN0b3JhZ2VbdHlwZV1ba2V5XTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3RvcmFnZU1hbmFnZXIuc2F2ZSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlLCB0eXBlKSB7XG4gICAgICAgIGlmICh0eXBlID09PSB2b2lkIDApIHsgdHlwZSA9ICdsb2NhbCc7IH1cbiAgICAgICAgaWYgKCFzdG9yYWdlRW5hYmxlZFt0eXBlXSkge1xuICAgICAgICAgICAgYWx0ZXJuYXRlU3RvcmFnZVt0eXBlXVtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnbG9jYWwnKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHN0b3JhZ2VFbmFibGVkW3R5cGVdID0gZmFsc2U7XG4gICAgICAgICAgICBhbHRlcm5hdGVTdG9yYWdlW3R5cGVdW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3RvcmFnZU1hbmFnZXIucmVtb3ZlID0gZnVuY3Rpb24gKGtleSwgdHlwZSkge1xuICAgICAgICBpZiAodHlwZSA9PT0gdm9pZCAwKSB7IHR5cGUgPSAnbG9jYWwnOyB9XG4gICAgICAgIGlmICghc3RvcmFnZUVuYWJsZWRbdHlwZV0pIHtcbiAgICAgICAgICAgIGRlbGV0ZSBhbHRlcm5hdGVTdG9yYWdlW3R5cGVdW2tleV07XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnbG9jYWwnKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgc3RvcmFnZUVuYWJsZWRbdHlwZV0gPSBmYWxzZTtcbiAgICAgICAgICAgIGRlbGV0ZSBhbHRlcm5hdGVTdG9yYWdlW3R5cGVdW2tleV07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTdG9yYWdlTWFuYWdlcjtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBTdG9yYWdlTWFuYWdlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFZhbHVlVHJhbnNmb3JtcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBWYWx1ZVRyYW5zZm9ybXMoKSB7XG4gICAgfVxuICAgIFZhbHVlVHJhbnNmb3Jtcy5kZWNvZGVDb2xvciA9IGZ1bmN0aW9uIChjb2xvcikge1xuICAgICAgICB2YXIgYiA9IGNvbG9yICYgMHhmZjtcbiAgICAgICAgY29sb3IgPj49IDg7XG4gICAgICAgIHZhciBnID0gY29sb3IgJiAweGZmO1xuICAgICAgICBjb2xvciA+Pj0gODtcbiAgICAgICAgdmFyIHIgPSBjb2xvciAmIDB4ZmY7XG4gICAgICAgIGNvbG9yID4+PSA4O1xuICAgICAgICB2YXIgYSA9IChjb2xvciAmIDB4ZmYpIC8gMjU1O1xuICAgICAgICByZXR1cm4gXCJyZ2JhKFwiLmNvbmNhdChyLCBcIixcIikuY29uY2F0KGcsIFwiLFwiKS5jb25jYXQoYiwgXCIsXCIpLmNvbmNhdChhLCBcIilcIik7XG4gICAgfTtcbiAgICBWYWx1ZVRyYW5zZm9ybXMuZW5jb2RlQ29sb3IgPSBmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjb2xvciA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBjb2xvcjtcbiAgICAgICAgfVxuICAgICAgICAvLyByZ2JhIC0+IG51bWJlclxuICAgICAgICB2YXIgcmdiYVJlID0gL15yZ2JhXFwoKFxcZCspLChcXGQrKSwoXFxkKyksKFxcZCsoXFwuXFxkKyk/KVxcKSQvO1xuICAgICAgICB2YXIgcmdiYSA9IHJnYmFSZS5leGVjKGNvbG9yKTtcbiAgICAgICAgaWYgKHJnYmEpIHtcbiAgICAgICAgICAgIHZhciBhID0gcGFyc2VJbnQocmdiYVs0XSwgMTApICogMjU1O1xuICAgICAgICAgICAgdmFyIHIgPSBwYXJzZUludChyZ2JhWzFdLCAxMCkgJiAweGZmO1xuICAgICAgICAgICAgdmFyIGcgPSBwYXJzZUludChyZ2JhWzJdLCAxMCkgJiAweGZmO1xuICAgICAgICAgICAgdmFyIGIgPSBwYXJzZUludChyZ2JhWzNdLCAxMCkgJiAweGZmO1xuICAgICAgICAgICAgcmV0dXJuIChhIDw8IDI0KSArIChyIDw8IDE2KSArIChnIDw8IDgpICsgYjtcbiAgICAgICAgfVxuICAgICAgICAvLyBoZXggLT4gbnVtYmVyXG4gICAgICAgIHZhciBoZXhSZSA9IC9eIyhbMC05YS1mXXsyfSkoWzAtOWEtZl17Mn0pKFswLTlhLWZdezJ9KSQvaTtcbiAgICAgICAgdmFyIGhleCA9IGhleFJlLmV4ZWMoY29sb3IpO1xuICAgICAgICBpZiAoaGV4KSB7XG4gICAgICAgICAgICB2YXIgciA9IHBhcnNlSW50KGhleFsxXSwgMTYpICYgMHhmZjtcbiAgICAgICAgICAgIHZhciBnID0gcGFyc2VJbnQoaGV4WzJdLCAxNikgJiAweGZmO1xuICAgICAgICAgICAgdmFyIGIgPSBwYXJzZUludChoZXhbM10sIDE2KSAmIDB4ZmY7XG4gICAgICAgICAgICByZXR1cm4gKDI1NSA8PCAyNCkgKyAociA8PCAxNikgKyAoZyA8PCA4KSArIGI7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IHBhcnNlIGNvbG9yIFxcXCJcIi5jb25jYXQoY29sb3IsIFwiXFxcIlwiKSk7XG4gICAgfTtcbiAgICByZXR1cm4gVmFsdWVUcmFuc2Zvcm1zO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFZhbHVlVHJhbnNmb3JtcztcbiIsIlwidXNlIHN0cmljdFwiO1xuLypcbiAqICBDb3B5cmlnaHQgMjAyMCBMZWFucGx1bSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdDpcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQXJnc0J1aWxkZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9BcmdzQnVpbGRlclwiKSk7XG52YXIgQ29uc3RhbnRzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vQ29uc3RhbnRzXCIpKTtcbnZhciBTdG9yYWdlTWFuYWdlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL1N0b3JhZ2VNYW5hZ2VyXCIpKTtcbnZhciBWYWx1ZVRyYW5zZm9ybXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9WYWx1ZVRyYW5zZm9ybXNcIikpO1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuLy8gdHJhbnNmb3JtcyB0aGUgc2VydmVyIHJlc3BvbnNlIHRvIHRoZSBmb3JtYXQgZXhwZWN0ZWQgYnkgc2V0VmFyc1xuLy8gLSBsb3dlcmNhc2Uga2luZHNcbi8vIC0gYWN0aW9ucyBhcyBlbXB0eSBzdHJpbmdzXG5mdW5jdGlvbiB0b1NldFZhcnNGb3JtYXQobykge1xuICAgIGlmICghbylcbiAgICAgICAgcmV0dXJuIG87XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG8pLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBhY3Rpb24pIHtcbiAgICAgICAgYWNjW2FjdGlvbl0gPSBfX2Fzc2lnbih7fSwgb1thY3Rpb25dKTtcbiAgICAgICAgdmFyIGtpbmRzID0gb1thY3Rpb25dLmtpbmRzO1xuICAgICAgICBpZiAoa2luZHMpIHtcbiAgICAgICAgICAgIGFjY1thY3Rpb25dLmtpbmRzID0gT2JqZWN0LmtleXMoa2luZHMpXG4gICAgICAgICAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAoaywga3gpIHtcbiAgICAgICAgICAgICAgICB2YXIga2luZCA9IGtpbmRzW2t4XS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIGtba3hdID0ga2luZDtcbiAgICAgICAgICAgICAgICBpZiAoa2luZCA9PT0gJ2FjdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgYWNjW2FjdGlvbl0udmFsdWVzW2t4XSA9ICcnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaztcbiAgICAgICAgICAgIH0sIHt9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbn1cbnZhciBWYXJDYWNoZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBWYXJDYWNoZShjcmVhdGVSZXF1ZXN0KSB7XG4gICAgICAgIHRoaXMuY3JlYXRlUmVxdWVzdCA9IGNyZWF0ZVJlcXVlc3Q7XG4gICAgICAgIHRoaXMuYWN0aW9uRGVmaW5pdGlvbnMgPSB7fTtcbiAgICAgICAgdGhpcy5oYXNSZWNlaXZlZERpZmZzID0gZmFsc2U7XG4gICAgICAgIHRoaXMubWVyZ2VkID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnZhcmlhYmxlcyA9IG51bGw7XG4gICAgICAgIHRoaXMudmFyaWFibGVzQ2hhbmdlZEhhbmRsZXJzID0gW107XG4gICAgICAgIHRoaXMudmFyaWFudERlYnVnSW5mbyA9IHt9O1xuICAgICAgICB0aGlzLmRpZmZzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnRva2VuID0gJyc7XG4gICAgICAgIHRoaXMudmFyaWFudHMgPSBbXTtcbiAgICB9XG4gICAgVmFyQ2FjaGUucHJvdG90eXBlLmFwcGx5RGlmZnMgPSBmdW5jdGlvbiAoZGlmZnMsIHZhcmlhbnRzLCBhY3Rpb25EZWZpbml0aW9ucykge1xuICAgICAgICB0aGlzLmRpZmZzID0gZGlmZnM7XG4gICAgICAgIHRoaXMudmFyaWFudHMgPSB2YXJpYW50cztcbiAgICAgICAgdGhpcy5hY3Rpb25EZWZpbml0aW9ucyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLmFjdGlvbkRlZmluaXRpb25zKSwgdG9TZXRWYXJzRm9ybWF0KGFjdGlvbkRlZmluaXRpb25zKSk7XG4gICAgICAgIHRoaXMuaGFzUmVjZWl2ZWREaWZmcyA9IHRydWU7XG4gICAgICAgIHRoaXMubWVyZ2VkID0gbWVyZ2VIZWxwZXIodGhpcy52YXJpYWJsZXMsIGRpZmZzKTtcbiAgICAgICAgdGhpcy5zYXZlRGlmZnMoKTtcbiAgICAgICAgaWYgKHRoaXMub25VcGRhdGUpIHtcbiAgICAgICAgICAgIHRoaXMub25VcGRhdGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVmFyQ2FjaGUucHJvdG90eXBlLmxvYWREaWZmcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuYXBwbHlEaWZmcyhKU09OLnBhcnNlKHRoaXMubG9hZExvY2FsKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLlZBUklBQkxFUykgfHwgbnVsbCksIEpTT04ucGFyc2UodGhpcy5sb2FkTG9jYWwoQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuVkFSSUFOVFMpIHx8IG51bGwpLCBKU09OLnBhcnNlKHRoaXMubG9hZExvY2FsKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLkFDVElPTl9ERUZJTklUSU9OUykgfHwgbnVsbCkpO1xuICAgICAgICAgICAgdGhpcy50b2tlbiA9IHRoaXMubG9hZExvY2FsKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLlRPS0VOKTtcbiAgICAgICAgICAgIHRoaXMudmFyaWFudERlYnVnSW5mbyA9IHRoaXMubG9hZExvY2FsKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLlZBUklBTlRfREVCVUdfSU5GTyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTGVhbnBsdW06IEludmFsaWQgZGlmZnM6IFwiLmNvbmNhdChlKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFZhckNhY2hlLnByb3RvdHlwZS5zYXZlRGlmZnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2F2ZUxvY2FsKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLlZBUklBQkxFUywgSlNPTi5zdHJpbmdpZnkodGhpcy5kaWZmcyB8fCB7fSkpO1xuICAgICAgICB0aGlzLnNhdmVMb2NhbChDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5WQVJJQU5UUywgSlNPTi5zdHJpbmdpZnkodGhpcy52YXJpYW50cyB8fCBbXSkpO1xuICAgICAgICB0aGlzLnNhdmVMb2NhbChDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5BQ1RJT05fREVGSU5JVElPTlMsIEpTT04uc3RyaW5naWZ5KHRoaXMuYWN0aW9uRGVmaW5pdGlvbnMgfHwge30pKTtcbiAgICAgICAgdGhpcy5zYXZlTG9jYWwoQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuVkFSSUFOVF9ERUJVR19JTkZPLCBKU09OLnN0cmluZ2lmeSh0aGlzLnZhcmlhbnREZWJ1Z0luZm8gfHwge30pKTtcbiAgICAgICAgdGhpcy5zYXZlTG9jYWwoQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuVE9LRU4sIHRoaXMudG9rZW4pO1xuICAgIH07XG4gICAgVmFyQ2FjaGUucHJvdG90eXBlLmdldFZhcmlhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5nZXRWYXJpYWJsZXMoKTtcbiAgICAgICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50W2FyZ3NbaV1dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjdXJyZW50O1xuICAgIH07XG4gICAgVmFyQ2FjaGUucHJvdG90eXBlLmdldFZhcmlhYmxlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVyZ2VkICE9PSB1bmRlZmluZWQgPyB0aGlzLm1lcmdlZCA6IHRoaXMudmFyaWFibGVzO1xuICAgIH07XG4gICAgVmFyQ2FjaGUucHJvdG90eXBlLnNldFZhcmlhYmxlcyA9IGZ1bmN0aW9uICh2YXJpYWJsZXMpIHtcbiAgICAgICAgdGhpcy52YXJpYWJsZXMgPSB2YXJpYWJsZXM7XG4gICAgfTtcbiAgICBWYXJDYWNoZS5wcm90b3R5cGUuYWRkVmFyaWFibGVzQ2hhbmdlZEhhbmRsZXIgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICB0aGlzLnZhcmlhYmxlc0NoYW5nZWRIYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuICAgICAgICBpZiAodGhpcy5oYXNSZWNlaXZlZERpZmZzKSB7XG4gICAgICAgICAgICBoYW5kbGVyKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFZhckNhY2hlLnByb3RvdHlwZS5yZW1vdmVWYXJpYWJsZXNDaGFuZ2VkSGFuZGxlciA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHZhciBpZHggPSB0aGlzLnZhcmlhYmxlc0NoYW5nZWRIYW5kbGVycy5pbmRleE9mKGhhbmRsZXIpO1xuICAgICAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgICAgIHRoaXMudmFyaWFibGVzQ2hhbmdlZEhhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBWYXJDYWNoZS5wcm90b3R5cGUudHJpZ2dlclZhcmlhYmxlc0NoYW5nZWRIYW5kbGVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnZhcmlhYmxlc0NoYW5nZWRIYW5kbGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy52YXJpYWJsZXNDaGFuZ2VkSGFuZGxlcnNbaV0oKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVmFyQ2FjaGUucHJvdG90eXBlLmdldFZhcmlhbnREZWJ1Z0luZm8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhcmlhbnREZWJ1Z0luZm87XG4gICAgfTtcbiAgICBWYXJDYWNoZS5wcm90b3R5cGUuc2V0VmFyaWFudERlYnVnSW5mbyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhcmlhbnREZWJ1Z0luZm8gPSB2YWx1ZTtcbiAgICB9O1xuICAgIFZhckNhY2hlLnByb3RvdHlwZS5zZW5kQWN0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoIU9iamVjdC5rZXlzKHRoaXMuYWN0aW9uRGVmaW5pdGlvbnMpLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0VmFycygoX2EgPSB7fSxcbiAgICAgICAgICAgIF9hW0NvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLkFDVElPTl9ERUZJTklUSU9OU10gPSB0aGlzLmFjdGlvbkRlZmluaXRpb25zLFxuICAgICAgICAgICAgX2EpKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBWYXJDYWNoZS5wcm90b3R5cGUuc2VuZFZhcmlhYmxlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLnNldFZhcnMoKF9hID0ge30sXG4gICAgICAgICAgICBfYVtDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5WQVJJQUJMRVNdID0gdGhpcy52YXJpYWJsZXMsXG4gICAgICAgICAgICBfYSkpO1xuICAgIH07XG4gICAgVmFyQ2FjaGUucHJvdG90eXBlLnNldFZhcnMgPSBmdW5jdGlvbiAoYm9keSkge1xuICAgICAgICB2YXIgYXJncyA9IG5ldyBBcmdzQnVpbGRlcl8xLmRlZmF1bHQoKS5ib2R5KEpTT04uc3RyaW5naWZ5KGJvZHkpKTtcbiAgICAgICAgdGhpcy5jcmVhdGVSZXF1ZXN0KENvbnN0YW50c18xLmRlZmF1bHQuTUVUSE9EUy5TRVRfVkFSUywgYXJncywge1xuICAgICAgICAgICAgc2VuZE5vdzogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBWYXJDYWNoZS5wcm90b3R5cGUuY2xlYXJVc2VyQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kaWZmcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy52YXJpYWJsZXMgPSBudWxsO1xuICAgICAgICB0aGlzLnZhcmlhbnRzID0gW107XG4gICAgICAgIHRoaXMudmFyaWFudERlYnVnSW5mbyA9IHt9O1xuICAgICAgICB0aGlzLm1lcmdlZCA9IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIFZhckNhY2hlLnByb3RvdHlwZS5yZWdpc3RlckFjdGlvbkRlZmluaXRpb24gPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB0aGlzLmFjdGlvbkRlZmluaXRpb25zW29wdGlvbnMubmFtZV0gPSBvcHRpb25zVG9EZWZpbml0aW9ucyhvcHRpb25zKTtcbiAgICB9O1xuICAgIFZhckNhY2hlLnByb3RvdHlwZS5sb2FkTG9jYWwgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQuZ2V0KGtleSk7XG4gICAgfTtcbiAgICBWYXJDYWNoZS5wcm90b3R5cGUuc2F2ZUxvY2FsID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgU3RvcmFnZU1hbmFnZXJfMS5kZWZhdWx0LnNhdmUoa2V5LCB2YWx1ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gVmFyQ2FjaGU7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gVmFyQ2FjaGU7XG5mdW5jdGlvbiBhcmd1bWVudFRyZWUoYXJncykge1xuICAgIHJldHVybiBhcmdzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCB4KSB7XG4gICAgICAgIGlmICh4LnZhbHVlIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIGFjY1t4Lm5hbWVdID0gYXJndW1lbnRUcmVlKHgudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHgudHlwZSA9PT0gJ2FjdGlvbicpIHtcbiAgICAgICAgICAgIGFjY1t4Lm5hbWVdID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoeC50eXBlID09PSAnY29sb3InKSB7XG4gICAgICAgICAgICBhY2NbeC5uYW1lXSA9IFZhbHVlVHJhbnNmb3Jtc18xLmRlZmF1bHQuZW5jb2RlQ29sb3IoeC52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhY2NbeC5uYW1lXSA9IHgudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG59XG5mdW5jdGlvbiBhcmd1bWVudEtpbmRzKGFyZ3MsIHByZWZpeCkge1xuICAgIGlmIChwcmVmaXggPT09IHZvaWQgMCkgeyBwcmVmaXggPSAnJzsgfVxuICAgIHJldHVybiBhcmdzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCB4KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIHByb3BOYW1lID0gXCJcIi5jb25jYXQocHJlZml4KS5jb25jYXQoeC5uYW1lKTtcbiAgICAgICAgaWYgKHgudmFsdWUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgYWNjID0gX19hc3NpZ24oKF9hID0ge30sIF9hW3Byb3BOYW1lXSA9ICdncm91cCcsIF9hKSwgYXJndW1lbnRLaW5kcyh4LnZhbHVlLCBcIlwiLmNvbmNhdChwcm9wTmFtZSwgXCIuXCIpKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhY2NbcHJvcE5hbWVdID0geC50eXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG59XG5mdW5jdGlvbiBvcHRpb25zVG9EZWZpbml0aW9ucyhvcHRpb25zKSB7XG4gICAgdmFyIGRlZmluaXRpb25zID0ge1xuICAgICAgICBraW5kOiBvcHRpb25zLmtpbmQgfHwgMyxcbiAgICAgICAgb3B0aW9uczogbnVsbCxcbiAgICAgICAgdmFsdWVzOiBhcmd1bWVudFRyZWUob3B0aW9ucy5hcmdzKSxcbiAgICAgICAga2luZHM6IGFyZ3VtZW50S2luZHMob3B0aW9ucy5hcmdzKSxcbiAgICB9O1xuICAgIHJldHVybiBkZWZpbml0aW9ucztcbn1cbmZ1bmN0aW9uIG1lcmdlSGVscGVyKHZhcnMsIGRpZmYpIHtcbiAgICBpZiAodHlwZW9mIGRpZmYgPT09ICdudW1iZXInIHx8IHR5cGVvZiBkaWZmID09PSAnYm9vbGVhbicgfHwgdHlwZW9mIGRpZmYgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBkaWZmO1xuICAgIH1cbiAgICBpZiAoZGlmZiA9PT0gbnVsbCB8fCBkaWZmID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHZhcnM7XG4gICAgfVxuICAgIHZhciBvYmpJdGVyYXRvciA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGl0ZXJhdGUoZikge1xuICAgICAgICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgZihvYmpbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGF0dHIgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgc2VlbXMgdG8gYmUgYmVzdCBwcmFjdGljZTogaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzcwNzFcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZWZsZWN0XG4gICAgICAgICAgICAgICAgICAgIGlmICh7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgYXR0cikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGYoYXR0cik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfTtcbiAgICB2YXIgdmFyc0l0ZXJhdG9yID0gb2JqSXRlcmF0b3IodmFycyk7XG4gICAgdmFyIGRpZmZJdGVyYXRvciA9IG9iakl0ZXJhdG9yKGRpZmYpO1xuICAgIC8vIEluZmVyIHRoYXQgdGhlIGRpZmZzIGlzIGFuIGFycmF5IGlmIHRoZSB2YXJzIHZhbHVlIGRvZXNuJ3QgZXhpc3QgdG8gdGVsbCB1cyB0aGUgdHlwZS5cbiAgICB2YXIgaXNBcnJheSA9IGZhbHNlO1xuICAgIGlmICh2YXJzID09PSBudWxsKSB7XG4gICAgICAgIGlmICghKGRpZmYgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgICAgICAgIGlzQXJyYXkgPSBudWxsO1xuICAgICAgICAgICAgZm9yICh2YXIgYXR0cmlidXRlIGluIGRpZmYpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWRpZmYuaGFzT3duUHJvcGVydHkoYXR0cmlidXRlKSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzQXJyYXkgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNBcnJheSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghKHR5cGVvZiBhdHRyaWJ1dGUgPT09ICdzdHJpbmcnKSkge1xuICAgICAgICAgICAgICAgICAgICBpc0FycmF5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlLmxlbmd0aCA8IDMgfHwgYXR0cmlidXRlLmNoYXJBdCgwKSAhPT0gJ1snIHx8XG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZS5jaGFyQXQoYXR0cmlidXRlLmxlbmd0aCAtIDEpICE9PSAnXScpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNBcnJheSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gTWVyZ2UgYXJyYXlzLlxuICAgIGlmICh2YXJzIGluc3RhbmNlb2YgQXJyYXkgfHwgaXNBcnJheSkge1xuICAgICAgICB2YXIgbWVyZ2VkXzEgPSBbXTtcbiAgICAgICAgdmFyc0l0ZXJhdG9yKGZ1bmN0aW9uIChhdHRyKSB7XG4gICAgICAgICAgICBtZXJnZWRfMS5wdXNoKGF0dHIpO1xuICAgICAgICB9KTtcbiAgICAgICAgZGlmZkl0ZXJhdG9yKGZ1bmN0aW9uICh2YXJTdWJzY3JpcHQpIHtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHQgPSBwYXJzZUludCh2YXJTdWJzY3JpcHQuc3Vic3RyaW5nKDEsIHZhclN1YnNjcmlwdC5sZW5ndGggLSAxKSk7XG4gICAgICAgICAgICB2YXIgZGlmZlZhbHVlID0gZGlmZlt2YXJTdWJzY3JpcHRdO1xuICAgICAgICAgICAgd2hpbGUgKHN1YnNjcmlwdCA+PSBtZXJnZWRfMS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBtZXJnZWRfMS5wdXNoKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWVyZ2VkXzFbc3Vic2NyaXB0XSA9IG1lcmdlSGVscGVyKG1lcmdlZF8xW3N1YnNjcmlwdF0sIGRpZmZWYWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbWVyZ2VkXzE7XG4gICAgfVxuICAgIC8vIE1lcmdlIGRpY3Rpb25hcmllcy5cbiAgICB2YXIgbWVyZ2VkID0ge307XG4gICAgdmFyc0l0ZXJhdG9yKGZ1bmN0aW9uIChhdHRyKSB7XG4gICAgICAgIGlmIChkaWZmW2F0dHJdID09PSBudWxsIHx8IGRpZmZbYXR0cl0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbWVyZ2VkW2F0dHJdID0gdmFyc1thdHRyXTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGRpZmZJdGVyYXRvcihmdW5jdGlvbiAoYXR0cikge1xuICAgICAgICBtZXJnZWRbYXR0cl0gPSBtZXJnZUhlbHBlcih2YXJzID09PSBudWxsID8gbnVsbCA6IHZhcnNbYXR0cl0gfHwge30sIGRpZmZbYXR0cl0pO1xuICAgIH0pO1xuICAgIHJldHVybiBtZXJnZWQ7XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzICovXG52YXIgTGVhbnBsdW0gPSByZXF1aXJlKCcuLi9MZWFucGx1bS50cycpO1xubW9kdWxlLmV4cG9ydHMgPSBMZWFucGx1bS5kZWZhdWx0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1pZ3JhdGlvblN0YXRlID0gdm9pZCAwO1xudmFyIE1pZ3JhdGlvblN0YXRlO1xuKGZ1bmN0aW9uIChNaWdyYXRpb25TdGF0ZSkge1xuICAgIE1pZ3JhdGlvblN0YXRlW1wiVU5LTk9XTlwiXSA9IFwidW5rbm93blwiO1xuICAgIE1pZ3JhdGlvblN0YXRlW1wiTEVBTlBMVU1cIl0gPSBcImxwXCI7XG4gICAgTWlncmF0aW9uU3RhdGVbXCJEVVBMSUNBVEVcIl0gPSBcImxwK2N0XCI7XG4gICAgTWlncmF0aW9uU3RhdGVbXCJDTEVWRVJUQVBcIl0gPSBcImN0XCI7XG59KShNaWdyYXRpb25TdGF0ZSA9IGV4cG9ydHMuTWlncmF0aW9uU3RhdGUgfHwgKGV4cG9ydHMuTWlncmF0aW9uU3RhdGUgPSB7fSkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1lc3NhZ2VLaW5kID0gZXhwb3J0cy5BY3Rpb25QYXJhbWV0ZXJUeXBlID0gdm9pZCAwO1xudmFyIEFjdGlvblBhcmFtZXRlclR5cGU7XG4oZnVuY3Rpb24gKEFjdGlvblBhcmFtZXRlclR5cGUpIHtcbiAgICBBY3Rpb25QYXJhbWV0ZXJUeXBlW1wiSW50ZWdlclwiXSA9IFwiaW50ZWdlclwiO1xuICAgIEFjdGlvblBhcmFtZXRlclR5cGVbXCJDb2xvclwiXSA9IFwiY29sb3JcIjtcbiAgICBBY3Rpb25QYXJhbWV0ZXJUeXBlW1wiRmxvYXRcIl0gPSBcImZsb2F0XCI7XG4gICAgQWN0aW9uUGFyYW1ldGVyVHlwZVtcIkRlY2ltYWxcIl0gPSBcImRlY2ltYWxcIjtcbiAgICBBY3Rpb25QYXJhbWV0ZXJUeXBlW1wiTnVtYmVyXCJdID0gXCJudW1iZXJcIjtcbiAgICBBY3Rpb25QYXJhbWV0ZXJUeXBlW1wiQm9vbGVhblwiXSA9IFwiYm9vbFwiO1xuICAgIEFjdGlvblBhcmFtZXRlclR5cGVbXCJTdHJpbmdcIl0gPSBcInN0cmluZ1wiO1xuICAgIEFjdGlvblBhcmFtZXRlclR5cGVbXCJUZXh0XCJdID0gXCJ0ZXh0XCI7XG4gICAgQWN0aW9uUGFyYW1ldGVyVHlwZVtcIkhUTUxcIl0gPSBcImh0bWxcIjtcbiAgICBBY3Rpb25QYXJhbWV0ZXJUeXBlW1wiRmlsZVwiXSA9IFwiZmlsZVwiO1xuICAgIEFjdGlvblBhcmFtZXRlclR5cGVbXCJMaXN0XCJdID0gXCJsaXN0XCI7XG4gICAgQWN0aW9uUGFyYW1ldGVyVHlwZVtcIkdyb3VwXCJdID0gXCJncm91cFwiO1xuICAgIEFjdGlvblBhcmFtZXRlclR5cGVbXCJBY3Rpb25cIl0gPSBcImFjdGlvblwiO1xuICAgIEFjdGlvblBhcmFtZXRlclR5cGVbXCJVbmtub3duXCJdID0gXCJcIjtcbn0pKEFjdGlvblBhcmFtZXRlclR5cGUgPSBleHBvcnRzLkFjdGlvblBhcmFtZXRlclR5cGUgfHwgKGV4cG9ydHMuQWN0aW9uUGFyYW1ldGVyVHlwZSA9IHt9KSk7XG47XG52YXIgTWVzc2FnZUtpbmQ7XG4oZnVuY3Rpb24gKE1lc3NhZ2VLaW5kKSB7XG4gICAgTWVzc2FnZUtpbmRbTWVzc2FnZUtpbmRbXCJBY3Rpb25cIl0gPSAyXSA9IFwiQWN0aW9uXCI7XG4gICAgTWVzc2FnZUtpbmRbTWVzc2FnZUtpbmRbXCJUZW1wbGF0ZVwiXSA9IDNdID0gXCJUZW1wbGF0ZVwiO1xufSkoTWVzc2FnZUtpbmQgPSBleHBvcnRzLk1lc3NhZ2VLaW5kIHx8IChleHBvcnRzLk1lc3NhZ2VLaW5kID0ge30pKTtcbjtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuXHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5ubWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdHJldHVybiBtb2R1bGU7XG59OyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MDQpO1xuIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInNlbGYiLCJpZCIsIl9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5IiwibmFtZSIsIl9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSIsInJlY2VpdmVyIiwicHJpdmF0ZUtleSIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIlR5cGVFcnJvciIsIlRBUkdFVF9ET01BSU4iLCJUQVJHRVRfUFJPVE9DT0wiLCJfYWNjb3VudElkIiwiX3JlZ2lvbiIsIl90YXJnZXREb21haW4iLCJfZGNTZGt2ZXJzaW9uIiwiX3Rva2VuIiwiQWNjb3VudCIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwicmVnaW9uIiwidGFyZ2V0RG9tYWluIiwidG9rZW4iLCJkZWZpbmVQcm9wZXJ0eSIsInRoaXMiLCJ3cml0YWJsZSIsInZhbHVlIiwiYWNjb3VudElkIiwiZGNTREtWZXJzaW9uIiwiZmluYWxUYXJnZXREb21haW4iLCJjb25jYXQiLCJkYXRhUG9zdFBFVVJMIiwiZGF0YVBvc3RVUkwiLCJyZWNvcmRlclVSTCIsImVtYWlsVVJMIiwidW5zdXBwb3J0ZWRLZXlDaGFyUmVnZXgiLCJSZWdFeHAiLCJ1bnN1cHBvcnRlZFZhbHVlQ2hhclJlZ2V4Iiwic2luZ2xlUXVvdGVSZWdleCIsIkNMRUFSIiwiQ0hBUkdFRF9JRCIsIkNIQVJHRURJRF9DT09LSUVfTkFNRSIsIkdDT09LSUVfTkFNRSIsIktDT09LSUVfTkFNRSIsIkNBTVBfQ09PS0lFX05BTUUiLCJDQU1QX0NPT0tJRV9HIiwiRVZfQ09PS0lFIiwiTUVUQV9DT09LSUUiLCJQUl9DT09LSUUiLCJBUlBfQ09PS0lFIiwiTENPT0tJRV9OQU1FIiwiR0xPQkFMIiwiRElTUExBWSIsIk9QVE9VVF9LRVkiLCJVU0VJUF9LRVkiLCJMUlVfQ0FDSEUiLCJJU19PVUwiLCJFVlRfUFVTSCIsIkNPT0tJRV9FWFBJUlkiLCJjYXRlZ29yeUxvbmdLZXkiLCJXWlJLX1BSRUZJWCIsIldaUktfSUQiLCJOT1RJRklDQVRJT05fVklFV0VEIiwiTk9USUZJQ0FUSU9OX0NMSUNLRUQiLCJGSVJFX1BVU0hfVU5SRUdJU1RFUkVEIiwiUFVTSF9TVUJTQ1JJUFRJT05fREFUQSIsIkNPTU1BTkRfSU5DUkVNRU5UIiwiQ09NTUFORF9BREQiLCJDT01NQU5EX1JFTU9WRSIsIkNPTU1BTkRfREVMRVRFIiwiV0VCSU5CT1hfQ09ORklHIiwiV0VCSU5CT1giLCJQVVNIX0RFTEFZX01TIiwiV1pSS19GRVRDSCIsIlNZU1RFTV9FVkVOVFMiLCJpc1N0cmluZyIsImlucHV0IiwiU3RyaW5nIiwiaXNPYmplY3QiLCJ0b1N0cmluZyIsImlzRGF0ZU9iamVjdCIsIkRhdGUiLCJpc09iamVjdEVtcHR5Iiwib2JqIiwicHJvcCIsImlzQ29udmVydGlibGVUb051bWJlciIsIm4iLCJpc05hTiIsInBhcnNlRmxvYXQiLCJpc0Zpbml0ZSIsImlzTnVtYmVyIiwidGVzdCIsImlzVmFsdWVWYWxpZCIsInJlbW92ZVVuc3VwcG9ydGVkQ2hhcnMiLCJvIiwibG9nZ2VyIiwidmFsIiwic2FuaXRpemUiLCJzdWJzdHJpbmciLCJyZXBvcnRFcnJvciIsImtleSIsInNhbml0aXplZFZhbCIsInNhbml0aXplZEtleSIsInJlZ2V4IiwicmVwbGFjZSIsImdldFRvZGF5IiwidG9kYXkiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF5IiwiZ2V0Tm93IiwiTWF0aCIsImZsb29yIiwiZ2V0VGltZSIsImNvbnZlcnRUb1daUktEYXRlIiwiZGF0ZU9iaiIsInJvdW5kIiwic2V0RGF0ZSIsImR0IiwiaXNEYXRlVmFsaWQiLCJkYXRlIiwibWF0Y2hlcyIsImV4ZWMiLCJkIiwibSIsInkiLCJjb21wb3NlZERhdGUiLCJnZXREYXRlIiwiU3RvcmFnZU1hbmFnZXIiLCJzdGF0aWMiLCJfaXNMb2NhbFN0b3JhZ2VTdXBwb3J0ZWQiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJnZXRJdGVtIiwicGFyc2UiLCJlIiwicmVtb3ZlSXRlbSIsImRvbWFpbiIsImNvb2tpZVN0ciIsImRvY3VtZW50IiwiY29va2llIiwic2Vjb25kcyIsImV4cGlyZXMiLCJkb21haW5TdHIiLCJzZXRUaW1lIiwidG9HTVRTdHJpbmciLCJlbmNvZGVVUklDb21wb25lbnQiLCJuYW1lRVEiLCJjYSIsInNwbGl0IiwiaWR4IiwiYyIsImNoYXJBdCIsImluZGV4T2YiLCJkZWNvZGVVUklDb21wb25lbnQiLCJ3aW5kb3ciLCJwcm9wZXJ0eSIsInNhdmUiLCJjcmVhdGVDb29raWUiLCJsb2NhdGlvbiIsImhvc3RuYW1lIiwiJGN0IiwiZ2xvYmFsQ2FjaGUiLCJyZWFkIiwicmVhZENvb2tpZSIsInRyaW0iLCJlcnIiLCJicm9hZERvbWFpbiIsImRvbWFpblBhcnRzIiwidGVzdEJyb2FkRG9tYWluIiwidGVzdENvb2tpZU5hbWUiLCJyZW1vdmVDb29raWUiLCJtZXRhT2JqIiwicmVhZEZyb21MU29yQ29va2llIiwid3pya01ldGFPYmoiLCJzYXZlVG9MU29yQ29va2llIiwiZ2V0TWV0YVByb3AiLCJzZXRNZXRhUHJvcCIsImsiLCJmbGFnIiwicmVxTm8iLCJiYWNrdXBBcnIiLCJxIiwiZGVidWciLCJyZXNwTm8iLCJiYWNrdXBNYXAiLCJnY29va2llIiwiUkVRX04iLCJSRVNQX04iLCJnbG9iYWxQcm9maWxlTWFwIiwiZ2xvYmFsRXZlbnRzTWFwIiwiYmxvY2tSZXF1ZXN0IiwiaXNPcHRJblJlcXVlc3QiLCJ3ZWJQdXNoRW5hYmxlZCIsImNhbXBhaWduRGl2TWFwIiwiY3VycmVudFNlc3Npb25JZCIsIndpel9jb3VudGVyIiwibm90aWZBcGkiLCJub3RpZkVuYWJsZWRGcm9tQXBpIiwidW5zdWJHcm91cHMiLCJ1cGRhdGVkQ2F0ZWdvcnlMb25nIiwiaW5ib3giLCJpc1ByaXZhY3lBcnJQdXNoZWQiLCJwcml2YWN5QXJyYXkiLCJvZmZsaW5lIiwiZGlzbWlzc1NwYW1Db250cm9sIiwiZ2xvYmFsVW5zdWJzY3JpYmUiLCJmbHV0dGVyVmVyc2lvbiIsInZhcmlhYmxlU3RvcmUiLCJfa2V5T3JkZXIiLCJfZGVsZXRlRnJvbU9iamVjdCIsIkxSVUNhY2hlIiwibWF4IiwiX2RlbGV0ZUZyb21PYmplY3QyIiwibHJ1Q2FjaGUiLCJ0ZW1wTHJ1Q2FjaGUiLCJjYWNoZSIsImVudHJ5IiwicHVzaCIsImdldCIsIml0ZW0iLCJzYXZlQ2FjaGVUb0xTIiwic2V0IiwiYWxsS2V5cyIsIm9ialRvQXJyYXkiLCJpbmRleCIsInRlbXAiLCJnZXRLZXkiLCJnZXRTZWNvbmRMYXN0S2V5Iiwia2V5c0FyciIsImdldExhc3RLZXkiLCJrZXlzTGVuZ3RoIiwibmV3Q2FjaGUiLCJpbmRleFRvRGVsZXRlIiwic3BsaWNlIiwiX2xvZ2dlciIsIl9yZXF1ZXN0IiwiX2RldmljZSIsIl9zZXNzaW9uIiwiQ2xldmVyVGFwQVBJIiwiX3JlZiIsInJlcXVlc3QiLCJkZXZpY2UiLCJzZXNzaW9uIiwicyIsImdsb2JhbCIsInJlc3VtZSIsInJlc3BOdW1iZXIiLCJvcHRPdXRSZXNwb25zZSIsIm91bFJlcSIsIm5ld0d1aWQiLCJpc09VTEluUHJvZ3Jlc3MiLCJvdWxSZXFOIiwicmVtb3ZlQmFja3VwIiwic2Vzc2lvbk9iaiIsImdldFNlc3Npb25Db29raWVPYmplY3QiLCJnZXRBbmRDbGVhck1ldGFQcm9wIiwia0lkRnJvbUxTIiwiZ3VpZEZyb21MUlVDYWNoZSIsImxhc3RLIiwibGFzdEdVSUQiLCJ1bnJlZ2lzdGVyVG9rZW5Gb3JHdWlkIiwiY3JlYXRlQnJvYWRDb29raWUiLCJtYW5hZ2VTZXNzaW9uIiwidCIsInNldFNlc3Npb25Db29raWVPYmplY3QiLCJwcm9jZXNzaW5nQmFja3VwIiwicHJvY2Vzc0JhY2t1cEV2ZW50cyIsIl9sb2dnZXIkMSIsIkRldmljZU1hbmFnZXIiLCJnZXRHdWlkIiwiZ3VpZCIsImVycm9yIiwiREFUQV9OT1RfU0VOVF9URVhUIiwiQ0xFVkVSVEFQX0VSUk9SX1BSRUZJWCIsIkVNQkVEX0VSUk9SIiwiRVZFTlRfRVJST1IiLCJHRU5ERVJfRVJST1IiLCJFTVBMT1lFRF9FUlJPUiIsIk1BUlJJRURfRVJST1IiLCJFRFVDQVRJT05fRVJST1IiLCJBR0VfRVJST1IiLCJET0JfRVJST1IiLCJFTlVNX0ZPUk1BVF9FUlJPUiIsIlBIT05FX0ZPUk1BVF9FUlJPUiIsIl9nbG9iYWxDaGFyZ2VkSWQiLCJpc0V2ZW50U3RydWN0dXJlRmxhdCIsImV2ZW50T2JqIiwiQXJyYXkiLCJpc0FycmF5IiwiaXNDaGFyZ2VkRXZlbnRTdHJ1Y3R1cmVWYWxpZCIsImNoYXJnZWRPYmoiLCJpdGVtS2V5IiwiY2hhcmdlZElkIiwiX2xvZ2dlciQyIiwiX29sZFZhbHVlcyIsIl9yZXF1ZXN0JDEiLCJfaXNQZXJzb25hbGlzYXRpb25BY3RpdmUiLCJfcHJvY2Vzc0V2ZW50QXJyYXkiLCJFdmVudEhhbmRsZXIiLCJ2YWx1ZXMiLCJpc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZSIsInN1cGVyIiwiX3Byb2Nlc3NFdmVudEFycmF5MiIsIl9sZW4iLCJldmVudHNBcnIiLCJfa2V5IiwiX3Byb2Nlc3NPbGRWYWx1ZXMiLCJnZXREZXRhaWxzIiwiZXZ0TmFtZSIsImV2dE9iaiIsInJlc3BPYmoiLCJmaXJzdFRpbWUiLCJsYXN0VGltZSIsImNvdW50IiwiZXZlbnROYW1lIiwic2hpZnQiLCJpbmNsdWRlcyIsImV2dERhdGEiLCJ1bnNoaWZ0IiwicHJvY2Vzc0V2ZW50IiwiZ2V0VVJMUGFyYW1zIiwidXJsIiwidXJsUGFyYW1zIiwidXJpIiwibWF0Y2giLCJwbCIsInNlYXJjaCIsImRlY29kZSIsInJlcGxhY2VtZW50IiwiYWRkVG9VUkwiLCJ2IiwiZ2V0SG9zdE5hbWUiLCJjb21wcmVzc0RhdGEiLCJkYXRhT2JqZWN0IiwiY29tcHJlc3NUb0Jhc2U2NCIsIl9rZXlTdHIiLCJpIiwiZnJvbUNoYXJDb2RlIiwiZ2V0S2V5U3RyIiwiY2hyMSIsImNocjIiLCJjaHIzIiwiZW5jMSIsImVuYzIiLCJlbmMzIiwiZW5jNCIsIm91dHB1dCIsInVuY29tcHJlc3NlZCIsImlpIiwiY29udGV4dF9kaWN0aW9uYXJ5IiwiY29udGV4dF9kaWN0aW9uYXJ5VG9DcmVhdGUiLCJjb250ZXh0X2MiLCJjb250ZXh0X3djIiwiY29udGV4dF93IiwiY29udGV4dF9lbmxhcmdlSW4iLCJjb250ZXh0X2RpY3RTaXplIiwiY29udGV4dF9udW1CaXRzIiwiY29udGV4dF9kYXRhX3N0cmluZyIsImNvbnRleHRfZGF0YV92YWwiLCJjb250ZXh0X2RhdGFfcG9zaXRpb24iLCJmIiwiY2hhckNvZGVBdCIsInBvdyIsImNvbXByZXNzIiwiTmFOIiwiX2ZpcmVSZXF1ZXN0IiwiX2Ryb3BSZXF1ZXN0RHVlVG9PcHRPdXQiLCJfYWRkVXNlSVBUb1JlcXVlc3QiLCJfYWRkQVJQVG9SZXF1ZXN0IiwiUmVxdWVzdERpc3BhdGNoZXIiLCJuZXR3b3JrUmV0cnlDb3VudCIsIm1pbkRlbGF5RnJlcXVlbmN5Iiwic2tpcEFSUCIsInNlbmRPVUxGbGFnIiwiZ2V0RGVsYXlGcmVxdWVuY3kiLCJhY2NvdW50IiwicmFuZG9tRGVsYXkiLCJyYW5kb20iLCJ0cmllcyIsIl93aW5kb3ckY2xldmVydGFwIiwiX3dpbmRvdyR3aXpyb2NrZXQiLCJzZXRUaW1lb3V0IiwiY2xldmVydGFwIiwid2l6cm9ja2V0IiwicGx1Z2luIiwiY3RDYlNjcmlwdHMiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImFzeW5jIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJhcHBlbmRDaGlsZCIsInNsaWNlIiwicGFnZUxvYWRVcmwiLCJ1c2VJUCIsInNraXBSZXNBUlAiLCJfYXJwIiwiZ2V0Q2FtcGFpZ25PYmplY3QiLCJmaW5hbGNhbXBPYmoiLCJjYW1wT2JqIiwid3AiLCJzYXZlQ2FtcGFpZ25PYmplY3QiLCJjYW1wYWlnbk9iaiIsIm5ld09iaiIsInNldENhbXBhaWduT2JqZWN0Rm9yR3VpZCIsImd1aWRDYW1wT2JqIiwiZmluYWxDYW1wT2JqIiwia2V5cyIsImZvckVhY2giLCJjYW1wS2V5T2JqIiwiZ2xvYmFsT2JqIiwiZGFpbHlPYmoiLCJjYW1wYWlnbklkQXJyYXkiLCJyZXN1bHRPYmoiLCJkYWlseUMiLCJ0b3RhbEMiLCJjYW1wYWlnbklkIiwiY29uc29sZSIsImdldENhbXBhaWduT2JqRm9yTGMiLCJzdG9yYWdlVmFsdWUiLCJkZWNvZGVkVmFsdWUiLCJwYXJzZWRWYWx1ZSIsInJlc3VsdE9ialdQIiwicmVzdWx0T2JqV0kiLCJ3aSIsInRvZGF5Q3dwIiwidG9kYXlDd2kiLCJ0YyIsIndtcCIsIndpbXAiLCJ0bGMiLCJ3aXRsYyIsImlzUHJvZmlsZVZhbGlkIiwicHJvZmlsZU9iaiIsInZhbGlkIiwicHJvZmlsZUtleSIsInByb2ZpbGVWYWwiLCJBZ2UiLCJQaG9uZSIsInByb2Nlc3NGQlVzZXJPYmoiLCJ1c2VyIiwicHJvZmlsZURhdGEiLCJOYW1lIiwiRkJJRCIsImdlbmRlciIsIkdlbmRlciIsInJlbGF0aW9uc2hpcF9zdGF0dXMiLCJNYXJyaWVkIiwiZWR1IiwiZWR1QXJyIiwiY29sbGVnZSIsImhpZ2hzY2hvb2wiLCJ0eXBlIiwiZ2V0SGlnaGVzdEVkdWNhdGlvbiIsImVkdWNhdGlvbiIsIkVkdWNhdGlvbiIsIndvcmsiLCJFbXBsb3llZCIsImVtYWlsIiwiRW1haWwiLCJiaXJ0aGRheSIsIm1tZGR5eSIsIkRPQiIsInByb2Nlc3NHUGx1c1VzZXJPYmoiLCJfcmVmMiIsImRpc3BsYXlOYW1lIiwiR1BJRCIsImltYWdlIiwiaXNEZWZhdWx0IiwiUGhvdG8iLCJlbWFpbHMiLCJlbWFpbElkeCIsImVtYWlsT2JqIiwib3JnYW5pemF0aW9ucyIsInl5eXltbWRkIiwicmVsYXRpb25zaGlwU3RhdHVzIiwiYWRkVG9Mb2NhbFByb2ZpbGVNYXAiLCJvdmVycmlkZSIsIl9jdXN0b20iLCJjbG9zZUlmcmFtZSIsImRpdklkSWdub3JlZCIsInNlc3Npb25DYW1wYWlnbk9iaiIsImRpdklkIiwiZ2V0RWxlbWVudEJ5SWQiLCJzdHlsZSIsImRpc3BsYXkiLCJfbG9nZ2VyJDMiLCJfcmVxdWVzdCQyIiwiX2FjY291bnQiLCJfb2xkVmFsdWVzJDEiLCJfaXNQZXJzb25hbGlzYXRpb25BY3RpdmUkMSIsIl9wcm9jZXNzUHJvZmlsZUFycmF5IiwiUHJvZmlsZUhhbmRsZXIiLCJfcHJvY2Vzc1Byb2ZpbGVBcnJheTIiLCJwcm9maWxlc0FyciIsImdldEF0dHJpYnV0ZSIsInByb3BOYW1lIiwiX2hhbmRsZUluY3JlbWVudERlY3JlbWVudFZhbHVlIiwiY29tbWFuZCIsIl8kY3QkZ2xvYmFsUHJvZmlsZU1hcCIsInR6IiwicHJvZmlsZSIsImFkZFN5c3RlbURhdGFUb09iamVjdCIsImFkZEZsYWdzIiwiY29tcHJlc3NlZERhdGEiLCJzYXZlQW5kRmlyZVJlcXVlc3QiLCJfaGFuZGxlTXVsdGlWYWx1ZVNldCIsImFycmF5VmFsIiwiYXJyYXkiLCJ0b0xvd2VyQ2FzZSIsIl9TdG9yYWdlTWFuYWdlciRyZWFkRiIsInNlbmRNdWx0aVZhbHVlRGF0YSIsIl9oYW5kbGVNdWx0aVZhbHVlQWRkIiwicHJvcEtleSIsInByb3BWYWwiLCJfaGFuZGxlTXVsdGlWYWx1ZVJlbW92ZSIsIl8kY3QkZ2xvYmFsUHJvZmlsZU1hcDIiLCJfaGFuZGxlTXVsdGlWYWx1ZURlbGV0ZSIsIl8kY3QkZ2xvYmFsUHJvZmlsZU1hcDMiLCJwcm9maWxlQXJyIiwib3V0ZXJPYmoiLCJTaXRlIiwiRmFjZWJvb2siLCJGYlByb2ZpbGVPYmoiLCJHUGx1c1Byb2ZpbGVPYmoiLCJfcmVxdWVzdCQzIiwiX2xvZ2dlciQ0IiwiX2FjY291bnQkMSIsIl9zZXNzaW9uJDEiLCJfb2xkVmFsdWVzJDIiLCJfZGV2aWNlJDEiLCJfcHJvY2Vzc09VTCIsIl9oYW5kbGVDb29raWVGcm9tQ2FjaGUiLCJfZGVsZXRlVXNlciIsIl9wcm9jZXNzTG9naW5BcnJheSIsIlVzZXJMb2dpbkhhbmRsZXIiLCJfcHJvY2Vzc0xvZ2luQXJyYXkyIiwiX2RlbGV0ZVVzZXIyIiwiX2hhbmRsZUNvb2tpZUZyb21DYWNoZTIiLCJfcHJvY2Vzc09VTDIiLCJjbGVhciIsImFkZFRvSyIsImlkcyIsImciLCJrSWQiLCJhbm9ueW1vdXNVc2VyIiwiZm91bmRJbkNhY2hlIiwiZ0Zyb21DYWNoZSIsIklkZW50aXR5IiwiY29va2llTmFtZSIsImxvZ2luQXJyIiwicG9wIiwic2V0SW5zdGFudERlbGV0ZUZsYWdJbksiLCJDVFdlYlBlcnNvbmFsaXNhdGlvbkJhbm5lciIsIkhUTUxFbGVtZW50IiwiX2RldGFpbHMiLCJzaGFkb3ciLCJhdHRhY2hTaGFkb3ciLCJtb2RlIiwiZGV0YWlscyIsInJlbmRlckJhbm5lciIsImlubmVySFRNTCIsImdldEJhbm5lckNvbnRlbnQiLCJ0cmFja0NsaWNrIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uQ2xpY2tVcmwiLCJvbkNsaWNrIiwib3BlbiIsInBhcmVudCIsImhyZWYiLCJyZW5kZXJOb3RpZmljYXRpb25DbGlja2VkIiwibXNnSWQiLCJwaXZvdElkIiwicmVuZGVyTm90aWZpY2F0aW9uVmlld2VkIiwiZGl2SGVpZ2h0IiwiY3NzIiwiZGVza3RvcEltYWdlVVJMIiwibW9iaWxlSW1hZ2VVUkwiLCJodG1sIiwiQ1RXZWJQZXJzb25hbGlzYXRpb25DYXJvdXNlbCIsIl90YXJnZXQiLCJfY2Fyb3VzZWwiLCJzbGlkZXMiLCJwcmV2aW91c2x5U2VsZWN0ZWRJdGVtIiwic2VsZWN0ZWRJdGVtIiwiYXV0b1NsaWRlIiwic3RvcEF1dG9TbGlkZVRpbWVvdXQiLCJjdXN0b21FbGVtZW50cyIsInRhcmdldCIsInJlbmRlckNhcm91c2VsIiwiZ2V0U3R5bGVzIiwiY2Fyb3VzZWwiLCJnZXRDYXJvdXNlbENvbnRlbnQiLCJzaG93TmF2QnRucyIsImluc2VydEFkamFjZW50SFRNTCIsIm5hdkJ0bnNIdG1sIiwic2hvd05hdkFycm93cyIsImxlZnROYXZBcnJvd0h0bWwiLCJyaWdodE5hdkFycm93SHRtbCIsInNldHVwQ2xpY2siLCJ1cGRhdGVTZWxlY3RlZEl0ZW0iLCJzdGFydEF1dG9TbGlkZSIsInNldHVwT25Ib3ZlciIsInd6cmtfaWQiLCJ3enJrX3Bpdm90IiwiZXZlbnQiLCJldmVudElEIiwic3RhcnRzV2l0aCIsInNlbGVjdGVkIiwiZW5kc1dpdGgiLCJnb1RvTmV4dCIsImdvVG9QcmV2Iiwid3pya19zbGlkZU5vIiwiY2xlYXJJbnRlcnZhbCIsImNsZWFyVGltZW91dCIsImRldGFpbCIsImJhbm5lciIsImNsYXNzTGlzdCIsImFkZCIsIl90aGlzJHRhcmdldCIsIl90aGlzJHRhcmdldCRkaXNwbGF5IiwibmF2QnRuc0NzcyIsIm5hdkFycm93c0NzcyIsInByZXZJdGVtIiwicHJldkJ1dHRvbiIsInJlbW92ZSIsImJ1dHRvbiIsInNldEludGVydmFsIiwic2xpZGVyVGltZSIsImdvVG8iLCJwcmV2IiwiY3VyIiwiQ1RXZWJQb3B1cEltYWdlT25seSIsInBvcHVwIiwiY29udGFpbmVyIiwicmVzaXplT2JzZXJ2ZXIiLCJyZW5kZXJJbWFnZU9ubHlQb3B1cCIsInNlc3Npb25JZCIsImdldEltYWdlT25seVBvcHVwQ29udGVudCIsInNoYWRvd1Jvb3QiLCJjbG9zZUljb24iLCJ1cGRhdGVJbWFnZUFuZENvbnRhaW5lcldpZHRoIiwiUmVzaXplT2JzZXJ2ZXIiLCJoYW5kbGVSZXNpemUiLCJvYnNlcnZlIiwidW5vYnNlcnZlIiwid2lkdGgiLCJnZXRSZW5kZXJlZEltYWdlV2lkdGgiLCJzZXRQcm9wZXJ0eSIsIm1zZ0NvbnRlbnQiLCJ2aXNpYmlsaXR5IiwiaW1nIiwicmF0aW8iLCJuYXR1cmFsV2lkdGgiLCJuYXR1cmFsSGVpZ2h0IiwiaGVpZ2h0IiwiTWVzc2FnZSIsImNvbmZpZyIsIm1lc3NhZ2UiLCJ3cmFwcGVyIiwic25hY2tCYXIiLCJyZW5kZXJNZXNzYWdlIiwiY3JlYXRlRWwiLCJwYXJ0IiwiX2VsIiwibXNnIiwidGVtcGxhdGVUeXBlIiwicHJlcGFyZUJhc2ljTWVzc2FnZSIsInRpbWVTdGFtcCIsImRldGVybWluZVRpbWVTdGFtcFRleHQiLCJ2aWV3ZWQiLCJ1bnJlYWRNYXJrZXIiLCJpbWFnZVVybCIsImltYWdlQ29udGFpbmVyIiwiYWRkSW1hZ2UiLCJpY29uVGl0bGVEZXNjV3JhcHBlciIsImljb25VcmwiLCJpY29uQ29udGFpbmVyIiwidGl0bGVEZXNjV3JhcHBlciIsInRpdGxlIiwiaW5uZXJUZXh0IiwiZGVzY3JpcHRpb24iLCJidXR0b25zIiwiYnV0dG9uc0NvbnRhaW5lciIsImFkZEJ1dHRvbnMiLCJoYXNDb3B5QWN0aW9uIiwiYiIsInRleHQiLCJjc3NUZXh0IiwiYWN0aW9uIiwiYWRkU25hY2tiYXIiLCJncmVlblRpY2tTdmciLCJjbGlwYm9hcmRNc2ciLCJyYWlzZUNsaWNrZWRFdmVudCIsInBhdGgiLCJpc1ByZXZpZXciLCJyYWlzZUNsaWNrZWRGb3JCYXNpY1RlbXBsYXRlcyIsInBheWxvYWQiLCJ0YWdOYW1lIiwia3YiLCJ3enJrX2MyYSIsIm9wZW5VcmxJbk5ld1RhYiIsImZvY3VzIiwibmF2aWdhdG9yIiwiY2xpcGJvYXJkIiwid3JpdGVUZXh0IiwiY2xpcGJvYXJkVGV4dCIsImxvZyIsIkluYm94IiwiaXNJbmJveE9wZW4iLCJpc0luYm94RnJvbUZsdXR0ZXIiLCJzZWxlY3RlZENhdGVnb3J5IiwidW52aWV3ZWRNZXNzYWdlcyIsInVudmlld2VkQ291bnRlciIsImluYm94Q29uZmlnRm9yUHJldmlldyIsImluYm94U2VsZWN0b3IiLCJlbXB0eUluYm94TXNnIiwiaW5ib3hDYXJkIiwidW52aWV3ZWRCYWRnZSIsIm9ic2VydmVyIiwic2VsZWN0ZWRDYXRlZ29yeVJlZiIsImFkZENsaWNrTGlzdGVuZXJPbkRvY3VtZW50IiwiY29tcG9zZWRQYXRoIiwidG9nZ2xlSW5ib3giLCJwcmV2Q2F0ZWdvcnlSZWYiLCJ1cGRhdGVBY3RpdmVDYXRlZ29yeSIsIl9wYXRoIiwiZmlsdGVyIiwicCIsIl9wJGlkIiwiY29udGFpbnMiLCJzZXRCYWRnZVN0eWxlIiwibXNnQ291bnQiLCJpbmNvbWluZ01lc3NhZ2VzIiwibXNncyIsInVwZGF0ZUluYm94TWVzc2FnZXMiLCJpbmNvbWluZ01lc3NhZ2VzRm9yUHJldmlldyIsInByZXZpZXdNc2dzIiwibm93IiwiYnVpbGRVSUZvck1lc3NhZ2VzIiwidXBkYXRlVW52aWV3ZWRCYWRnZUNvdW50ZXIiLCJjb25uZWN0ZWRDYWxsYmFjayIsImluaXQiLCJzdHlsZXMiLCJub3RpZmljYXRpb25zQmFkZ2UiLCJhZGRVbnZpZXdlZEJhZGdlIiwiY3JlYXRlaW5ib3giLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2F0ZWdvcmllcyIsImdldEluYm94U3R5bGVzIiwiYWRkTXNnc1RvSW5ib3hGcm9tTFMiLCJtZXNzYWdlcyIsImRlbGV0ZUV4cGlyZWRBbmRHZXRVbmV4cGlyZWRNc2dzIiwibXNnSWRzIiwiZGVsZXRlTXNnc0Zyb21VSSIsImdldEluYm94TWVzc2FnZXMiLCJ3enJrX3R0bCIsImVsIiwic29ydCIsImEiLCJyZWR1Y2UiLCJhY2MiLCJzYXZlSW5ib3hNZXNzYWdlcyIsImluYm94TXNncyIsImluY29taW5nTXNncyIsImJhY2tncm91bmRDb2xvciIsInRleHRDb2xvciIsImJvZHkiLCJ1cGRhdGVVbnZpZXdlZEJhZGdlUG9zaXRpb24iLCJ0b3AiLCJyaWdodCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImxlZnQiLCJoZWFkZXIiLCJoZWFkZXJUaXRsZSIsImNyZWF0ZUNhdGVnb3JpZXMiLCJvcHRpb25zIiwicm9vdE1hcmdpbiIsInRocmVzaG9sZCIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiZW50cmllcyIsImhhbmRsZU1lc3NhZ2VWaWV3ZWQiLCJjYXRlZ29yaWVzQ29udGFpbmVyIiwibGVmdEFycm93IiwiYXJyb3dTdmciLCJjaGlsZHJlbiIsInNjcm9sbEJ5IiwiY2F0ZWdvcmllc1dyYXBwZXIiLCJjYXRlZ29yeSIsInJpZ2h0QXJyb3ciLCJmaXJzdENhdGVnb3J5IiwibGFzdENhdGVnb3J5IiwiY2F0ZWdvcnlPYnNlcnZlckNiIiwiaW50ZXJzZWN0aW9uUmF0aW8iLCJoaWRlIiwiYWN0aXZlQ2F0ZWdvcnkiLCJzY3JvbGxUb3AiLCJjb3VudGVyIiwiY2hpbGROb2RlcyIsIl90aGlzJGNvbmZpZyRtYXhNc2dzSSIsInVwZGF0ZVRTRm9yUmVuZGVyZWRNc2dzIiwibWF4TXNnc0luSW5ib3giLCJmaXJzdENoaWxkIiwic29ydGVkTXNncyIsIm1hcCIsInRhZ3MiLCJpbnNlcnRCZWZvcmUiLCJtc2dUb3RhbENvdW50IiwicXVlcnlTZWxlY3RvckFsbCIsImN0SW5ib3hNc2dzIiwiaGFzTWVzc2FnZXMiLCJyYWlzZVZpZXdlZEV2ZW50IiwiaXNJbnRlcnNlY3RpbmciLCJ1cGRhdGVNZXNzYWdlSW5MUyIsInJlY3QiLCJ6SW5kZXgiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsV2lkdGgiLCJzZXRJbmJveFBvc2l0aW9uIiwid2luZG93V2lkdGgiLCJvdXRlcldpZHRoIiwiY3VzdG9tSW5ib3hTdHlsZXMiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImJvdHRvbSIsInJlcyIsImdldEluYm94UG9zaXRpb24iLCJjbGllbnRIZWlnaHQiLCJjbGllbnRXaWR0aCIsInhQb3MiLCJ5UG9zIiwidHMiLCJjYXRlZ29yaWVzSGVpZ2h0IiwicGFuZWxCYWNrZ3JvdW5kQ29sb3IiLCJwYW5lbEJvcmRlckNvbG9yIiwiaGVhZGVyQmFja2dyb3VuZENvbG9yIiwiaGVhZGVyVGl0bGVDb2xvciIsInRpdGxlQ29sb3IiLCJjbG9zZUljb25Db2xvciIsImNhdGVnb3JpZXNUYWJDb2xvciIsInRhYkNvbG9yIiwiY2F0ZWdvcmllc1RpdGxlQ29sb3IiLCJzZWxlY3RlZENhdGVnb3J5VGFiQ29sb3IiLCJzZWxlY3RlZFRhYiIsInNlbGVjdGVkQ2F0ZWdvcnlUaXRsZUNvbG9yIiwiaGVhZGVyQ2F0ZWdvcnlIZWlnaHQiLCJib3JkZXJDb2xvciIsImNhdGVnb3JpZXNCb3JkZXJDb2xvciIsInNlbGVjdGVkQ2F0ZWdvcnlCb3JkZXJDb2xvciIsImluYm94U3R5bGVzIiwiaW5ib3hDb250YWluZXJTdHlsZXMiLCJjYXJkU3R5bGVzIiwiY2FyZHMiLCJkZXNjcmlwdGlvbkNvbG9yIiwiYnV0dG9uQ29sb3IiLCJidXR0b25UZXh0Q29sb3IiLCJ1bnJlYWRNYXJrZXJDb2xvciIsIm1lc3NhZ2VTdHlsZXMiLCJwcm9jZXNzSW5ib3hOb3RpZnMiLCJpbmJveF9wcmV2aWV3IiwiaW5ib3hfbm90aWZzIiwiYWRkV2ViSW5ib3giLCJjaGVja0FuZFJlZ2lzdGVyV2ViSW5ib3hFbGVtZW50cyIsImdldEFuZE1pZ3JhdGVJbmJveE1lc3NhZ2VzIiwiZ3VkSW5ib3hPYmoiLCJpbml0aWFsaXplV2ViSW5ib3giLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlYWR5U3RhdGUiLCJvbkxvYWRlZCIsImluYm94SGVpZ2h0IiwiaW5ib3hXaWR0aCIsImhvcml6b250YWxTY3JvbGwiLCJzY3JvbGxpbmdFbGVtZW50IiwidmVydGljYWxTY3JvbGwiLCJpbm5lcldpZHRoIiwid2luZG93SGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJzZWxlY3RvclJlY3QiLCJzZWxlY3RvclgiLCJ4Iiwic2VsZWN0b3JZIiwic2VsZWN0b3JMZWZ0Iiwic2VsZWN0b3JSaWdodCIsInNlbGVjdG9yVG9wIiwic2VsZWN0b3JCb3R0b20iLCJzZWxlY3RvckhlaWdodCIsInNlbGVjdG9yQ2VudGVyIiwiaW5ib3hPblNpZGUiLCJwYWRkaW5nIiwiYXZhaWxhYmxlSGVpZ2h0IiwiaW5ib3hSaWdodCIsImluYm94TGVmdCIsImRpZmYiLCJoYXNXZWJJbmJveFNldHRpbmdzSW5MUyIsIkNTU19QQVRIIiwiaGFuZGxlTWVzc2FnZUV2ZW50Iiwic3RyaW5nIiwiVVJMIiwiQm9vbGVhbiIsIl9lcnIiLCJpc1ZhbGlkVXJsIiwib3JpZ2luVXJsIiwibXNnT3JpZ2luIiwib3JpZ2luIiwiX2V2ZW50JGRhdGEkdmFyaWFudCIsIl9ldmVudCRkYXRhJGRldGFpbHMiLCJpbml0aWFsaXNlQ1RCdWlsZGVyIiwidmFyaWFudCIsInJlbmRlclZpc3VhbEJ1aWxkZXIiLCJvbkNvbnRlbnRMb2FkIiwiY29udGVudExvYWRlZCIsImxpbmsiLCJwb3NpdGlvbiIsIm92ZXJsYXlQYXRoIiwic2NyaXB0Iiwic3JjIiwib25sb2FkIiwiT3ZlcmxheSIsIkVycm9yIiwib25lcnJvciIsImhlYWQiLCJsb2FkT3ZlcmxheVNjcmlwdCIsInRoZW4iLCJjYXRjaCIsInJlbCIsImtpdElkIiwic2NyaXB0VGltZW91dCIsImRvY0VsZW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJ0aW1lb3V0SWQiLCJjbGFzc05hbWUiLCJ0eXBlS2l0U2NyaXB0Iiwic2NyaXB0TG9hZGVkIiwiZmlyc3RTY3JpcHQiLCJzY3JpcHRSZWFkeVN0YXRlIiwib25yZWFkeXN0YXRlY2hhbmdlIiwiVHlwZWtpdCIsImxvYWQiLCJsb2FkVHlwZUtpdCIsInRhcmdldGluZ01zZ0pzb24iLCJzaXRlVXJsIiwic2VsZWN0b3JzIiwiZWxlbWVudERpc3BsYXllZCIsInByb2Nlc3NFbGVtZW50IiwiZWxlbWVudCIsInNlbGVjdG9yIiwib3V0ZXJIVE1MIiwianNvbiIsImluYU9iaiIsImt2UGFpcnNFdmVudCIsIkN1c3RvbUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImRpc3BhdGNoSnNvbkRhdGEiLCJmb3JtU3R5bGUiLCJ1bmRlcmxpbmUiLCJjdXJUZXh0RGVjb3JhdGlvbiIsInRleHREZWNvcmF0aW9uIiwiY2xpY2tEZXRhaWxzIiwiY2xpY2tVcmwiLCJvbmNsaWNrIiwibmV3VGFiIiwiaW1nVVJMIiwiZWxlbWVudENzcyIsInVwZGF0ZUZvcm1EYXRhIiwiZm9ybSIsInF1ZXJ5U2VsZWN0b3IiLCJpbnRlcnZhbElkIiwicmV0cnlFbGVtZW50IiwidHJ5RmluZGluZ0VsZW1lbnQiLCJfdHIiLCJfd2l6Q291bnRlciIsImRvQ2FtcEhvdXNlS2VlcGluZyIsImluY3JDb3VudCIsImV4Y2x1ZGVGcm9tRnJlcUNhcHMiLCJjdXJyZW50Q291bnQiLCJ0b3RhbENvdW50Iiwic2Vzc2lvblN0b3JhZ2UiLCJjYW1wVHlwZU9iaiIsInd0YXJnZXRfdHlwZSIsIndtYyIsIndpbWMiLCJjYW1wYWlnblNlc3Npb25MaW1pdCIsImNhbXBhaWduRGFpbHlMaW1pdCIsImNhbXBhaWduVG90YWxMaW1pdCIsInRvdGFsRGFpbHlMaW1pdCIsInRvdGFsU2Vzc2lvbkxpbWl0IiwidG90YWxJbmJveFNlc3Npb25MaW1pdCIsImVmYyIsInBhcnNlSW50IiwibWRjIiwidGRjIiwiY2FtcGFpZ25TZXNzaW9uQ291bnQiLCJ0b3RhbFNlc3Npb25Db3VudCIsImNhbXBhaWduRGFpbHlDb3VudCIsInRvdGFsRGFpbHlDb3VudCIsImNhbXBhaWduVG90YWxDb3VudCIsImRlbGF5IiwiY2FtcEtleSIsIm5ld0NhbXBPYmoiLCJnZXRDb29raWVQYXJhbXMiLCJzY29va2llT2JqIiwiaW52b2tlRXh0ZXJuYWxKcyIsImpzRnVuYyIsImZ1bmMiLCJzZXR1cENsaWNrVXJsIiwiY29udGVudERpdiIsImlzTGVnYWN5IiwiaW5jcmVtZW50SW1wcmVzc2lvbiIsImN0YUVsZW1lbnQiLCJqc0NUQUVsZW1lbnRzIiwicHJldmlldyIsImZpcmVSZXF1ZXN0Iiwic2V0dXBDbGlja0V2ZW50IiwicmVuZGVyUGVyc29uYWxpc2F0aW9uQmFubmVyIiwiX3RhcmdldGluZ01zZ0pzb24kZGlzIiwiZGl2U2VsZWN0b3IiLCJiYW5uZXJFbCIsImNvbnRhaW5lckVsIiwicmVuZGVyUGVyc29uYWxpc2F0aW9uQ2Fyb3VzZWwiLCJfdGFyZ2V0aW5nTXNnSnNvbiRkaXMyIiwicmVuZGVyRm9vdGVyTm90aWZpY2F0aW9uIiwiZGlzcGxheU9iaiIsImxheW91dCIsInNob3dFeGl0SW50ZW50IiwibXNnRGl2IiwicG9wdXBJbWFnZU9ubHkiLCJyZW5kZXJQb3BVcEltYWdlT25seSIsImlzQmFubmVyIiwidmlld0hlaWdodCIsInZpZXdXaWR0aCIsImxlZ2FjeSIsImlGcmFtZVN0eWxlIiwiY29udGVudEhlaWdodCIsImJvdHRvbVBvc2l0aW9uIiwid2lkdGhQZXJjdCIsInVzZXJBZ2VudCIsInByb3RvIiwiaWZyYW1lIiwiYm9yZGVyUmFkaXVzIiwiYnIiLCJmcmFtZWJvcmRlciIsIm1hcmdpbmhlaWdodCIsIm1hcmdpbndpZHRoIiwic2Nyb2xsaW5nIiwicG9pbnRlckNzcyIsInNhbmRib3giLCJiZ0NvbG9yIiwiYnRuQmciLCJsZWZ0VGQiLCJidENvbG9yIiwidGhlbWUiLCJ0aXRsZVRleHQiLCJkZXNjcmlwdGlvblRleHQiLCJpbWFnZVRkIiwiY2xvc2VDYW1wYWlnbiIsIkV2ZW50IiwiYXBwZW5kU2NyaXB0Rm9yQ3VzdG9tRXZlbnQiLCJzcmNkb2MiLCJhZGp1c3RJRnJhbWVIZWlnaHQiLCJjb250ZW50RG9jdW1lbnQiLCJzY3JvbGxIZWlnaHQiLCJtYXJnaW4iLCJ1YSIsImluRG9jIiwiY29udGVudFdpbmRvdyIsIl90aW1lciIsIl9jYWxsQmFja0NhbGxlZCIsInNob3dGb290ZXJOb3RpZmljYXRpb24iLCJub3RpZmljYXRpb25DYWxsYmFjayIsInJhaXNlTm90aWZpY2F0aW9uQ2xpY2tlZCIsInJhaXNlTm90aWZpY2F0aW9uVmlld2VkIiwicG9wdXBDdXJyZW50V3pya0lkIiwicG9wdXBDYWxsYmFja3MiLCJwb3B1cENhbGxiYWNrIiwibXNnQ1RrdiIsInd6cmtQcmVmaXhLZXkiLCJ3enJrSnNvbiIsInJhaXNlUG9wdXBOb3RpZmljYXRpb25DbGlja2VkIiwibm90aWZpY2F0aW9uRGF0YSIsImV2ZW50RGF0YSIsInd6cmtQcmVmaXhPYmoiLCJleGl0aW50ZW50T2JqIiwidGFyZ2V0T2JqIiwiY2xpZW50WSIsIm9wYWNpdHlEaXYiLCJvcGFjaXR5IiwicmdiYUNvbG9yIiwiY3RhVGV4dCIsInByb2Nlc3NOYXRpdmVEaXNwbGF5QXJyIiwiYXJySW5BcHBOb3RpZnMiLCJlbGVtZW50SWQiLCJpbmFwcF9ub3RpZnMiLCJ0YXJnZXROb3RpZiIsIm9ubW91c2VsZWF2ZSIsImFkZExvYWRMaXN0ZW5lciIsImhhbmRsZUluYm94Tm90aWZpY2F0aW9ucyIsIm1zZ0FyciIsIndlYkluYm94U2V0dGluZyIsIl9zZXR0aW5ncyIsInByb2Nlc3NXZWJJbmJveFNldHRpbmdzIiwidmFycyIsIm1lcmdlVmFyaWFibGVzIiwic3RhbGVEYXRhVXBkYXRlIiwic3RhbGVkYXRhIiwiY2FtcFR5cGUiLCJldnByIiwiZXZlbnRzTWFwIiwiZXZlbnRzIiwicHJvZmlsZU1hcCIsInN5bmNFeHBpcnkiLCJleHBpcmVzX2luIiwibmV3RXZ0TWFwIiwib2xkRXZ0T2JqIiwibmV3RXZ0T2JqIiwibWVyZ2VFdmVudE1hcCIsImFycCIsImpzb25NYXAiLCJpc09VTEFSUCIsImFycEZyb21TdG9yYWdlIiwiaW5hcHBfc3RhbGUiLCJpbmJveF9zdGFsZSIsIl9pc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZSQyIiwiVXNlciIsImdldFRvdGFsVmlzaXRzIiwidmlzaXRDb3VudCIsImdldExhc3RWaXNpdCIsInByZXZTZXNzaW9uIiwibG9nTGV2ZWxzIiwiX2xvZ0xldmVsIiwiX2xvZyIsIl9pc0xlZ2FjeURlYnVnIiwiTG9nZ2VyIiwibG9nTGV2ZWwiLCJfZ2V0X2lzTGVnYWN5RGVidWciLCJfbG9nMiIsInd6cmtFcnJvciIsImluZm8iLCJkZWJ1Z1BFIiwiY29kZSIsImxldmVsIiwiV1pSS19EIiwiX2xvZ2dlciQ1IiwiX3Nlc3Npb25JZCIsIl9pc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZSQzIiwiU2Vzc2lvbk1hbmFnZXIiLCJzY29va2llU3RyIiwiU0NPT0tJRV9FWFBfVElNRV9JTl9TRUNTIiwib2JqU3RyIiwiY3VycmVudFNlc3Npb25JbkxTIiwic2Vzc2lvbkNvdW50IiwiZ2V0VGltZUVsYXBzZWQiLCJzZXNzaW9uU3RhcnQiLCJnZXRQYWdlQ291bnQiLCJzZXFObyIsInJlcXVlc3RUaW1lIiwiX2xvZ2dlciQ2IiwiX2FjY291bnQkMiIsIl9kZXZpY2UkMiIsIl9zZXNzaW9uJDIiLCJfaXNQZXJzb25hbGlzYXRpb25BY3RpdmUkNCIsIl9jbGVhckNvb2tpZSIsIl9hZGRUb0xvY2FsRXZlbnRNYXAiLCJSZXF1ZXN0TWFuYWdlciIsIl9hZGRUb0xvY2FsRXZlbnRNYXAyIiwiYmFja3VwRXZlbnQiLCJmaXJlZCIsImlnbm9yZVRyaW0iLCJ3enJrX2Vycm9yIiwicGciLCJwcm90b2NvbCIsImFmIiwibGliIiwicmMiLCJsYXN0U3luY1RpbWUiLCJleHBpcnlTZWNvbmRzIiwiZHN5bmMiLCJnaXZlbkdVSUQiLCJyZWdpc3RlclRva2VuIiwicG9zdCIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsInJlc3BvbnNlIiwib2siLCJub3dUcyIsImV2dERldGFpbCIsIl9yZXF1ZXN0JDQiLCJfYWNjb3VudCQzIiwiX29sZFZhbHVlcyQzIiwiX2xvZ2dlciQ3IiwiX3Byb2Nlc3NQcml2YWN5QXJyYXkiLCJQcml2YWN5IiwiX3Byb2Nlc3NQcml2YWN5QXJyYXkyIiwicHJpdmFjeUFyciIsInByaXZhY3lPYmoiLCJjdXJyIiwib3B0T3V0Iiwic2hvdWxkVXNlSVAiLCJfb2xkVmFsdWVzJDQiLCJfbG9nZ2VyJDgiLCJfcmVxdWVzdCQ1IiwiX2FjY291bnQkNCIsIl93aXpBbGVydEpTUGF0aCIsIl9mY21QdWJsaWNLZXkiLCJfc2V0VXBXZWJQdXNoIiwiX3NldFVwV2ViUHVzaE5vdGlmaWNhdGlvbnMiLCJfc2V0QXBwbGljYXRpb25TZXJ2ZXJLZXkiLCJfc2V0VXBTYWZhcmlOb3RpZmljYXRpb25zIiwiX3NldFVwQ2hyb21lRmlyZWZveE5vdGlmaWNhdGlvbnMiLCJfYWRkV2l6QWxlcnRKUyIsIl9yZW1vdmVXaXpBbGVydEpTIiwiX2hhbmRsZU5vdGlmaWNhdGlvblJlZ2lzdHJhdGlvbiIsIk5vdGlmaWNhdGlvbkhhbmRsZXIiLCJfaGFuZGxlTm90aWZpY2F0aW9uUmVnaXN0cmF0aW9uMiIsIl9yZW1vdmVXaXpBbGVydEpTMiIsIl9hZGRXaXpBbGVydEpTMiIsIl9zZXRVcENocm9tZUZpcmVmb3hOb3RpZmljYXRpb25zMiIsIl9zZXRVcFNhZmFyaU5vdGlmaWNhdGlvbnMyIiwiX3NldEFwcGxpY2F0aW9uU2VydmVyS2V5MiIsIl9zZXRVcFdlYlB1c2hOb3RpZmljYXRpb25zMiIsIl9zZXRVcFdlYlB1c2gyIiwiZGlzcGxheUFyZ3MiLCJfZW5hYmxlV2ViUHVzaCIsImVuYWJsZWQiLCJhcHBsaWNhdGlvblNlcnZlcktleSIsInN1YnNjcmlwdGlvbkNhbGxiYWNrIiwic2VydmljZVdvcmtlclBhdGgiLCJhcG5zV2ViUHVzaElkIiwiYXBuc1NlcnZpY2VVcmwiLCJzYWZhcmkiLCJwdXNoTm90aWZpY2F0aW9uIiwicmVxdWVzdFBlcm1pc3Npb24iLCJzdWJzY3JpcHRpb24iLCJwZXJtaXNzaW9uIiwic3Vic2NyaXB0aW9uRGF0YSIsImVuZHBvaW50IiwiZGV2aWNlVG9rZW4iLCJicm93c2VyIiwicmVnaXN0cmF0aW9uU2NvcGUiLCJzZXJ2aWNlV29ya2VyIiwicmVnaXN0ZXIiLCJyZWdpc3RyYXRpb24iLCJfX3d6cmtfYWNjb3VudF9pZCIsInNjb3BlIiwicmVhZHkiLCJnZXRSZWdpc3RyYXRpb25zIiwic2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbiIsInN1YnNjcmliZU9iaiIsInVzZXJWaXNpYmxlT25seSIsImJhc2U2NFN0cmluZyIsImJhc2U2NCIsInJlcGVhdCIsInJhd0RhdGEiLCJhdG9iIiwicHJvY2Vzc2VkRGF0YSIsIlVpbnQ4QXJyYXkiLCJ1cmxCYXNlNjRUb1VpbnQ4QXJyYXkiLCJwdXNoTWFuYWdlciIsInN1YnNjcmliZSIsImdldFN1YnNjcmlwdGlvbiIsInVuc3Vic2NyaWJlIiwic3VjY2Vzc2Z1bCIsInNjcmlwdFRhZyIsImJvZHlUZXh0Iiwib2tCdXR0b25UZXh0IiwicmVqZWN0QnV0dG9uVGV4dCIsIm9rQnV0dG9uQ29sb3IiLCJza2lwRGlhbG9nIiwiYXNrQWdhaW5UaW1lSW5TZWNvbmRzIiwib2tDYWxsYmFjayIsInJlamVjdENhbGxiYWNrIiwiaHR0cHNQb3B1cFBhdGgiLCJodHRwc0lmcmFtZVBhdGgiLCJhcG5zV2ViUHVzaFNlcnZpY2VVcmwiLCJub3RpZk9iaiIsImlzSFRUUCIsImNocm9tZUFnZW50IiwiZmlyZWZveEFnZW50Iiwic2FmYXJpQWdlbnQiLCJOb3RpZmljYXRpb24iLCJodHRwc0lmcmFtZSIsInN0YXRlIiwiZnJvbSIsInd6cmtQZXJtaXNzaW9uUG9wdXAiLCJ3aXpBbGVydCIsImNvbmZpcm1CdXR0b25UZXh0IiwiY29uZmlybUJ1dHRvbkNvbG9yIiwiX3ZhcmlhYmxlU3RvcmUiLCJWYXJpYWJsZSIsImRlZmF1bHRWYWx1ZSIsImhhZFN0YXJ0ZWQiLCJ2YWx1ZUNoYW5nZWRDYWxsYmFja3MiLCJnZXRWYWx1ZSIsImdldGRlZmF1bHRWYWx1ZSIsInR5cGVPZkRlZmF1bHRWYWx1ZSIsImV4aXN0aW5nIiwiZ2V0VmFyaWFibGUiLCJ2YXJJbnN0YW5jZSIsInJlZ2lzdGVyVmFyaWFibGUiLCJ1cGRhdGUiLCJuZXdWYWx1ZSIsIm9sZFZhbHVlIiwiaGFzVmFyc1JlcXVlc3RDb21wbGV0ZWQiLCJ0cmlnZ2VyVmFsdWVDaGFuZ2VkIiwib25WYWx1ZUNoYW5nZWQiLCJhZGRWYWx1ZUNoYW5nZWRDYWxsYmFjayIsInJlbW92ZVZhbHVlQ2hhbmdlZENhbGxiYWNrIiwiY2xlYXJTdGFydEZsYWciLCJfbG9nZ2VyJDkiLCJfYWNjb3VudCQ1IiwiX3JlcXVlc3QkNiIsIl9ldmVudCIsIl92YXJpYWJsZXMiLCJfcmVtb3RlVmFyaWFibGVzIiwiX2ZldGNoQ2FsbGJhY2siLCJfdmFyaWFibGVzQ2hhbmdlZENhbGxiYWNrcyIsIl9vbmVUaW1lVmFyaWFibGVzQ2hhbmdlZENhbGxiYWNrcyIsIl9oYXNWYXJzUmVxdWVzdENvbXBsZXRlZCIsIl9ydW5WYXJpYWJsZXNDaGFuZ2VkQ2FsbGJhY2siLCJWYXJpYWJsZVN0b3JlIiwiX3J1blZhcmlhYmxlc0NoYW5nZWRDYWxsYmFjazIiLCJzeW5jVmFyaWFibGVzIiwib25TeW5jU3VjY2VzcyIsIm9uU3luY0ZhaWx1cmUiLCJtZXRhIiwidGsiLCJyIiwic3RhdHVzIiwiZmV0Y2hWYXJpYWJsZXMiLCJvbkZldGNoQ2FsbGJhY2siLCJhZGRWYXJpYWJsZXNDaGFuZ2VkQ2FsbGJhY2siLCJjYWxsYmFjayIsImFkZE9uZVRpbWVWYXJpYWJsZXNDaGFuZ2VkQ2FsbGJhY2siLCJyZW1vdmVWYXJpYWJsZXNDaGFuZ2VkQ2FsbGJhY2siLCJyZW1vdmVPbmVUaW1lVmFyaWFibGVzQ2hhbmdlZENhbGxiYWNrIiwiY2FsbEJhY2siLCJfbG9nZ2VyJGEiLCJfYXBpIiwiX29ubG9hZGNhbGxlZCIsIl9kZXZpY2UkMyIsIl9zZXNzaW9uJDMiLCJfYWNjb3VudCQ2IiwiX3JlcXVlc3QkNyIsIl92YXJpYWJsZVN0b3JlJDEiLCJfaXNTcGEiLCJfcHJldmlvdXNVcmwiLCJfYm91bmRDaGVja1BhZ2VDaGFuZ2VkIiwiX2Rpc21pc3NTcGFtQ29udHJvbCIsIl9kZWJvdW5jZSIsIl9jaGVja1BhZ2VDaGFuZ2VkIiwiX3BpbmdSZXF1ZXN0IiwiX2lzUGluZ0NvbnRpbnVvdXMiLCJfb3ZlcnJpZGVEU3luY0ZsYWciLCJfc2VuZExvY2F0aW9uRGF0YSIsIl9wcm9jZXNzT2xkVmFsdWVzMiIsIm9uVXNlckxvZ2luIiwicHJpdmFjeSIsIm5vdGlmaWNhdGlvbnMiLCJfZGVib3VuY2UyIiwidGltZW91dCIsIl9jaGVja1BhZ2VDaGFuZ2VkMiIsInBhZ2VDaGFuZ2VkIiwiZGVib3VuY2VkUGFnZUNoYW5nZWQiLCJfcGluZ1JlcXVlc3QyIiwiX2lzUGluZ0NvbnRpbnVvdXMyIiwid3pya19kIiwicGluZyIsIl9vdmVycmlkZURTeW5jRmxhZzIiLCJfc2VuZExvY2F0aW9uRGF0YTIiLCJzcGEiLCJpc1NwYSIsIl9jbGV2ZXJ0YXAkYWNjb3VudCIsIl9jbGV2ZXJ0YXAkYWNjb3VudDIiLCJfY2xldmVydGFwJGFjY291bnQzIiwiX2NsZXZlcnRhcCRhY2NvdW50NCIsIl9jbGV2ZXJ0YXAkYWNjb3VudDUiLCJiaW5kIiwiZW5hYmxlUGVyc29uYWxpemF0aW9uIiwic2hwZnlQcm94eVBhdGgiLCJsb2dvdXQiLCJnZXRDbGV2ZXJUYXBJRCIsImdldEFjY291bnRJRCIsImdldFNDRG9tYWluIiwic2V0TGlicmFyeSIsImxpYk5hbWUiLCJsaWJWZXJzaW9uIiwic2V0U0NTREtWZXJzaW9uIiwidmVyIiwic2NTREtWZXJzaW9uIiwic2N2IiwiZ2V0SW5ib3hNZXNzYWdlQ291bnQiLCJnZXRJbmJveE1lc3NhZ2VVbnJlYWRDb3VudCIsImdldEFsbEluYm94TWVzc2FnZXMiLCJnZXRVbnJlYWRJbmJveE1lc3NhZ2VzIiwiZ2V0SW5ib3hNZXNzYWdlRm9ySWQiLCJtZXNzYWdlSWQiLCJkZWxldGVJbmJveE1lc3NhZ2UiLCJtYXJrUmVhZEluYm94TWVzc2FnZSIsInVucmVhZE1zZyIsIm1hcmtSZWFkSW5ib3hNZXNzYWdlc0ZvcklkcyIsIm1lc3NhZ2VJZHMiLCJtYXJrUmVhZEFsbEluYm94TWVzc2FnZSIsIl8kY3QkaW5ib3giLCJwcm9jZXNzTm90aWZpY2F0aW9uRXZlbnQiLCJldmVudERldGFpbCIsInNldExvZ0xldmVsIiwibCIsIk51bWJlciIsImhhbmRsZUluY3JlbWVudFZhbHVlIiwiaGFuZGxlRGVjcmVtZW50VmFsdWUiLCJzZXRNdWx0aVZhbHVlc0ZvcktleSIsImFkZE11bHRpVmFsdWVGb3JLZXkiLCJhZGRNdWx0aVZhbHVlc0ZvcktleSIsInJlbW92ZU11bHRpVmFsdWVGb3JLZXkiLCJyZW1vdmVNdWx0aVZhbHVlc0ZvcktleSIsInJlbW92ZVZhbHVlRm9yS2V5IiwiX2hhbmRsZUVtYWlsU3Vic2NyaXB0aW9uIiwicmVFbmNvZGVkIiwiZmV0Y2hHcm91cHMiLCJ1cmxQYXJhbXNBc0lzIiwiZW5jb2RlZEVtYWlsSWQiLCJlbmNvZGVkUHJvZmlsZVByb3BzIiwicGFnZVR5cGUiLCJwYWdlX3R5cGUiLCJoYW5kbGVFbWFpbFN1YnNjcmlwdGlvbiIsInNob3dQb3NpdGlvbiIsImxhdCIsImNvb3JkcyIsImxhdGl0dWRlIiwibG5nIiwibG9uZ2l0dWRlIiwiTGF0aXR1ZGUiLCJMb25naXR1ZGUiLCJzaG93RXJyb3IiLCJQRVJNSVNTSU9OX0RFTklFRCIsIlBPU0lUSU9OX1VOQVZBSUxBQkxFIiwiVElNRU9VVCIsIlVOS05PV05fRVJST1IiLCJnZXRMb2NhdGlvbiIsImdlb2xvY2F0aW9uIiwiZ2V0Q3VycmVudFBvc2l0aW9uIiwiYXBpIiwiZW5hYmxlV2ViUHVzaCIsInRyIiwic2V0RW51bSIsImVudW1WYWwiLCJpc19vbmxvYWRjYWxsZWQiLCJzdWJFbWFpbCIsImdldEVtYWlsIiwid2l0aEdyb3VwcyIsInVuU3ViRW1haWwiLCJ1bnN1YkVtYWlsR3JvdXBzIiwiZWxlbWVudHMiLCJpc1Vuc3Vic2NyaWJlZCIsImNoZWNrZWQiLCJzZXRTdWJzY3JpcHRpb25Hcm91cHMiLCJnZXRTdWJzY3JpcHRpb25Hcm91cHMiLCJjaGFuZ2VTdWJzY3JpcHRpb25Hcm91cHMiLCJ1cGRhdGVkR3JvdXBzIiwiaXNHbG9iYWxVbnN1YnNjcmliZSIsInNldElzR2xvYmFsVW5zdWJzY3JpYmUiLCJzZXRVcGRhdGVkQ2F0ZWdvcnlMb25nIiwiJENMVFBfV1IiLCIkV1pSS19XUiIsInBhcmVudFdpbmRvdyIsIm9wZW5lciIsInBvc3RNZXNzYWdlIiwic2RrVmVyc2lvbiIsImNoZWNrQnVpbGRlciIsIlNDT09LSUVfUFJFRklYIiwiY3VyckxvY2F0aW9uIiwid3pya19leCIsImJhY2t1cEludGVydmFsIiwicGdDb3VudCIsInJlZmVycmVyRG9tYWluIiwiZ2V0RG9tYWluIiwicmVmZXJyZXIiLCJtYXhMZW4iLCJ1dG1Tb3VyY2UiLCJ1dG1fc291cmNlIiwid3pya19zb3VyY2UiLCJ1cyIsInV0bU1lZGl1bSIsInV0bV9tZWRpdW0iLCJ3enJrX21lZGl1bSIsInVtIiwidXRtQ2FtcGFpZ24iLCJ1dG1fY2FtcGFpZ24iLCJ3enJrX2NhbXBhaWduIiwidWMiLCJ3bSIsImNwZyIsInNldE9mZmxpbmUiLCJhcmciLCJnZXRTREtWZXJzaW9uIiwiZGVmaW5lVmFyaWFibGUiLCJIQVNIX1VOREVGSU5FRCIsIk1BWF9TQUZFX0lOVEVHRVIiLCJhcmdzVGFnIiwiYXJyYXlUYWciLCJib29sVGFnIiwiZGF0ZVRhZyIsImVycm9yVGFnIiwiZnVuY1RhZyIsIm1hcFRhZyIsIm51bWJlclRhZyIsIm9iamVjdFRhZyIsInByb21pc2VUYWciLCJyZWdleHBUYWciLCJzZXRUYWciLCJzdHJpbmdUYWciLCJ3ZWFrTWFwVGFnIiwiYXJyYXlCdWZmZXJUYWciLCJkYXRhVmlld1RhZyIsInJlSXNIb3N0Q3RvciIsInJlSXNVaW50IiwidHlwZWRBcnJheVRhZ3MiLCJmcmVlR2xvYmFsIiwiZnJlZVNlbGYiLCJGdW5jdGlvbiIsImZyZWVFeHBvcnRzIiwibm9kZVR5cGUiLCJmcmVlTW9kdWxlIiwibW9kdWxlRXhwb3J0cyIsImZyZWVQcm9jZXNzIiwicHJvY2VzcyIsIm5vZGVVdGlsIiwiYmluZGluZyIsIm5vZGVJc1R5cGVkQXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJhcnJheVNvbWUiLCJwcmVkaWNhdGUiLCJtYXBUb0FycmF5IiwicmVzdWx0Iiwic2l6ZSIsInNldFRvQXJyYXkiLCJ1aWQiLCJ0cmFuc2Zvcm0iLCJhcnJheVByb3RvIiwiZnVuY1Byb3RvIiwib2JqZWN0UHJvdG8iLCJjb3JlSnNEYXRhIiwiZnVuY1RvU3RyaW5nIiwibWFza1NyY0tleSIsIklFX1BST1RPIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJyZUlzTmF0aXZlIiwiQnVmZmVyIiwiU3ltYm9sIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzeW1Ub1N0cmluZ1RhZyIsInRvU3RyaW5nVGFnIiwibmF0aXZlR2V0U3ltYm9scyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm5hdGl2ZUlzQnVmZmVyIiwiaXNCdWZmZXIiLCJuYXRpdmVLZXlzIiwiRGF0YVZpZXciLCJnZXROYXRpdmUiLCJNYXAiLCJTZXQiLCJXZWFrTWFwIiwibmF0aXZlQ3JlYXRlIiwiZGF0YVZpZXdDdG9yU3RyaW5nIiwidG9Tb3VyY2UiLCJtYXBDdG9yU3RyaW5nIiwicHJvbWlzZUN0b3JTdHJpbmciLCJzZXRDdG9yU3RyaW5nIiwid2Vha01hcEN0b3JTdHJpbmciLCJzeW1ib2xQcm90byIsInN5bWJvbFZhbHVlT2YiLCJ2YWx1ZU9mIiwiSGFzaCIsIkxpc3RDYWNoZSIsIk1hcENhY2hlIiwiU2V0Q2FjaGUiLCJfX2RhdGFfXyIsIlN0YWNrIiwiYXNzb2NJbmRleE9mIiwiZXEiLCJiYXNlR2V0VGFnIiwiaXNPd24iLCJ0YWciLCJ1bm1hc2tlZCIsImdldFJhd1RhZyIsIm9iamVjdFRvU3RyaW5nIiwiYmFzZUlzQXJndW1lbnRzIiwiaXNPYmplY3RMaWtlIiwiYmFzZUlzRXF1YWwiLCJvdGhlciIsImJpdG1hc2siLCJjdXN0b21pemVyIiwic3RhY2siLCJvYmplY3QiLCJlcXVhbEZ1bmMiLCJvYmpJc0FyciIsIm90aElzQXJyIiwib2JqVGFnIiwiZ2V0VGFnIiwib3RoVGFnIiwib2JqSXNPYmoiLCJvdGhJc09iaiIsImlzU2FtZVRhZyIsImVxdWFsQXJyYXlzIiwiYnl0ZUxlbmd0aCIsImJ5dGVPZmZzZXQiLCJidWZmZXIiLCJjb252ZXJ0IiwiaXNQYXJ0aWFsIiwic3RhY2tlZCIsImVxdWFsQnlUYWciLCJvYmpJc1dyYXBwZWQiLCJvdGhJc1dyYXBwZWQiLCJvYmpVbndyYXBwZWQiLCJvdGhVbndyYXBwZWQiLCJvYmpQcm9wcyIsImdldEFsbEtleXMiLCJvYmpMZW5ndGgiLCJza2lwQ3RvciIsIm9ialZhbHVlIiwib3RoVmFsdWUiLCJjb21wYXJlZCIsIm9iakN0b3IiLCJvdGhDdG9yIiwiZXF1YWxPYmplY3RzIiwiYmFzZUlzRXF1YWxEZWVwIiwiYXJyTGVuZ3RoIiwib3RoTGVuZ3RoIiwic2VlbiIsImFyclZhbHVlIiwib3RoSW5kZXgiLCJoYXMiLCJrZXlzRnVuYyIsInN5bWJvbHNGdW5jIiwib2Zmc2V0IiwiYXJyYXlQdXNoIiwiYmFzZUdldEFsbEtleXMiLCJnZXRTeW1ib2xzIiwiZ2V0TWFwRGF0YSIsImlzTWFza2VkIiwiaXNGdW5jdGlvbiIsImJhc2VJc05hdGl2ZSIsInBhaXJzIiwiTEFSR0VfQVJSQVlfU0laRSIsInJlc0luZGV4Iiwic3ltYm9sIiwiYXJyYXlGaWx0ZXIiLCJpc0luZGV4IiwiQXJyYXlCdWZmZXIiLCJDdG9yIiwiY3RvclN0cmluZyIsImlzQXJndW1lbnRzIiwiaXNMZW5ndGgiLCJiYXNlVW5hcnkiLCJpbmhlcml0ZWQiLCJpc0FyciIsImlzQXJnIiwiaXNCdWZmIiwiaXNUeXBlIiwic2tpcEluZGV4ZXMiLCJpdGVyYXRlZSIsImJhc2VUaW1lcyIsImFycmF5TGlrZUtleXMiLCJiYXNlS2V5cyIsIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJDb25zdGFudHNfMSIsIkFyZ3NCdWlsZGVyIiwiYXJnU3RyaW5nIiwiYXJnVmFsdWVzIiwiX2JvZHkiLCJhdHRhY2hBcGlLZXlzIiwiYXBwSWQiLCJjbGllbnRLZXkiLCJkZWZhdWx0IiwiUEFSQU1TIiwiQVBQX0lEIiwiQ0xJRU5UIiwiQ0xJRU5UX0tFWSIsImJ1aWxkIiwiYnVpbGREaWN0IiwiQnJvd3NlckRldGVjdG9yIiwid25kIiwic2VhcmNoU3RyaW5nIiwiZ2V0QnJvd3NlckRhdGEiLCJ2ZXJzaW9uIiwic2VhcmNoVmVyc2lvbiIsImFwcFZlcnNpb24iLCJPUyIsImdldE9TRGF0YSIsImRhdGFTdHJpbmciLCJkYXRhUHJvcCIsInZlcnNpb25TZWFyY2hTdHJpbmciLCJ2ZXJzaW9uU2VhcmNoIiwiaWRlbnRpdHkiLCJzdWJTdHJpbmciLCJ2ZW5kb3IiLCJvcGVyYSIsInBsYXRmb3JtIiwiTUVUSE9EUyIsIlNUQVJUIiwiU1RPUCIsIkFEVkFOQ0UiLCJUUkFDSyIsIlBBVVNFX1NFU1NJT04iLCJSRVNVTUVfU0VTU0lPTiIsIlBBVVNFX1NUQVRFIiwiUkVTVU1FX1NUQVRFIiwiRE9XTkxPQURfRklMRSIsIk1VTFRJIiwiU0VUX1ZBUlMiLCJHRVRfVkFSUyIsIlNFVF9VU0VSX0FUVFJJQlVURVMiLCJTRVRfREVWSUNFX0FUVFJJQlVURVMiLCJVUExPQURfRklMRSIsIlJFR0lTVEVSX0RFVklDRSIsIlNES19WRVJTSU9OIiwiQUNUSU9OIiwiQ1QiLCJDVVJSRU5DWV9DT0RFIiwiREVWSUNFX0lEIiwiVVNFUl9JRCIsIk5FV19VU0VSX0lEIiwiREVWX01PREUiLCJWRVJTSU9OX05BTUUiLCJTWVNURU1fTkFNRSIsIlNZU1RFTV9WRVJTSU9OIiwiQlJPV1NFUl9OQU1FIiwiQlJPV1NFUl9WRVJTSU9OIiwiREVWSUNFX05BTUUiLCJERVZJQ0VfTU9ERUwiLCJVU0VSX0FUVFJJQlVURVMiLCJMT0NBTEUiLCJDT1VOVFJZIiwiUkVHSU9OIiwiQ0lUWSIsIkxPQ0FUSU9OIiwiU1RBVEUiLCJJTkZPIiwiRVZFTlQiLCJWQUxVRSIsIkZJTEVOQU1FIiwiVElNRSIsIkRBVEEiLCJWQVJTIiwiRklMRSIsIlNJWkUiLCJWQVJJQVRJT04iLCJIQVNIIiwiRU1BSUwiLCJWQVJJQUJMRVMiLCJBQ1RJT05fREVGSU5JVElPTlMiLCJJTkNMVURFX0RFRkFVTFRTIiwiSU5DTFVERV9WQVJJQU5UX0RFQlVHX0lORk8iLCJORVdTRkVFRF9NRVNTQUdFUyIsIk1FU1NBR0VfSUQiLCJXRUJfUFVTSF9TVUJTQ1JJUFRJT04iLCJLRVlTIiwiSVNfUkVHSVNURVJFRCIsIkxBVEVTVF9WRVJTSU9OIiwiU1lOQ19JTkJPWCIsIk1FU1NBR0VTIiwiVkFSSUFOVFMiLCJWQVJJQU5UX0RFQlVHX0lORk8iLCJUT0tFTiIsIkRFRkFVTFRfS0VZUyIsIkNPVU5UIiwiSVRFTSIsIkhPU1RfQ09ORklHIiwiSU5CT1hfTUVTU0FHRVMiLCJTRVNTSU9OIiwiTUVTU0FHRV9PQ0NVUlJFTkNFUyIsIk1FU1NBR0VfQ0FDSEUiLCJNSUdSQVRJT05fU1RBVEUiLCJQVVNIX1NVQlNDUklQVElPTiIsIlZBTFVFUyIsIkRFVEVDVCIsIkRFRkFVTFRfUFVTSF9BQ1RJT04iLCJFdmVudEVtaXR0ZXIiLCJoYW5kbGVycyIsIm9uIiwib2ZmIiwiZW1pdCIsImFyZ3MiLCJoYW5kbGVyIiwiSW50ZXJuYWxTdGF0ZSIsInN0YXJ0SGFuZGxlcnMiLCJkZXZNb2RlIiwiaGFzU3RhcnRlZCIsInN0YXJ0U3VjY2Vzc2Z1bCIsInZhcmlhbnREZWJ1Z0luZm9FbmFibGVkIiwiYWRkU3RhcnRSZXNwb25zZUhhbmRsZXIiLCJyZW1vdmVTdGFydFJlc3BvbnNlSGFuZGxlciIsInRyaWdnZXJTdGFydEhhbmRsZXJzIiwiTGVhbnBsdW1JbnRlcm5hbF8xIiwiTGVhbnBsdW0iLCJzZXRBcGlQYXRoIiwiYXBpUGF0aCIsIl9scCIsInNldEVtYWlsIiwic2V0TmV0d29ya1RpbWVvdXQiLCJzZXRBcHBJZEZvckRldmVsb3BtZW50TW9kZSIsImFjY2Vzc0tleSIsInNldEFwcElkRm9yUHJvZHVjdGlvbk1vZGUiLCJzZXRTb2NrZXRIb3N0IiwiaG9zdCIsInNldERldmljZUlkIiwiZGV2aWNlSWQiLCJzZXRMb2NhbGUiLCJsb2NhbGUiLCJzZXRBcHBWZXJzaW9uIiwidmVyc2lvbk5hbWUiLCJzZXREZXZpY2VOYW1lIiwiZGV2aWNlTmFtZSIsInNldERldmljZU1vZGVsIiwiZGV2aWNlTW9kZWwiLCJzZXRSZXF1ZXN0QmF0Y2hpbmciLCJiYXRjaEVuYWJsZWQiLCJjb29sZG93blNlY29uZHMiLCJzZXRTeXN0ZW1OYW1lIiwic3lzdGVtTmFtZSIsInNldFN5c3RlbVZlcnNpb24iLCJzeXN0ZW1WZXJzaW9uIiwic2V0VmFyaWFibGVzIiwidmFyaWFibGVzIiwic2V0VmFyaWFudERlYnVnSW5mb0VuYWJsZWQiLCJlbmFibGVSaWNoSW5BcHBNZXNzYWdlcyIsInByb2Nlc3NNZXNzYWdlRXZlbnQiLCJnZXRWYXJpYW50RGVidWdJbmZvIiwiZ2V0VmFyaWFibGVzIiwiX2EiLCJfaSIsImFwcGx5IiwiZ2V0VmFyaWFudHMiLCJhZGRWYXJpYWJsZXNDaGFuZ2VkSGFuZGxlciIsInJlbW92ZVZhcmlhYmxlc0NoYW5nZWRIYW5kbGVyIiwiZm9yY2VDb250ZW50VXBkYXRlIiwidXNlU2Vzc2lvbkxlbmd0aCIsInN0YXJ0IiwidXNlcklkIiwidXNlckF0dHJpYnV0ZXMiLCJzdGFydEZyb21DYWNoZSIsInN0b3AiLCJwYXVzZVNlc3Npb24iLCJyZXN1bWVTZXNzaW9uIiwicGF1c2VTdGF0ZSIsInJlc3VtZVN0YXRlIiwiZ2V0VXNlcklkIiwic2V0VXNlcklkIiwic2V0VXNlckF0dHJpYnV0ZXMiLCJ0cmFjayIsInBhcmFtcyIsInRyYWNrUHVyY2hhc2UiLCJjdXJyZW5jeUNvZGUiLCJhZHZhbmNlVG8iLCJpc1dlYlB1c2hTdXBwb3J0ZWQiLCJpc1dlYlB1c2hTdWJzY3JpYmVkIiwic2V0V2ViUHVzaE9wdGlvbnMiLCJyZWdpc3RlckZvcldlYlB1c2giLCJzZXJ2aWNlV29ya2VyVXJsIiwidW5yZWdpc3RlckZyb21XZWJQdXNoIiwiY2xlYXJVc2VyQ29udGVudCIsImRlZmluZUFjdGlvbiIsImFwcGx5UXVldWUiLCJxdWV1ZSIsImdldEZpbGVVcmwiLCJmaWxlbmFtZSIsIl9fZGVzdHJveSIsIlZFUlNJT04iLCJfX2Fzc2lnbiIsImFzc2lnbiIsIkxlYW5wbHVtSW5ib3hNZXNzYWdlIiwiQXJnc0J1aWxkZXJfMSIsIlN0b3JhZ2VNYW5hZ2VyXzEiLCJMZWFucGx1bUluYm94IiwiY3JlYXRlUmVxdWVzdCIsIm9uQWN0aW9uIiwibWVzc2FnZU1hcCIsImNoYW5nZUhhbmRsZXJzIiwiZG93bmxvYWRNZXNzYWdlcyIsIl90aGlzIiwicXVldWVkIiwic2VuZE5vdyIsIm5ld3NmZWVkTWVzc2FnZXMiLCJ0cmlnZ2VyQ2hhbmdlSGFuZGxlcnMiLCJtYXJrQXNSZWFkIiwiaXNSZWFkIiwiaW5ib3hNZXNzYWdlIiwib3BlbkFjdGlvbiIsIm9uQ2hhbmdlZCIsInVucmVhZENvdW50IiwiY3JlYXRlIiwiYWxsTWVzc2FnZXMiLCJ1bnJlYWRNZXNzYWdlcyIsIl9pZCIsIl90aXRsZSIsIl9zdWJ0aXRsZSIsIl9kYXRhIiwiX3RpbWVzdGFtcCIsIl9pc1JlYWQiLCJfaW1hZ2VVcmwiLCJfb3BlbkFjdGlvbiIsIm1lc3NhZ2VJbmZvIiwiX2IiLCJfYyIsIl9kIiwiX2UiLCJfZiIsIl9nIiwiX2giLCJfaiIsIl9rIiwiX2wiLCJwYXJlbnRDYW1wYWlnbklkIiwibWVzc2FnZURhdGEiLCJUaXRsZSIsIlN1YnRpdGxlIiwiRGF0YSIsImRlbGl2ZXJ5VGltZXN0YW1wIiwiSW1hZ2UiLCJzdWJ0aXRsZSIsInRpbWVzdGFtcCIsIkJyb3dzZXJEZXRlY3Rvcl8xIiwiSW50ZXJuYWxTdGF0ZV8xIiwiTGVhbnBsdW1JbmJveF8xIiwiTGVhbnBsdW1SZXF1ZXN0XzEiLCJMZWFucGx1bVNvY2tldF8xIiwiUHVzaE1hbmFnZXJfMSIsIk1lc3NhZ2VzXzEiLCJFdmVudEVtaXR0ZXJfMSIsIk1pZ3JhdGlvbk1hbmFnZXJfMSIsInB1YmxpY18xIiwiaW50ZXJuYWxfMSIsIlZhckNhY2hlXzEiLCJTRVNTSU9OX0tFWSIsIkxlYW5wbHVtSW50ZXJuYWwiLCJfbWlncmF0aW9uIiwiX2V2ZW50cyIsIl9pbnRlcm5hbFN0YXRlIiwiX2xwSW5ib3giLCJvbkluYm94QWN0aW9uIiwiX2xwUmVxdWVzdCIsIl92YXJDYWNoZSIsIl9scFNvY2tldCIsImdldExhc3RSZXNwb25zZSIsIl9wdXNoTWFuYWdlciIsIl9tZXNzYWdlcyIsIl9icm93c2VyRGV0ZWN0b3IiLCJwcmV2ZW50ZWQiLCJwcmV2ZW50RGVmYXVsdCIsInNoYSIsInZlcmlmeVN0YXRlIiwiX2xvY2FsZSIsIl9kZXZpY2VOYW1lIiwiX2RldmljZU1vZGVsIiwiYmF0Y2hDb29sZG93biIsIl9zeXN0ZW1OYW1lIiwiX3N5c3RlbVZlcnNpb24iLCJ2YXJpYW50cyIsInRyYWNrTWVzc2FnZSIsInJlZ2lzdGVyQWN0aW9uRGVmaW5pdGlvbiIsImtpbmQiLCJNZXNzYWdlS2luZCIsIlRlbXBsYXRlIiwiZ2V0VmFyc1Jlc3BvbnNlIiwiaXNTdWNjZXNzIiwiaXNSZXNwb25zZVN1Y2Nlc3MiLCJhcHBseURpZmZzIiwic2V0VmFyaWFudERlYnVnSW5mbyIsIl9zZXNzaW9uTGVuZ3RoIiwiaGFzQWN0aXZlU2Vzc2lvbiIsImdldFN0YXRlIiwiTWlncmF0aW9uU3RhdGUiLCJEVVBMSUNBVEUiLCJfY3QiLCJpbml0Q2xldmVyVGFwIiwiQ0xFVkVSVEFQIiwibWlncmF0ZVB1c2hUb2tlbiIsImNsZWFudXAiLCJvblVwZGF0ZSIsInRyaWdnZXJWYXJpYWJsZXNDaGFuZ2VkSGFuZGxlcnMiLCJzdGFydFJlc3BvbnNlIiwidXBkYXRlU2Vzc2lvbiIsImFjdGlvbkRlZmluaXRpb25zIiwibGF0ZXN0VmVyc2lvbiIsImNvbm5lY3RTb2NrZXQiLCJsb2FkRGlmZnMiLCJzdWNjZXNzIiwiaXNQdXJjaGFzZSIsImNsaWVudFVybCIsIl93ZWJQdXNoT3B0aW9ucyIsIndvcmtlclVybCIsImlzU3Vic2NyaWJlZCIsInN1YnNjcmliZVVzZXIiLCJ1bnN1YnNjcmliZVVzZXIiLCJpbnZvY2F0aW9uIiwiZHVwbGljYXRlUmVxdWVzdCIsImNvbm5lY3QiLCJjdXJyZW50VGltZSIsImxhc3RBY3RpdmUiLCJOZXR3b3JrXzEiLCJMZWFucGx1bVJlcXVlc3QiLCJuZXR3b3JrIiwiY29vbGRvd25UaW1lb3V0IiwibGFzdFJlcXVlc3RUaW1lIiwidXNlcklkVmFsdWUiLCJsb2FkSG9zdENvbmZpZyIsImxvYWRMb2NhbCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJwb3NzaWJsZSIsInNhdmVMb2NhbCIsImFyZ3NCdWlsZGVyIiwic2VuZFJlcXVlc3QiLCJzZW5kVW5zZW50UmVxdWVzdHMiLCJyZXF1ZXN0c1RvU2VuZCIsInBvcFVuc2VudFJlcXVlc3RzIiwicmVxdWVzdERhdGEiLCJtdWx0aVJlcXVlc3RBcmdzIiwic2F2ZVJlcXVlc3RGb3JMYXRlciIsImdldEZpcnN0UmVzcG9uc2UiLCJxdWVyeSIsImFqYXgiLCJtZXRob2RSZXNwb25zZSIsInNoYTI1NiIsIm1pZ3JhdGVTdGF0ZSIsImFwaUhvc3QiLCJkZXZTZXJ2ZXJIb3N0IiwicmVtb3ZlTG9jYWwiLCJpZ25vcmVkIiwiaG9zdENvbmZpZyIsImxvZGFzaF9pc2VxdWFsXzEiLCJTb2NrZXRJb0NsaWVudF8xIiwiTGVhbnBsdW1Tb2NrZXQiLCJuZXR3b3JrVGltZW91dFNlY29uZHMiLCJzb2NrZXRDbGllbnQiLCJzb2NrZXRIb3N0IiwiYXV0aCIsIldlYlNvY2tldCIsImF1dGhTZW50Iiwib25vcGVuIiwic2VuZCIsIm9ubWVzc2FnZSIsIm9uTWVzc2FnZVJlY2VpdmVkIiwib25jbG9zZSIsImNvbm5lY3RlZCIsImNvbm5lY3RpbmciLCJkaXNjb25uZWN0IiwiYXJnc18xIiwiZGlmZnMiLCJzZW5kVmFyaWFibGVzIiwidXBkYXRlZCIsInNlbmRBY3Rpb25zIiwiYWxlcnQiLCJWYWx1ZVRyYW5zZm9ybXNfMSIsIk9jY3VycmVuY2VUcmFja2VyIiwidHJpZ2dlcnMiLCJvY2N1cnJlbmNlcyIsInJlY29yZE9jY3VycmVuY2UiLCJzZXNzaW9uT2NjdXJyZW5jZXMiLCJyZWNvcmRUcmlnZ2VyT2NjdXJyZW5jZSIsInRyaWdnZXJPY2N1cnJlbmNlcyIsImdldFNlc3Npb25PY2N1cnJhbmNlQ291bnQiLCJnZXRPY2N1cnJlbmNlcyIsImNsZWFyU2Vzc2lvbiIsIm1heWJlSlNPTiIsInN0ciIsIk1lc3NhZ2VzIiwiX21lc3NhZ2VDYWNoZSIsIm9jY3VycmVuY2VUcmFja2VyIiwiX3Nob3dSaWNoSUFNIiwib25NZXNzYWdlUHJldmlldyIsIm9uTWVzc2FnZXNSZWNlaXZlZCIsIm9uVHJpZ2dlciIsInRyaWdnZXIiLCJhdHRyaWJ1dGVzIiwiY29udGV4dCIsImdldE1lc3NhZ2VzIiwic2hvdWxkU2hvd01lc3NhZ2UiLCJzaG93TWVzc2FnZSIsImV2ZW50SW5mbyIsInJ1bkFjdGlvbk5hbWVkIiwiYWN0aW9uTmFtZSIsInJ1blRyYWNrZWRBY3Rpb25OYW1lZCIsImhhbmRsZU1lc3NhZ2UiLCJhZGREZWZhdWx0cyIsInJlY2VpdmVkTWVzc2FnZXMiLCJtYXRjaGVzVHJpZ2dlciIsIndoZW5UcmlnZ2VycyIsIm1hdGNoZXNVbmxlc3MiLCJ1bmxlc3NUcmlnZ2VycyIsInRyaWdnZXJzQ291bnQiLCJtYXRjaGVzTGltaXRzIiwid2hlbkxpbWl0cyIsInN0YXJ0VGltZSIsImVuZFRpbWUiLCJldmVudFVybCIsInBhcmFtIiwibWV0YWRhdGEiLCJhbmNob3JQcm9wIiwiYWx0UHJvcCIsInBhcmFtZXRlcnMiLCJfX25hbWVfXyIsInJlc29sdmVGaWxlcyIsInRlbXBsYXRlTmFtZSIsInRlbXBsYXRlIiwicmVuZGVyUmljaEluQXBwTWVzc2FnZSIsInJlc29sdmVGaWVsZHMiLCJqb2luIiwiY29udGVudCIsImRvYyIsIndyaXRlIiwiY2xvc2UiLCJ0cmFja09wdGlvbnMiLCJkZWZpbmVkIiwicGFyZW50TWVzc2FnZUlkIiwicHJvY2Vzc0FjdGlvbiIsIm1lc3NhZ2VJZEZyb21BY3Rpb24iLCJjaGFpbmVkTWVzc2FnZUlkXzEiLCJtZXNzYWdlXzEiLCJkZWZpbml0aW9uIiwia2luZHMiLCJ1c2VEZWZhdWx0cyIsImRlZmF1bHRWYWx1ZXMiLCJmaWxlUHJlZml4IiwiY29sb3JTdWZmaXgiLCJkZWNvZGVDb2xvciIsImlnbm9yZUNhc2VFcXVhbHMiLCJsb2NhbGVDb21wYXJlIiwic2Vuc2l0aXZpdHkiLCJtYXRjaGVzVHJpZ2dlcnMiLCJjb250ZXh0Tm91biIsIm1hdGNoZXNOb3VuIiwibm91biIsInZlcmIiLCJvYmplY3RzIiwicGFyYW1ldGVyIiwibWF0Y2hlc1BhcmFtIiwic29tZSIsInN1YmplY3QiLCJjb250YWluc0F0dHJpYnV0ZSIsImNvbnRleHRWYWx1ZV8xIiwiZXZlcnkiLCJsaW1pdCIsInBlckludGVydmFsIiwidGltZVNsb3QiLCJ2ZXJiVG9JbnRlcnZhbCIsIklkZW50aXR5TWFuYWdlciIsIklkZW50aXR5U3RhdGUiLCJjbGV2ZXJ0YXBfd2ViX3Nka18xIiwibm9vcCIsInRvTWlncmF0aW9uU3RhdGUiLCJzZGsiLCJMRUFOUExVTSIsIlVOS05PV04iLCJNaWdyYXRpb25NYW5hZ2VyIiwiX2ZldGNoaW5nIiwic2F2ZWRSZXNwb25zZSIsImdldE1pZ3JhdGlvblN0YXRlIiwiaXNBbm9ueW1vdXMiLCJjdCIsInJlZ2lvbkNvZGUiLCJhcmdzRGljdCIsImV2ZW50UHVzaCIsInByb2ZpbGVQdXNoIiwiYXR0cnMiLCJtYXBBdHRyaWJ1dGVzIiwiY29udmVydEFycmF5cyIsImlzRW5nYWdlbWVudEV2ZW50IiwiZXZlbnRQYXJhbXMiLCJhcnIiLCJtYXBwaW5nIiwiYXR0cmlidXRlTWFwcGluZ3MiLCJBTk9OWU1PVVMiLCJpZGVudGlmeSIsIklERU5USUZJRUQiLCJpZGVudGlmeU5vbkFub255bW91cyIsIk5ldHdvcmsiLCJyZXF1ZXN0UXVldWUiLCJydW5uaW5nUmVxdWVzdCIsInBsYWluVGV4dCIsImVucXVldWVSZXF1ZXN0IiwiWERvbWFpblJlcXVlc3QiLCJhamF4SUU4IiwiaGFuZGxlZCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwicmVzcG9uc2VfMSIsInBhcnNlRXJyb3IiLCJyZXNwb25zZVRleHQiLCJkZXF1ZXVlUmVxdWVzdCIsImJsb2NrZWQiLCJvbnRpbWVvdXQiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiYWJvcnQiLCJ4ZHIiLCJvbnByb2dyZXNzIiwicmVxdWVzdEFyZ3VtZW50cyIsIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsImZ1bGZpbGxlZCIsInN0ZXAiLCJuZXh0IiwicmVqZWN0ZWQiLCJkb25lIiwiX19nZW5lcmF0b3IiLCJfIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsIml0ZXJhdG9yIiwib3AiLCJQdXNoTWFuYWdlciIsImdldFNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24iLCJ1cGRhdGVOZXdTdWJzY3JpcHRpb25PblNlcnZlciIsImVycm9yXzEiLCJlcnJvcl8yIiwidXJsQjY0VG9VaW50OEFycmF5IiwiZXJyb3JfMyIsImdldFJlZ2lzdHJhdGlvbiIsImRlY29kZURhdGEiLCJvdXRwdXRBcnJheSIsInByZXBhcmVkU3Vic2NyaXB0aW9uIiwicHJlcGFyZVN1YnNjcmlwdGlvbiIsInByZXBhcmVkU3Vic2NyaXB0aW9uU3RyaW5nIiwic2V0U3Vic2NyaXB0aW9uIiwia2V5QXNjaWkiLCJlbmNvZGVEYXRhIiwiYXV0aEFzY2lpIiwiYnRvYSIsIlNvY2tldElvQ2xpZW50IiwibGluZSIsInBhcnRzIiwiaGVhcnRiZWF0Iiwic29ja2V0IiwiaGVhcnRiZWF0SW50ZXJ2YWwiLCJtZXNzYWdlUGFydHMiLCJtZXNzYWdlRXZlbnQiLCJhcmdzSnNvbiIsInN0b3JhZ2VFbmFibGVkIiwibG9jYWwiLCJhbHRlcm5hdGVTdG9yYWdlIiwiVmFsdWVUcmFuc2Zvcm1zIiwiY29sb3IiLCJlbmNvZGVDb2xvciIsInJnYmEiLCJoZXgiLCJWYXJDYWNoZSIsImhhc1JlY2VpdmVkRGlmZnMiLCJtZXJnZWQiLCJ2YXJpYWJsZXNDaGFuZ2VkSGFuZGxlcnMiLCJ2YXJpYW50RGVidWdJbmZvIiwia3giLCJtZXJnZUhlbHBlciIsInNhdmVEaWZmcyIsImN1cnJlbnQiLCJzZXRWYXJzIiwiYXJndW1lbnRUcmVlIiwiYXJndW1lbnRLaW5kcyIsIm9wdGlvbnNUb0RlZmluaXRpb25zIiwicHJlZml4Iiwib2JqSXRlcmF0b3IiLCJhdHRyIiwidmFyc0l0ZXJhdG9yIiwiZGlmZkl0ZXJhdG9yIiwiYXR0cmlidXRlIiwibWVyZ2VkXzEiLCJ2YXJTdWJzY3JpcHQiLCJzdWJzY3JpcHQiLCJkaWZmVmFsdWUiLCJBY3Rpb25QYXJhbWV0ZXJUeXBlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwibG9hZGVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdsb2JhbFRoaXMiLCJubWQiLCJwYXRocyJdLCJzb3VyY2VSb290IjoiIn0=