!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Leanplum=t():e.Leanplum=t()}(self,(()=>(()=>{var e={739:function(e){e.exports=function(){"use strict";var e=0;function t(t){return"__private_"+e+++"_"+t}function i(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}const n="clevertap-prod.com",o="https:";var r=t("accountId"),s=t("region"),a=t("targetDomain"),l=t("dcSdkversion"),c=t("token");class d{constructor(){let{id:e}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:n,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";Object.defineProperty(this,r,{writable:!0,value:void 0}),Object.defineProperty(this,s,{writable:!0,value:""}),Object.defineProperty(this,a,{writable:!0,value:n}),Object.defineProperty(this,l,{writable:!0,value:""}),Object.defineProperty(this,c,{writable:!0,value:""}),this.id=e,t&&(this.region=t),i&&(this.targetDomain=i),o&&(this.token=o)}get id(){return i(this,r)[r]}set id(e){i(this,r)[r]=e}get region(){return i(this,s)[s]}set region(e){i(this,s)[s]=e}get dcSDKVersion(){return i(this,l)[l]}set dcSDKVersion(e){i(this,l)[l]=e}get targetDomain(){return i(this,a)[a]}set targetDomain(e){i(this,a)[a]=e}get token(){return i(this,c)[c]}set token(e){i(this,c)[c]=e}get finalTargetDomain(){return this.region?"".concat(this.region,".").concat(this.targetDomain):this.targetDomain===n?"".concat("eu1",".").concat(this.targetDomain):this.targetDomain}get dataPostPEURL(){return"".concat(o,"//").concat(this.finalTargetDomain,"/defineVars")}get dataPostURL(){return"".concat(o,"//").concat(this.finalTargetDomain,"/a?t=96")}get recorderURL(){return"".concat(o,"//").concat(this.finalTargetDomain,"/r?r=1")}get emailURL(){return"".concat(o,"//").concat(this.finalTargetDomain,"/e?r=1")}}const u=new RegExp("^\\s+|\\.|:|\\$|'|\"|\\\\|\\s+$","g"),h=new RegExp("^\\s+|'|\"|\\\\|\\s+$","g"),p=new RegExp("'","g"),g="clear",f="Charged ID",v="WZRK_CHARGED_ID",b="WZRK_G",m="WZRK_K",y="WZRK_CAMP",w="WZRK_CAMP_G",S="WZRK_EV",_="WZRK_META",C="WZRK_PR",k="WZRK_ARP",E="WZRK_L",A="global",I="display",P="optOut",O="useIP",T="WZRK_X",x="isOUL",R="push",M=31536e3,D="cUsY",N="wzrk_",L="wzrk_id",U="Notification Viewed",j="Notification Clicked",F="WZRK_FPU",V="WZRK_PSD",q="$incr",B="$add",z="$remove",H="$delete",K="WZRK_INBOX_CONFIG",W="WZRK_INBOX",G=1e3,Y="wzrk_fetch",J=["Stayed","UTM Visited","App Launched","Notification Sent",U,j],$=e=>"string"==typeof e||e instanceof String,Z=e=>"[object Object]"===Object.prototype.toString.call(e),Q=e=>"object"==typeof e&&e instanceof Date,X=e=>{for(const t in e)if(e.hasOwnProperty(t))return!1;return!0},ee=e=>!isNaN(parseFloat(e))&&isFinite(e),te=e=>/^-?[\d.]+(?:e-?\d+)?$/.test(e)&&"number"==typeof e,ie=e=>null!=e&&"undefined"!==e,ne=(e,t)=>{if("object"!=typeof e){let i;return $(e)?(i=oe(e,h),i.length>1024&&(i=i.substring(0,1024),t.reportError(521,i+"... length exceeded 1024 chars. Trimmed."))):i=e,i}for(const i in e)if(e.hasOwnProperty(i)){const n=ne(e[i],t);let o;o=oe(i,u),o.length>1024&&(o=o.substring(0,1024),t.reportError(520,o+"... length exceeded 1024 chars. Trimmed.")),delete e[i],e[o]=n}return e},oe=(e,t)=>e.replace(t,""),re=()=>{const e=new Date;return e.getFullYear()+""+e.getMonth()+e.getDay()},se=()=>Math.floor((new Date).getTime()/1e3),ae=e=>"$D_"+Math.round(e.getTime()/1e3),le=e=>{if(ce(e))return"$D_"+e},ce=e=>{const t=/^(\d{4})(\d{2})(\d{2})$/.exec(e);if(null==t)return!1;const i=t[3],n=t[2]-1,o=t[1],r=new Date(o,n,i);return r.getDate()==i&&r.getMonth()==n&&r.getFullYear()==o};class de{static save(e,t){return!(!e||!t)&&(this._isLocalStorageSupported()?(localStorage.setItem(e,"string"==typeof t?t:JSON.stringify(t)),!0):void 0)}static read(e){if(!e)return!1;let t=null;if(this._isLocalStorageSupported()&&(t=localStorage.getItem(e)),null!=t)try{t=JSON.parse(t)}catch(e){}return t}static remove(e){return!!e&&(this._isLocalStorageSupported()?(localStorage.removeItem(e),!0):void 0)}static removeCookie(e,t){let i=e+"=; expires=Thu, 01 Jan 1970 00:00:01 GMT;";t&&(i=i+" domain="+t+"; path=/"),document.cookie=i}static createCookie(e,t,i,n){let o="",r="";if(i){const e=new Date;e.setTime(e.getTime()+1e3*i),o="; expires="+e.toGMTString()}n&&(r="; domain="+n),t=encodeURIComponent(t),document.cookie=e+"="+t+o+r+"; path=/"}static readCookie(e){const t=e+"=",i=document.cookie.split(";");for(let e=0;e<i.length;e++){let n=i[e];for(;" "===n.charAt(0);)n=n.substring(1,n.length);if(0==n.indexOf(t))return decodeURIComponent(n.substring(t.length,n.length))}return null}static _isLocalStorageSupported(){return"localStorage"in window&&null!==window.localStorage&&"function"==typeof window.localStorage.setItem}static saveToLSorCookie(e,t){if(null!=t)try{this._isLocalStorageSupported()?this.save(e,encodeURIComponent(JSON.stringify(t))):e===b?this.createCookie(e,encodeURIComponent(t),0,window.location.hostname):this.createCookie(e,encodeURIComponent(JSON.stringify(t)),0,window.location.hostname),ue.globalCache[e]=t}catch(e){}}static readFromLSorCookie(e){let t;if(ue.globalCache.hasOwnProperty(e))return ue.globalCache[e];if(t=this._isLocalStorageSupported()?this.read(e):this.readCookie(e),null!=t&&("function"!=typeof t.trim||""!==t.trim())){let i;try{i=JSON.parse(decodeURIComponent(t))}catch(e){i=decodeURIComponent(t)}return ue.globalCache[e]=i,i}}static createBroadCookie(e,t,i,n){if(n){let r=ue.broadDomain;if(null==r){const s=n.split(".");let a="";for(let n=s.length-1;n>=0;n--){if(a=0===n?s[n]+a:"."+s[n]+a,this.readCookie(e)){var o="test_"+e+n;if(this.createCookie(o,t,10,a),!this.readCookie(o))continue;this.removeCookie(o,a)}if(this.createCookie(e,t,i,a),this.readCookie(e)==t){r=a,ue.broadDomain=r;break}}}else this.createCookie(e,t,i,r)}else this.createCookie(e,t,i,n)}static getMetaProp(e){const t=this.readFromLSorCookie(_);if(null!=t)return t[e]}static setMetaProp(e,t){if(this._isLocalStorageSupported()){let i=this.readFromLSorCookie(_);null==i&&(i={}),void 0===t?delete i[e]:i[e]=t,this.saveToLSorCookie(_,i)}}static getAndClearMetaProp(e){const t=this.getMetaProp(e);return this.setMetaProp(e,void 0),t}static setInstantDeleteFlagInK(){let e=this.readFromLSorCookie(m);null==e&&(e={}),e.flag=!0,this.saveToLSorCookie(m,e)}static backupEvent(e,t,i){let n=this.readFromLSorCookie(E);void 0===n&&(n={}),n[t]={q:e},this.saveToLSorCookie(E,n),i.debug("stored in ".concat(E," reqNo : ").concat(t," -> ").concat(e))}static removeBackup(e,t){const i=this.readFromLSorCookie(E);null!=i&&void 0!==i[e]&&(t.debug("del event: ".concat(e," data-> ").concat(i[e].q)),delete i[e],this.saveToLSorCookie(E,i))}}const ue={globalCache:{gcookie:null,REQ_N:0,RESP_N:0},LRU_CACHE:null,globalProfileMap:void 0,globalEventsMap:void 0,blockRequest:!1,isOptInRequest:!1,broadDomain:null,webPushEnabled:null,campaignDivMap:{},currentSessionId:null,wiz_counter:0,notifApi:{notifEnabledFromApi:!1},unsubGroups:[],updatedCategoryLong:null,inbox:null,isPrivacyArrPushed:!1,privacyArray:[],offline:!1,location:null,dismissSpamControl:!1,globalUnsubscribe:!0,flutterVersion:null,variableStore:{}};var he=t("keyOrder"),pe=t("deleteFromObject");class ge{constructor(e){Object.defineProperty(this,pe,{value:fe}),Object.defineProperty(this,he,{writable:!0,value:void 0}),this.max=e;let t=de.readFromLSorCookie(T);if(t){const e={};i(this,he)[he]=[],t=t.cache;for(const n in t)t.hasOwnProperty(n)&&(e[t[n][0]]=t[n][1],i(this,he)[he].push(t[n][0]));this.cache=e}else this.cache={},i(this,he)[he]=[]}get(e){const t=this.cache[e];return t&&(this.cache=i(this,pe)[pe](e,this.cache),this.cache[e]=t,i(this,he)[he].push(e)),this.saveCacheToLS(this.cache),t}set(e,t){const n=this.cache[e],o=i(this,he)[he];null!=n?this.cache=i(this,pe)[pe](e,this.cache):o.length===this.max&&(this.cache=i(this,pe)[pe](o[0],this.cache)),this.cache[e]=t,i(this,he)[he][i(this,he)[he]-1]!==e&&i(this,he)[he].push(e),this.saveCacheToLS(this.cache)}saveCacheToLS(e){const t=[],n=i(this,he)[he];for(const i in n)if(n.hasOwnProperty(i)){const o=[];o.push(n[i]),o.push(e[n[i]]),t.push(o)}de.saveToLSorCookie(T,{cache:t})}getKey(e){if(null===e)return null;const t=i(this,he)[he];for(const i in t)if(t.hasOwnProperty(i)&&this.cache[t[i]]===e)return t[i];return null}getSecondLastKey(){const e=i(this,he)[he];return null!=e&&e.length>1?e[e.length-2]:-1}getLastKey(){const e=i(this,he)[he].length;if(e)return i(this,he)[he][e-1]}}var fe=function(e,t){const n=JSON.parse(JSON.stringify(i(this,he)[he])),o={};let r;for(const i in n)n.hasOwnProperty(i)&&(n[i]!==e?o[n[i]]=t[n[i]]:r=i);return n.splice(r,1),i(this,he)[he]=JSON.parse(JSON.stringify(n)),o},ve=t("logger"),be=t("request"),me=t("device"),ye=t("session");class we{constructor(e){let{logger:t,request:n,device:o,session:r}=e;Object.defineProperty(this,ve,{writable:!0,value:void 0}),Object.defineProperty(this,be,{writable:!0,value:void 0}),Object.defineProperty(this,me,{writable:!0,value:void 0}),Object.defineProperty(this,ye,{writable:!0,value:void 0}),i(this,ve)[ve]=t,i(this,be)[be]=n,i(this,me)[me]=o,i(this,ye)[ye]=r}s(e,t,n,o,r){let s=!1,a=!1;if(window.isOULInProgress&&(n||"undefined"!==o&&o===window.oulReqN)&&(window.isOULInProgress=!1,s=!0),void 0===o&&(o=0),de.removeBackup(o,i(this,ve)[ve]),o>ue.globalCache.REQ_N)return;if(ie(i(this,me)[me].gcookie)||e&&(a=!0),!ie(i(this,me)[me].gcookie)||n||"boolean"==typeof r){const o=i(this,ye)[ye].getSessionCookieObject();if(window.isOULInProgress||o.s&&t<o.s)return;if(i(this,ve)[ve].debug("Cookie was ".concat(i(this,me)[me].gcookie," set to ").concat(e)),i(this,me)[me].gcookie=e,ie(i(this,me)[me].gcookie)||de.getAndClearMetaProp(O),e&&de._isLocalStorageSupported()){null==ue.LRU_CACHE&&(ue.LRU_CACHE=new ge(100));const t=de.readFromLSorCookie(m);let o;null!=t&&t.id&&(o=ue.LRU_CACHE.cache[t.id],n&&(o||(de.saveToLSorCookie(F,!0),ue.LRU_CACHE.set(t.id,e)))),de.saveToLSorCookie(b,e);const r=ue.LRU_CACHE.getSecondLastKey();if(de.readFromLSorCookie(F)&&-1!==r){const e=ue.LRU_CACHE.cache[r];i(this,be)[be].unregisterTokenForGuid(e)}}de.createBroadCookie(b,e,M,window.location.hostname),de.saveToLSorCookie(b,e)}de._isLocalStorageSupported()&&i(this,ye)[ye].manageSession(t);const l=i(this,ye)[ye].getSessionCookieObject();(void 0===l.s||l.s<=t)&&(l.s=t,l.t=se(),i(this,ye)[ye].setSessionCookieObject(l)),ie(i(this,me)[me].gcookie)&&(ue.blockRequest=!1),!s&&!a||i(this,be)[be].processingBackup||i(this,be)[be].processBackupEvents(),ue.globalCache.RESP_N=o}}var Se=t("logger");class _e{constructor(e){let{logger:t}=e;Object.defineProperty(this,Se,{writable:!0,value:void 0}),this.gcookie=void 0,i(this,Se)[Se]=t,this.gcookie=this.getGuid()}getGuid(){let e=null;if(ie(this.gcookie))return this.gcookie;if(de._isLocalStorageSupported()){const t=de.read(b);if(ie(t)){try{e=JSON.parse(decodeURIComponent(t))}catch(n){i(this,Se)[Se].debug("Cannot parse Gcookie from localstorage - must be encoded "+t),32===t.length?(e=t,de.saveToLSorCookie(b,t)):i(this,Se)[Se].error("Illegal guid "+t)}ie(e)&&de.createBroadCookie(b,e,M,window.location.hostname)}}return ie(e)||(e=de.readCookie(b),!ie(e)||0!==e.indexOf("%")&&0!==e.indexOf("'")&&0!==e.indexOf('"')||(e=null),ie(e)&&de.saveToLSorCookie(b,e)),e}}const Ce="This property has been ignored.",ke="CleverTap error:",Ee="".concat(ke," Incorrect embed script."),Ae="".concat(ke," Event structure not valid. ").concat(Ce),Ie="".concat(ke," Gender value should be either M or F. ").concat(Ce),Pe="".concat(ke," Employed value should be either Y or N. ").concat(Ce),Oe="".concat(ke," Married value should be either Y or N. ").concat(Ce),Te="".concat(ke," Education value should be either School, College or Graduate. ").concat(Ce),xe="".concat(ke," Age value should be a number. ").concat(Ce),Re="".concat(ke," DOB value should be a Date Object"),Me="".concat(ke," setEnum(value). value should be a string or a number"),De="".concat(ke," Phone number should be formatted as +[country code][number]");let Ne;const Le=e=>{if(Z(e)){for(var t in e)if(e.hasOwnProperty(t)){if(Z(e[t])||Array.isArray(e[t]))return!1;Q(e[t])&&(e[t]=ae(e[t]))}return!0}return!1},Ue=(e,t)=>{if(Z(e)){for(var i in e)if(e.hasOwnProperty(i))if("Items"===i){if(!Array.isArray(e[i]))return!1;for(var n in e[i].length>50&&t.reportError(522,"Charged Items exceed 50 limit. Actual count: "+e[i].length),e[i])if(e[i].hasOwnProperty(n)&&(!Z(e[i][n])||!Le(e[i][n])))return!1}else{if(Z(e[i])||Array.isArray(e[i]))return!1;Q(e[i])&&(e[i]=ae(e[i]))}if($(e[f])||te(e[f])){const i=e[f]+"";if(void 0===Ne&&(Ne=de.readFromLSorCookie(v)),void 0!==Ne&&Ne.trim()===i.trim())return t.error("Duplicate charged Id - Dropped"+e),!1;Ne=i,de.saveToLSorCookie(v,i)}return!0}return!1};var je=t("logger"),Fe=t("oldValues"),Ve=t("request"),qe=t("isPersonalisationActive"),Be=t("processEventArray");class ze extends Array{constructor(e,t){let{logger:n,request:o,isPersonalisationActive:r}=e;super(),Object.defineProperty(this,Be,{value:He}),Object.defineProperty(this,je,{writable:!0,value:void 0}),Object.defineProperty(this,Fe,{writable:!0,value:void 0}),Object.defineProperty(this,Ve,{writable:!0,value:void 0}),Object.defineProperty(this,qe,{writable:!0,value:void 0}),i(this,je)[je]=n,i(this,Fe)[Fe]=t,i(this,Ve)[Ve]=o,i(this,qe)[qe]=r}push(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return i(this,Be)[Be](t),0}_processOldValues(){i(this,Fe)[Fe]&&i(this,Be)[Be](i(this,Fe)[Fe]),i(this,Fe)[Fe]=null}getDetails(e){if(!i(this,qe)[qe]())return;if(void 0===ue.globalEventsMap&&(ue.globalEventsMap=de.readFromLSorCookie(S)),void 0===ue.globalEventsMap)return;const t=ue.globalEventsMap[e],n={};return void 0!==t?(n.firstTime=new Date(1e3*t[1]),n.lastTime=new Date(1e3*t[2]),n.count=t[0],n):void 0}}var He=function(e){if(Array.isArray(e))for(;e.length>0;){var t=e.shift();if(!$(t)){i(this,je)[je].error(Ae);continue}if(t.length>1024&&(t=t.substring(0,1024),i(this,je)[je].reportError(510,t+"... length exceeded 1024 chars. Trimmed.")),J.includes(t)){i(this,je)[je].reportError(513,t+" is a restricted system event. It cannot be used as an event name.");continue}const n={type:"event"};if(n.evtName=oe(t,u),0!==e.length){const o=e.shift();if(Z(o)){if("Charged"===t){if(!Ue(o,i(this,je)[je])){i(this,je)[je].reportError(511,"Charged event structure invalid. Not sent.");continue}}else if(!Le(o)){i(this,je)[je].reportError(512,t+" event structure invalid. Not sent.");continue}n.evtData=o}else e.unshift(o)}i(this,Ve)[Ve].processEvent(n)}};const Ke=e=>{const t={},i=e.indexOf("?");if(i>1){const n=e.substring(i+1);let o;const r=/\+/g,s=/([^&=]+)=?([^&]*)/g,a=function(e){let t=e.replace(r," ");try{t=decodeURIComponent(t)}catch(e){}return t};for(o=s.exec(n);o;)t[a(o[1])]=a(o[2]),o=s.exec(n)}return t},We=(e,t,i)=>e+"&"+t+"="+encodeURIComponent(i),Ge=()=>window.location.hostname,Ye=(e,t)=>(t&&"function"==typeof t.debug&&t.debug("dobj:"+e),$e(e)),Je=(()=>{let e="",t=0;for(t=0;t<=25;t++)e+=String.fromCharCode(t+65);for(t=0;t<=25;t++)e+=String.fromCharCode(t+97);for(t=0;t<10;t++)e+=t;return e+"+/="})(),$e=e=>{if(null==e)return"";var t,i,n,o,r,s,a,l="",c=0;for(e=(e=>{if(null==e)return"";let t,i,n,o={},r={},s="",a="",l="",c=2,d=3,u=2,h="",p=0,g=0,f=String.fromCharCode;for(n=0;n<e.length;n+=1)if(s=e.charAt(n),Object.prototype.hasOwnProperty.call(o,s)||(o[s]=d++,r[s]=!0),a=l+s,Object.prototype.hasOwnProperty.call(o,a))l=a;else{if(Object.prototype.hasOwnProperty.call(r,l)){if(l.charCodeAt(0)<256){for(t=0;t<u;t++)p<<=1,15==g?(g=0,h+=f(p),p=0):g++;for(i=l.charCodeAt(0),t=0;t<8;t++)p=p<<1|1&i,15==g?(g=0,h+=f(p),p=0):g++,i>>=1}else{for(i=1,t=0;t<u;t++)p=p<<1|i,15==g?(g=0,h+=f(p),p=0):g++,i=0;for(i=l.charCodeAt(0),t=0;t<16;t++)p=p<<1|1&i,15==g?(g=0,h+=f(p),p=0):g++,i>>=1}c--,0==c&&(c=Math.pow(2,u),u++),delete r[l]}else for(i=o[l],t=0;t<u;t++)p=p<<1|1&i,15==g?(g=0,h+=f(p),p=0):g++,i>>=1;c--,0==c&&(c=Math.pow(2,u),u++),o[a]=d++,l=String(s)}if(""!==l){if(Object.prototype.hasOwnProperty.call(r,l)){if(l.charCodeAt(0)<256){for(t=0;t<u;t++)p<<=1,15==g?(g=0,h+=f(p),p=0):g++;for(i=l.charCodeAt(0),t=0;t<8;t++)p=p<<1|1&i,15==g?(g=0,h+=f(p),p=0):g++,i>>=1}else{for(i=1,t=0;t<u;t++)p=p<<1|i,15==g?(g=0,h+=f(p),p=0):g++,i=0;for(i=l.charCodeAt(0),t=0;t<16;t++)p=p<<1|1&i,15==g?(g=0,h+=f(p),p=0):g++,i>>=1}c--,0==c&&(c=Math.pow(2,u),u++),delete r[l]}else for(i=o[l],t=0;t<u;t++)p=p<<1|1&i,15==g?(g=0,h+=f(p),p=0):g++,i>>=1;c--,0==c&&(c=Math.pow(2,u),u++)}for(i=2,t=0;t<u;t++)p=p<<1|1&i,15==g?(g=0,h+=f(p),p=0):g++,i>>=1;for(;;){if(p<<=1,15==g){h+=f(p);break}g++}return h})(e);c<2*e.length;)c%2==0?(t=e.charCodeAt(c/2)>>8,i=255&e.charCodeAt(c/2),n=c/2+1<e.length?e.charCodeAt(c/2+1)>>8:NaN):(t=255&e.charCodeAt((c-1)/2),(c+1)/2<e.length?(i=e.charCodeAt((c+1)/2)>>8,n=255&e.charCodeAt((c+1)/2)):i=n=NaN),c+=3,o=t>>2,r=(3&t)<<4|i>>4,s=(15&i)<<2|n>>6,a=63&n,isNaN(i)?s=a=64:isNaN(n)&&(a=64),l=l+Je.charAt(o)+Je.charAt(r)+Je.charAt(s)+Je.charAt(a);return l};var Ze=t("fireRequest"),Qe=t("dropRequestDueToOptOut"),Xe=t("addUseIPToRequest"),et=t("addARPToRequest");class tt{constructor(){this.networkRetryCount=0,this.minDelayFrequency=0}static fireRequest(e,t,n,o){i(this,Ze)[Ze](e,1,t,n,o)}getDelayFrequency(){if(this.logger.debug("Network retry #"+this.networkRetryCount),this.networkRetryCount<10)return this.logger.debug(this.account.id,"Failure count is "+this.networkRetryCount+". Setting delay frequency to 1s"),this.minDelayFrequency=G,this.minDelayFrequency;if(null==this.account.region)return this.logger.debug(this.account.id,"Setting delay frequency to 1s"),G;{const e=1e3*(Math.floor(10*Math.random())+1);return this.minDelayFrequency+=e,this.minDelayFrequency<6e5?(this.logger.debug(this.account.id,"Setting delay frequency to "+this.minDelayFrequency),this.minDelayFrequency):(this.minDelayFrequency=G,this.logger.debug(this.account.id,"Setting delay frequency to "+this.minDelayFrequency),this.minDelayFrequency)}}}tt.logger=void 0,tt.device=void 0,tt.account=void 0,Object.defineProperty(tt,Ze,{value:function(e,t,n,o,r){var s,a;if(i(this,Qe)[Qe]())return void this.logger.debug("req dropped due to optout cookie: "+this.device.gcookie);if(ie(this.device.gcookie)||(ue.blockRequest=!0),r&&r===Y)!ie(this.device.gcookie)&&ue.globalCache.RESP_N<ue.globalCache.REQ_N-1&&setTimeout((()=>{this.logger.debug("retrying fire request for url: ".concat(e,", tries: ").concat(this.networkRetryCount)),i(this,Ze)[Ze](e,void 0,n,o)}),this.getDelayFrequency());else if(!ie(this.device.gcookie)&&ue.globalCache.RESP_N<ue.globalCache.REQ_N-1&&t<200)return void setTimeout((()=>{this.logger.debug("retrying fire request for url: ".concat(e,", tries: ").concat(t)),i(this,Ze)[Ze](e,t+1,n,o)}),50);if(o?window.isOULInProgress=!0:(ie(this.device.gcookie)&&(e=We(e,"gc",this.device.gcookie)),e=i(this,et)[et](e,n)),e=We(e,"tries",t),e=i(this,Xe)[Xe](e),e=We(e,"r",(new Date).getTime()),(null===(s=window.clevertap)||void 0===s?void 0:s.hasOwnProperty("plugin"))||(null===(a=window.wizrocket)||void 0===a?void 0:a.hasOwnProperty("plugin"))){const t=window.clevertap.plugin||window.wizrocket.plugin;e=We(e,"ct_pl",t)}-1!==e.indexOf("chrome-extension:")&&(e=e.replace("chrome-extension:","https:"));for(var l=document.getElementsByClassName("ct-jp-cb");l[0]&&l[0].parentNode;)l[0].parentNode.removeChild(l[0]);const c=document.createElement("script");c.setAttribute("type","text/javascript"),c.setAttribute("src",e),c.setAttribute("class","ct-jp-cb"),c.setAttribute("rel","nofollow"),c.async=!0,document.getElementsByTagName("head")[0].appendChild(c),this.logger.debug("req snt -> url: "+e)}}),Object.defineProperty(tt,Qe,{value:function(){return!ue.isOptInRequest&&ie(this.device.gcookie)&&$(this.device.gcookie)?":OO"===this.device.gcookie.slice(-3):(ue.isOptInRequest=!1,!1)}}),Object.defineProperty(tt,Xe,{value:function(e){var t=de.getMetaProp(O);return"boolean"!=typeof t&&(t=!1),We(e,O,t?"true":"false")}}),Object.defineProperty(tt,et,{value:function(e,t){if(!0===t){const t={skipResARP:!0};return We(e,"arp",Ye(JSON.stringify(t),this.logger))}return de._isLocalStorageSupported()&&void 0!==localStorage.getItem(k)&&null!==localStorage.getItem(k)?We(e,"arp",Ye(JSON.stringify(de.readFromLSorCookie(k)),this.logger)):e}});const it=()=>{let e={};if(de._isLocalStorageSupported()){let t=de.read(y);null!=t?(t=JSON.parse(decodeURIComponent(t).replace(p,'"')),t.hasOwnProperty("global")?e.wp=t:e=t):e={}}return e},nt=e=>{if(de._isLocalStorageSupported()){const t={...it(),...e},i=JSON.stringify(t);de.save(y,encodeURIComponent(i)),ot()}},ot=()=>{if(de._isLocalStorageSupported()){let i=de.read(b);if(ie(i))try{i=JSON.parse(decodeURIComponent(de.read(b)));const n=de.read(w)?JSON.parse(decodeURIComponent(de.read(w))):{};if(i&&de._isLocalStorageSupported()){var e={},t=it();Object.keys(t).forEach((o=>{const r=i in n&&Object.keys(n[i]).length&&n[i][o]?n[i][o]:{},s=t[o].global,a=re(),l=t[o][a];if(void 0!==s){const e=Object.keys(s);for(const t in e){let i=[];if(e.hasOwnProperty(t)){let n=0,o=0;const a=e[t];if("tc"===a)continue;void 0!==l&&void 0!==l[a]&&(n=l[a]),void 0!==s&&void 0!==s[a]&&(o=s[a]),i=[a,n,o],r[a]=i}}}e={...e,[o]:r}})),n[i]=e,de.save(w,encodeURIComponent(JSON.stringify(n)))}}catch(e){console.error("Invalid clevertap Id "+e)}}},rt=()=>{const e=JSON.parse(decodeURIComponent(de.read(b)));let t={};if(de._isLocalStorageSupported()){let i={};t=it();const n=de.read(w),o=n?decodeURIComponent(n):null,r=o?JSON.parse(o):null,s=e&&null!=n&&r&&r[e]&&r[e].wp?Object.values(r[e].wp):[],a=e&&null!=n&&r&&r[e]&&r[e].wi?Object.values(r[e].wi):[],l=re();let c=0,d=0;return t.wp&&t.wp[l]&&"undefined"!==t.wp[l].tc&&(c=t.wp[l].tc),t.wi&&t.wi[l]&&"undefined"!==t.wi[l].tc&&(d=t.wi[l].tc),i={wmp:c,wimp:d,tlc:s,witlc:a},i}},st=(e,t)=>{let{logger:i}=t,n=!1;if(Z(e))for(const t in e)if(e.hasOwnProperty(t)){n=!0;let o=e[t];if(null==o){delete e[t];continue}"Gender"!==t||o.match(/^M$|^F$/)||(n=!1,i.error(Ie)),"Employed"!==t||o.match(/^Y$|^N$/)||(n=!1,i.error(Pe)),"Married"!==t||o.match(/^Y$|^N$/)||(n=!1,i.error(Oe)),"Education"!==t||o.match(/^School$|^College$|^Graduate$/)||(n=!1,i.error(Te)),"Age"===t&&null!=o&&(ee(o)?e.Age=+o:(n=!1,i.error(xe))),"DOB"===t?(/^\$D_/.test(o)&&11===(o+"").length||Q(o)||(n=!1,i.error(Re)),Q(o)&&(e[t]=ae(o))):Q(o)&&(e[t]=ae(o)),"Phone"!==t||X(o)||(o.length>8&&"+"===o.charAt(0)?(o=o.substring(1,o.length),ee(o)?e.Phone=+o:(n=!1,i.error(De+". Removed."))):(n=!1,i.error(De+". Removed."))),n||delete e[t]}return n},at=e=>{const t={};t.Name=e.name,null!=e.id&&(t.FBID=e.id+""),"male"===e.gender?t.Gender="M":"female"===e.gender?t.Gender="F":t.Gender="O";null!=e.relationship_status&&(t.Married="N","Married"===e.relationship_status&&(t.Married="Y"));const i=function(e){if(null!=e){let t="",i="";for(let n=0;n<e.length;n++){const o=e[n];if(null!=o.type){const e=o.type;if("Graduate School"===e)return"Graduate";"College"===e?t="1":"High School"===e&&(i="1")}}if("1"===t)return"College";if("1"===i)return"School"}}(e.education);null!=i&&(t.Education=i);const n=null!=e.work?e.work.length:0;if(t.Employed=n>0?"Y":"N",null!=e.email&&(t.Email=e.email),null!=e.birthday){const i=e.birthday.split("/");t.DOB=le(i[2]+i[0]+i[1])}return t},lt=(e,t)=>{let{logger:i}=t;const n={};if(null!=e.displayName&&(n.Name=e.displayName),null!=e.id&&(n.GPID=e.id+""),null!=e.gender&&("male"===e.gender?n.Gender="M":"female"===e.gender?n.Gender="F":"other"===e.gender&&(n.Gender="O")),null!=e.image&&!1===e.image.isDefault&&(n.Photo=e.image.url.split("?sz")[0]),null!=e.emails)for(let t=0;t<e.emails.length;t++){const i=e.emails[t];"account"===i.type&&(n.Email=i.value)}if(null!=e.organizations){n.Employed="N";for(let t=0;t<e.organizations.length;t++)"work"===e.organizations[t].type&&(n.Employed="Y")}if(null!=e.birthday){const t=e.birthday.split("-");n.DOB=le(t[0]+t[1]+t[2])}return null!=e.relationshipStatus&&(n.Married="N","married"===e.relationshipStatus&&(n.Married="Y")),i.debug("gplus usr profile "+JSON.stringify(n)),n},ct=(e,t)=>{if(de._isLocalStorageSupported()){if(null==ue.globalProfileMap&&(ue.globalProfileMap=de.readFromLSorCookie(C),null==ue.globalProfileMap&&(ue.globalProfileMap={})),null!=e._custom){const t=e._custom;for(const i in t)t.hasOwnProperty(i)&&(e[i]=t[i]);delete e._custom}for(const i in e)if(e.hasOwnProperty(i)){if(ue.globalProfileMap.hasOwnProperty(i)&&!t)continue;ue.globalProfileMap[i]=e[i]}null!=ue.globalProfileMap._custom&&delete ue.globalProfileMap._custom,de.saveToLSorCookie(C,ue.globalProfileMap)}},dt=(e,t,i)=>{if(null!=e&&"-1"!==e&&de._isLocalStorageSupported()){const t=it();let n=t.wp[i];null==n&&(n={},t[i]=n),n[e]="dnd",nt(t)}if(null!=ue.campaignDivMap){const t=ue.campaignDivMap[e];null!=t&&(document.getElementById(t).style.display="none","intentPreview"===t&&null!=document.getElementById("intentOpacityDiv")&&(document.getElementById("intentOpacityDiv").style.display="none"))}};var ut=t("logger"),ht=t("request"),pt=t("account"),gt=t("oldValues"),ft=t("isPersonalisationActive"),vt=t("processProfileArray");class bt extends Array{constructor(e,t){let{logger:n,request:o,account:r,isPersonalisationActive:s}=e;super(),Object.defineProperty(this,vt,{value:mt}),Object.defineProperty(this,ut,{writable:!0,value:void 0}),Object.defineProperty(this,ht,{writable:!0,value:void 0}),Object.defineProperty(this,pt,{writable:!0,value:void 0}),Object.defineProperty(this,gt,{writable:!0,value:void 0}),Object.defineProperty(this,ft,{writable:!0,value:void 0}),i(this,ut)[ut]=n,i(this,ht)[ht]=o,i(this,pt)[pt]=r,i(this,gt)[gt]=t,i(this,ft)[ft]=s}push(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return i(this,vt)[vt](t),0}_processOldValues(){i(this,gt)[gt]&&i(this,vt)[vt](i(this,gt)[gt]),i(this,gt)[gt]=null}getAttribute(e){if(i(this,ft)[ft]())return null==ue.globalProfileMap&&(ue.globalProfileMap=de.readFromLSorCookie(C)),null!=ue.globalProfileMap?ue.globalProfileMap[e]:void 0}_handleIncrementDecrementValue(e,t,n){var o;if(null==ue.globalProfileMap&&(ue.globalProfileMap=de.readFromLSorCookie(C)),null!=ue.globalProfileMap||(null===(o=ue.globalProfileMap)||void 0===o?void 0:o.hasOwnProperty(e)))if(!t||"number"!=typeof t||t<=0)console.error("Value should be a number greater than 0");else{ue.globalProfileMap[e]=n===q?ue.globalProfileMap[e]+t:ue.globalProfileMap[e]-t,de.saveToLSorCookie(C,ue.globalProfileMap);let o={};const r={};o.type="profile",r[e]={[n]:t},null==r.tz&&(r.tz=(new Date).toString().match(/([A-Z]+[\+-][0-9]+)/)[1]),o.profile=r,o=i(this,ht)[ht].addSystemDataToObject(o,!0),i(this,ht)[ht].addFlags(o);const s=Ye(JSON.stringify(o),i(this,ut)[ut]);let a=i(this,pt)[pt].dataPostURL;a=We(a,"type",R),a=We(a,"d",s),i(this,ht)[ht].saveAndFireRequest(a,ue.blockRequest)}else console.error("Kindly create profile with required proprty to increment/decrement.")}_handleMultiValueSet(e,t,i){const n=[];for(let e=0;e<t.length;e++)"number"!=typeof t[e]||n.includes(t[e])?"string"!=typeof t[e]||n.includes(t[e].toLowerCase())?console.error("array supports only string or number type values"):n.push(t[e].toLowerCase()):n.push(t[e]);var o;null==ue.globalProfileMap&&(ue.globalProfileMap=null!==(o=de.readFromLSorCookie(C))&&void 0!==o?o:{}),ue.globalProfileMap[e]=n,de.saveToLSorCookie(C,ue.globalProfileMap),this.sendMultiValueData(e,t,i)}_handleMultiValueAdd(e,t,i){var n=[];if(null==ue.globalProfileMap&&(ue.globalProfileMap=de.readFromLSorCookie(C)||{}),"string"==typeof t||"number"==typeof t)ue.globalProfileMap.hasOwnProperty(e)?(n=ue.globalProfileMap[e]).push("number"==typeof t?t:t.toLowerCase()):ue.globalProfileMap[e]=t;else{ue.globalProfileMap.hasOwnProperty(e)&&(n=Array.isArray(ue.globalProfileMap[e])?ue.globalProfileMap[e]:[ue.globalProfileMap[e]]);for(var o=0;o<t.length;o++)"number"!=typeof t[o]||n.includes(t[o])?"string"!=typeof t[o]||n.includes(t[o].toLowerCase())?"number"==typeof t[o]&&n.includes(t[o])||"string"==typeof t[o]&&n.includes(t[o].toLowerCase())?console.error("Values already included"):console.error("Array supports only string or number type values"):n.push(t[o].toLowerCase()):n.push(t[o]);ue.globalProfileMap[e]=n}de.saveToLSorCookie(C,ue.globalProfileMap),this.sendMultiValueData(e,t,i)}_handleMultiValueRemove(e,t,i){var n;if(null==ue.globalProfileMap&&(ue.globalProfileMap=de.readFromLSorCookie(C)),null==ue||null===(n=ue.globalProfileMap)||void 0===n?void 0:n.hasOwnProperty(e))if("string"==typeof t||"number"==typeof t){var o=ue.globalProfileMap[e].indexOf(t);-1!==o&&ue.globalProfileMap[e].splice(o,1)}else for(var r=0;r<t.length;r++){var s=ue.globalProfileMap[e].indexOf(t[r]);-1!==s&&ue.globalProfileMap[e].splice(s,1)}else console.error("The property ".concat(e," does not exist."));de.saveToLSorCookie(C,ue.globalProfileMap),this.sendMultiValueData(e,t,i)}_handleMultiValueDelete(e,t){var i;null==ue.globalProfileMap&&(ue.globalProfileMap=de.readFromLSorCookie(C)),(null==ue||null===(i=ue.globalProfileMap)||void 0===i?void 0:i.hasOwnProperty(e))?delete ue.globalProfileMap[e]:console.error("The property ".concat(e," does not exist.")),de.saveToLSorCookie(C,ue.globalProfileMap),this.sendMultiValueData(e,null,t)}sendMultiValueData(e,t,n){let o={};const r={};o.type="profile",r[e]={[n]:n===H||t},null==r.tz&&(r.tz=(new Date).toString().match(/([A-Z]+[\+-][0-9]+)/)[1]),o.profile=r,o=i(this,ht)[ht].addSystemDataToObject(o,!0),i(this,ht)[ht].addFlags(o);const s=Ye(JSON.stringify(o),i(this,ut)[ut]);let a=i(this,pt)[pt].dataPostURL;a=We(a,"type",R),a=We(a,"d",s),i(this,ht)[ht].saveAndFireRequest(a,ue.blockRequest)}}var mt=function(e){if(Array.isArray(e)&&e.length>0)for(const t in e)if(e.hasOwnProperty(t)){const n=e[t];let o,r={};if(null!=n.Site){if(o=n.Site,X(o)||!st(o,{logger:i(this,ut)[ut]}))return}else if(null!=n.Facebook){const e=n.Facebook;X(e)||e.error||(o=at(e))}else if(null!=n["Google Plus"]){const e=n["Google Plus"];X(e)||e.error||(o=lt(e,{logger:i(this,ut)[ut]}))}if(null!=o&&!X(o)){r.type="profile",null==o.tz&&(o.tz=(new Date).toString().match(/([A-Z]+[\+-][0-9]+)/)[1]),r.profile=o,ct(o,!0),r=i(this,ht)[ht].addSystemDataToObject(r,void 0),i(this,ht)[ht].addFlags(r);const e=Ye(JSON.stringify(r),i(this,ut)[ut]);let t=i(this,pt)[pt].dataPostURL;t=We(t,"type",R),t=We(t,"d",e),i(this,ht)[ht].saveAndFireRequest(t,ue.blockRequest)}}},yt=t("request"),wt=t("logger"),St=t("account"),_t=t("session"),Ct=t("oldValues"),kt=t("device"),Et=t("processOUL"),At=t("handleCookieFromCache"),It=t("deleteUser"),Pt=t("processLoginArray");class Ot extends Array{constructor(e,t){let{request:n,account:o,session:r,logger:s,device:a}=e;super(),Object.defineProperty(this,Pt,{value:Mt}),Object.defineProperty(this,It,{value:Rt}),Object.defineProperty(this,At,{value:xt}),Object.defineProperty(this,Et,{value:Tt}),Object.defineProperty(this,yt,{writable:!0,value:void 0}),Object.defineProperty(this,wt,{writable:!0,value:void 0}),Object.defineProperty(this,St,{writable:!0,value:void 0}),Object.defineProperty(this,_t,{writable:!0,value:void 0}),Object.defineProperty(this,Ct,{writable:!0,value:void 0}),Object.defineProperty(this,kt,{writable:!0,value:void 0}),i(this,yt)[yt]=n,i(this,St)[St]=o,i(this,_t)[_t]=r,i(this,wt)[wt]=s,i(this,Ct)[Ct]=t,i(this,kt)[kt]=a}clear(){i(this,wt)[wt].debug("clear called. Reset flag has been set."),i(this,It)[It](),de.setMetaProp(g,!0)}push(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return i(this,Pt)[Pt](t),0}_processOldValues(){i(this,Ct)[Ct]&&i(this,Pt)[Pt](i(this,Ct)[Ct]),i(this,Ct)[Ct]=null}}var Tt=function(e){let t=!0;de.saveToLSorCookie(F,t);const n=e=>{let n=de.readFromLSorCookie(m);const o=de.readFromLSorCookie(b);let r;if(null==n)n={},r=e;else{r=n.id;let s=!1,a=!1;if(null==r&&(r=e[0],s=!0),null==ue.LRU_CACHE&&de._isLocalStorageSupported()&&(ue.LRU_CACHE=new ge(100)),s)null!=o&&(ue.LRU_CACHE.set(r,o),ue.blockRequest=!1);else for(const t in e)if(e.hasOwnProperty(t)){const i=e[t];if(ue.LRU_CACHE.cache[i]){r=i,a=!0;break}}if(a){r!==ue.LRU_CACHE.getLastKey()?i(this,At)[At]():(t=!1,de.saveToLSorCookie(F,t));const e=ue.LRU_CACHE.get(r);ue.LRU_CACHE.set(r,e),de.saveToLSorCookie(b,e),i(this,kt)[kt].gcookie=e;const n=ue.LRU_CACHE.getSecondLastKey();if(de.readFromLSorCookie(F)&&-1!==n){const e=ue.LRU_CACHE.cache[n];i(this,yt)[yt].unregisterTokenForGuid(e)}}else s?null!=o&&(i(this,kt)[kt].gcookie=o,de.saveToLSorCookie(b,o),t=!1):this.clear(),de.saveToLSorCookie(F,!1),r=e[0]}n.id=r,de.saveToLSorCookie(m,n)};if(Array.isArray(e)&&e.length>0)for(const o in e)if(e.hasOwnProperty(o)){const r=e[o];let s,a={};if(null!=r.Site){if(s=r.Site,X(s)||!st(s,{logger:i(this,wt)[wt]}))return}else if(null!=r.Facebook){const e=r.Facebook;X(e)||e.error||(s=at(e))}else if(null!=r["Google Plus"]){const e=r["Google Plus"];X(e)&&!e.error&&(s=lt(e,{logger:i(this,wt)[wt]}))}if(null!=s&&!X(s)){a.type="profile",null==s.tz&&(s.tz=(new Date).toString().match(/([A-Z]+[\+-][0-9]+)/)[1]),a.profile=s;const e=[];de._isLocalStorageSupported()&&(s.Identity&&e.push(s.Identity),s.Email&&e.push(s.Email),s.GPID&&e.push("GP:"+s.GPID),s.FBID&&e.push("FB:"+s.FBID),e.length>0&&n(e)),ct(s,!0),a=i(this,yt)[yt].addSystemDataToObject(a,void 0),i(this,yt)[yt].addFlags(a),t&&(a[x]=!0);const o=Ye(JSON.stringify(a),i(this,wt)[wt]);let r=i(this,St)[St].dataPostURL;r=We(r,"type",R),r=We(r,"d",o),i(this,yt)[yt].saveAndFireRequest(r,ue.blockRequest,t)}}},xt=function(){ue.blockRequest=!1,console.debug("Block request is false"),de._isLocalStorageSupported()&&(delete localStorage[C],delete localStorage[S],delete localStorage[_],delete localStorage[k],delete localStorage[y],delete localStorage[v]),de.removeCookie(y,Ge()),de.removeCookie(i(this,_t)[_t].cookieName,ue.broadDomain),de.removeCookie(k,ue.broadDomain),i(this,_t)[_t].setSessionCookieObject("")},Rt=function(){ue.blockRequest=!0,i(this,wt)[wt].debug("Block request is true"),ue.globalCache={gcookie:null,REQ_N:0,RESP_N:0},de._isLocalStorageSupported()&&(delete localStorage[b],delete localStorage[m],delete localStorage[C],delete localStorage[S],delete localStorage[_],delete localStorage[k],delete localStorage[y],delete localStorage[v]),de.removeCookie(b,ue.broadDomain),de.removeCookie(y,Ge()),de.removeCookie(m,Ge()),de.removeCookie(i(this,_t)[_t].cookieName,ue.broadDomain),de.removeCookie(k,ue.broadDomain),i(this,kt)[kt].gcookie=null,i(this,_t)[_t].setSessionCookieObject("")},Mt=function(e){if(Array.isArray(e)&&e.length>0){const t=e.pop();if(null!=t&&Z(t)&&(null!=t.Site&&Object.keys(t.Site).length>0||null!=t.Facebook&&Object.keys(t.Facebook).length>0||null!=t["Google Plus"]&&Object.keys(t["Google Plus"]).length>0)){de.setInstantDeleteFlagInK();try{i(this,Et)[Et]([t])}catch(e){i(this,wt)[wt].debug(e)}}else i(this,wt)[wt].error("Profile object is in incorrect format")}};class Dt extends HTMLElement{constructor(){super(),this._details=null,this.shadow=null,this.shadow=this.attachShadow({mode:"open"})}get details(){return this._details||""}set details(e){null===this._details&&(this._details=e,this.renderBanner())}renderBanner(){this.shadow.innerHTML=this.getBannerContent(),!1!==this.trackClick&&this.addEventListener("click",(()=>{const e=this.details.onClick;e&&(this.details.window?window.open(e,"_blank"):window.parent.location.href=e),window.clevertap.renderNotificationClicked({msgId:this.msgId,pivotId:this.pivotId})})),window.clevertap.renderNotificationViewed({msgId:this.msgId,pivotId:this.pivotId})}getBannerContent(){return'\n      <style type="text/css">\n        .banner {\n          position: relative;\n          cursor: '.concat(this.details.onClick?"pointer":"","\n        }\n        img {\n          height: ").concat(this.divHeight?this.divHeight:"auto",";\n          width: 100%;\n        }\n        .wrapper:is(.left, .right, .center) {\n          display: flex;\n          justify-content: center;\n          flex-direction: column;\n          align-items: center;\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          overflow: auto;\n          top: 0;\n        }\n        ").concat(this.details.css?this.details.css:"",'\n      </style>\n      <div class="banner">\n        <picture>\n          <source media="(min-width:480px)" srcset="').concat(this.details.desktopImageURL,'">\n          <source srcset="').concat(this.details.mobileImageURL,'">\n          <img src="').concat(this.details.desktopImageURL,'" alt="Please upload a picture" style="width:100%;" part="banner__img">\n        </picture>\n        ').concat(this.details.html?this.details.html:"","\n      </div>\n    ")}}class Nt extends HTMLElement{constructor(){super(),this._target=null,this._carousel=null,this.shadow=null,this.slides=0,this.previouslySelectedItem=-1,this.selectedItem=1,this.autoSlide=null,this.stopAutoSlideTimeout=null,this.shadow=this.attachShadow({mode:"open"}),void 0===customElements.get("ct-web-personalisation-banner")&&customElements.define("ct-web-personalisation-banner",Dt)}get target(){return this._target||""}set target(e){null===this._target&&(this._target=e,this.renderCarousel())}get details(){return this.target.display.details}get display(){return this.target.display}renderCarousel(){this.slides=this.details.length,this.shadow.innerHTML=this.getStyles();const e=this.getCarouselContent();this.display.showNavBtns&&e.insertAdjacentHTML("beforeend",this.display.navBtnsHtml),this.display.showNavArrows&&(e.insertAdjacentHTML("beforeend",this.display.leftNavArrowHtml),e.insertAdjacentHTML("beforeend",this.display.rightNavArrowHtml)),this._carousel=e,this.shadow.appendChild(e),this.setupClick(),this.updateSelectedItem(),this.startAutoSlide(),this.setupOnHover(),window.clevertap.renderNotificationViewed({msgId:this.target.wzrk_id,pivotId:this.target.wzrk_pivot})}setupClick(){this._carousel.addEventListener("click",(e=>{const t=e.target.id;if(t.startsWith("carousel__button")){const e=+t.split("-")[1];e!==this.selectedItem&&(this.previouslySelectedItem=this.selectedItem,this.selectedItem=e,this.updateSelectedItem(),this.startAutoSlide())}else if(t.startsWith("carousel__arrow"))t.endsWith("right")?this.goToNext():this.goToPrev(),this.startAutoSlide();else if(t.indexOf("-")>-1){const e=+t.split("-")[1],i=e-1;window.parent.clevertap&&window.clevertap.renderNotificationClicked({msgId:this.target.wzrk_id,pivotId:this.target.wzrk_pivot,wzrk_slideNo:e});const n=this.details[i].onClick;""!==n&&(this.details[i].window?window.open(n,"_blank"):window.location.href=n)}}))}setupOnHover(){this._carousel.addEventListener("mouseenter",(e=>{this.stopAutoSlideTimeout=setTimeout((()=>{this.autoSlide=clearInterval(this.autoSlide)}),500)})),this._carousel.addEventListener("mouseleave",(e=>{clearTimeout(this.stopAutoSlideTimeout),void 0===this.autoSlide&&this.startAutoSlide()}))}getCarouselContent(){const e=document.createElement("div");return e.setAttribute("class","carousel"),this.details.forEach(((t,i)=>{const n=document.createElement("ct-web-personalisation-banner");n.classList.add("carousel__item"),n.trackClick=!1,n.setAttribute("id","carousel__item-".concat(i+1)),n.details=t,e.appendChild(n)})),e}getStyles(){var e,t;return"\n      <style>\n      .carousel {\n        position: relative;\n      }\n\n      .carousel__item {\n        display: none;\n        background-repeat: no-repeat;\n        background-size: cover;\n      }\n\n      ct-web-personalisation-banner::part(banner__img) {\n        height: ".concat((null==this||null===(e=this.target)||void 0===e||null===(t=e.display)||void 0===t?void 0:t.divHeight)?this.target.display.divHeight:"auto",";\n        width: 100%;\n        transition: 2s;\n      }\n\n      .carousel__item--selected {\n        display: block;\n      }\n      ").concat(this.display.navBtnsCss,"\n      ").concat(this.display.navArrowsCss,"\n      </style>\n  ")}updateSelectedItem(){if(-1!==this.previouslySelectedItem){const e=this.shadow.getElementById("carousel__item-".concat(this.previouslySelectedItem)),t=this.shadow.getElementById("carousel__button-".concat(this.previouslySelectedItem));e.classList.remove("carousel__item--selected"),t&&t.classList.remove("carousel__button--selected")}const e=this.shadow.getElementById("carousel__item-".concat(this.selectedItem)),t=this.shadow.getElementById("carousel__button-".concat(this.selectedItem));e.classList.add("carousel__item--selected"),t&&t.classList.add("carousel__button--selected")}startAutoSlide(){clearInterval(this.autoSlide),this.autoSlide=setInterval((()=>{this.goToNext()}),this.display.sliderTime?1e3*this.display.sliderTime:3e3)}goToNext(){this.goTo(this.selectedItem,(this.selectedItem+1)%this.slides)}goToPrev(){this.goTo(this.selectedItem,this.selectedItem-1)}goTo(e,t){this.previouslySelectedItem=e,this.selectedItem=t,0===t&&(this.selectedItem=this.slides),this.updateSelectedItem()}}class Lt extends HTMLElement{constructor(){super(),this._target=null,this._session=null,this.shadow=null,this.popup=null,this.container=null,this.resizeObserver=null,this.shadow=this.attachShadow({mode:"open"})}get target(){return this._target||""}set target(e){null===this._target&&(this._target=e,this.renderImageOnlyPopup())}get session(){return this._session||""}set session(e){this._session=e}get msgId(){return this.target.wzrk_id}get pivotId(){return this.target.wzrk_pivot}get onClickUrl(){return this.target.display.onClickUrl}renderImageOnlyPopup(){const e=this.target.wzrk_id.split("_")[0],t=this.session.sessionId;this.shadow.innerHTML=this.getImageOnlyPopupContent(),this.popup=this.shadowRoot.getElementById("imageOnlyPopup"),this.container=this.shadowRoot.getElementById("container"),this.closeIcon=this.shadowRoot.getElementById("close"),this.popup.addEventListener("load",this.updateImageAndContainerWidth()),this.resizeObserver=new ResizeObserver((()=>this.handleResize(this.popup,this.container))),this.resizeObserver.observe(this.popup),this.closeIcon.addEventListener("click",(()=>{if(this.resizeObserver.unobserve(this.popup),document.getElementById("wzrkImageOnlyDiv").style.display="none",this.remove(),null!=e&&"-1"!==e&&de._isLocalStorageSupported()){const i=it();let n=i.wp[t];null==n&&(n={},i[t]=n),n[e]="dnd",nt(i)}})),window.clevertap.renderNotificationViewed({msgId:this.msgId,pivotId:this.pivotId}),this.onClickUrl&&this.popup.addEventListener("click",(()=>{this.target.display.window?window.open(this.onClickUrl,"_blank"):window.parent.location.href=this.onClickUrl,window.clevertap.renderNotificationClicked({msgId:this.msgId,pivotId:this.pivotId})}))}handleResize(e,t){const i=this.getRenderedImageWidth(e);t.style.setProperty("width","".concat(i,"px"))}getImageOnlyPopupContent(){return"\n        ".concat(this.target.msgContent.css,"\n        ").concat(this.target.msgContent.html,"\n      ")}updateImageAndContainerWidth(){return()=>{const e=this.getRenderedImageWidth(this.popup);this.popup.style.setProperty("width","".concat(e,"px")),this.container.style.setProperty("width","".concat(e,"px")),this.container.style.setProperty("height","auto"),this.container.style.setProperty("position","fixed"),this.popup.style.setProperty("visibility","visible"),this.closeIcon.style.setProperty("visibility","visible"),document.getElementById("wzrkImageOnlyDiv").style.visibility="visible"}}getRenderedImageWidth(e){const t=e.naturalWidth/e.naturalHeight;return e.height*t}}class Ut extends HTMLElement{constructor(e,t){super(),this.wrapper=null,this.snackBar=null,this.shadow=this.attachShadow({mode:"open"}),this.config=e,this.message=t,this.renderMessage(t)}get pivotId(){return this.message.wzrk_pivot}get campaignId(){return this.message.wzrk_id}createEl(e,t,i){const n=document.createElement(e);return n.setAttribute("id",t),n.setAttribute("part",i||t),n}renderMessage(e){switch(this.wrapper=this.createEl("div","messageWrapper"),e.templateType){case"text-only":case"text-with-icon":case"text-with-icon-and-image":{const t=this.prepareBasicMessage(e.msg[0]);this.wrapper.appendChild(t)}}const t=this.createEl("div","timeStamp");if(t.innerHTML="<span>".concat(Gt(e.id.split("_")[1]),"<span>"),!e.viewed){const e=this.createEl("span","unreadMarker");t.appendChild(e)}this.wrapper.appendChild(t),this.shadow.appendChild(this.wrapper)}prepareBasicMessage(e){const t=this.createEl("div","message");if(e.imageUrl){const i=this.addImage(e.imageUrl,"mainImg");t.appendChild(i)}const i=this.createEl("div","iconTitleDescWrapper");if(e.iconUrl){const t=this.addImage(e.iconUrl,"iconImg");i.appendChild(t)}const n=this.createEl("div","titleDescWrapper");if(e.title){const t=this.createEl("div","title");t.innerText=e.title,n.appendChild(t)}if(e.description){const t=this.createEl("div","description");t.innerText=e.description,n.appendChild(t)}if((e.title||e.description)&&i.appendChild(n),(e.iconUrl||e.title||e.description)&&t.appendChild(i),e.buttons&&e.buttons.length){const i=this.addButtons(e.buttons);t.appendChild(i)}return t}addButtons(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];const t=this.createEl("div","buttonsContainer");let i=!1;return e.forEach(((e,n)=>{const o=this.createEl("button","button-".concat(n),"button");o.innerText=e.text,n>0&&(o.style.cssText+="margin-left: 2px;"),"copy"===e.action&&(i=!0),t.appendChild(o)})),i&&this.addSnackbar(t),t}addSnackbar(e){this.snackBar=this.createEl("div","snackbar-".concat(this.campaignId),"snackbar"),this.snackBar.innerHTML=$t;const t=this.createEl("span","snackbar-msg-".concat(this.campaignId),"snackbar-msg");t.innerText="Copied to clipboard",this.snackBar.appendChild(t),e.appendChild(this.snackBar)}addImage(e,t){const i=this.createEl("div","".concat(t,"Container")),n=this.createEl("img",t);return n.setAttribute("src",e),n.setAttribute("loading","lazy"),i.appendChild(n),i}raiseClickedEvent(e,t){switch(this.message.templateType){case"text-only":case"text-with-icon":case"text-with-icon-and-image":this.raiseClickedForBasicTemplates(e,t)}}raiseClickedForBasicTemplates(e,t){const i=this.message.msg[0],n={msgId:this.campaignId,pivotId:this.pivotId};if("BUTTON"===e.tagName){const t=e.id.split("-")[1],o=i.buttons[t];n.kv={wzrk_c2a:o.text},"url"===o.action?o.openUrlInNewTab?window.open(o.url,"_blank"):window.location=o.url:"copy"===o.action&&(window.focus(),navigator.clipboard.writeText(o.clipboardText),this.snackBar.style.setProperty("display","flex","important"),setTimeout((()=>{this.snackBar.style.setProperty("display","none","important")}),2e3))}else"CT-INBOX-MESSAGE"===e.tagName&&i.onClickUrl&&(i.openUrlInNewTab?window.open(i.onClickUrl,"_blank"):window.location=i.onClickUrl);t?console.log("Notifiction clicked event will be raised at run time with payload ::",n):window.clevertap.renderNotificationClicked(n)}}class jt extends HTMLElement{constructor(e){super(),this.isInboxOpen=!1,this.isInboxFromFlutter=!1,this.selectedCategory=null,this.unviewedMessages={},this.unviewedCounter=0,this.isPreview=!1,this.inboxConfigForPreview={},this.inboxSelector=null,this.inbox=null,this.emptyInboxMsg=null,this.inboxCard=null,this.unviewedBadge=null,this.observer=null,this.selectedCategoryRef=null,this.addClickListenerOnDocument=(()=>e=>{if(e.composedPath().includes(this.inbox)){const t=e.path||e.composedPath&&e.composedPath();if(t.length){const e=t[0].id;if("closeInbox"===e)this.toggleInbox();else if(e.startsWith("category-"))this.prevCategoryRef=this.selectedCategoryRef,this.selectedCategoryRef=t[0],this.updateActiveCategory(t[0].innerText);else{const e=t.filter((e=>{var t;return(null===(t=e.id)||void 0===t?void 0:t.startsWith("button-"))||"CT-INBOX-MESSAGE"===e.tagName}));e.length&&e[e.length-1].raiseClickedEvent(e[0],this.isPreview)}}}else(this.inboxSelector.contains(e.target)||this.isInboxOpen)&&(this.isInboxFromFlutter?this.isInboxFromFlutter=!1:this.toggleInbox(e))})(),this.setBadgeStyle=e=>{null!==this.unviewedBadge&&(this.unviewedBadge.innerText=e>9?"9+":e,this.unviewedBadge.style.display=e>0?"flex":"none")},this.logger=e,this.shadow=this.attachShadow({mode:"open"})}get incomingMessages(){return[]}set incomingMessages(e){void 0===e&&(e=[]),e.length>0&&this.inbox&&this.updateInboxMessages(e)}get incomingMessagesForPreview(){return[]}set incomingMessagesForPreview(e){void 0===e&&(e=[]);const t={};e.length>0&&this.inbox&&(this.isPreview=!0,this.unviewedCounter=0,e.forEach((e=>{const i="".concat(e.wzrk_id.split("_")[0],"_").concat(Date.now());e.id=i,t[i]=e,this.unviewedMessages[i]=e,this.unviewedCounter++})),this.buildUIForMessages(t),this.updateUnviewedBadgeCounter())}connectedCallback(){this.init()}init(){this.config=this.isPreview?this.inboxConfigForPreview:de.readFromLSorCookie(K)||{},0!==Object.keys(this.config).length&&(this.inboxSelector=document.getElementById(this.config.inboxSelector),null!==this.inboxSelector&&(this.config.styles.notificationsBadge?this.addUnviewedBadge():this.unviewedBadge&&this.unviewedBadge.remove(),this.createinbox(),document.removeEventListener("click",this.addClickListenerOnDocument),document.addEventListener("click",this.addClickListenerOnDocument),this.config.categories.length&&this.updateActiveCategory(this.selectedCategoryRef.innerText),this.shadow.innerHTML=this.getInboxStyles(),this.shadow.appendChild(this.inbox)))}addMsgsToInboxFromLS(){const e=this.deleteExpiredAndGetUnexpiredMsgs(!1),t=e?Object.keys(e):[];0!==t.length&&(t.forEach((t=>{e[t].viewed||(this.unviewedMessages[t]=e[t],this.unviewedCounter++)})),this.buildUIForMessages(e),this.updateUnviewedBadgeCounter())}deleteExpiredAndGetUnexpiredMsgs(){let e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=Bt();const i=Math.floor(Date.now()/1e3);for(const n in t)if(t[n].wzrk_ttl&&t[n].wzrk_ttl>0&&t[n].wzrk_ttl<i){if(e){const e=this.shadowRoot.getElementById(t[n].id);e&&e.remove(),t[n].viewed||(this.unviewedCounter--,this.updateUnviewedBadgeCounter())}delete t[n]}return t&&t.length>0&&(t=Object.values(t).sort(((e,t)=>t.date-e.date)).reduce(((e,t)=>(e[t.id]=t,e)),{})),zt(t),t}updateInboxMessages(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];const t=this.deleteExpiredAndGetUnexpiredMsgs(),i=Date.now(),n={};e.forEach(((e,o)=>{const r="".concat(e.wzrk_id.split("_")[0],"_").concat(Date.now());e.id=r,e.date=i-o,e.viewed=0,t[r]=e,n[r]=e,this.unviewedMessages[r]=e,this.unviewedCounter++})),zt(t),this.buildUIForMessages(n),this.updateUnviewedBadgeCounter()}createEl(e,t,i){const n=document.createElement(e);return n.setAttribute("id",t),n.setAttribute("part",i||t),n}addUnviewedBadge(){this.unviewedBadge||(this.unviewedBadge=this.createEl("div","unviewedBadge"),this.unviewedBadge.style.cssText="display: none; position: absolute; height: 16px; width: 26px; border-radius: 8px; background-color: ".concat(this.config.styles.notificationsBadge.backgroundColor,"; font-size: 12px; color: ").concat(this.config.styles.notificationsBadge.textColor,"; font-weight: bold; align-items: center; justify-content: center;"),document.body.appendChild(this.unviewedBadge)),this.updateUnviewedBadgePosition(),window.addEventListener("resize",(()=>{this.updateUnviewedBadgePosition()}))}updateUnviewedBadgePosition(){const{top:e,right:t}=this.inboxSelector.getBoundingClientRect();this.unviewedBadge.style.top="".concat(e-8,"px"),this.unviewedBadge.style.left="".concat(t-8,"px")}createinbox(){this.inbox=this.createEl("div","inbox");const e=this.createEl("div","header"),t=this.createEl("div","headerTitle");t.innerText=this.config.title;const i=this.createEl("div","closeInbox");if(i.innerHTML="&times",e.appendChild(t),e.appendChild(i),this.inbox.appendChild(e),this.config.categories.length){const e=this.createCategories();this.inbox.appendChild(e)}this.inboxCard=this.createEl("div","inboxCard"),this.inbox.appendChild(this.inboxCard),this.emptyInboxMsg=this.createEl("div","emptyInboxMsg"),this.emptyInboxMsg.innerText="All messages will be displayed here.",this.inboxCard.appendChild(this.emptyInboxMsg);const n={root:this.inboxCard,rootMargin:"0px",threshold:.5};this.observer=new IntersectionObserver(((e,t)=>{this.handleMessageViewed(e)}),n),this.addMsgsToInboxFromLS()}createCategories(){const e=this.createEl("div","categoriesContainer"),t=this.createEl("div","leftArrow");t.innerHTML=Jt,t.children[0].style="transform: rotate(180deg)",t.addEventListener("click",(()=>{this.shadowRoot.getElementById("categoriesWrapper").scrollBy(-70,0)})),e.appendChild(t);const i=this.createEl("div","categoriesWrapper");["All",...this.config.categories].forEach(((e,t)=>{const n=this.createEl("div","category-".concat(t),"category");n.innerText=e,0===t&&(this.selectedCategoryRef=n),i.appendChild(n)})),e.appendChild(i);const n=this.createEl("div","rightArrow");n.innerHTML=Jt,n.addEventListener("click",(()=>{this.shadowRoot.getElementById("categoriesWrapper").scrollBy(70,0)})),e.appendChild(n);const o={root:e,threshold:.9},r=i.children[0],s=i.children[this.config.categories.length];return new IntersectionObserver((e=>{this.categoryObserverCb(t,e[0].intersectionRatio>=.9)}),o).observe(r),new IntersectionObserver((e=>{this.categoryObserverCb(n,e[0].intersectionRatio>=.9)}),o).observe(s),e}categoryObserverCb(e,t){e&&(e.style.display=t?"none":"flex")}updateActiveCategory(e){this.selectedCategory=e,this.inboxCard.scrollTop=0;let t=0;this.prevCategoryRef&&this.prevCategoryRef.setAttribute("selected","false"),this.selectedCategoryRef.setAttribute("selected","true"),this.inboxCard.childNodes.forEach((e=>{"emptyInboxMsg"!==e.getAttribute("id")&&(e.style.display="All"===this.selectedCategory||e.getAttribute("category")===this.selectedCategory?"block":"none","block"===e.style.display&&t++)})),0===t?(this.emptyInboxMsg.innerText="".concat(e," messages will be displayed here."),this.emptyInboxMsg.style.display="block"):this.emptyInboxMsg.style.display="none"}buildUIForMessages(){var e;let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!this.isPreview&&this.updateTSForRenderedMsgs(),this.inboxCard.scrollTop=0;const i=null!==(e=this.config.maxMsgsInInbox)&&void 0!==e?e:15,n=this.inboxCard.firstChild,o=Object.values(t).sort(((e,t)=>t.date-e.date)).map((e=>e.id));for(const e of o){const i=new Ut(this.config,t[e]);i.setAttribute("id",t[e].id),i.setAttribute("pivot",t[e].wzrk_pivot),i.setAttribute("part","ct-inbox-message"),this.config.categories.length>0?(i.setAttribute("category",t[e].tags[0]||""),i.style.display="All"===this.selectedCategory||t[e].category===this.selectedCategory?"block":"none"):i.style.display="block",this.inboxCard.insertBefore(i,n),this.observer.observe(i)}let r=this.inboxCard.querySelectorAll("ct-inbox-message").length;for(;r>i;){const e=this.inboxCard.querySelectorAll("ct-inbox-message");e.length>0&&e[e.length-1].remove(),r--}const s=this.inboxCard.querySelectorAll('ct-inbox-message[style*="display: block"]').length;this.emptyInboxMsg.style.display=s?"none":"block"}handleMessageViewed(e){const t=!this.isPreview;this.isInboxOpen&&e.forEach((e=>{e.isIntersecting&&this.unviewedMessages.hasOwnProperty(e.target.id)&&0===e.target.message.viewed&&(e.target.message.viewed=1,t?(window.clevertap.renderNotificationViewed({msgId:e.target.campaignId,pivotId:e.target.pivotId}),this.updateMessageInLS(e.target.id,{...e.target.message,viewed:1}),setTimeout((()=>{e.target.shadowRoot.getElementById("unreadMarker").style.display="none"}),1e3)):console.log("Notifiction viewed event will be raised at run time with payload ::",{msgId:e.target.campaignId,pivotId:e.target.pivotId}),this.unviewedCounter--,this.updateUnviewedBadgeCounter(),delete this.unviewedMessages[e.target.id])}))}updateMessageInLS(e,t){if(!this.isPreview){const i=Bt();i[e]=t,zt(i)}}toggleInbox(e){this.isInboxOpen=!this.isInboxOpen,this.isInboxFromFlutter=!!(null==e?void 0:e.rect),this.isInboxOpen?(this.inboxCard.scrollTop=0,!this.isPreview&&this.deleteExpiredAndGetUnexpiredMsgs(),this.inbox.style.display="block",this.inbox.style.zIndex="2147483647",this.config.categories.length&&(this.selectedCategoryRef.setAttribute("selected","false"),this.selectedCategoryRef=this.shadowRoot.getElementById("category-0"),this.updateActiveCategory(this.selectedCategoryRef.innerText),this.shadowRoot.getElementById("categoriesWrapper").scrollLeft-=this.shadowRoot.getElementById("categoriesWrapper").scrollWidth),this.setInboxPosition(e)):this.inbox.style.display="none"}setInboxPosition(e){const t=window.outerWidth,i=getComputedStyle(ue.inbox),n=i.getPropertyValue("--inbox-top"),o=i.getPropertyValue("--inbox-bottom"),r=i.getPropertyValue("--inbox-left"),s=i.getPropertyValue("--inbox-right");if(t>481&&!(n||o||r||s)){const t=Wt(e,this.inbox.clientHeight,this.inbox.clientWidth),i=t.xPos,n=t.yPos;this.inbox.style.top=n+"px",this.inbox.style.left=i+"px"}}updateUnviewedBadgeCounter(){if(this.isPreview)return void this.setBadgeStyle(this.unviewedCounter);let e=0;this.inboxCard.querySelectorAll("ct-inbox-message").forEach((t=>{const i=Bt();i[t.id]&&0===i[t.id].viewed&&e++})),this.setBadgeStyle(e)}updateTSForRenderedMsgs(){this.inboxCard.querySelectorAll("ct-inbox-message").forEach((e=>{const t=e.id.split("_")[1];e.shadow.getElementById("timeStamp").firstChild.innerText=Gt(t)}))}getInboxStyles(){const e=this.config.categories.length?64:16,t={panelBackgroundColor:this.config.styles.panelBackgroundColor,panelBorderColor:this.config.styles.panelBorderColor,headerBackgroundColor:this.config.styles.header.backgroundColor,headerTitleColor:this.config.styles.header.titleColor,closeIconColor:this.config.styles.closeIconColor,categoriesTabColor:this.config.styles.categories.tabColor,categoriesTitleColor:this.config.styles.categories.titleColor,selectedCategoryTabColor:this.config.styles.categories.selectedTab.tabColor,selectedCategoryTitleColor:this.config.styles.categories.selectedTab.titleColor,headerCategoryHeight:36+e};this.config.styles.categories.borderColor&&(t.categoriesBorderColor=this.config.styles.categories.borderColor),this.config.styles.categories.selectedTab.borderColor&&(t.selectedCategoryBorderColor=this.config.styles.categories.selectedTab.borderColor);const i=(e=>{let{panelBackgroundColor:t,panelBorderColor:i,headerBackgroundColor:n,headerTitleColor:o,closeIconColor:r,categoriesTabColor:s,categoriesTitleColor:a,categoriesBorderColor:l,selectedCategoryTabColor:c,selectedCategoryTitleColor:d,selectedCategoryBorderColor:u,headerCategoryHeight:h}=e;return'\n      <style id="webInboxStyles">\n        #inbox {\n          width: 100%;\n          position: fixed;\n          background-color: #fff; \n          display: none; \n          box-shadow: 0px 2px 10px 0px #d7d7d791;\n          background-color: '.concat(t,"; \n          border: 1px solid ").concat(i,";\n          top: 0;\n          left: 0;\n          height: 100%;\n          overflow: auto;\n          z-index: 1;\n          box-sizing: content-box;\n          border-radius: 4px;\n        }\n  \n        #emptyInboxMsg {\n          display: block;\n          padding: 10px;\n          text-align: center;\n          color: black;\n        }\n  \n        #header {\n          height: 36px; \n          width: 100%; \n          display: flex; \n          justify-content: center; \n          align-items: center; \n          background-color: ").concat(n,"; \n          background-color: var(--card-bg, ").concat(n,");\n          color: ").concat(o,"\n        }\n  \n        #closeInbox {\n          font-size: 20px; \n          margin-right: 12px; \n          color: ").concat(r,"; \n          cursor: pointer;\n        }\n  \n        #headerTitle {\n          font-size: 14px; \n          line-height: 20px; \n          flex-grow: 1; \n          font-weight: 700; \n          text-align: center;\n          flex-grow: 1;\n          text-align: center;\n        }\n  \n        #categoriesContainer {\n          padding: 16px 16px 0 16px; \n          height: 32px; \n          display: flex;\n          scroll-behavior: smooth;\n          position: relative;\n        }\n\n        #categoriesWrapper {\n          height: 32px; \n          overflow-x: scroll;\n          display: flex;\n          white-space: nowrap;\n          scrollbar-width: none;\n        }\n\n        #categoriesWrapper::-webkit-scrollbar {\n          display: none;\n        }\n  \n        #leftArrow, #rightArrow {\n          height: 32px;\n          align-items: center;\n          font-weight: 700;\n          position: absolute;\n          z-index: 2;\n          pointer-events: auto;\n          cursor: pointer;\n          display: none;\n        }\n\n        #leftArrow {\n          left: 0;\n          padding-left: 4px;\n          padding-right: 16px;\n          background: linear-gradient(90deg, ").concat(t," 0%, ").concat(t,"99 80%, ").concat(t,"0d 100%);\n        }\n\n        #rightArrow {\n          right: 0;\n          padding-right: 4px;\n          padding-left: 16px;\n          background: linear-gradient(-90deg, ").concat(t," 0%, ").concat(t,"99 80%, ").concat(t,'0d 100%);\n        }\n\n        [id^="category-"] {\n          display: flex; \n          flex: 1 1 0; \n          justify-content: center; \n          align-items: center; \n          font-size: 14px; \n          line-height: 20px; \n          background-color: ').concat(s,"; \n          color: ").concat(a,"; \n          cursor: pointer;\n          padding: 6px 24px;\n          margin: 0 3px;\n          border-radius: 16px;\n          border: ").concat(l?"1px solid "+l:"none",';\n        }\n\n        [id^="category-"][selected="true"] {\n          background-color: ').concat(c,"; \n          color: ").concat(d,"; \n          border: ").concat(u?"1px solid "+u:"none","\n        }\n  \n        #inboxCard {\n          padding: 0 16px 0 16px;\n          overflow-y: auto;\n          box-sizing: border-box;\n          margin-top: 16px;\n        }\n\n        @media only screen and (min-width: 480px) {\n          #inbox {\n            width: var(--inbox-width, 392px);\n            height: var(--inbox-height, 546px);\n            position: var(--inbox-position, fixed);\n            right: var(--inbox-right, unset);\n            bottom: var(--inbox-bottom, unset);\n            top: var(--inbox-top, unset);\n            left: var(--inbox-left, unset);\n          }\n  \n          #inboxCard {\n            height: calc(var(--inbox-height, 546px) - ").concat(h,"px); \n          }\n  \n        }\n      </style>\n      ")})(t),n=this.config.styles.cards;return i+(e=>{let{backgroundColor:t,borderColor:i,titleColor:n,descriptionColor:o,buttonColor:r,buttonTextColor:s,unreadMarkerColor:a}=e;return'\n    <style id="messageStyles">\n      ct-inbox-message::part(messageWrapper) {\n        margin-bottom: 16px; \n      }\n      ct-inbox-message::part(message) {\n        background-color: '.concat(t,"; \n        border: 1px solid ").concat(i,";\n        border-radius: 4px; \n        overflow: hidden;\n        min-height: 40px;\n      }\n      ct-inbox-message::part(message):hover {\n        box-shadow: 0px 4px 8px rgb(0 0 0 / 10%);\n        cursor: pointer;\n      }\n      ct-inbox-message::part(iconTitleDescWrapper) {\n        display: flex; \n        padding: 16px;\n      }\n      ct-inbox-message::part(titleDescWrapper) {\n        display: flex; \n        flex-direction: column;\n      }\n      ct-inbox-message::part(iconImgContainer) {\n        display: flex; \n        margin-right: 16px;\n      }\n      ct-inbox-message::part(mainImgContainer) {\n        line-height: 0;\n      }\n      ct-inbox-message::part(mainImg) {\n        width: 100%; \n        background: #b2b1ae;\n      }\n      ct-inbox-message::part(iconImg) {\n        height: 40px; \n        width: 40px;\n      }\n      ct-inbox-message::part(title) {\n        font-size: 14px !important; \n        line-height: 20px; \n        font-weight: 600; \n        color: ").concat(n,"\n      }\n      ct-inbox-message::part(description) {\n        font-size: 14px !important; \n        line-height: 20px; \n        font-weight: 400; \n        color: ").concat(o,"\n      }\n      ct-inbox-message::part(button) {\n        background-color: ").concat(r,"; \n        color: ").concat(s,"; \n        padding: 8px 16px; \n        font-size: 12px; \n        line-height: 16px; \n        font-weight: 600; \n        flex: 1; \n        border-radius: 0px; \n        text-transform: capitalize; \n        cursor: pointer; \n        border: none;\n      }\n      ct-inbox-message::part(buttonsContainer) {\n        display: flex;\n        position: relative;\n      }\n      ct-inbox-message::part(snackbar) {\n        position: absolute;\n        top: calc(-100% - 12px);\n        left: 50%;\n        transform: translate(-50%, 0px);\n        font-size: 14px;\n        font-weight: 400;\n        background: #FFFFFF;\n        border: 1px solid #ECEDF2;\n        box-shadow: 0px 4px 8px rgb(0 0 0 / 6%), 0px 0px 2px rgb(0 0 0 / 4%);\n        border-radius: 4px;\n        z-index: 2;\n        display: none;\n        width: max-content;\n        align-items: center;\n        padding: 8px 16px;\n        justify-content: center;\n      }\n\n      ct-inbox-message::part(snackbar-msg) {\n        color: black;\n        margin-left: 8px;\n      }\n\n      ct-inbox-message::part(timeStamp) {\n        display: flex; \n        justify-content: end; \n        align-items: center; \n        margin-top: 4px; \n        font-size: 12px !important; \n        line-height: 16px; \n        color: black;\n      }\n      ct-inbox-message::part(unreadMarker) {\n        height: 8px; \n        width: 8px; \n        border-radius: 50%; \n        background-color: ").concat(a,"; \n        margin-left: 8px;\n      }\n      @media only screen and (min-width: 420px) {\n        ct-inbox-message::part(mainImg) {\n          height: 180px;\n        }\n      }\n    </style>\n  ")})({backgroundColor:n.backgroundColor,borderColor:n.borderColor,titleColor:n.titleColor,descriptionColor:n.descriptionColor,buttonColor:n.buttonColor,buttonTextColor:n.buttonTextColor,unreadMarkerColor:n.unreadMarkerColor})}}const Ft=e=>{e.inbox_preview?ue.inbox.incomingMessagesForPreview=e.inbox_notifs:ue.inbox.incomingMessages=e},Vt=e=>{Kt(),ue.inbox=new jt({logger:e}),document.body.appendChild(ue.inbox)},qt=e=>{const t=de.readFromLSorCookie(W)||{};if(Object.keys(t).length>0&&Object.keys(t)[0].includes("_")){const i={};return i[e]=t,de.saveToLSorCookie(W,i),i}return t},Bt=()=>{const e=JSON.parse(decodeURIComponent(de.read(b)));if(!ie(e))return{};const t=qt(e);return t.hasOwnProperty(e)?t[e]:{}},zt=e=>{const t=JSON.parse(decodeURIComponent(de.read(b)));if(!ie(t))return;const i={...qt(t),[t]:e};de.saveToLSorCookie(W,i)},Ht=e=>new Promise(((t,i)=>{if("complete"===document.readyState)Vt(e),t();else{const i=de.readFromLSorCookie(K)||{},n=()=>{null===ue.inbox&&Vt(e),t()};window.addEventListener("load",(()=>{if(document.getElementById(i.inboxSelector))n();else{let o=0;if(o<20){const r=setInterval((()=>{document.getElementById(i.inboxSelector)?(n(),clearInterval(r),t()):o>=20&&(clearInterval(r),e.debug("Failed to add inbox")),o++}),500)}}}))}})),Kt=()=>{void 0===customElements.get("ct-web-inbox")&&(customElements.define("ct-web-inbox",jt),customElements.define("ct-inbox-message",Ut))},Wt=(e,t,i)=>{const n=document.scrollingElement.scrollLeft,o=document.scrollingElement.scrollTop,r=window.innerWidth+n,s=window.innerHeight+o,a=e.rect||e.target.getBoundingClientRect(),l=a.x+n,c=a.y+o,d=a.left+n,u=a.right+n,h=a.top+o,p=a.bottom,g=a.height,f=l+a.width/2;let v,b,m=!1;const y=16;if(p+t<=s){const e=s-(p+t);b=e>=y?p+y:p+e}else if(h-t>=o){const e=h-t;b=e>=y?h-t-y:h-t-e}else m=!0,b=c+g/2-t/2,b<o?b=o:b+t>s&&(b=s-t);if(m){const e=u+i;if(e<=r)v=u+(e+y<=r?y:r-e);else{const e=d-i;v=e-(e-y>=n?y:e-n)}}else v=f-i/2,v<n?v=d+i<=r?d:n:v+i>r&&(v=u-i>=n?u-i:r-i);return{xPos:v,yPos:b}},Gt=e=>{const t=Date.now();let i=Math.floor((t-e)/6e4);return i<5?"Just now":i<60?"".concat(i," minute").concat(i>1?"s":""," ago"):(i=Math.floor(i/60),i<24?"".concat(i," hour").concat(i>1?"s":""," ago"):(i=Math.floor(i/24),"".concat(i," day").concat(i>1?"s":""," ago")))},Yt=()=>Object.keys(de.readFromLSorCookie(K)||{}).length>0,Jt='<svg width="6" height="10" viewBox="0 0 6 10" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path fill-rule="evenodd" clip-rule="evenodd" d="M0.258435 9.74751C-0.0478584 9.44825 -0.081891 8.98373 0.156337 8.64775L0.258435 8.52836L3.87106 5L0.258435 1.47164C-0.0478588 1.17239 -0.0818914 0.707867 0.156337 0.371887L0.258435 0.252494C0.564728 -0.0467585 1.04018 -0.0800085 1.38407 0.152743L1.50627 0.252494L5.74156 4.39042C6.04786 4.68968 6.08189 5.1542 5.84366 5.49018L5.74156 5.60957L1.50627 9.74751C1.16169 10.0842 0.603015 10.0842 0.258435 9.74751Z" fill="#63698F"/>\n</svg>\n',$t='<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path fill-rule="evenodd" clip-rule="evenodd" d="M16 8C16 3.58172 12.4183 0 8 0C3.58172 0 0 3.58172 0 8C0 12.4183 3.58172 16 8 16C12.4183 16 16 12.4183 16 8ZM9.6839 5.93602C9.97083 5.55698 10.503 5.48833 10.8725 5.78269C11.2135 6.0544 11.2968 6.54044 11.0819 6.91173L11.0219 7.00198L8.09831 10.864C7.80581 11.2504 7.26654 11.3086 6.90323 11.0122L6.82822 10.9433L5.04597 9.10191C4.71635 8.76136 4.71826 8.21117 5.05023 7.87303C5.35666 7.5609 5.83722 7.53855 6.16859 7.80482L6.24814 7.87739L7.35133 9.01717L9.6839 5.93602Z" fill="#03A387"/>\n</svg>\n',Zt="https://d2r1yp2w7bby2u.cloudfront.net/js/lib-overlay/style.css",Qt=e=>{var t,i;e.data&&e.data.message&&("Dashboard"===e.data.message&&e.data.url?Xt(e.data.url,null!==(t=e.data.variant)&&void 0!==t?t:null,null!==(i=e.data.details)&&void 0!==i?i:{}):"Overlay"===e.data.message&&ni(e.data,!0))},Xt=(e,t,i)=>{"loading"===document.readyState?document.addEventListener("DOMContentLoaded",(()=>ii(e,t,i))):ii(e,t,i)};let ei,ti=!1;function ii(e,t,i){var n;ti||(document.body.innerHTML="",ei=document.createElement("div"),ei.id="overlayDiv",ei.style.position="relative",ei.style.display="flex",document.body.appendChild(ei),function(e,t,i,n){return new Promise(((o,r)=>{var s=document.createElement("script");s.type="module",s.src=e,s.onload=function(){"function"==typeof window.Overlay?(window.Overlay({id:"#overlayDiv",url:t,variant:i,details:n}),o()):r(new Error("ContentLayout not found in overlay.js"))},s.onerror=function(e){r(e)},document.head.appendChild(s)}))}("https://d2r1yp2w7bby2u.cloudfront.net/js/lib-overlay/overlay.js",e,t,i).then((()=>{console.log("Overlay script loaded successfully."),ti=!0})).catch((e=>{console.error("Error loading overlay script:",e)})),(n=document.createElement("link")).rel="stylesheet",n.type="text/css",n.href=Zt,document.head.appendChild(n),function(){const e={kitId:"eqj6nom",scriptTimeout:3e3,async:!0},t=document.documentElement,i=setTimeout((function(){t.className=t.className.replace(/\bwf-loading\b/g,"")+" wf-inactive"}),e.scriptTimeout),n=document.createElement("script");let o=!1;const r=document.getElementsByTagName("script")[0];let s;t.className+=" wf-loading",n.src="https://use.typekit.net/"+e.kitId+".js",n.async=!0,n.onload=n.onreadystatechange=function(){if(s=this.readyState,!(o||s&&"complete"!==s&&"loaded"!==s)){o=!0,clearTimeout(i);try{Typekit.load(e)}catch(e){}}},r.parentNode.insertBefore(n,r)}())}const ni=(e,t)=>{const i=t?e.details[0]:e.display.details[0],n=Object.keys(i)[0],o=i[n];let r=!1;if(n===window.location.href.split("?")[0]){for(const t in o){const i=document.querySelector(t);if(i)o[t].html?i.outerHTML=o[t].html:oi(e,o[t]),r=!0;else{let i=0;const n=setInterval((()=>{const s=document.querySelector(t);s?(o[t].html?s.outerHTML=o[t].html:oi(e,o[t]),r=!0,clearInterval(n)):(i++,i>=20&&(console.log("No element present on DOM with selector '".concat(t,"'.")),clearInterval(n)))}),500)}}r&&!t&&window.clevertap.renderNotificationViewed({msgId:e.wzrk_id,pivotId:e.wzrk_pivot})}};function oi(e,t){const i={};i.msgId=e.wzrk_id,e.wzrk_pivot&&(i.pivotId=e.wzrk_pivot),null!=t.json&&(i.json=t.json);const n=new CustomEvent("CT_web_native_display_buider",{detail:i});document.dispatchEvent(n)}const ri=(e,t)=>{let{device:i,session:n,request:o,logger:r}=t;const s=i,a=n,l=o,c=r;let d=0;const u=t=>{const i=t.wzrk_id.split("_")[0],n=re(),o=(e,t,i)=>{let n=0,o=0;null!=e[t]&&(n=e[t]),n++,null!=e.tc&&(o=e.tc),i<0&&o++,e.tc=o,e[t]=n};if(de._isLocalStorageSupported()){delete sessionStorage[y];var r={};const e=it();r=3===t.display.wtarget_type&&e.hasOwnProperty("wi")?e.wi:0!==t.display.wtarget_type&&1!==t.display.wtarget_type||!e.hasOwnProperty("wp")?{}:e.wp,e.hasOwnProperty("global")&&(r.wp=e),null==t[I].wmc&&(t[I].wmc=1),null==t[I].wimc&&(t[I].wimc=1);var d=-1;let o=-1,s=-1,l=-1,c=-1,g=-1,f=-1;null!=t[I].efc&&(d=parseInt(t[I].efc,10)),null!=t[I].mdc&&(o=parseInt(t[I].mdc,10)),null!=t[I].tdc&&(s=parseInt(t[I].tdc,10)),null!=t[I].tlc&&(l=parseInt(t[I].tlc,10)),null!=t[I].wmp&&(c=parseInt(t[I].wmp,10)),null!=t[I].wmc&&(g=parseInt(t[I].wmc,10)),null!=t[I].wimc&&(f=parseInt(t[I].wimc,10));var u=r[a.sessionId];if(u){const e=u[i],n=u.tc;if("dnd"===e&&!ue.dismissSpamControl)return!1;if(3===t[I].wtarget_type){if(f>0&&n>=f&&d<0)return!1}else if(g>0&&n>=g&&d<0)return!1;if(o>0&&e>=o)return!1}else u={},r[a.sessionId]=u;var h=r[n];if(null!=h){const e=h[i],t=h.tc;if(c>0&&t>=c&&d<0)return!1;if(s>0&&e>=s)return!1}else h={},r[n]=h;var p=r[A];if(null!=p){const e=p[i];if(l>0&&e>=l)return!1}else p={},r[A]=p}if(null!=t[I].delay&&t[I].delay>0){const i=t[I].delay;return t[I].delay=0,setTimeout(ri,1e3*i,e,{device:s,session:a,request:l,logger:c}),!1}o(u,i,d),o(h,i,d),o(p,i,d);let g="wp";3===t[I].wtarget_type&&(g="wi");const f={};f[a.sessionId]=u,f[n]=h,f[A]=p,nt({[g]:f})},h=()=>{const e=s.getGuid(),t=a.getSessionCookieObject();return"&t=wc&d="+encodeURIComponent($e(e+"|"+t.p+"|"+t.s))},p=(e,t)=>{const i=window.parent[e];"function"==typeof i&&(null!=t.display.kv?i(t.display.kv):i())},g=(e,t,i,n,o)=>{f(t),((e,t,i,n,o)=>{if(""!==e&&null!=e){let n,r;o?n=i:null!==i&&(r=i.getElementsByClassName("jsCT_CTA"),null!=r&&1===r.length&&(n=r[0]));const s=t.display.jsFunc,l=t.display.preview;null==l&&(e+=h()),null!=n&&(n.onclick=()=>{if(null!=s)return null==l&&tt.fireRequest(e),p(s,t),void dt("-1",0,a.sessionId);1===t.display.window?window.open(e,"_blank"):window.location=e})}})(e,t,i,0,o)},f=e=>{const t={type:"event"};t.evtName=U,t.evtData={[L]:e.wzrk_id},e.wzrk_pivot&&(t.evtData={...t.evtData,wzrk_pivot:e.wzrk_pivot}),l.processEvent(t)},v=e=>{var t;void 0===customElements.get("ct-web-personalisation-banner")&&customElements.define("ct-web-personalisation-banner",Dt);const i=null!==(t=e.display.divId)&&void 0!==t?t:e.display.divSelector,n=document.createElement("ct-web-personalisation-banner");n.msgId=e.wzrk_id,n.pivotId=e.wzrk_pivot,n.divHeight=e.display.divHeight,n.details=e.display.details[0];const o=e.display.divId?document.getElementById(i):document.querySelector(i);o.innerHTML="",o.appendChild(n)},m=e=>{var t;void 0===customElements.get("ct-web-personalisation-carousel")&&customElements.define("ct-web-personalisation-carousel",Nt);const i=null!==(t=e.display.divId)&&void 0!==t?t:e.display.divSelector,n=document.createElement("ct-web-personalisation-carousel");n.target=e;const o=e.display.divId?document.getElementById(i):document.querySelector(i);o.innerHTML="",o.appendChild(n)},_=e=>{const t=e.wzrk_id.split("_")[0],i=e.display;if(2===i.wtarget_type&&1===e.msgContent.type){const t={};t.msgId=e.wzrk_id,e.wzrk_pivot&&(t.pivotId=e.wzrk_pivot),null!=e.msgContent.kv&&(t.kv=e.msgContent.kv);const i=new CustomEvent("CT_web_native_display",{detail:t});return void document.dispatchEvent(i)}if(1===i.layout)return T(void 0,e);if(3===i.layout){const t="wzrkImageOnlyDiv";if(!1===u(e))return;if(ue.dismissSpamControl&&null!=document.getElementById(t)&&document.getElementById(t).remove(),null!=document.getElementById(t)||null!=document.getElementById("intentPreview"))return;const i=document.createElement("div");return i.id=t,document.body.appendChild(i),void 0===customElements.get("ct-web-popup-imageonly")&&customElements.define("ct-web-popup-imageonly",Lt),(e=>{const t=document.createElement("ct-web-popup-imageonly");t.session=a,t.target=e;const i=document.getElementById("wzrkImageOnlyDiv");i.innerHTML="",i.style.visibility="hidden",i.appendChild(t)})(e)}if(!1===u(e))return;const n="wizParDiv"+i.layout;if(ue.dismissSpamControl&&null!=document.getElementById(n)&&document.getElementById(n).remove(),null!=document.getElementById(n))return;ue.campaignDivMap[t]=n;const o=2===i.layout,r=document.createElement("div");r.id=n;const s=window.innerHeight,l=window.innerWidth;let c=!1;if(o)r.setAttribute("style",i.iFrameStyle);else{var d=10;let e=5*l/100,t=d+5*s/100,n=30*l/100+20,o="width:30%;";(/mobile/i.test(navigator.userAgent)||/mini/i.test(navigator.userAgent))&&!1===/iPad/i.test(navigator.userAgent)?(n=85*l/100+20,e=5*l/100,t=5*s/100,o="width:80%;"):("ontouchstart"in window||/tablet/i.test(navigator.userAgent))&&(n=50*l/100+20,e=5*l/100,t=5*s/100,o="width:50%;"),null==i.proto?(c=!0,r.setAttribute("style","display:block;overflow:hidden; bottom:"+t+"px !important;width:"+n+"px !important;right:"+e+"px !important;position:fixed;z-index:2147483647;")):r.setAttribute("style",o+i.iFrameStyle)}document.body.appendChild(r);const h=document.createElement("iframe"),p=!1===i.br?"0":"8";h.frameborder="0px",h.marginheight="0px",h.marginwidth="0px",h.scrolling="no",h.id="wiz-iframe";const f=e.display.onClick;let v,b="";if(""!==f&&null!=f&&(b="cursor:pointer;"),i.preview&&i["custom-editor"]&&(h.sandbox="allow-scripts allow-popups allow-popups-to-escape-sandbox"),1===e.msgContent.type)v=e.msgContent.html,v=v.replace(/##campaignId##/g,t),v=v.replace(/##campaignId_batchId##/g,e.wzrk_id);else{const i='<style type="text/css">body{margin:0;padding:0;}#contentDiv.wzrk{overflow:hidden;padding:0;text-align:center;'+b+"}#contentDiv.wzrk td{padding:15px 10px;}.wzrkPPtitle{font-weight: bold;font-size: 16px;font-family:arial;padding-bottom:10px;word-break: break-word;}.wzrkPPdscr{font-size: 14px;font-family:arial;line-height:16px;word-break: break-word;display:inline-block;}.PL15{padding-left:15px;}.wzrkPPwarp{margin:20px 20px 0 5px;padding:0px;border-radius: "+p+"px;box-shadow: 1px 1px 5px #888888;}a.wzrkClose{cursor:pointer;position: absolute;top: 11px;right: 11px;z-index: 2147483647;font-size:19px;font-family:arial;font-weight:bold;text-decoration: none;width: 25px;/*height: 25px;*/text-align: center; -webkit-appearance: none; line-height: 25px;background: #353535;border: #fff 2px solid;border-radius: 100%;box-shadow: #777 2px 2px 2px;color:#fff;}a:hover.wzrkClose{background-color:#d1914a !important;color:#fff !important; -webkit-appearance: none;}td{vertical-align:top;}td.imgTd{border-top-left-radius:8px;border-bottom-left-radius:8px;}</style>";let o,r,s,a,l;"dark"===e.display.theme?(o="#2d2d2e",r="#eaeaea",s="#353535",a="#353535",l="#ffffff"):(o="#ffffff",r="#000000",a="#f4f4f4",s="#a5a6a6",l="#ffffff");const c=e.msgContent.title,d=e.msgContent.description;let u="";null!=e.msgContent.imageUrl&&""!==e.msgContent.imageUrl&&(u="<td class='imgTd' style='background-color:"+a+"'><img src='"+e.msgContent.imageUrl+"' height='60' width='60'></td>"),v=i+"<div class='wzrkPPwarp' style='color:"+r+";background-color:"+o+";'><a href='javascript:void(0);' onclick=parent.$WZRK_WR.closeIframe("+t+",'"+n+"'); class='wzrkClose' style='background-color:"+s+";color:"+l+"'>&times;</a><div id='contentDiv' class='wzrk'><table cellpadding='0' cellspacing='0' border='0'><tr>"+u+"<td style='vertical-align:top;'><div class='wzrkPPtitle' style='color:"+r+"'>"+c+"</div><div class='wzrkPPdscr' style='color:"+r+"'>"+d+"<div></td></tr></table></div>"}h.setAttribute("style","z-index: 2147483647; display:block; width: 100% !important; border:0px !important; border-color:none !important;"),r.appendChild(h);const m=new Event("CT_campaign_rendered");document.dispatchEvent(m),i["custom-editor"]&&(v=C(e,v)),h.srcdoc=v;const y=()=>{d=document.getElementById("wiz-iframe").contentDocument.getElementById("contentDiv").scrollHeight,!0===i["custom-editor"]||o||(d+=25),document.getElementById("wiz-iframe").contentDocument.body.style.margin="0px",document.getElementById("wiz-iframe").style.height=d+"px"},w=navigator.userAgent.toLowerCase();if(-1!==w.indexOf("safari"))if(w.indexOf("chrome")>-1)h.onload=()=>{y();const t=document.getElementById("wiz-iframe").contentDocument.getElementById("contentDiv");g(f,e,t,0,c)};else{let t=h.contentDocument||h.contentWindow;t.document&&(t=t.document),y();const i=setInterval((()=>{if("complete"===t.readyState){clearInterval(i),y();const t=document.getElementById("wiz-iframe").contentDocument.getElementById("contentDiv");g(f,e,t,0,c)}}),10)}else h.onload=()=>{y();const t=document.getElementById("wiz-iframe").contentDocument.getElementById("contentDiv");g(f,e,t,0,c)}},C=(e,t)=>{const i="<script>\n      const ct__camapignId = '".concat(e.wzrk_id,"';\n      const ct__formatVal = (v) => {\n          return v && v.trim().substring(0, 20);\n      }\n      const ct__parentOrigin =  window.parent.origin;\n      document.body.addEventListener('click', (event) => {\n        const elem = event.target.closest?.('a[wzrk_c2a], button[wzrk_c2a]');\n        if (elem) {\n            const {innerText, id, name, value, href} = elem;\n            const clickAttr = elem.getAttribute('onclick') || elem.getAttribute('click');\n            const onclickURL = clickAttr?.match(/(window.open)[(](\"|')(.*)(\"|',)/)?.[3] || clickAttr?.match(/(location.href *= *)(\"|')(.*)(\"|')/)?.[3];\n            const props = {innerText, id, name, value};\n            let msgCTkv = Object.keys(props).reduce((acc, c) => {\n                const formattedVal = ct__formatVal(props[c]);\n                formattedVal && (acc['wzrk_click_' + c] = formattedVal);\n                return acc;\n            }, {});\n            if(onclickURL) { msgCTkv['wzrk_click_' + 'url'] = onclickURL; }\n            if(href) { msgCTkv['wzrk_click_' + 'c2a'] = href; }\n            const notifData = { msgId: ct__camapignId, msgCTkv, pivotId: '").concat(e.wzrk_pivot,"' };\n            window.parent.clevertap.renderNotificationClicked(notifData);\n        }\n      });\n      <\/script>\n    ");return t.replace(/(<\s*\/\s*body)/,"".concat(i,"\n$1"))};let E=!1;const P=e=>{let t=e.display.onClick;if(window.clevertap.hasOwnProperty("notificationCallback")&&void 0!==window.clevertap.notificationCallback&&"function"==typeof window.clevertap.notificationCallback){const i=window.clevertap.notificationCallback;if(!E){const n={};n.msgContent=e.msgContent,n.msgId=e.wzrk_id,e.wzrk_pivot&&(n.pivotId=e.wzrk_pivot),null!=e.display.kv&&(n.kv=e.display.kv),window.clevertap.raiseNotificationClicked=()=>{if(""!==t&&null!=t){const i=e.display.jsFunc;if(t+=h(),null!=i)return tt.fireRequest(t),void p(i,e);1===e.display.window?window.open(t,"_blank"):window.location=t}},window.clevertap.raiseNotificationViewed=()=>{f(e)},i(n),E=!0}}else if(window.clevertap.popupCurrentWzrkId=e.wzrk_id,_(e),window.clevertap.hasOwnProperty("popupCallbacks")&&void 0!==window.clevertap.popupCallbacks&&"function"==typeof window.clevertap.popupCallbacks[e.wzrk_id]){const t=window.clevertap.popupCallbacks[e.wzrk_id],o={};o.msgContent=e.msgContent,o.msgId=e.wzrk_id,e.wzrk_pivot&&(o.pivotId=e.wzrk_pivot);var i=[];for(var n in e)if(n.startsWith(N)&&n!==L){const t={[n]:e[n]};i.push(t)}i.length>0&&(o.msgCTkv=i),null!=e.display.kv&&(o.kv=e.display.kv),window.clevertap.raisePopupNotificationClicked=t=>{if(!t||!t.msgId)return;const i={type:"event"};if(i.evtName=j,i.evtData={[L]:t.msgId},e.wzrk_pivot&&(i.evtData={...i.evtData,wzrk_pivot:t.pivotId}),t.msgCTkv)for(var n of t.msgCTkv)i.evtData={...i.evtData,...n};l.processEvent(i)},t(o)}};let O;const T=(e,t)=>{let i;if(null!=e&&e.clientY>0)return;if(i=null==t?O:t,ue.dismissSpamControl&&0===i.display.wtarget_type&&null!=document.getElementById("intentPreview")&&null!=document.getElementById("intentOpacityDiv")&&(document.getElementById("intentPreview").remove(),document.getElementById("intentOpacityDiv").remove()),null!=document.getElementById("intentPreview")||null!=document.getElementById("wzrkImageOnlyDiv"))return;if(null==i.display.layout&&(/mobile/i.test(navigator.userAgent)||/mini/i.test(navigator.userAgent)||/iPad/i.test(navigator.userAgent)||"ontouchstart"in window||/tablet/i.test(navigator.userAgent)))return;if(!1===u(i))return;const n=i.wzrk_id.split("_")[0];ue.campaignDivMap[n]="intentPreview";let o=!1;const r=document.createElement("div");r.id="intentOpacityDiv";const s=i.display.opacity||.7,a="rgba(0,0,0,".concat(s,")");r.setAttribute("style","position: fixed;top: 0;bottom: 0;left: 0;width: 100%;height: 100%;z-index: 2147483646;background: ".concat(a,";")),document.body.appendChild(r);const l=document.createElement("div");l.id="intentPreview",null==i.display.proto?(o=!0,l.setAttribute("style","display:block;overflow:hidden;top:55% !important;left:50% !important;position:fixed;z-index:2147483647;width:600px !important;height:600px !important;margin:-300px 0 0 -300px !important;")):l.setAttribute("style",i.display.iFrameStyle),document.body.appendChild(l);const c=document.createElement("iframe"),d=!1===i.display.br?"0":"8";c.frameborder="0px",c.marginheight="0px",c.marginwidth="0px",c.scrolling="no",c.id="wiz-iframe-intent";const h=i.display.onClick;let p,f="";if(""!==h&&null!=h&&(f="cursor:pointer;"),i.display.preview&&i.display["custom-editor"]&&(c.sandbox="allow-scripts allow-popups allow-popups-to-escape-sandbox"),1===i.msgContent.type)p=i.msgContent.html,p=p.replace(/##campaignId##/g,n),p=p.replace(/##campaignId_batchId##/g,i.wzrk_id);else{const e='<style type="text/css">body{margin:0;padding:0;}#contentDiv.wzrk{overflow:hidden;padding:0 0 20px 0;text-align:center;'+f+"}#contentDiv.wzrk td{padding:15px 10px;}.wzrkPPtitle{font-weight: bold;font-size: 24px;font-family:arial;word-break: break-word;padding-top:20px;}.wzrkPPdscr{font-size: 14px;font-family:arial;line-height:16px;word-break: break-word;display:inline-block;padding:20px 20px 0 20px;line-height:20px;}.PL15{padding-left:15px;}.wzrkPPwarp{margin:20px 20px 0 5px;padding:0px;border-radius: "+d+"px;box-shadow: 1px 1px 5px #888888;}a.wzrkClose{cursor:pointer;position: absolute;top: 11px;right: 11px;z-index: 2147483647;font-size:19px;font-family:arial;font-weight:bold;text-decoration: none;width: 25px;/*height: 25px;*/text-align: center; -webkit-appearance: none; line-height: 25px;background: #353535;border: #fff 2px solid;border-radius: 100%;box-shadow: #777 2px 2px 2px;color:#fff;}a:hover.wzrkClose{background-color:#d1914a !important;color:#fff !important; -webkit-appearance: none;}#contentDiv .button{padding-top:20px;}#contentDiv .button a{font-size: 14px;font-weight:bold;font-family:arial;text-align:center;display:inline-block;text-decoration:none;padding:0 30px;height:40px;line-height:40px;background:#ea693b;color:#fff;border-radius:4px;-webkit-border-radius:4px;-moz-border-radius:4px;}</style>";let t,o,r,s;"dark"===i.display.theme?(t="#2d2d2e",o="#eaeaea",r="#353535",s="#ffffff"):(t="#ffffff",o="#000000",r="#a5a6a6",s="#ffffff");const a=i.msgContent.title,l=i.msgContent.description;let c="";null!=i.msgContent.ctaText&&""!==i.msgContent.ctaText&&(c="<div class='button'><a href='#'>"+i.msgContent.ctaText+"</a></div>");let u="";null!=i.msgContent.imageUrl&&""!==i.msgContent.imageUrl&&(u="<div style='padding-top:20px;'><img src='"+i.msgContent.imageUrl+"' width='500' alt="+a+" /></div>"),p=e+"<div class='wzrkPPwarp' style='color:"+o+";background-color:"+t+";'><a href='javascript:void(0);' onclick=parent.$WZRK_WR.closeIframe("+n+",'intentPreview'); class='wzrkClose' style='background-color:"+r+";color:"+s+"'>&times;</a><div id='contentDiv' class='wzrk'><div class='wzrkPPtitle' style='color:"+o+"'>"+a+"</div><div class='wzrkPPdscr' style='color:"+o+"'>"+l+"</div>"+u+c+"</div></div>"}c.setAttribute("style","z-index: 2147483647; display:block; height: 100% !important; width: 100% !important;min-height:80px !important;border:0px !important; border-color:none !important;"),l.appendChild(c);const v=new Event("CT_campaign_rendered");document.dispatchEvent(v),i.display["custom-editor"]&&(p=C(i,p)),c.srcdoc=p,c.onload=()=>{const e=document.getElementById("wiz-iframe-intent").contentDocument.getElementById("contentDiv");g(h,i,e,0,o)}};if(!document.body)return void(d<6&&(d++,setTimeout(ri,1e3,e,{device:s,session:a,request:l,logger:c})));const R=e=>{Object.keys(e).map((t=>{var i,n;e[t].display.divId?(i=e[t].display.divId,n=document.getElementById(i)):(i=e[t].display.divSelector,n=document.querySelector(i)),null!==n&&(2===e[t].msgContent.type?v(e[t]):m(e[t]),delete e[t])}))};if(null!=e.inapp_notifs){const t={};for(let i=0;i<e.inapp_notifs.length;i++){const n=e.inapp_notifs[i];null==n.display.wtarget_type||0===n.display.wtarget_type?P(n):1===n.display.wtarget_type?(O=n,window.document.body.onmouseleave=T):2===n.display.wtarget_type&&(2===n.msgContent.type||3===n.msgContent.type?null!==(n.display.divId?document.getElementById(n.display.divId):document.querySelector(n.display.divSelector))?2===n.msgContent.type?v(n):m(n):t[n.wzrk_id.split("_")[0]]=n:4===n.msgContent.type?ni(n,!1):P(n))}Object.keys(t).length&&("complete"===document.readyState?R(t):(e=>{window.addEventListener("load",(()=>{let t=0;if(t<20){const i=setInterval((()=>{R(e),0!==Object.keys(e).length&&20!==t||(clearInterval(i),e={}),t++}),500)}}))})(t))}const M=()=>{if(e.inbox_preview)Ft(e);else if(e.inbox_notifs){const t=[];for(let i=0;i<e.inbox_notifs.length;i++)!1!==u(e.inbox_notifs[i])&&t.push(e.inbox_notifs[i]);Ft(t)}};if((e.webInboxSetting||null!=e.inbox_notifs)&&(Yt()&&Kt(),null===ue.inbox?(e.webInboxSetting&&function(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const i=de.readFromLSorCookie(K)||{};t?(ue.inbox.inboxConfigForPreview=e,ue.inbox.isPreview=!0,ue.inbox&&ue.inbox.init()):JSON.stringify(i)!==JSON.stringify(e)&&(de.saveToLSorCookie(K,e),ue.inbox&&ue.inbox.init())}(e.webInboxSetting),Ht(c).then((()=>{M()})).catch((e=>{}))):M()),e.vars)return void ue.variableStore.mergeVariables(e.vars);const D=(e,t)=>{const i=it(),n=i[t].global;if(null!=n&&t)for(const i in e)if(e.hasOwnProperty(i)&&(delete n[e[i]],de.read(w))){const n=JSON.parse(decodeURIComponent(de.read(w))),o=JSON.parse(decodeURIComponent(de.read(b)));n[o]&&n[o][t]&&n[o][t][e[i]]&&(delete n[o][t][e[i]],de.save(w,encodeURIComponent(JSON.stringify(n))))}nt(i)};if(de._isLocalStorageSupported())try{if(null!=e.evpr){const t=e.evpr.events,i=e.evpr.profile,n=e.evpr.expires_in,o=se();de.setMetaProp("lsTime",o),de.setMetaProp("exTs",n),(e=>{if(null!=ue.globalEventsMap||(ue.globalEventsMap=de.readFromLSorCookie(S),null!=ue.globalEventsMap)){for(const t in e)if(e.hasOwnProperty(t)){const i=ue.globalEventsMap[t],n=e[t];null!=ue.globalEventsMap[t]?null!=n[0]&&n[0]>i[0]&&(ue.globalEventsMap[t]=n):ue.globalEventsMap[t]=n}}else ue.globalEventsMap=e})(t),de.saveToLSorCookie(S,ue.globalEventsMap),null==ue.globalProfileMap?ct(i,!0):ct(i,!1)}null!=e.arp&&(e=>{if(null!=e.skipResARP&&e.skipResARP)return console.debug("Update ARP Request rejected",e),null;const t=!0===e[x];if(de._isLocalStorageSupported())try{let i=de.readFromLSorCookie(k);if(null==i||t){i={};for(const t in e)e.hasOwnProperty(t)&&(-1===e[t]?delete i[t]:i[t]=e[t]);de.saveToLSorCookie(k,i)}}catch(e){console.error("Unable to parse ARP JSON: "+e)}})(e.arp),null!=e.inapp_stale&&e.inapp_stale.length>0&&D(e.inapp_stale,"wp"),null!=e.inbox_stale&&e.inbox_stale.length>0&&D(e.inbox_stale,"wi")}catch(e){c.error("Unable to persist evrp/arp: "+e)}};var si=t("isPersonalisationActive");class ai{constructor(e){let{isPersonalisationActive:t}=e;Object.defineProperty(this,si,{writable:!0,value:void 0}),i(this,si)[si]=t}getTotalVisits(){if(!i(this,si)[si]())return;let e=de.getMetaProp("sc");return null==e&&(e=1),e}getLastVisit(){if(!i(this,si)[si]())return;const e=de.getMetaProp("ps");return null!=e?new Date(1e3*e):void 0}}const li=1,ci=2,di=3,ui=4;var hi=t("logLevel"),pi=t("log"),gi=t("isLegacyDebug");class fi{constructor(e){Object.defineProperty(this,gi,{get:bi,set:void 0}),Object.defineProperty(this,pi,{value:vi}),Object.defineProperty(this,hi,{writable:!0,value:void 0}),this.wzrkError={},i(this,hi)[hi]=null==e?e:ci,this.wzrkError={}}get logLevel(){return i(this,hi)[hi]}set logLevel(e){i(this,hi)[hi]=e}error(e){i(this,hi)[hi]>=li&&i(this,pi)[pi]("error",e)}info(e){i(this,hi)[hi]>=ci&&i(this,pi)[pi]("log",e)}debug(e){(i(this,hi)[hi]>=di||i(this,gi)[gi])&&i(this,pi)[pi]("debug",e)}debugPE(e){i(this,hi)[hi]>=ui&&i(this,pi)[pi]("debug_pe",e)}reportError(e,t){this.wzrkError.c=e,this.wzrkError.d=t,this.error("".concat(ke," ").concat(e,": ").concat(t))}}var vi=function(e,t){if(window.console)try{const i=(new Date).getTime();console[e]("CleverTap [".concat(i,"]: ").concat(t))}catch(e){}},bi=function(){return"undefined"!=typeof sessionStorage&&""===sessionStorage.WZRK_D},mi=t("logger"),yi=t("sessionId"),wi=t("isPersonalisationActive");class Si{constructor(e){let{logger:t,isPersonalisationActive:n}=e;Object.defineProperty(this,mi,{writable:!0,value:void 0}),Object.defineProperty(this,yi,{writable:!0,value:void 0}),Object.defineProperty(this,wi,{writable:!0,value:void 0}),this.cookieName=void 0,this.scookieObj=void 0,this.sessionId=de.getMetaProp("cs"),i(this,mi)[mi]=t,i(this,wi)[wi]=n}get sessionId(){return i(this,yi)[yi]}set sessionId(e){i(this,yi)[yi]=e}getSessionCookieObject(){let e=de.readCookie(this.cookieName),t={};if(null!=e)if(e=e.replace(p,'"'),t=JSON.parse(e),Z(t)){if(void 0!==t.t){const e=t.t;se()-e>1260&&(t={})}}else t={};return this.scookieObj=t,t}setSessionCookieObject(e){const t=JSON.stringify(e);de.createBroadCookie(this.cookieName,t,1200,Ge())}manageSession(e){if(void 0===this.sessionId||this.sessionId!==e){const t=de.getMetaProp("cs");if(void 0===t)de.setMetaProp("ps",e),de.setMetaProp("cs",e),de.setMetaProp("sc",1);else if(t!==e){de.setMetaProp("ps",t),de.setMetaProp("cs",e);let i=de.getMetaProp("sc");void 0===i&&(i=0),de.setMetaProp("sc",i+1)}this.sessionId=e}}getTimeElapsed(){if(!i(this,wi)[wi]())return;null!=this.scookieObj&&(this.scookieObj=this.getSessionCookieObject());const e=this.scookieObj.s;if(null!=e){const t=se();return Math.floor(t-e)}}getPageCount(){if(i(this,wi)[wi]())return null!=this.scookieObj&&(this.scookieObj=this.getSessionCookieObject()),this.scookieObj.p}}let _i=0,Ci=0;var ki=t("logger"),Ei=t("account"),Ai=t("device"),Ii=t("session"),Pi=t("isPersonalisationActive"),Oi=t("clearCookie"),Ti=t("addToLocalEventMap");class xi{constructor(e){let{logger:t,account:n,device:o,session:r,isPersonalisationActive:s}=e;Object.defineProperty(this,Ti,{value:Ri}),Object.defineProperty(this,ki,{writable:!0,value:void 0}),Object.defineProperty(this,Ei,{writable:!0,value:void 0}),Object.defineProperty(this,Ai,{writable:!0,value:void 0}),Object.defineProperty(this,Ii,{writable:!0,value:void 0}),Object.defineProperty(this,Pi,{writable:!0,value:void 0}),Object.defineProperty(this,Oi,{writable:!0,value:!1}),this.processingBackup=!1,i(this,ki)[ki]=t,i(this,Ei)[Ei]=n,i(this,Ai)[Ai]=o,i(this,Ii)[Ii]=r,i(this,Pi)[Pi]=s,tt.logger=t,tt.device=o,tt.account=n}processBackupEvents(){const e=de.readFromLSorCookie(E);if(null!=e){this.processingBackup=!0;for(const t in e)if(e.hasOwnProperty(t)){const n=e[t];void 0===n.fired&&(i(this,ki)[ki].debug("Processing backup event : "+n.q),void 0!==n.q&&tt.fireRequest(n.q),n.fired=!0)}de.saveToLSorCookie(E,e),this.processingBackup=!1}}addSystemDataToObject(e,t){void 0===t&&(e=ne(e,i(this,ki)[ki])),X(i(this,ki)[ki].wzrkError)||(e.wzrk_error=i(this,ki)[ki].wzrkError,i(this,ki)[ki].wzrkError={}),e.id=i(this,Ei)[Ei].id,ie(i(this,Ai)[Ai].gcookie)&&(e.g=i(this,Ai)[Ai].gcookie);const n=i(this,Ii)[Ii].getSessionCookieObject();e.s=n.s,e.pg=void 0===n.p?1:n.p;let o=document.location.protocol;return o=o.replace(":",""),e.af={...e.af,lib:"web-sdk-v1.8.2",protocol:o,...ue.flutterVersion},sessionStorage.hasOwnProperty("WZRK_D")&&(e.debug=!0),e}addFlags(e){if(i(this,Oi)[Oi]=de.getAndClearMetaProp(g),void 0!==i(this,Oi)[Oi]&&i(this,Oi)[Oi]&&(e.rc=!0,i(this,ki)[ki].debug("reset cookie sent in request and cleared from meta for future requests.")),i(this,Pi)[Pi]()){const t=de.getMetaProp("lsTime"),i=de.getMetaProp("exTs");if(void 0===t||void 0===i)return void(e.dsync=!0);t+i<se()&&(e.dsync=!0)}}saveAndFireRequest(e,t,n,o){const r=se(),s=(e=We(e,"rn",++ue.globalCache.REQ_N))+"&i="+r+"&sn="+_i;de.backupEvent(s,ue.globalCache.REQ_N,i(this,ki)[ki]),ue.offline||(t&&(void 0===i(this,Oi)[Oi]||!i(this,Oi)[Oi])||window.isOULInProgress?i(this,ki)[ki].debug("Not fired due to override - ".concat(ue.blockRequest," or clearCookie - ").concat(i(this,Oi)[Oi]," or OUL request in progress - ").concat(window.isOULInProgress)):(r===Ci?_i++:(Ci=r,_i=0),window.oulReqN=ue.globalCache.REQ_N,tt.fireRequest(s,!1,n,o)))}unregisterTokenForGuid(e){const t=de.readFromLSorCookie(V);if(t){const t={type:"data"};ie(e)&&(t.g=e),t.action="unregister",t.id=i(this,Ei)[Ei].id;const n=i(this,Ii)[Ii].getSessionCookieObject();t.s=n.s;const o=Ye(JSON.stringify(t),i(this,ki)[ki]);let r=i(this,Ei)[Ei].dataPostURL;r=We(r,"type","data"),r=We(r,"d",o),tt.fireRequest(r,!0),de.saveToLSorCookie(F,!1)}this.registerToken(t)}registerToken(e){if(!e)return;e=this.addSystemDataToObject(e,!0),e=JSON.stringify(e);let t=i(this,Ei)[Ei].dataPostURL;t=We(t,"type","data"),t=We(t,"d",Ye(e,i(this,ki)[ki])),tt.fireRequest(t),de.save("WZRK_WPR","ok")}processEvent(e){i(this,Ti)[Ti](e.evtName),e=this.addSystemDataToObject(e,void 0),this.addFlags(e),e[y]=rt();const t=Ye(JSON.stringify(e),i(this,ki)[ki]);let n=i(this,Ei)[Ei].dataPostURL;n=We(n,"type",R),n=We(n,"d",t),this.saveAndFireRequest(n,ue.blockRequest,!1,e.evtName)}post(e,t){return fetch(e,{method:"post",headers:{"Content-Type":"application/json"},body:t}).then((e=>{if(e.ok)return e.json();throw e})).then((e=>(i(this,ki)[ki].debug("Sync data successful",e),e))).catch((e=>{throw i(this,ki)[ki].debug("Error in syncing variables",e),e}))}}var Ri=function(e){if(de._isLocalStorageSupported()){void 0===ue.globalEventsMap&&(ue.globalEventsMap=de.readFromLSorCookie(S),void 0===ue.globalEventsMap&&(ue.globalEventsMap={}));const t=se();let i=ue.globalEventsMap[e];void 0!==i?(i[2]=t,i[0]++):(i=[],i.push(1),i.push(t),i.push(t)),ue.globalEventsMap[e]=i,de.saveToLSorCookie(S,ue.globalEventsMap)}},Mi=t("request"),Di=t("account"),Ni=t("oldValues"),Li=t("logger"),Ui=t("processPrivacyArray");class ji extends Array{constructor(e,t){let{request:n,account:o,logger:r}=e;super(),Object.defineProperty(this,Ui,{value:Fi}),Object.defineProperty(this,Mi,{writable:!0,value:void 0}),Object.defineProperty(this,Di,{writable:!0,value:void 0}),Object.defineProperty(this,Ni,{writable:!0,value:void 0}),Object.defineProperty(this,Li,{writable:!0,value:void 0}),i(this,Li)[Li]=r,i(this,Mi)[Mi]=n,i(this,Di)[Di]=o,i(this,Ni)[Ni]=t}push(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return ue.isPrivacyArrPushed?i(this,Ui)[Ui](ue.privacyArray.length>0?ue.privacyArray:t):ue.privacyArray.push(...t),0}_processOldValues(){i(this,Ni)[Ni]&&i(this,Ui)[Ui](i(this,Ni)[Ni]),i(this,Ni)[Ni]=null}}var Fi=function(e){if(Array.isArray(e)&&e.length>0){const n=e.reduce(((e,t)=>({...e,...t})),{});let o={};const r={};var t=!1;if(n.hasOwnProperty(P)&&"boolean"==typeof(t=n[P])&&(r.ct_optout=t,ue.isOptInRequest=!t),n.hasOwnProperty(O)){const e=n[O],t="boolean"==typeof e&&e;de.setMetaProp(O,t)}if(!X(r)){o.type="profile",o.profile=r,o=i(this,Mi)[Mi].addSystemDataToObject(o,void 0);const n=Ye(JSON.stringify(o),i(this,Li)[Li]);let s=i(this,Di)[Di].dataPostURL;s=We(s,"type",R),s=We(s,"d",n),s=We(s,P,t?"true":"false"),i(this,Mi)[Mi].saveAndFireRequest(s,ue.blockRequest),e.splice(0,e.length)}}},Vi=t("oldValues"),qi=t("logger"),Bi=t("request"),zi=t("account"),Hi=t("wizAlertJSPath"),Ki=t("fcmPublicKey"),Wi=t("setUpWebPush"),Gi=t("setUpWebPushNotifications"),Yi=t("setApplicationServerKey"),Ji=t("setUpSafariNotifications"),$i=t("setUpChromeFirefoxNotifications"),Zi=t("addWizAlertJS"),Qi=t("removeWizAlertJS"),Xi=t("handleNotificationRegistration");class en extends Array{constructor(e,t){let{logger:n,session:o,request:r,account:s}=e;super(),Object.defineProperty(this,Xi,{value:cn}),Object.defineProperty(this,Qi,{value:ln}),Object.defineProperty(this,Zi,{value:an}),Object.defineProperty(this,$i,{value:sn}),Object.defineProperty(this,Ji,{value:rn}),Object.defineProperty(this,Yi,{value:on}),Object.defineProperty(this,Gi,{value:nn}),Object.defineProperty(this,Wi,{value:tn}),Object.defineProperty(this,Vi,{writable:!0,value:void 0}),Object.defineProperty(this,qi,{writable:!0,value:void 0}),Object.defineProperty(this,Bi,{writable:!0,value:void 0}),Object.defineProperty(this,zi,{writable:!0,value:void 0}),Object.defineProperty(this,Hi,{writable:!0,value:void 0}),Object.defineProperty(this,Ki,{writable:!0,value:void 0}),i(this,Hi)[Hi]="https://d2r1yp2w7bby2u.cloudfront.net/js/wzrk_dialog.min.js",i(this,Ki)[Ki]=null,i(this,Vi)[Vi]=t,i(this,qi)[qi]=n,i(this,Bi)[Bi]=r,i(this,zi)[zi]=s}push(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return i(this,Wi)[Wi](t),0}_processOldValues(){i(this,Vi)[Vi]&&i(this,Wi)[Wi](i(this,Vi)[Vi]),i(this,Vi)[Vi]=null}_enableWebPush(e,t){ue.webPushEnabled=e,null!=t&&i(this,Yi)[Yi](t),ue.webPushEnabled&&ue.notifApi.notifEnabledFromApi?i(this,Xi)[Xi](ue.notifApi.displayArgs):!ue.webPushEnabled&&ue.notifApi.notifEnabledFromApi&&i(this,qi)[qi].error("Ensure that web push notifications are fully enabled and integrated before requesting them")}}var tn=function(e){ue.webPushEnabled&&e.length>0?i(this,Xi)[Xi](e):null==ue.webPushEnabled&&e.length>0?(ue.notifApi.notifEnabledFromApi=!0,ue.notifApi.displayArgs=e.slice()):!1===ue.webPushEnabled&&e.length>0&&i(this,qi)[qi].error("Make sure push notifications are fully enabled and integrated")},nn=function(e,t,n,o){-1!==navigator.userAgent.indexOf("Chrome")||-1!==navigator.userAgent.indexOf("Firefox")?i(this,$i)[$i](e,t):-1!==navigator.userAgent.indexOf("Safari")&&i(this,Ji)[Ji](e,n,o)},on=function(e){i(this,Ki)[Ki]=e},rn=function(e,t,n){void 0===t&&i(this,qi)[qi].error("Ensure that APNS Web Push ID is supplied"),void 0===n&&i(this,qi)[qi].error("Ensure that APNS Web Push service path is supplied"),"safari"in window&&"pushNotification"in window.safari&&window.safari.pushNotification.requestPermission(n,t,{},(e=>{if("granted"===e.permission){const t=JSON.parse(JSON.stringify(e));t.endpoint=e.deviceToken,t.browser="Safari",de.saveToLSorCookie(V,t),i(this,Bi)[Bi].registerToken(t),i(this,qi)[qi].info("Safari Web Push registered. Device Token: "+e.deviceToken)}else"denied"===e.permission&&i(this,qi)[qi].info("Error subscribing to Safari web push")}))},sn=function(e,t){let n="";"serviceWorker"in navigator&&navigator.serviceWorker.register(t).then((e=>"undefined"!=typeof __wzrk_account_id?new Promise((t=>setTimeout((()=>t(e)),5e3))):(n=e.scope,/^(\.?)(\/?)([^/]*).js$/.test(t)?navigator.serviceWorker.ready:-1!==navigator.userAgent.indexOf("Chrome")?new Promise((t=>setTimeout((()=>t(e)),5e3))):navigator.serviceWorker.getRegistrations()))).then((t=>{-1!==navigator.userAgent.indexOf("Firefox")&&Array.isArray(t)&&(t=t.filter((e=>e.scope===n))[0]);const o={userVisibleOnly:!0};null!=i(this,Ki)[Ki]&&(o.applicationServerKey=(e=>{let t=(e+"=".repeat((4-e.length%4)%4)).replace(/\-/g,"+").replace(/_/g,"/"),i=window.atob(t),n=[];for(let e=0;e<i.length;e++)n.push(i.charCodeAt(e));return new Uint8Array(n)})(i(this,Ki)[Ki])),t.pushManager.subscribe(o).then((t=>{i(this,qi)[qi].info("Service Worker registered. Endpoint: "+t.endpoint);const n=JSON.parse(JSON.stringify(t));-1!==navigator.userAgent.indexOf("Chrome")?(n.endpoint=n.endpoint.split("/").pop(),n.browser="Chrome"):-1!==navigator.userAgent.indexOf("Firefox")&&(n.endpoint=n.endpoint.split("/").pop(),n.browser="Firefox"),de.saveToLSorCookie(V,n),i(this,Bi)[Bi].registerToken(n),void 0!==e&&"function"==typeof e&&e()})).catch((e=>{i(this,qi)[qi].error("Error subscribing: "+e),t.pushManager.getSubscription().then((e=>{null!==e&&e.unsubscribe().then((e=>{i(this,qi)[qi].info("Unsubscription successful")})).catch((e=>{i(this,qi)[qi].error("Error unsubscribing: "+e)}))}))}))})).catch((e=>{i(this,qi)[qi].error("error registering service worker: "+e)}))},an=function(){const e=document.createElement("script");return e.setAttribute("type","text/javascript"),e.setAttribute("id","wzrk-alert-js"),e.setAttribute("src",i(this,Hi)[Hi]),document.getElementsByTagName("body")[0].appendChild(e),e},ln=function(){const e=document.getElementById("wzrk-alert-js");e.parentNode.removeChild(e)},cn=function(e){let t,n,o,r,s,a,l,c,d,u,h,p,g,f,v;if(1===e.length){if(Z(e[0])){const i=e[0];t=i.titleText,n=i.bodyText,o=i.okButtonText,r=i.rejectButtonText,s=i.okButtonColor,a=i.skipDialog,l=i.askAgainTimeInSeconds,c=i.okCallback,d=i.rejectCallback,u=i.subscriptionCallback,h=i.serviceWorkerPath,p=i.httpsPopupPath,g=i.httpsIframePath,f=i.apnsWebPushId,v=i.apnsWebPushServiceUrl}}else t=e[0],n=e[1],o=e[2],r=e[3],s=e[4],a=e[5],l=e[6];if(null==a&&(a=!1),null==h&&(h="/clevertap_sw.js"),void 0===navigator.serviceWorker)return;const b=null!=p&&null!=g;if("https:"!==window.location.protocol&&"localhost"!==document.location.hostname&&!b)return void i(this,qi)[qi].error("Make sure you are https or localhost to register for notifications");if(-1!==navigator.userAgent.indexOf("Chrome")){const e=navigator.userAgent.match(/Chrome\/(\d+)/);if(null==e||parseInt(e[1],10)<50)return}else if(-1!==navigator.userAgent.indexOf("Firefox")){const e=navigator.userAgent.match(/Firefox\/(\d+)/);if(null==e||parseInt(e[1],10)<50)return}else{if(-1===navigator.userAgent.indexOf("Safari"))return;{const e=navigator.userAgent.match(/Safari\/(\d+)/);if(null==e||parseInt(e[1],10)<50)return}}if(!b){if(null==Notification)return;if("granted"===Notification.permission)return void i(this,Gi)[Gi](u,h,f,v);if("denied"===Notification.permission)return;if(a)return void i(this,Gi)[Gi](u,h,f,v)}if(!(t&&n&&o&&r))return void i(this,qi)[qi].error("Missing input parameters; please specify title, body, ok button and cancel button text");null!=s&&s.match(/^#[a-f\d]{6}$/i)||(s="#f28046");const m=(new Date).getTime()/1e3;if(null==de.getMetaProp("notif_last_time"))de.setMetaProp("notif_last_time",m);else{if(null==l&&(l=604800),m-de.getMetaProp("notif_last_time")<l)return;de.setMetaProp("notif_last_time",m)}if(b){const e=document.createElement("iframe");e.setAttribute("style","display:none;"),e.setAttribute("src",g),document.body.appendChild(e),window.addEventListener("message",(e=>{if(null!=e.data){let a={};try{a=JSON.parse(e.data)}catch(e){return}null!=a.state&&"ct"===a.from&&"not"===a.state&&(i(this,Zi)[Zi]().onload=()=>{window.wzrkPermissionPopup.wizAlert({title:t,body:n,confirmButtonText:o,confirmButtonColor:s,rejectButtonText:r},(e=>{e?("function"==typeof c&&c(),window.open(p)):"function"==typeof d&&d(),i(this,Qi)[Qi]()}))})}}),!1)}else i(this,Zi)[Zi]().onload=()=>{window.wzrkPermissionPopup.wizAlert({title:t,body:n,confirmButtonText:o,confirmButtonColor:s,rejectButtonText:r},(e=>{e?("function"==typeof c&&c(),i(this,Gi)[Gi](u,h,f,v)):"function"==typeof d&&d(),i(this,Qi)[Qi]()}))}},dn=t("variableStore");class un{constructor(e){let{variableStore:t}=e;Object.defineProperty(this,dn,{writable:!0,value:void 0}),this.name=null,this.defaultValue=null,this.value=null,this.type=null,this.hadStarted=!1,this.valueChangedCallbacks=[],i(this,dn)[dn]=t}getValue(){return this.value}getdefaultValue(){return this.defaultValue}static define(e,t,i){if(!e||"string"!=typeof e)return console.error("Empty or invalid name parameter provided."),null;if(e.startsWith(".")||e.endsWith("."))return console.error("Variable name starts or ends with a `.` which is not allowed: "+e),null;const n=typeof t;if("string"!==n&&"number"!==n&&"boolean"!==n)return console.error("Only primitive types (string, number, boolean) are accepted as value"),null;const o=i.getVariable(e);if(o)return o;const r=new un({variableStore:i});try{r.name=e,r.defaultValue=t,r.value=t,r.type=n,i.registerVariable(r),r.update(t)}catch(e){console.error(e)}return r}update(e){const t=this.value;this.value=e,null===e&&null===t||null!==e&&e===t&&this.hadStarted||i(this,dn)[dn].hasVarsRequestCompleted()&&(this.hadStarted=!0,this.triggerValueChanged())}triggerValueChanged(){this.valueChangedCallbacks.forEach((e=>{e(this)}))}addValueChangedCallback(e){e?(this.valueChangedCallbacks.push(e),i(this,dn)[dn].hasVarsRequestCompleted()&&e(this)):console.log("Invalid callback parameter provided.")}removeValueChangedCallback(e){const t=this.valueChangedCallbacks.indexOf(e);-1!==t&&this.valueChangedCallbacks.splice(t,1)}clearStartFlag(){this.hadStarted=!1}}var hn=t("logger"),pn=t("account"),gn=t("request"),fn=t("event"),vn=t("variables"),bn=t("remoteVariables"),mn=t("fetchCallback"),yn=t("variablesChangedCallbacks"),wn=t("oneTimeVariablesChangedCallbacks"),Sn=t("hasVarsRequestCompleted"),_n=t("runVariablesChangedCallback");class Cn{constructor(e){let{logger:t,request:n,account:o,event:r}=e;Object.defineProperty(this,_n,{value:kn}),Object.defineProperty(this,hn,{writable:!0,value:void 0}),Object.defineProperty(this,pn,{writable:!0,value:void 0}),Object.defineProperty(this,gn,{writable:!0,value:void 0}),Object.defineProperty(this,fn,{writable:!0,value:void 0}),Object.defineProperty(this,vn,{writable:!0,value:void 0}),Object.defineProperty(this,bn,{writable:!0,value:void 0}),Object.defineProperty(this,mn,{writable:!0,value:void 0}),Object.defineProperty(this,yn,{writable:!0,value:void 0}),Object.defineProperty(this,wn,{writable:!0,value:void 0}),Object.defineProperty(this,Sn,{writable:!0,value:!1}),i(this,hn)[hn]=t,i(this,pn)[pn]=o,i(this,gn)[gn]=n,i(this,fn)[fn]=r,i(this,vn)[vn]={},i(this,bn)[bn]={},i(this,yn)[yn]=[],i(this,wn)[wn]=[],ue.variableStore=this}registerVariable(e){const{name:t}=e;i(this,vn)[vn][t]=e,console.log("registerVariable",i(this,vn)[vn])}getVariable(e){return i(this,vn)[vn][e]}hasVarsRequestCompleted(){return i(this,Sn)[Sn]}syncVariables(e,t){if(!i(this,pn)[pn].token){const e="Account token is missing.";return i(this,hn)[hn].error(e),Promise.reject(new Error(e))}const n={type:"varsPayload",vars:{}};for(const e in i(this,vn)[vn])n.vars[e]={defaultValue:i(this,vn)[vn][e].defaultValue,type:i(this,vn)[vn][e].type};if(0===Object.keys(n.vars).length){const e="No variables are defined.";return i(this,hn)[hn].error(e),Promise.reject(new Error(e))}let o={};o=i(this,gn)[gn].addSystemDataToObject(o,void 0),o.tk=i(this,pn)[pn].token,o.type="meta";const r=JSON.stringify([o,n]),s=i(this,pn)[pn].dataPostPEURL;return i(this,gn)[gn].post(s,r).then((t=>(e&&"function"==typeof e&&e(t),t))).catch((e=>{throw t&&"function"==typeof t&&t(e),400===e.status?i(this,hn)[hn].error("Invalid sync payload or clear the existing draft"):401===e.status?i(this,hn)[hn].error("This is not a test profile"):i(this,hn)[hn].error("Sync variable failed"),e}))}fetchVariables(e){i(this,fn)[fn].push(Y,{t:4}),e&&"function"==typeof e&&(i(this,mn)[mn]=e)}mergeVariables(e){console.log("msg vars is ",e),i(this,Sn)[Sn]=!0,de.saveToLSorCookie("WZRK_PE",e),i(this,bn)[bn]=e;for(const t in i(this,vn)[vn])e.hasOwnProperty(t)&&i(this,vn)[vn][t].update(e[t]);i(this,mn)[mn]&&i(this,mn)[mn](),i(this,_n)[_n]()}addVariablesChangedCallback(e){e&&"function"==typeof e?(i(this,yn)[yn].push(e),this.hasVarsRequestCompleted()&&e()):i(this,hn)[hn].error("callback is not a function")}addOneTimeVariablesChangedCallback(e){e&&"function"==typeof e&&(this.hasVarsRequestCompleted()?e():i(this,wn)[wn].push(e))}removeVariablesChangedCallback(e){const t=i(this,yn)[yn].indexOf(e);-1!==t&&i(this,yn)[yn].splice(t,1)}removeOneTimeVariablesChangedCallback(e){const t=i(this,wn)[wn].indexOf(e);-1!==t&&i(this,wn)[wn].splice(t,1)}}var kn=function(){for(var e of i(this,yn)[yn])e();for(var t of i(this,wn)[wn])t();i(this,wn)[wn].length=0},En=t("logger"),An=t("api"),In=t("onloadcalled"),Pn=t("device"),On=t("session"),Tn=t("account"),xn=t("request"),Rn=t("variableStore"),Mn=t("isSpa"),Dn=t("previousUrl"),Nn=t("boundCheckPageChanged"),Ln=t("dismissSpamControl"),Un=t("processOldValues"),jn=t("debounce"),Fn=t("checkPageChanged"),Vn=t("pingRequest"),qn=t("isPingContinuous"),Bn=t("overrideDSyncFlag"),zn=t("sendLocationData");var Hn=function(){this.onUserLogin._processOldValues(),this.privacy._processOldValues(),this.event._processOldValues(),this.profile._processOldValues(),this.notifications._processOldValues()},Kn=function(e){let t,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:300;return function(){clearTimeout(t),t=setTimeout(e,i)}},Wn=function(){i(this,jn)[jn]((()=>{i(this,Dn)[Dn]!==location.href&&this.pageChanged()}))()},Gn=function(){let e=i(this,Tn)[Tn].dataPostURL,t={};t=i(this,xn)[xn].addSystemDataToObject(t,void 0),e=We(e,"type","ping"),e=We(e,"d",Ye(JSON.stringify(t),i(this,En)[En])),i(this,xn)[xn].saveAndFireRequest(e,ue.blockRequest)},Yn=function(){return void 0!==window.wzrk_d&&"continuous"===window.wzrk_d.ping},Jn=function(e){this._isPersonalisationActive()&&(e.dsync=!0)},$n=function(e){let t={af:{}};const n={};t.type="profile",null==n.tz&&(n.tz=(new Date).toString().match(/([A-Z]+[\+-][0-9]+)/)[1]),t.profile=n,e&&Object.keys(e).forEach((i=>{t.af[i]=e[i]})),ue.location&&(t.af={...t.af,...ue.location}),t=i(this,xn)[xn].addSystemDataToObject(t,!0),i(this,xn)[xn].addFlags(t);const o=Ye(JSON.stringify(t),i(this,En)[En]);let r=i(this,Tn)[Tn].dataPostURL;r=We(r,"type",R),r=We(r,"d",o),i(this,xn)[xn].saveAndFireRequest(r,ue.blockRequest)};const Zn=new class{get spa(){return i(this,Mn)[Mn]}set spa(e){const t=!0===e;i(this,Mn)[Mn]!==t&&1===i(this,In)[In]&&(t?document.addEventListener("click",i(this,Nn)[Nn]):document.removeEventListener("click",i(this,Nn)[Nn])),i(this,Mn)[Mn]=t}get dismissSpamControl(){return i(this,Ln)[Ln]}set dismissSpamControl(e){const t=!0===e;i(this,Ln)[Ln]=t,ue.dismissSpamControl=t}constructor(){var e,t,n,o,r;let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Object.defineProperty(this,zn,{value:$n}),Object.defineProperty(this,Bn,{value:Jn}),Object.defineProperty(this,qn,{value:Yn}),Object.defineProperty(this,Vn,{value:Gn}),Object.defineProperty(this,Fn,{value:Wn}),Object.defineProperty(this,jn,{value:Kn}),Object.defineProperty(this,Un,{value:Hn}),Object.defineProperty(this,En,{writable:!0,value:void 0}),Object.defineProperty(this,An,{writable:!0,value:void 0}),Object.defineProperty(this,In,{writable:!0,value:void 0}),Object.defineProperty(this,Pn,{writable:!0,value:void 0}),Object.defineProperty(this,On,{writable:!0,value:void 0}),Object.defineProperty(this,Tn,{writable:!0,value:void 0}),Object.defineProperty(this,xn,{writable:!0,value:void 0}),Object.defineProperty(this,Rn,{writable:!0,value:void 0}),Object.defineProperty(this,Mn,{writable:!0,value:void 0}),Object.defineProperty(this,Dn,{writable:!0,value:void 0}),Object.defineProperty(this,Nn,{writable:!0,value:i(this,Fn)[Fn].bind(this)}),Object.defineProperty(this,Ln,{writable:!0,value:void 0}),this.enablePersonalization=void 0,this.popupCallbacks={},this.popupCurrentWzrkId="",i(this,In)[In]=0,this._isPersonalisationActive=this._isPersonalisationActive.bind(this),this.raiseNotificationClicked=()=>{},i(this,En)[En]=new fi(ci),i(this,Tn)[Tn]=new d(null===(e=s.account)||void 0===e?void 0:e[0],s.region||(null===(t=s.account)||void 0===t?void 0:t[1]),s.targetDomain||(null===(n=s.account)||void 0===n?void 0:n[2]),s.token||(null===(o=s.account)||void 0===o?void 0:o[3])),i(this,Pn)[Pn]=new _e({logger:i(this,En)[En]}),i(this,Ln)[Ln]=s.dismissSpamControl||!1,this.shpfyProxyPath=s.shpfyProxyPath||"",i(this,On)[On]=new Si({logger:i(this,En)[En],isPersonalisationActive:this._isPersonalisationActive}),i(this,xn)[xn]=new xi({logger:i(this,En)[En],account:i(this,Tn)[Tn],device:i(this,Pn)[Pn],session:i(this,On)[On],isPersonalisationActive:this._isPersonalisationActive}),this.enablePersonalization=s.enablePersonalization||!1,this.event=new ze({logger:i(this,En)[En],request:i(this,xn)[xn],isPersonalisationActive:this._isPersonalisationActive},s.event),this.profile=new bt({logger:i(this,En)[En],request:i(this,xn)[xn],account:i(this,Tn)[Tn],isPersonalisationActive:this._isPersonalisationActive},s.profile),this.onUserLogin=new Ot({request:i(this,xn)[xn],account:i(this,Tn)[Tn],session:i(this,On)[On],logger:i(this,En)[En],device:i(this,Pn)[Pn]},s.onUserLogin),this.privacy=new ji({request:i(this,xn)[xn],account:i(this,Tn)[Tn],logger:i(this,En)[En]},s.privacy),this.notifications=new en({logger:i(this,En)[En],request:i(this,xn)[xn],account:i(this,Tn)[Tn]},s.notifications),i(this,Rn)[Rn]=new Cn({logger:i(this,En)[En],request:i(this,xn)[xn],account:i(this,Tn)[Tn],event:this.event}),i(this,An)[An]=new we({logger:i(this,En)[En],request:i(this,xn)[xn],device:i(this,Pn)[Pn],session:i(this,On)[On]}),this.spa=s.spa,this.dismissSpamControl=s.dismissSpamControl,this.user=new ai({isPersonalisationActive:this._isPersonalisationActive}),this.session={getTimeElapsed:()=>i(this,On)[On].getTimeElapsed(),getPageCount:()=>i(this,On)[On].getPageCount()},this.logout=()=>{i(this,En)[En].debug("logout called"),de.setInstantDeleteFlagInK()},this.clear=()=>{this.onUserLogin.clear()},this.getCleverTapID=()=>i(this,Pn)[Pn].getGuid(),this.getAccountID=()=>i(this,Tn)[Tn].id,this.getSCDomain=()=>i(this,Tn)[Tn].finalTargetDomain,this.setLibrary=(e,t)=>{ue.flutterVersion={[e]:t}},this.setSCSDKVersion=e=>{i(this,Tn)[Tn].scSDKVersion=e;const t={};t.af={scv:"sc-sdk-v"+i(this,Tn)[Tn].scSDKVersion};let n=i(this,Tn)[Tn].dataPostURL;n=We(n,"type","page"),n=We(n,"d",Ye(JSON.stringify(t),i(this,En)[En])),i(this,xn)[xn].saveAndFireRequest(n,ue.blockRequest)},Yt()&&(Kt(),Ht(i(this,En)[En])),this.getInboxMessageCount=()=>{const e=Bt();return Object.keys(e).length},this.getInboxMessageUnreadCount=()=>{if(ue.inbox)return ue.inbox.unviewedCounter;i(this,En)[En].debug("No unread messages")},this.getAllInboxMessages=()=>Bt(),this.getUnreadInboxMessages=()=>{if(ue.inbox)return ue.inbox.unviewedMessages;i(this,En)[En].debug("No unread messages")},this.getInboxMessageForId=e=>{const t=Bt();if((null!==e||""!==e)&&t.hasOwnProperty(e))return t[e];i(this,En)[En].error("No message available for message Id "+e)},this.deleteInboxMessage=e=>{const t=Bt();if(null===e&&""===e||!t.hasOwnProperty(e))i(this,En)[En].error("No message available for message Id "+e);else{const i=document.querySelector("ct-web-inbox").shadowRoot.getElementById(e);0===t[e].viewed&&(ue.inbox.unviewedCounter--,delete ue.inbox.unviewedMessages[e],document.getElementById("unviewedBadge").innerText=ue.inbox.unviewedCounter,document.getElementById("unviewedBadge").style.display=ue.inbox.unviewedCounter>0?"flex":"none"),i&&i.remove(),delete t[e],zt(t)}},this.markReadInboxMessage=e=>{const t=ue.inbox.unviewedMessages,n=Bt();if(null===e&&""===e||!t.hasOwnProperty(e))i(this,En)[En].error("No message available for message Id "+e);else{const t=document.querySelector("ct-web-inbox").shadowRoot.getElementById(e);if(null!==t&&(t.shadowRoot.getElementById("unreadMarker").style.display="none"),n[e].viewed=1,document.getElementById("unviewedBadge")){var o=parseInt(document.getElementById("unviewedBadge").innerText)-1;document.getElementById("unviewedBadge").innerText=o,document.getElementById("unviewedBadge").style.display=o>0?"flex":"none"}window.clevertap.renderNotificationViewed({msgId:n[e].wzrk_id,pivotId:n[e].pivotId}),ue.inbox.unviewedCounter--,delete ue.inbox.unviewedMessages[e],zt(n)}},this.markReadInboxMessagesForIds=e=>{if(Array.isArray(e))for(var t=0;t<e.length;t++)this.markReadInboxMessage(e[t])},this.markReadAllInboxMessage=()=>{const e=ue.inbox.unviewedMessages,t=Bt();Object.keys(e).length>0?(Object.keys(e).forEach((e=>{const i=document.querySelector("ct-web-inbox").shadowRoot.getElementById(e);null!==i&&(i.shadowRoot.getElementById("unreadMarker").style.display="none"),t[e].viewed=1,window.clevertap.renderNotificationViewed({msgId:t[e].wzrk_id,pivotId:t[e].wzrk_pivot})})),document.getElementById("unviewedBadge").innerText=0,document.getElementById("unviewedBadge").style.display="none",zt(t),ue.inbox.unviewedCounter=0,ue.inbox.unviewedMessages={}):i(this,En)[En].debug("All messages are already read")},this.toggleInbox=e=>{var t;return null===(t=ue.inbox)||void 0===t?void 0:t.toggleInbox(e)},this.renderNotificationViewed=e=>{a(U,e)},this.renderNotificationClicked=e=>{a(j,e)};const a=(e,t)=>{if(!t||!t.msgId)return;const n={type:"event"};if(n.evtName=e,n.evtData={[L]:t.msgId},t.pivotId&&(n.evtData={...n.evtData,wzrk_pivot:t.pivotId}),t.wzrk_slideNo&&(n.evtData={...n.evtData,wzrk_slideNo:t.wzrk_slideNo}),t.kv&&null!==t.kv&&void 0!==t.kv)for(const e in t.kv)e.startsWith(N)&&(n.evtData={...n.evtData,[e]:t.kv[e]});if(t.msgCTkv&&null!==t.msgCTkv&&void 0!==t.msgCTkv)for(const e in t.msgCTkv)e.startsWith(N)&&(n.evtData={...n.evtData,[e]:t.msgCTkv[e]});i(this,xn)[xn].processEvent(n)};this.setLogLevel=e=>{i(this,En)[En].logLevel=Number(e),3===e?sessionStorage.WZRK_D="":delete sessionStorage.WZRK_D},this.handleIncrementValue=(e,t)=>{this.profile._handleIncrementDecrementValue(e,t,q)},this.handleDecrementValue=(e,t)=>{this.profile._handleIncrementDecrementValue(e,t,"$decr")},this.setMultiValuesForKey=(e,t)=>{Array.isArray(t)?this.profile._handleMultiValueSet(e,t,"$set"):console.error("setMultiValuesForKey should be called with a value of type array")},this.addMultiValueForKey=(e,t)=>{"string"==typeof t||"number"==typeof t?this.profile._handleMultiValueAdd(e,t,B):console.error("addMultiValueForKey should be called with a value of type string or number.")},this.addMultiValuesForKey=(e,t)=>{Array.isArray(t)?this.profile._handleMultiValueAdd(e,t,B):console.error("addMultiValuesForKey should be called with a value of type array.")},this.removeMultiValueForKey=(e,t)=>{"string"==typeof t||"number"==typeof t?this.profile._handleMultiValueRemove(e,t,z):console.error("removeMultiValueForKey should be called with a value of type string or number.")},this.removeMultiValuesForKey=(e,t)=>{Array.isArray(t)?this.profile._handleMultiValueRemove(e,t,z):console.error("removeMultiValuesForKey should be called with a value of type array.")},this.removeValueForKey=e=>{this.profile._handleMultiValueDelete(e,H)};const l=(e,t,n)=>{((e,t,i,n,o)=>{const r=Ke(location.href),s=r.e,a=r.p,l=r.page_type;if(void 0!==s){const r={};r.id=n.id,r.unsubGroups=ue.unsubGroups,ue.updatedCategoryLong&&(r[D]=ue.updatedCategoryLong);let c=n.emailURL;i&&(c=We(c,"fetchGroups",i)),t&&(c=We(c,"encoded",t)),c=We(c,"e",s),c=We(c,"d",Ye(JSON.stringify(r),o)),a&&(c=We(c,"p",a)),"-1"!==e&&(c=We(c,"sub",e)),l&&(ue.globalUnsubscribe=l===A,c=We(c,"page_type",l)),tt.fireRequest(c)}})(e,t,n,i(this,Tn)[Tn],i(this,En)[En])};function c(e){var t=e.coords.latitude,n=e.coords.longitude;ue.location={Latitude:t,Longitude:n},i(this,zn)[zn]({Latitude:t,Longitude:n})}function u(e){switch(e.code){case e.PERMISSION_DENIED:console.log("User denied the request for Geolocation.");break;case e.POSITION_UNAVAILABLE:console.log("Location information is unavailable.");break;case e.TIMEOUT:console.log("The request to get user location timed out.");break;case e.UNKNOWN_ERROR:console.log("An unknown error occurred.")}}this.getLocation=function(e,t){if(e&&"number"!=typeof e||t&&"number"!=typeof t)console.log("Latitude and Longitude must be of number type");else if(e&&t){if(e<=-90||e>90)return void console.log("A vaid latitude must range between -90 and 90");if(t<=-180||t>180)return void console.log("A valid longitude must range between -180 and 180");ue.location={Latitude:e,Longitude:t},i(this,zn)[zn]({Latitude:e,Longitude:t})}else navigator.geolocation?navigator.geolocation.getCurrentPosition(c.bind(this),u):console.log("Geolocation is not supported by this browser.")};const h=i(this,An)[An];h.logout=this.logout,h.clear=this.clear,h.closeIframe=(e,t)=>{dt(e,0,i(this,On)[On].sessionId)},h.enableWebPush=(e,t)=>{this.notifications._enableWebPush(e,t)},h.tr=e=>{ri(e,{device:i(this,Pn)[Pn],session:i(this,On)[On],request:i(this,xn)[xn],logger:i(this,En)[En]})},h.setEnum=e=>{((e,t)=>{if($(e)||te(e))return"$E_"+e;t.error(Me)})(e,i(this,En)[En])},h.is_onloadcalled=()=>1===i(this,In)[In],h.subEmail=e=>{l("1",e)},h.getEmail=(e,t)=>{l("-1",e,t)},h.unSubEmail=e=>{l("0",e)},h.unsubEmailGroups=e=>{ue.unsubGroups=[];const t=document.getElementsByClassName("ct-unsub-group-input-item");for(let e=0;e<t.length;e++){const i=t[e];if(i.name){const e={name:i.name,isUnsubscribed:i.checked};ue.unsubGroups.push(e)}}l("2",e)},h.setSubscriptionGroups=e=>{ue.unsubGroups=e},h.getSubscriptionGroups=()=>ue.unsubGroups,h.changeSubscriptionGroups=(e,t)=>{h.setSubscriptionGroups(t),l("2",e)},h.isGlobalUnsubscribe=()=>ue.globalUnsubscribe,h.setIsGlobalUnsubscribe=e=>{ue.globalUnsubscribe=e},h.setUpdatedCategoryLong=e=>{e[D]&&(ue.updatedCategoryLong=e[D])},window.$CLTP_WR=window.$WZRK_WR=h,(null===(r=s.account)||void 0===r?void 0:r[0].id)&&this.init()}init(e,t,n,o){if(1===i(this,In)[In])return;if((e=>{const t=window.location.search,i=window.opener;if("?ctBuilder"===t)return e.debug("open in visual builder mode"),window.addEventListener("message",Qt,!1),void(i&&i.postMessage("builder","*"));"?ctBuilderPreview"===t&&(window.addEventListener("message",Qt,!1),i&&i.postMessage("preview","*"))})(i(this,En)[En]),de.removeCookie("WZRK_P",window.location.hostname),!i(this,Tn)[Tn].id){if(!e)return void i(this,En)[En].error(Ee);i(this,Tn)[Tn].id=e}i(this,On)[On].cookieName="WZRK_S_"+i(this,Tn)[Tn].id,t&&(i(this,Tn)[Tn].region=t),n&&(i(this,Tn)[Tn].targetDomain=n),o&&(i(this,Tn)[Tn].token=o);const r=location.href,s=Ke(r.toLowerCase());if(void 0!==s.e&&"0"==s.wzrk_ex)return;ue.isPrivacyArrPushed=!0,ue.privacyArray.length>0&&this.privacy.push(ue.privacyArray),i(this,Un)[Un](),this.pageChanged();const a=setInterval((()=>{i(this,Pn)[Pn].gcookie&&(clearInterval(a),i(this,xn)[xn].processBackupEvents())}),3e3);i(this,Mn)[Mn]?document.addEventListener("click",i(this,Nn)[Nn]):document.removeEventListener("click",i(this,Nn)[Nn]),i(this,In)[In]=1}pageChanged(){const e=window.location.href,t=Ke(e.toLowerCase()),n=i(this,On)[On].getSessionCookieObject();let o=void 0===n.p?0:n.p;n.p=++o,i(this,On)[On].setSessionCookieObject(n);let r={},s=(e=>{if(""===e)return"";var t=document.createElement("a");return t.href=e,t.hostname})(document.referrer);if(window.location.hostname!==s){const e=120;""!==s&&(s=s.length>e?s.substring(0,e):s,r.referrer=s);let i=t.utm_source||t.wzrk_source;void 0!==i&&(i=i.length>e?i.substring(0,e):i,r.us=i);let n=t.utm_medium||t.wzrk_medium;void 0!==n&&(n=n.length>e?n.substring(0,e):n,r.um=n);let o=t.utm_campaign||t.wzrk_campaign;if(void 0!==o&&(o=o.length>e?o.substring(0,e):o,r.uc=o),void 0!==t.wzrk_medium){const e=t.wzrk_medium;e.match(/^email$|^social$|^search$/)&&(r.wm=e)}}r=i(this,xn)[xn].addSystemDataToObject(r,void 0),r.cpg=e,r[y]=rt();let a=i(this,Tn)[Tn].dataPostURL;i(this,xn)[xn].addFlags(r),1===parseInt(r.pg)&&i(this,Bn)[Bn](r),a=We(a,"type","page"),a=We(a,"d",Ye(JSON.stringify(r),i(this,En)[En])),i(this,xn)[xn].saveAndFireRequest(a,ue.blockRequest),1===parseInt(r.pg)&&this.event.push(Y,{t:4}),i(this,Dn)[Dn]=e,setTimeout((()=>{o<=3&&i(this,Vn)[Vn](),i(this,qn)[qn]()&&setInterval((()=>{i(this,Vn)[Vn]()}),3e5)}),12e4)}_isPersonalisationActive(){return de._isLocalStorageSupported()&&this.enablePersonalization}set popupCallback(e){this.popupCallbacks[this.popupCurrentWzrkId]=e}setOffline(e){"boolean"==typeof e?(ue.offline=e,e||i(this,xn)[xn].processBackupEvents()):console.error("setOffline should be called with a value of type boolean")}getSDKVersion(){return"web-sdk-v1.8.2"}defineVariable(e,t){return un.define(e,t,i(this,Rn)[Rn])}syncVariables(e,t){if(4===i(this,En)[En].logLevel)return i(this,Rn)[Rn].syncVariables(e,t);{const e="App log level is not set to 4";return i(this,En)[En].error(e),Promise.reject(new Error(e))}}fetchVariables(e){i(this,Rn)[Rn].fetchVariables(e)}addVariablesChangedCallback(e){i(this,Rn)[Rn].addVariablesChangedCallback(e)}addOneTimeVariablesChangedCallback(e){i(this,Rn)[Rn].addOneTimeVariablesChangedCallback(e)}}(window.clevertap);return window.clevertap=window.wizrocket=Zn,Zn}()},307:(e,t,i)=>{e=i.nmd(e);var n="__lodash_hash_undefined__",o=9007199254740991,r="[object Arguments]",s="[object Array]",a="[object Boolean]",l="[object Date]",c="[object Error]",d="[object Function]",u="[object Map]",h="[object Number]",p="[object Object]",g="[object Promise]",f="[object RegExp]",v="[object Set]",b="[object String]",m="[object WeakMap]",y="[object ArrayBuffer]",w="[object DataView]",S=/^\[object .+?Constructor\]$/,_=/^(?:0|[1-9]\d*)$/,C={};C["[object Float32Array]"]=C["[object Float64Array]"]=C["[object Int8Array]"]=C["[object Int16Array]"]=C["[object Int32Array]"]=C["[object Uint8Array]"]=C["[object Uint8ClampedArray]"]=C["[object Uint16Array]"]=C["[object Uint32Array]"]=!0,C[r]=C[s]=C[y]=C[a]=C[w]=C[l]=C[c]=C[d]=C[u]=C[h]=C[p]=C[f]=C[v]=C[b]=C[m]=!1;var k="object"==typeof i.g&&i.g&&i.g.Object===Object&&i.g,E="object"==typeof self&&self&&self.Object===Object&&self,A=k||E||Function("return this")(),I=t&&!t.nodeType&&t,P=I&&e&&!e.nodeType&&e,O=P&&P.exports===I,T=O&&k.process,x=function(){try{return T&&T.binding&&T.binding("util")}catch(e){}}(),R=x&&x.isTypedArray;function M(e,t){for(var i=-1,n=null==e?0:e.length;++i<n;)if(t(e[i],i,e))return!0;return!1}function D(e){var t=-1,i=Array(e.size);return e.forEach((function(e,n){i[++t]=[n,e]})),i}function N(e){var t=-1,i=Array(e.size);return e.forEach((function(e){i[++t]=e})),i}var L,U,j,F=Array.prototype,V=Function.prototype,q=Object.prototype,B=A["__core-js_shared__"],z=V.toString,H=q.hasOwnProperty,K=(L=/[^.]+$/.exec(B&&B.keys&&B.keys.IE_PROTO||""))?"Symbol(src)_1."+L:"",W=q.toString,G=RegExp("^"+z.call(H).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Y=O?A.Buffer:void 0,J=A.Symbol,$=A.Uint8Array,Z=q.propertyIsEnumerable,Q=F.splice,X=J?J.toStringTag:void 0,ee=Object.getOwnPropertySymbols,te=Y?Y.isBuffer:void 0,ie=(U=Object.keys,j=Object,function(e){return U(j(e))}),ne=Pe(A,"DataView"),oe=Pe(A,"Map"),re=Pe(A,"Promise"),se=Pe(A,"Set"),ae=Pe(A,"WeakMap"),le=Pe(Object,"create"),ce=Re(ne),de=Re(oe),ue=Re(re),he=Re(se),pe=Re(ae),ge=J?J.prototype:void 0,fe=ge?ge.valueOf:void 0;function ve(e){var t=-1,i=null==e?0:e.length;for(this.clear();++t<i;){var n=e[t];this.set(n[0],n[1])}}function be(e){var t=-1,i=null==e?0:e.length;for(this.clear();++t<i;){var n=e[t];this.set(n[0],n[1])}}function me(e){var t=-1,i=null==e?0:e.length;for(this.clear();++t<i;){var n=e[t];this.set(n[0],n[1])}}function ye(e){var t=-1,i=null==e?0:e.length;for(this.__data__=new me;++t<i;)this.add(e[t])}function we(e){var t=this.__data__=new be(e);this.size=t.size}function Se(e,t){for(var i=e.length;i--;)if(Me(e[i][0],t))return i;return-1}function _e(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":X&&X in Object(e)?function(e){var t=H.call(e,X),i=e[X];try{e[X]=void 0;var n=!0}catch(e){}var o=W.call(e);return n&&(t?e[X]=i:delete e[X]),o}(e):function(e){return W.call(e)}(e)}function Ce(e){return Ve(e)&&_e(e)==r}function ke(e,t,i,n,o){return e===t||(null==e||null==t||!Ve(e)&&!Ve(t)?e!=e&&t!=t:function(e,t,i,n,o,d){var g=Ne(e),m=Ne(t),S=g?s:Te(e),_=m?s:Te(t),C=(S=S==r?p:S)==p,k=(_=_==r?p:_)==p,E=S==_;if(E&&Le(e)){if(!Le(t))return!1;g=!0,C=!1}if(E&&!C)return d||(d=new we),g||qe(e)?Ee(e,t,i,n,o,d):function(e,t,i,n,o,r,s){switch(i){case w:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case y:return!(e.byteLength!=t.byteLength||!r(new $(e),new $(t)));case a:case l:case h:return Me(+e,+t);case c:return e.name==t.name&&e.message==t.message;case f:case b:return e==t+"";case u:var d=D;case v:var p=1&n;if(d||(d=N),e.size!=t.size&&!p)return!1;var g=s.get(e);if(g)return g==t;n|=2,s.set(e,t);var m=Ee(d(e),d(t),n,o,r,s);return s.delete(e),m;case"[object Symbol]":if(fe)return fe.call(e)==fe.call(t)}return!1}(e,t,S,i,n,o,d);if(!(1&i)){var A=C&&H.call(e,"__wrapped__"),I=k&&H.call(t,"__wrapped__");if(A||I){var P=A?e.value():e,O=I?t.value():t;return d||(d=new we),o(P,O,i,n,d)}}return!!E&&(d||(d=new we),function(e,t,i,n,o,r){var s=1&i,a=Ae(e),l=a.length;if(l!=Ae(t).length&&!s)return!1;for(var c=l;c--;){var d=a[c];if(!(s?d in t:H.call(t,d)))return!1}var u=r.get(e);if(u&&r.get(t))return u==t;var h=!0;r.set(e,t),r.set(t,e);for(var p=s;++c<l;){var g=e[d=a[c]],f=t[d];if(n)var v=s?n(f,g,d,t,e,r):n(g,f,d,e,t,r);if(!(void 0===v?g===f||o(g,f,i,n,r):v)){h=!1;break}p||(p="constructor"==d)}if(h&&!p){var b=e.constructor,m=t.constructor;b==m||!("constructor"in e)||!("constructor"in t)||"function"==typeof b&&b instanceof b&&"function"==typeof m&&m instanceof m||(h=!1)}return r.delete(e),r.delete(t),h}(e,t,i,n,o,d))}(e,t,i,n,ke,o))}function Ee(e,t,i,n,o,r){var s=1&i,a=e.length,l=t.length;if(a!=l&&!(s&&l>a))return!1;var c=r.get(e);if(c&&r.get(t))return c==t;var d=-1,u=!0,h=2&i?new ye:void 0;for(r.set(e,t),r.set(t,e);++d<a;){var p=e[d],g=t[d];if(n)var f=s?n(g,p,d,t,e,r):n(p,g,d,e,t,r);if(void 0!==f){if(f)continue;u=!1;break}if(h){if(!M(t,(function(e,t){if(s=t,!h.has(s)&&(p===e||o(p,e,i,n,r)))return h.push(t);var s}))){u=!1;break}}else if(p!==g&&!o(p,g,i,n,r)){u=!1;break}}return r.delete(e),r.delete(t),u}function Ae(e){return function(e,t,i){var n=t(e);return Ne(e)?n:function(e,t){for(var i=-1,n=t.length,o=e.length;++i<n;)e[o+i]=t[i];return e}(n,i(e))}(e,Be,Oe)}function Ie(e,t){var i,n,o=e.__data__;return("string"==(n=typeof(i=t))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==i:null===i)?o["string"==typeof t?"string":"hash"]:o.map}function Pe(e,t){var i=function(e,t){return null==e?void 0:e[t]}(e,t);return function(e){return!(!Fe(e)||function(e){return!!K&&K in e}(e))&&(Ue(e)?G:S).test(Re(e))}(i)?i:void 0}ve.prototype.clear=function(){this.__data__=le?le(null):{},this.size=0},ve.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},ve.prototype.get=function(e){var t=this.__data__;if(le){var i=t[e];return i===n?void 0:i}return H.call(t,e)?t[e]:void 0},ve.prototype.has=function(e){var t=this.__data__;return le?void 0!==t[e]:H.call(t,e)},ve.prototype.set=function(e,t){var i=this.__data__;return this.size+=this.has(e)?0:1,i[e]=le&&void 0===t?n:t,this},be.prototype.clear=function(){this.__data__=[],this.size=0},be.prototype.delete=function(e){var t=this.__data__,i=Se(t,e);return!(i<0||(i==t.length-1?t.pop():Q.call(t,i,1),--this.size,0))},be.prototype.get=function(e){var t=this.__data__,i=Se(t,e);return i<0?void 0:t[i][1]},be.prototype.has=function(e){return Se(this.__data__,e)>-1},be.prototype.set=function(e,t){var i=this.__data__,n=Se(i,e);return n<0?(++this.size,i.push([e,t])):i[n][1]=t,this},me.prototype.clear=function(){this.size=0,this.__data__={hash:new ve,map:new(oe||be),string:new ve}},me.prototype.delete=function(e){var t=Ie(this,e).delete(e);return this.size-=t?1:0,t},me.prototype.get=function(e){return Ie(this,e).get(e)},me.prototype.has=function(e){return Ie(this,e).has(e)},me.prototype.set=function(e,t){var i=Ie(this,e),n=i.size;return i.set(e,t),this.size+=i.size==n?0:1,this},ye.prototype.add=ye.prototype.push=function(e){return this.__data__.set(e,n),this},ye.prototype.has=function(e){return this.__data__.has(e)},we.prototype.clear=function(){this.__data__=new be,this.size=0},we.prototype.delete=function(e){var t=this.__data__,i=t.delete(e);return this.size=t.size,i},we.prototype.get=function(e){return this.__data__.get(e)},we.prototype.has=function(e){return this.__data__.has(e)},we.prototype.set=function(e,t){var i=this.__data__;if(i instanceof be){var n=i.__data__;if(!oe||n.length<199)return n.push([e,t]),this.size=++i.size,this;i=this.__data__=new me(n)}return i.set(e,t),this.size=i.size,this};var Oe=ee?function(e){return null==e?[]:(e=Object(e),function(t,i){for(var n=-1,o=null==t?0:t.length,r=0,s=[];++n<o;){var a=t[n];l=a,Z.call(e,l)&&(s[r++]=a)}var l;return s}(ee(e)))}:function(){return[]},Te=_e;function xe(e,t){return!!(t=null==t?o:t)&&("number"==typeof e||_.test(e))&&e>-1&&e%1==0&&e<t}function Re(e){if(null!=e){try{return z.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function Me(e,t){return e===t||e!=e&&t!=t}(ne&&Te(new ne(new ArrayBuffer(1)))!=w||oe&&Te(new oe)!=u||re&&Te(re.resolve())!=g||se&&Te(new se)!=v||ae&&Te(new ae)!=m)&&(Te=function(e){var t=_e(e),i=t==p?e.constructor:void 0,n=i?Re(i):"";if(n)switch(n){case ce:return w;case de:return u;case ue:return g;case he:return v;case pe:return m}return t});var De=Ce(function(){return arguments}())?Ce:function(e){return Ve(e)&&H.call(e,"callee")&&!Z.call(e,"callee")},Ne=Array.isArray,Le=te||function(){return!1};function Ue(e){if(!Fe(e))return!1;var t=_e(e);return t==d||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}function je(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=o}function Fe(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Ve(e){return null!=e&&"object"==typeof e}var qe=R?function(e){return function(t){return e(t)}}(R):function(e){return Ve(e)&&je(e.length)&&!!C[_e(e)]};function Be(e){return null!=(t=e)&&je(t.length)&&!Ue(t)?function(e,t){var i=Ne(e),n=!i&&De(e),o=!i&&!n&&Le(e),r=!i&&!n&&!o&&qe(e),s=i||n||o||r,a=s?function(e,t){for(var i=-1,n=Array(e);++i<e;)n[i]=t(i);return n}(e.length,String):[],l=a.length;for(var c in e)!t&&!H.call(e,c)||s&&("length"==c||o&&("offset"==c||"parent"==c)||r&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||xe(c,l))||a.push(c);return a}(e):function(e){if(i=(t=e)&&t.constructor,t!==("function"==typeof i&&i.prototype||q))return ie(e);var t,i,n=[];for(var o in Object(e))H.call(e,o)&&"constructor"!=o&&n.push(o);return n}(e);var t}e.exports=function(e,t){return ke(e,t)}},600:function(e,t,i){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(i(749)),r=function(){function e(){this.argString="",this.argValues={}}return e.prototype.add=function(e,t){if(void 0===t)return this;this.argString&&(this.argString+="&");var i;return i=t instanceof Array?JSON.stringify(t):encodeURIComponent(t),this.argString+="".concat(e,"=").concat(i),this.argValues[e]=t,this},e.prototype.body=function(e){return e?(this._body=e,this):this._body},e.prototype.attachApiKeys=function(e,t){return this.add(o.default.PARAMS.APP_ID,e).add(o.default.PARAMS.CLIENT,o.default.CLIENT).add(o.default.PARAMS.CLIENT_KEY,t)},e.prototype.build=function(){return this.argString},e.prototype.buildDict=function(){return this.argValues},e}();t.default=r},266:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){this.browser=this.searchString(this.getBrowserData(e))||"Unknown Browser",this.version=this.searchVersion(e.navigator.userAgent)||this.searchVersion(e.navigator.appVersion)||"Unknown Version",this.OS=this.searchString(this.getOSData(e))||"Unknown OS"}return e.prototype.searchString=function(e){for(var t=0;t<e.length;t++){var i=e[t].string,n=e[t].prop;if(this.versionSearchString=e[t].versionSearch||e[t].identity,i){if(-1!==i.indexOf(e[t].subString))return e[t].identity}else if(n)return e[t].identity}},e.prototype.searchVersion=function(e){if(e){var t=e.indexOf(this.versionSearchString);if(-1!==t)return parseFloat(e.substring(t+this.versionSearchString.length+1))}},e.prototype.getBrowserData=function(e){return[{string:e.navigator.userAgent,subString:"Chrome",identity:"Chrome"},{string:e.navigator.userAgent,subString:"OmniWeb",identity:"OmniWeb",versionSearch:"OmniWeb/"},{string:e.navigator.userAgent,subString:"CriOS",identity:"Chrome",versionSearch:"CriOS"},{string:e.navigator.userAgent,subString:"FxiOS",identity:"Firefox",versionSearch:"FxiOS"},{string:e.navigator.vendor,subString:"Apple",identity:"Safari",versionSearch:"Version"},{prop:e.opera,identity:"Opera",versionSearch:"Version"},{string:e.navigator.vendor,subString:"iCab",identity:"iCab"},{string:e.navigator.vendor,subString:"KDE",identity:"Konqueror"},{string:e.navigator.userAgent,subString:"Firefox",identity:"Firefox"},{string:e.navigator.vendor,subString:"Camino",identity:"Camino"},{string:e.navigator.userAgent,subString:"Netscape",identity:"Netscape"},{string:e.navigator.userAgent,subString:"MSIE",identity:"Explorer",versionSearch:"MSIE"},{string:e.navigator.userAgent,subString:"Android",identity:"Android Browser",versionSearch:"Version"},{string:e.navigator.userAgent,subString:"Gecko",identity:"Mozilla",versionSearch:"rv"},{string:e.navigator.userAgent,subString:"Mozilla",identity:"Netscape",versionSearch:"Mozilla"}]},e.prototype.getOSData=function(e){return[{string:e.navigator.platform,subString:"Win",identity:"Windows"},{string:e.navigator.platform,subString:"Mac",identity:"Mac OS"},{string:e.navigator.platform,subString:"iPad",identity:"iOS"},{string:e.navigator.userAgent,subString:"iPhone",identity:"iOS"},{string:e.navigator.userAgent,subString:"Android",identity:"Android"},{string:e.navigator.platform,subString:"Linux",identity:"Linux"}]},e}();t.default=i},749:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={METHODS:{START:"start",STOP:"stop",ADVANCE:"advance",TRACK:"track",PAUSE_SESSION:"pauseSession",RESUME_SESSION:"resumeSession",PAUSE_STATE:"pauseState",RESUME_STATE:"resumeState",DOWNLOAD_FILE:"downloadFile",MULTI:"multi",SET_VARS:"setVars",GET_VARS:"getVars",SET_USER_ATTRIBUTES:"setUserAttributes",SET_DEVICE_ATTRIBUTES:"setDeviceAttributes",UPLOAD_FILE:"uploadFile",REGISTER_DEVICE:"registerDevice"},SDK_VERSION:"1.12.0-develop.1",CLIENT:"js",PARAMS:{ACTION:"action",APP_ID:"appId",CLIENT:"client",CLIENT_KEY:"clientKey",CT:"ct",CURRENCY_CODE:"currencyCode",DEVICE_ID:"deviceId",SDK_VERSION:"sdkVersion",USER_ID:"userId",NEW_USER_ID:"newUserId",DEV_MODE:"devMode",VERSION_NAME:"versionName",SYSTEM_NAME:"systemName",SYSTEM_VERSION:"systemVersion",BROWSER_NAME:"browserName",BROWSER_VERSION:"browserVersion",DEVICE_NAME:"deviceName",DEVICE_MODEL:"deviceModel",USER_ATTRIBUTES:"userAttributes",LOCALE:"locale",COUNTRY:"country",REGION:"region",CITY:"city",LOCATION:"location",STATE:"state",INFO:"info",EVENT:"event",VALUE:"value",FILENAME:"filename",TIME:"time",DATA:"data",VARS:"vars",FILE:"file",SIZE:"size",VARIATION:"variation",HASH:"hash",EMAIL:"email",VARIABLES:"vars",ACTION_DEFINITIONS:"actionDefinitions",PARAMS:"params",INCLUDE_DEFAULTS:"includeDefaults",INCLUDE_VARIANT_DEBUG_INFO:"includeVariantDebugInfo",NEWSFEED_MESSAGES:"newsfeedMessages",MESSAGE_ID:"messageId",WEB_PUSH_SUBSCRIPTION:"webPushSubscription"},KEYS:{IS_REGISTERED:"isRegistered",LATEST_VERSION:"latestVersion",SYNC_INBOX:"syncNewsfeed",MESSAGES:"messages",VARS:"vars",VARIANTS:"variants",VARIANT_DEBUG_INFO:"variantDebugInfo",ACTION_DEFINITIONS:"actionDefinitions",TOKEN:"token"},DEFAULT_KEYS:{COUNT:"__leanplum_unsynced",ITEM:"__leanplum_unsynced_",VARIABLES:"__leanplum_variables",VARIANTS:"__leanplum_variants",VARIANT_DEBUG_INFO:"__leanplum_variant_debug_info",ACTION_DEFINITIONS:"__leanplum_action_definitions",HOST_CONFIG:"__leanplum_hosts",INBOX_MESSAGES:"__leanplum_inbox_messages",TOKEN:"__leanplum_token",DEVICE_ID:"__leanplum_device_id",USER_ID:"__leanplum_user_id",SESSION:"__leanplum_session",MESSAGE_OCCURRENCES:"__leanplum_message_occurrences",MESSAGE_CACHE:"__leanplum_message_cache",MIGRATION_STATE:"__leanplum_migration_state",PUSH_SUBSCRIPTION:"__leanplum_push_subscription"},VALUES:{DETECT:"(detect)",DEFAULT_PUSH_ACTION:"Open action"}}},565:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){this.handlers=[]}return e.prototype.on=function(e,t){this.handlers.push({eventName:e,callback:t})},e.prototype.off=function(e,t){this.handlers=this.handlers.filter((function(i){return i.eventName!==e||i.callback!==t}))},e.prototype.emit=function(e,t){this.handlers.forEach((function(i){i.eventName===e&&i.callback(t)}))},e}();t.default=i},157:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){this.startHandlers=[],this.devMode=!1,this.hasStarted=!1,this.startSuccessful=!1,this.variantDebugInfoEnabled=!1}return e.prototype.addStartResponseHandler=function(e){this.startHandlers.push(e),this.hasStarted&&e(this.startSuccessful)},e.prototype.removeStartResponseHandler=function(e){var t=this.startHandlers.indexOf(e);t>=0&&this.startHandlers.splice(t,1)},e.prototype.triggerStartHandlers=function(){for(var e=0;e<this.startHandlers.length;e++)this.startHandlers[e](this.startSuccessful)},e}();t.default=i},876:function(e,t,i){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(i(749)),r=n(i(642)),s=function(){function e(){}return e.setApiPath=function(t){e._lp.setApiPath(t)},e.setEmail=function(){},e.setNetworkTimeout=function(t){e._lp.setNetworkTimeout(t)},e.setAppIdForDevelopmentMode=function(t,i){e._lp.setAppIdForDevelopmentMode(t,i)},e.setAppIdForProductionMode=function(t,i){e._lp.setAppIdForProductionMode(t,i)},e.setSocketHost=function(t){e._lp.setSocketHost(t)},e.setDeviceId=function(t){e._lp.setDeviceId(t)},e.setLocale=function(t){e._lp.setLocale(t)},e.setAppVersion=function(t){e._lp.setAppVersion(t)},e.setDeviceName=function(t){e._lp.setDeviceName(t)},e.setDeviceModel=function(t){e._lp.setDeviceModel(t)},e.setRequestBatching=function(t,i){e._lp.setRequestBatching(t,i)},e.setSystemName=function(t){e._lp.setSystemName(t)},e.setSystemVersion=function(t){e._lp.setSystemVersion(t)},e.setVariables=function(t){e._lp.setVariables(t)},e.setVariantDebugInfoEnabled=function(t){e._lp.setVariantDebugInfoEnabled(t)},e.enableRichInAppMessages=function(t){e._lp.enableRichInAppMessages(t)},e.processMessageEvent=function(t,i){e._lp.processMessageEvent(t,i)},e.getVariantDebugInfo=function(){return e._lp.getVariantDebugInfo()},e.getVariables=function(){return e._lp.getVariables()},e.getVariable=function(){for(var t,i=[],n=0;n<arguments.length;n++)i[n]=arguments[n];return(t=e._lp).getVariable.apply(t,i)},e.getVariants=function(){return e._lp.getVariants()},e.inbox=function(){return e._lp.inbox()},e.addStartResponseHandler=function(t){e._lp.addStartResponseHandler(t)},e.removeStartResponseHandler=function(t){e._lp.removeStartResponseHandler(t)},e.addVariablesChangedHandler=function(t){e._lp.addVariablesChangedHandler(t)},e.removeVariablesChangedHandler=function(t){e._lp.removeVariablesChangedHandler(t)},e.forceContentUpdate=function(t){e._lp.forceContentUpdate(t)},e.useSessionLength=function(t){e._lp.useSessionLength(t)},e.start=function(t,i,n){e._lp.start(t,i,n)},e.startFromCache=function(t,i,n){e._lp.startFromCache(t,i,n)},e.stop=function(){e._lp.stop()},e.pauseSession=function(){e._lp.pauseSession()},e.resumeSession=function(){e._lp.resumeSession()},e.pauseState=function(){e._lp.pauseState()},e.resumeState=function(){e._lp.resumeState()},e.getUserId=function(){return this._lp.getUserId()},e.setUserId=function(t){e.setUserAttributes(t)},e.setUserAttributes=function(t,i){e._lp.setUserAttributes(t,i)},e.track=function(t,i,n,o){e._lp.track(t,i,n,o)},e.trackPurchase=function(t,i,n,o){void 0===o&&(o="Purchase"),e._lp.trackPurchase(t,i,n,o)},e.advanceTo=function(t,i,n){e._lp.advanceTo(t,i,n)},e.isWebPushSupported=function(){return e._lp.isWebPushSupported()},e.isWebPushSubscribed=function(){return e._lp.isWebPushSubscribed()},e.setWebPushOptions=function(t){return e._lp.setWebPushOptions(t)},e.registerForWebPush=function(t){return e._lp.registerForWebPush(t)},e.unregisterFromWebPush=function(){return e._lp.unregisterFromWebPush()},e.clearUserContent=function(){e._lp.clearUserContent()},e.defineAction=function(t){e._lp.defineAction(t)},e.applyQueue=function(t){e._lp.applyQueue(t)},e.on=function(t,i){e._lp.on(t,i)},e.off=function(t,i){e._lp.off(t,i)},e.getFileUrl=function(t){return e._lp.getFileUrl(t)},e.__destroy=function(){this._lp=new r.default(window)},e._lp=new r.default(window),e.VERSION=o.default.SDK_VERSION,e}();t.default=s},234:function(e,t,i){"use strict";var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,i=1,n=arguments.length;i<n;i++)for(var o in t=arguments[i])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},n.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.LeanplumInboxMessage=void 0;var r=o(i(600)),s=o(i(749)),a=o(i(88)),l=function(e){return Object.keys(e).map((function(t){return e[t]}))},c=function(){function e(e,t){this.createRequest=e,this.onAction=t,this.messageMap={},this.changeHandlers=[],this.load()}return e.prototype.downloadMessages=function(){var e=this;this.createRequest("getNewsfeedMessages",void 0,{queued:!0,sendNow:!0,response:function(t){var i=null==t?void 0:t.response[0];i&&i.newsfeedMessages&&(e.messageMap=i.newsfeedMessages,e.triggerChangeHandlers())}})},e.prototype.markAsRead=function(e){var t=this.messageMap[e];if(t&&!t.isRead){t.isRead=!0,this.triggerChangeHandlers();var i=new r.default;i.add("newsfeedMessageId",e),this.createRequest("markNewsfeedMessageAsRead",i,{})}},e.prototype.read=function(e){this.markAsRead(e);var t=this.message(e),i=e.split("##")[0],n=(null==t?void 0:t.openAction())||null;this.onAction(i,n)},e.prototype.remove=function(e){if(this.messageMap[e]){delete this.messageMap[e],this.triggerChangeHandlers();var t=new r.default;t.add("newsfeedMessageId",e),this.createRequest("deleteNewsfeedMessage",t,{})}},e.prototype.onChanged=function(e){var t=this;return this.changeHandlers.push(e),function(){return t.changeHandlers=t.changeHandlers.filter((function(t){return t!==e}))}},e.prototype.triggerChangeHandlers=function(){this.changeHandlers.forEach((function(e){return e()})),this.save()},e.prototype.save=function(){a.default.save(s.default.DEFAULT_KEYS.INBOX_MESSAGES,JSON.stringify(this.messageMap),"session")},e.prototype.load=function(){var e=a.default.get(s.default.DEFAULT_KEYS.INBOX_MESSAGES,"session");try{this.messageMap=JSON.parse(e)||{}}catch(e){this.messageMap={}}},e.prototype.count=function(){return l(this.messageMap).length},e.prototype.unreadCount=function(){return l(this.messageMap).filter((function(e){return!e.isRead})).length},e.prototype.messages=function(e){var t=[];for(var i in this.messageMap){var n=this.messageMap[i];e(n)&&t.push(d.create(i,n))}return t},e.prototype.allMessages=function(){return this.messages((function(){return!0}))},e.prototype.unreadMessages=function(){return this.messages((function(e){return!e.isRead}))},e.prototype.messageIds=function(){return Object.keys(this.messageMap)},e.prototype.message=function(e){var t=this.messageMap[e];return t?d.create(e,t):null},e}();t.default=c;var d=function(){function e(e,t,i,n,o,r,s,a){this._id=e,this._title=t,this._subtitle=i,this._data=n,this._timestamp=o,this._isRead=r,this._imageUrl=s,this._openAction=a}return e.create=function(t,i){var o,r,a,l,c,d,u,h,p,g,f,v=null===(o=i.messageData)||void 0===o?void 0:o.parentCampaignId,b=n(n({},null===(a=null===(r=i.messageData)||void 0===r?void 0:r.vars)||void 0===a?void 0:a[s.default.VALUES.DEFAULT_PUSH_ACTION]),{parentCampaignId:v});return new e(t,null===(c=null===(l=i.messageData)||void 0===l?void 0:l.vars)||void 0===c?void 0:c.Title,null===(u=null===(d=i.messageData)||void 0===d?void 0:d.vars)||void 0===u?void 0:u.Subtitle,null===(p=null===(h=i.messageData)||void 0===h?void 0:h.vars)||void 0===p?void 0:p.Data,i.deliveryTimestamp,i.isRead,null===(f=null===(g=i.messageData)||void 0===g?void 0:g.vars)||void 0===f?void 0:f.Image,b)},e.prototype.id=function(){return this._id},e.prototype.title=function(){return this._title},e.prototype.subtitle=function(){return this._subtitle},e.prototype.data=function(){return this._data},e.prototype.timestamp=function(){return this._timestamp},e.prototype.isRead=function(){return this._isRead},e.prototype.imageUrl=function(){return this._imageUrl},e.prototype.openAction=function(){return this._openAction},e}();t.LeanplumInboxMessage=d},642:function(e,t,i){"use strict";var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,i=1,n=arguments.length;i<n;i++)for(var o in t=arguments[i])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},n.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=o(i(600)),s=o(i(266)),a=o(i(749)),l=o(i(157)),c=o(i(234)),d=o(i(343)),u=o(i(34)),h=o(i(88)),p=o(i(95)),g=o(i(14)),f=o(i(565)),v=o(i(316)),b=i(772),m=i(205),y=o(i(816)),w=a.default.DEFAULT_KEYS.SESSION,S=function(){function e(e){var t=this;this.wnd=e,this._migration=new v.default(this.createRequest.bind(this)),this._events=new f.default,this._internalState=new l.default,this._lpInbox=new c.default(this.createRequest.bind(this),this.onInboxAction.bind(this)),this._lpRequest=new d.default(this._events),this._varCache=new y.default(this.createRequest.bind(this)),this._lpSocket=new u.default(this._varCache,this.createRequest.bind(this),this._lpRequest.getLastResponse.bind(this._lpRequest),this._events),this._pushManager=new p.default(this.createRequest.bind(this)),this._messages=new g.default(this._events,this.createRequest.bind(this),this.getFileUrl.bind(this)),this._browserDetector=new s.default(e),this._events.on("navigationChange",(function(e){var i=!1;t._events.emit("openUrl",{preventDefault:function(){return i=!0},url:e}),i||t.wnd.location.assign(e)})),this._events.on("registerForPush",(function(){return t.registerForWebPush()})),this._events.on("updateDevServerHost",(function(e){return t.setSocketHost(e)})),this._events.on("migrateStateReceived",(function(e){return t._migration.verifyState(e)}))}return e.prototype.setApiPath=function(e){this._lpRequest.apiPath&&(this._lpRequest.apiPath=e)},e.prototype.setNetworkTimeout=function(e){this._lpRequest.setNetworkTimeout(e),this._lpSocket.setNetworkTimeout(e)},e.prototype.setAppIdForDevelopmentMode=function(e,t){this._lpRequest.appId=e,this._lpRequest.clientKey=t,this._internalState.devMode=!0},e.prototype.setAppIdForProductionMode=function(e,t){this._lpRequest.appId=e,this._lpRequest.clientKey=t,this._internalState.devMode=!1},e.prototype.setSocketHost=function(e){this._lpSocket.setSocketHost(e)},e.prototype.setDeviceId=function(e){this._lpRequest.deviceId=e},e.prototype.setLocale=function(e){this._locale=e},e.prototype.setAppVersion=function(e){this._lpRequest.versionName=e},e.prototype.setDeviceName=function(e){this._deviceName=e},e.prototype.setDeviceModel=function(e){this._deviceModel=e},e.prototype.setRequestBatching=function(e,t){this._lpRequest.batchEnabled=e,this._lpRequest.batchCooldown=t},e.prototype.setSystemName=function(e){this._systemName=e},e.prototype.setSystemVersion=function(e){this._systemVersion=e},e.prototype.setVariables=function(e){this._varCache.setVariables(e)},e.prototype.setVariantDebugInfoEnabled=function(e){this._internalState.variantDebugInfoEnabled=e},e.prototype.enableRichInAppMessages=function(e){this._messages.enableRichInAppMessages(e)},e.prototype.processMessageEvent=function(e,t){this._messages.processMessageEvent(e,t)},e.prototype.getVariantDebugInfo=function(){return this._varCache.getVariantDebugInfo()},e.prototype.getVariables=function(){return this._varCache.getVariables()},e.prototype.getVariable=function(){for(var e,t=[],i=0;i<arguments.length;i++)t[i]=arguments[i];return(e=this._varCache).getVariable.apply(e,t)},e.prototype.getVariants=function(){return this._varCache.variants||[]},e.prototype.inbox=function(){return this._lpInbox},e.prototype.on=function(e,t){this._events.on(e,t)},e.prototype.off=function(e,t){this._events.off(e,t)},e.prototype.onInboxAction=function(e,t){var i=this;this._messages.trackMessage(e,{event:"Open"},(function(){return t&&i._messages.onAction(t)}))},e.prototype.defineAction=function(e){this._varCache.registerActionDefinition(n({kind:b.MessageKind.Template},e))},e.prototype.addStartResponseHandler=function(e){this._internalState.addStartResponseHandler(e)},e.prototype.removeStartResponseHandler=function(e){this._internalState.removeStartResponseHandler(e)},e.prototype.addVariablesChangedHandler=function(e){this._varCache.addVariablesChangedHandler(e)},e.prototype.removeVariablesChangedHandler=function(e){this._varCache.removeVariablesChangedHandler(e)},e.prototype.getFileUrl=function(e){return this._lpRequest.getFileUrl(e)},e.prototype.forceContentUpdate=function(e){var t=this,i=(new r.default).add(a.default.PARAMS.INCLUDE_DEFAULTS,!1).add(a.default.PARAMS.INCLUDE_VARIANT_DEBUG_INFO,this._internalState.variantDebugInfoEnabled);this.createRequest(a.default.METHODS.GET_VARS,i,{queued:!1,sendNow:!0,response:function(i){var n=t._lpRequest.getLastResponse(i),o=t._lpRequest.isResponseSuccess(n);o&&(t._varCache.applyDiffs(n[a.default.KEYS.VARS],n[a.default.KEYS.VARIANTS],n[a.default.KEYS.ACTION_DEFINITIONS]),t._varCache.setVariantDebugInfo(n[a.default.KEYS.VARIANT_DEBUG_INFO]),t._events.emit("messagesReceived",n[a.default.KEYS.MESSAGES])),e&&e(o)}})},e.prototype.useSessionLength=function(e){this._sessionLength=e},e.prototype.start=function(e,t,i){var n=this;if("function"==typeof e?(i=e,t={},e=null):"object"==typeof e&&null!=e?(i=t,t=e,e=null):"function"==typeof t&&(i=t,t={}),this.hasActiveSession()&&!this._internalState.devMode)return this.startFromCache(e,t,i);this._migration.getState((function(o){o===m.MigrationState.DUPLICATE?n._ct=n._migration.initCleverTap():o===m.MigrationState.CLEVERTAP&&(n._ct=n._migration.initCleverTap(),n.migratePushToken(),Object.values(a.default.DEFAULT_KEYS).filter((function(e){return![a.default.DEFAULT_KEYS.USER_ID,a.default.DEFAULT_KEYS.DEVICE_ID,a.default.DEFAULT_KEYS.TOKEN,a.default.DEFAULT_KEYS.MIGRATION_STATE].includes(e)})).forEach((function(e){return h.default.remove(e)})),n._messages.cleanup()),n._lpRequest.userId=e,e&&n._migration.identity.setUserId(e),i&&n.addStartResponseHandler(i),n._varCache.onUpdate=function(){n._varCache.triggerVariablesChangedHandlers()};var s=(new r.default).add(a.default.PARAMS.USER_ATTRIBUTES,JSON.stringify(t)).add(a.default.PARAMS.COUNTRY,a.default.VALUES.DETECT).add(a.default.PARAMS.REGION,a.default.VALUES.DETECT).add(a.default.PARAMS.CITY,a.default.VALUES.DETECT).add(a.default.PARAMS.LOCATION,a.default.VALUES.DETECT).add(a.default.PARAMS.SYSTEM_NAME,n._systemName||n._browserDetector.OS).add(a.default.PARAMS.SYSTEM_VERSION,(n._systemVersion||"").toString()).add(a.default.PARAMS.BROWSER_NAME,n._browserDetector.browser).add(a.default.PARAMS.BROWSER_VERSION,n._browserDetector.version.toString()).add(a.default.PARAMS.LOCALE,n._locale||a.default.VALUES.DETECT).add(a.default.PARAMS.DEVICE_NAME,n._deviceName||"".concat(n._browserDetector.browser," ").concat(n._browserDetector.version)).add(a.default.PARAMS.DEVICE_MODEL,n._deviceModel||"Web Browser").add(a.default.PARAMS.NEWSFEED_MESSAGES,n._lpInbox.messageIds()).add(a.default.PARAMS.INCLUDE_DEFAULTS,!1).add(a.default.PARAMS.INCLUDE_VARIANT_DEBUG_INFO,n._internalState.variantDebugInfoEnabled);n.createRequest(a.default.METHODS.START,s,{queued:!0,sendNow:!0,response:function(e){n._internalState.hasStarted=!0;var t=n._lpRequest.getLastResponse(e),i=n._lpRequest.isResponseSuccess(t);if(n._internalState.startSuccessful=i,i){n.updateSession();var o=t[a.default.KEYS.MESSAGES];if(t.actionDefinitions&&(o.actionDefinitions=t.actionDefinitions),n._events.emit("messagesReceived",o),t[a.default.KEYS.SYNC_INBOX]&&n._lpInbox.downloadMessages(),n._internalState.devMode){var r=t[a.default.KEYS.LATEST_VERSION];r&&console.log("A newer version of the Leanplum SDK, ".concat(r,', is available.\n  Use "npm update leanplum-sdk" or go to https://docs.leanplum.com/reference#javascript-setup to download it.')),n.connectSocket()}n._varCache.applyDiffs(t[a.default.KEYS.VARS],t[a.default.KEYS.VARIANTS],t[a.default.KEYS.ACTION_DEFINITIONS]),n._varCache.setVariantDebugInfo(t[a.default.KEYS.VARIANT_DEBUG_INFO]),n._varCache.token=t[a.default.KEYS.TOKEN]}else n._varCache.loadDiffs();n._events.emit("start",{success:i}),n._internalState.triggerStartHandlers()}})}))},e.prototype.startFromCache=function(e,t,i){var n=this;"function"==typeof e?(i=e,t={},e=null):"object"==typeof e&&null!=e?(i=t,t=e,e=null):"function"==typeof t&&(i=t,t={}),this.updateSession(),this._lpRequest.userId=e,i&&this.addStartResponseHandler(i),this._internalState.hasStarted=!0,this._internalState.startSuccessful=!0,this._migration.getState((function(e){e!==m.MigrationState.DUPLICATE&&e!==m.MigrationState.CLEVERTAP||(n._ct=n._migration.initCleverTap())})),this._internalState.devMode&&this.connectSocket(),this._varCache.loadDiffs(),this._events.emit("resume"),this._internalState.triggerStartHandlers()},e.prototype.stop=function(){this.createRequest(a.default.METHODS.STOP,void 0,{sendNow:!0,queued:!0,response:function(){h.default.remove(w)}})},e.prototype.pauseSession=function(){this.createRequest(a.default.METHODS.PAUSE_SESSION,void 0,{sendNow:!0,queued:!0})},e.prototype.resumeSession=function(){this._events.emit("resume"),this.createRequest(a.default.METHODS.RESUME_SESSION,void 0,{sendNow:!0,queued:!0})},e.prototype.pauseState=function(){this.createRequest(a.default.METHODS.PAUSE_STATE,void 0,{queued:!0})},e.prototype.resumeState=function(){this.createRequest(a.default.METHODS.RESUME_STATE,void 0,{queued:!0})},e.prototype.getUserId=function(){return this._lpRequest.userId},e.prototype.setUserId=function(e){this.setUserAttributes(e)},e.prototype.setUserAttributes=function(e,t){if(void 0===t)if("object"==typeof e)t=e,e=void 0;else if("string"!=typeof e)return void console.log("Leanplum: setUserAttributes expects a string or an object");var i=(new r.default).add(a.default.PARAMS.USER_ATTRIBUTES,t?JSON.stringify(t):void 0).add(a.default.PARAMS.NEW_USER_ID,e);this._events.emit("setUserAttribute",t),this.createRequest(a.default.METHODS.SET_USER_ATTRIBUTES,i,{queued:!0}),e&&(this._lpRequest.userId=e,h.default.save(a.default.DEFAULT_KEYS.USER_ID,this._lpRequest.userId))},e.prototype.track=function(e,t,i,n){var o=this;"object"==typeof t&&null!=t?(n=t,i=void 0,t=void 0):"string"==typeof t?(n=i,i=t,t=void 0):"object"==typeof i&&null!=i&&(n=i,i=void 0);var s=(new r.default).add(a.default.PARAMS.EVENT,e).add(a.default.PARAMS.VALUE,t||0).add(a.default.PARAMS.INFO,i).add(a.default.PARAMS.PARAMS,JSON.stringify(n));this._events.emit("track",{eventName:e,params:n}),this.createRequest(a.default.METHODS.TRACK,s,{queued:!0,response:function(){return o.updateSession()}})},e.prototype.trackPurchase=function(e,t,i,n){void 0===n&&(n="Purchase");var o=(new r.default).add(a.default.PARAMS.EVENT,n).add(a.default.PARAMS.VALUE,e||0).add(a.default.PARAMS.PARAMS,JSON.stringify(i));t&&o.add(a.default.PARAMS.CURRENCY_CODE,t),this._events.emit("track",{eventName:n}),this.createRequest(a.default.METHODS.TRACK,o,{queued:!0,isPurchase:!0})},e.prototype.advanceTo=function(e,t,i){"object"==typeof t&&null!=t&&(i=t,t=void 0);var n=(new r.default).add(a.default.PARAMS.STATE,e).add(a.default.PARAMS.INFO,t).add(a.default.PARAMS.PARAMS,JSON.stringify(i));this._events.emit("advanceState",{state:e,params:i}),this.createRequest(a.default.METHODS.ADVANCE,n,{queued:!0})},e.prototype.isWebPushSupported=function(){return this._pushManager.isWebPushSupported()},e.prototype.isWebPushSubscribed=function(){var e,t=(null===(e=this._webPushOptions)||void 0===e?void 0:e.clientUrl)||"";return this._pushManager.isWebPushSubscribed(t)},e.prototype.setWebPushOptions=function(e){this._webPushOptions=n({},e)},e.prototype.registerForWebPush=function(e){var t=this;if(this._pushManager.isWebPushSupported()){var i=this._webPushOptions||{},n=e||i.serviceWorkerUrl,o=i&&i.scope?{scope:i.scope}:null;return this._pushManager.register(n,o,(function(e){return e?Promise.resolve(!0):t._pushManager.subscribeUser()}))}return Promise.reject("Leanplum: WebPush is not supported.")},e.prototype.unregisterFromWebPush=function(){var e,t=(null===(e=this._webPushOptions)||void 0===e?void 0:e.clientUrl)||"";return this._pushManager.unsubscribeUser(t)},e.prototype.clearUserContent=function(){this._varCache.clearUserContent()},e.prototype.applyQueue=function(e){var t=this;e.forEach((function(e){return t[e.name].apply(t,e.args)}))},e.prototype.createRequest=function(e,t,i){void 0===i&&(i={}),this._migration.duplicateRequest(e,t,i)||this._lpRequest.request(e,t,n({devMode:this._internalState.devMode},i))},e.prototype.connectSocket=function(){this._lpSocket.connect({appId:this._lpRequest.appId,deviceId:this._lpRequest.deviceId})},e.prototype.hasActiveSession=function(){if(!this._sessionLength)return!1;var e=Date.now(),t=parseInt(h.default.get(w));return!isNaN(t)&&e-t<1e3*this._sessionLength},e.prototype.updateSession=function(){h.default.save(w,String(Date.now()))},e.prototype.migratePushToken=function(){var e=this;h.default.get(a.default.DEFAULT_KEYS.PUSH_SUBSCRIPTION)&&this.isWebPushSubscribed().then((function(t){var i;if(t){e._pushManager.unsubscribeUser();var o=null===(i=e._webPushOptions)||void 0===i?void 0:i.serviceWorkerUrl,r=o?{serviceWorkerPath:o}:{};e._ct&&e._ct.notifications.push(n({titleText:"",bodyText:"",okButtonText:"",rejectButtonText:""},r))}}))},e}();t.default=S},343:function(e,t,i){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(i(600)),r=n(i(749)),s=n(i(88)),a=n(i(967)),l=function(){function e(e,t){void 0===t&&(t=new a.default),this.events=e,this.network=t,this.cooldownTimeout=null,this.lastRequestTime=void 0,this.userIdValue=void 0,this.apiPath="https://api.leanplum.com/api",this.batchCooldown=5,this.batchEnabled=!0,this.loadHostConfig()}return Object.defineProperty(e.prototype,"userId",{get:function(){var e,t;return null!==(t=null!==(e=this.userIdValue)&&void 0!==e?e:this.loadLocal(r.default.DEFAULT_KEYS.USER_ID))&&void 0!==t?t:this.deviceId},set:function(e){this.userIdValue=e},enumerable:!1,configurable:!0}),e.prototype.request=function(e,t,i){var n=this;if(void 0===i&&(i={}),i=i||{},t=t||new o.default,this.deviceId||(this.deviceId=this.loadLocal(r.default.DEFAULT_KEYS.DEVICE_ID)),!this.deviceId){for(var s="",a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",l=0;l<16;l++)s+=a.charAt(Math.floor(Math.random()*a.length));this.deviceId=s,this.saveLocal(r.default.DEFAULT_KEYS.DEVICE_ID,s)}this.saveLocal(r.default.DEFAULT_KEYS.USER_ID,this.userId);var c=t.attachApiKeys(this.appId,this.clientKey).add(r.default.PARAMS.SDK_VERSION,r.default.SDK_VERSION).add(r.default.PARAMS.DEVICE_ID,this.deviceId).add(r.default.PARAMS.USER_ID,this.userId).add(r.default.PARAMS.ACTION,e).add(r.default.PARAMS.VERSION_NAME,this.versionName).add(r.default.PARAMS.DEV_MODE,i.devMode).add(r.default.PARAMS.TIME,((new Date).getTime()/1e3).toString()),d=i.success||i.response,u=i.error||i.response;if(!this.appId||!this.clientKey){var h="Leanplum App ID and client key are not set. Make sure you are calling setAppIdForDevelopmentMode or setAppIdForProductionMode before issuing API calls.";return console.error(h),void(u&&u(h))}if(t.body())this.sendRequest("?".concat(c.build()),t.body(),d,u,i.queued);else{var p=i.devMode||i.sendNow||!this.batchEnabled,g=function(){var e=n.popUnsentRequests();if(e.length>0){var t=JSON.stringify({data:e}),s=(new o.default).attachApiKeys(n.appId,n.clientKey).add(r.default.PARAMS.SDK_VERSION,r.default.SDK_VERSION).add(r.default.PARAMS.ACTION,r.default.METHODS.MULTI).add(r.default.PARAMS.TIME,((new Date).getTime()/1e3).toString().toString()).build();n.sendRequest("?".concat(s),t,d,u,i.queued)}};if(!p&&this.batchCooldown){var f=(new Date).getTime()/1e3;!this.lastRequestTime||f-this.lastRequestTime>=this.batchCooldown?(p=!0,this.lastRequestTime=f):this.cooldownTimeout||(this.cooldownTimeout=setTimeout((function(){n.cooldownTimeout=null,n.lastRequestTime=(new Date).getTime()/1e3,g()}),1e3*(this.batchCooldown-(f-this.lastRequestTime))))}this.saveRequestForLater(c.buildDict()),p&&g()}},e.prototype.getFileUrl=function(e){if(!e)return"";if(/^https?:/.test(e))return e;var t=(new o.default).attachApiKeys(this.appId,this.clientKey).add(r.default.PARAMS.SDK_VERSION,r.default.SDK_VERSION).add(r.default.PARAMS.ACTION,"downloadFile").add("filename",e);return"".concat(this.apiPath,"?").concat(t.build())},e.prototype.setNetworkTimeout=function(e){this.network.setNetworkTimeout(e)},e.prototype.getLastResponse=function(e){var t,i,n,o=null!==(i=null===(t=null==e?void 0:e.response)||void 0===t?void 0:t.length)&&void 0!==i?i:0;return o>0?null===(n=null==e?void 0:e.response)||void 0===n?void 0:n[o-1]:null},e.prototype.getFirstResponse=function(e){var t,i,n;return(null!==(i=null===(t=null==e?void 0:e.response)||void 0===t?void 0:t.length)&&void 0!==i?i:0)>0?null===(n=null==e?void 0:e.response)||void 0===n?void 0:n[0]:null},e.prototype.isResponseSuccess=function(e){return Boolean(null==e?void 0:e.success)},e.prototype.saveRequestForLater=function(e){var t=this.loadLocal(r.default.DEFAULT_KEYS.COUNT)||0,i=r.default.DEFAULT_KEYS.ITEM+t;this.saveLocal(i,JSON.stringify(e)),t++,this.saveLocal(r.default.DEFAULT_KEYS.COUNT,t)},e.prototype.sendRequest=function(e,t,i,n,o){var s=this;this.network.ajax("POST","".concat(this.apiPath).concat(e),t,(function(a){var l,c=s.getFirstResponse(a),d=(null===(l=a.migrateState)||void 0===l?void 0:l.sha256)||c.sha256;if(/\bgetMigrateState\b/.test(t)||s.events.emit("migrateStateReceived",d),!c.success&&c.apiHost){var u=c.apiHost,h=c.apiPath,p=c.devServerHost;s.saveLocal(r.default.DEFAULT_KEYS.HOST_CONFIG,JSON.stringify({apiHost:u,apiPath:h,devServerHost:p})),s.apiPath="https://".concat(u,"/").concat(h),s.sendRequest(e,t,i,n,o),s.events.emit("updateDevServerHost",p)}else i&&i(a)}),n,o)},e.prototype.popUnsentRequests=function(){var e=[],t=this.loadLocal(r.default.DEFAULT_KEYS.COUNT)||0;this.removeLocal(r.default.DEFAULT_KEYS.COUNT);for(var i=0;i<t;i++){var n=r.default.DEFAULT_KEYS.ITEM+i;try{e.push(JSON.parse(this.loadLocal(n)))}catch(e){}this.removeLocal(n)}return e},e.prototype.loadHostConfig=function(){var e=JSON.parse(this.loadLocal(r.default.DEFAULT_KEYS.HOST_CONFIG)||"null");if(e){var t=e.apiHost,i=e.apiPath,n=e.devServerHost;this.apiPath="https://".concat(t,"/").concat(i),this.events.emit("updateDevServerHost",n)}},e.prototype.loadLocal=function(e){return s.default.get(e)},e.prototype.saveLocal=function(e,t){s.default.save(e,t)},e.prototype.removeLocal=function(e){s.default.remove(e)},e}();t.default=l},34:function(e,t,i){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(i(307)),r=n(i(600)),s=n(i(749)),a=n(i(897)),l=function(){function e(e,t,i,n){this.cache=e,this.createRequest=t,this.getLastResponse=i,this.events=n,this.networkTimeoutSeconds=10,this.socketClient=null,this.socketHost="dev.leanplum.com",this.auth=null}return e.prototype.connect=function(e){var t=this;if(WebSocket){this.auth=e;var i=!1;this.socketClient=new a.default,this.socketClient.setNetworkTimeout(this.networkTimeoutSeconds),this.socketClient.onopen=function(){var n;i||(console.log("Leanplum: Connected to development server."),t.socketClient.send("auth",((n={})[s.default.PARAMS.APP_ID]=e.appId,n[s.default.PARAMS.DEVICE_ID]=e.deviceId,n)),i=!0)},this.socketClient.onerror=function(e){console.log("Leanplum: Socket error",e)},this.socketClient.onmessage=this.onMessageReceived.bind(this),this.socketClient.onclose=function(){console.log("Leanplum: Disconnected from development server."),i=!1},this.socketClient.connect(this.socketHost),setInterval((function(){t.socketClient.connected||t.socketClient.connecting||t.socketClient.connect(t.socketHost)}),5e3)}else console.log("Your browser doesn't support WebSockets.")},e.prototype.setSocketHost=function(e){this.socketHost=e,this.socketClient.connected&&(this.socketClient.disconnect(),this.connect(this.auth))},e.prototype.setNetworkTimeout=function(e){var t;this.networkTimeoutSeconds=e,null===(t=this.socketClient)||void 0===t||t.setNetworkTimeout(e)},e.prototype.onMessageReceived=function(e,t){var i=this;if("updateVars"===e){var n=(new r.default).add(s.default.PARAMS.INCLUDE_DEFAULTS,!1);this.createRequest(s.default.METHODS.GET_VARS,n,{queued:!1,sendNow:!0,response:function(e){var t=i.getLastResponse(e),n=t[s.default.KEYS.VARS],r=t[s.default.KEYS.VARIANTS],a=t[s.default.KEYS.ACTION_DEFINITIONS];(0,o.default)(n,i.cache.diffs)||i.cache.applyDiffs(n,r,a)}})}else if("getVariables"===e)this.cache.sendVariables(),this.socketClient.send("getContentResponse",{updated:!0});else if("getActions"===e){var a=this.cache.sendActions();this.socketClient.send("getContentResponse",{updated:a})}else if("registerDevice"===e){var l=t[0];alert("Your device has been registered to ".concat(l.email,"."))}else"trigger"===e&&(l=t[0],this.events.emit("previewRequest",l))},e}();t.default=l},14:function(e,t,i){"use strict";var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,i=1,n=arguments.length;i<n;i++)for(var o in t=arguments[i])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},n.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=o(i(749)),s=o(i(600)),a=o(i(967)),l=o(i(307)),c=o(i(88)),d=o(i(375)),u=function(){function e(){this.session={},this.triggers={},this.occurrences={}}return e.prototype.recordOccurrence=function(e){var t=(this.session[e]||0)+1;this.session[e]=t;var i=this.occurrences[e]||[];i.push(Date.now()),this.occurrences[e]=i,this.save()},e.prototype.recordTriggerOccurrence=function(e){var t=this.triggers[e]||[];return t.push(Date.now()),this.triggers[e]=t,this.save(),t.length},e.prototype.getSessionOccurranceCount=function(e){return this.session[e]||0},e.prototype.getOccurrences=function(e){return this.occurrences[e]||[]},e.prototype.clearSession=function(){this.session={}},e.prototype.load=function(){var e=c.default.get(r.default.DEFAULT_KEYS.MESSAGE_OCCURRENCES);if(e){var t=h(e);t&&(this.session=t.session,this.triggers=t.triggers,this.occurrences=t.occurrences)}},e.prototype.save=function(){var e=r.default.DEFAULT_KEYS.MESSAGE_OCCURRENCES;c.default.save(e,JSON.stringify({session:this.session,triggers:this.triggers,occurrences:this.occurrences}))},e}(),h=function(e){try{return JSON.parse(e)}catch(e){return}},p=function(){function e(e,t,i){var n=this;this.events=e,this.createRequest=t,this.getFileUrl=i,this._messageCache={},this.occurrenceTracker=new u,this._showRichIAM=!1,e.on("previewRequest",this.onMessagePreview.bind(this)),e.on("messagesReceived",this.onMessagesReceived.bind(this)),e.on("start",(function(){n.occurrenceTracker.load(),n.occurrenceTracker.clearSession(),n.onTrigger({trigger:"start"})})),e.on("resume",(function(){var e=r.default.DEFAULT_KEYS.MESSAGE_CACHE,t=h(c.default.get(e));n._messageCache=t||n._messageCache,n.occurrenceTracker.load(),n.onTrigger({trigger:"resume"})})),e.on("track",(function(e){n.onTrigger({trigger:"event",eventName:e.eventName,params:e.params||{}})})),e.on("advanceState",(function(e){return n.onTrigger({trigger:"state",state:e.state,params:e.params||{}})})),e.on("setUserAttribute",(function(e){return n.onTrigger({trigger:"userAttribute",attributes:e})}))}return e.prototype.cleanup=function(){c.default.remove(r.default.DEFAULT_KEYS.MESSAGE_CACHE),this._messageCache={},this.onTrigger=function(){}},e.prototype.enableRichInAppMessages=function(e){this._showRichIAM=e},e.prototype.onTrigger=function(e){var t=this,i=this.getMessages();Object.keys(i).filter((function(n){return t.shouldShowMessage(n,i[n],e)})).slice(0,1).forEach((function(e){return t.showMessage(e,i[e])}))},e.prototype.onMessagePreview=function(e){var t=e.action,i={track:function(t){var i=t?"event '".concat(t,"'"):"impression";console.log("Tracking ".concat(i," for ").concat(e.messageId))},runActionNamed:function(e){return console.log("Running untracked action '".concat(e,"'"))},runTrackedActionNamed:function(e){return console.log("Running tracked action '".concat(e,"'"))}};this.handleMessage({isPreview:!0,message:this.addDefaults(n({messageId:e.messageId},t)),context:i})},e.prototype.onMessagesReceived=function(e){var t=e||{};this._messageCache=t,c.default.save(r.default.DEFAULT_KEYS.MESSAGE_CACHE,JSON.stringify(t))},e.prototype.shouldShowMessage=function(e,t,i){var n=Date.now(),o=this.matchesTrigger(t.whenTriggers,i),r=this.matchesTrigger(t.unlessTriggers,i);if(!o||r)return!1;var s=this.occurrenceTracker.recordTriggerOccurrence(e);return!!this.matchesLimits(e,t.whenLimits,s)&&!(t.startTime&&t.endTime&&(n<t.startTime||t.endTime<n))},e.prototype.showMessage=function(e,t){var i=this,o=this.addDefaults(n({},t.vars)),r={track:function(t,n,o,r){i.occurrenceTracker.recordOccurrence(e),i.trackMessage(e,{event:t,value:n,info:o,params:r})},runActionNamed:function(t){return i.onAction(o[t],e)},runTrackedActionNamed:function(t){var n=t.replace(/ action$/,"");i.trackMessage(e,{event:n},(function(){return i.onAction(o[t],e)}))}};this.handleMessage({context:r,message:n({messageId:e},o)})},e.prototype.processMessageEvent=function(e,t){var i=document.getElementById("lp-message-".concat(e));if(i){var n=t.replace(/^http:\/\/leanplum\//,"").split("?"),o=n[0],r=n[1],s=(void 0===r?"":r).split("&").reduce((function(e,t){var i=t.split("="),n=i[0],o=i[1];return e[n]=decodeURIComponent(o),e}),{}),a=i.metadata,l=a.message,c=a.context;switch(o){case"loadFinished":if(i.style.visibility="visible",i.style.left="0",l["HTML Height"]>0){var d=l["HTML Width"];i.style.height="".concat(l["HTML Height"],"px"),i.style.width=d,i.style.left="calc((100% - ".concat(d,") / 2)");var u=l["HTML Align"].toLowerCase(),p="top"===u?"bottom":"top";i.style[u]="0",i.style[p]=""}else i.style.top="0";i.contentWindow.focus(),c.track();break;case"track":c.track(s.event,parseFloat(s.value),s.info,h(s.parameters));break;case"runAction":case"runTrackedAction":c["".concat(o,"Named")](s.action);case"close":i.metadata=null,i.parentNode.removeChild(i)}}else console.log("message closed, skipping event processing")},e.prototype.handleMessage=function(e){var t=this;if(this._showRichIAM&&"HTML"===e.message.__name__){this.resolveFiles(e.message);var i=e.message.Template||"";(new a.default).ajax("get",i.replace("-10.html","-11.html"),"",(function(i){return t.renderRichInAppMessage(i,e)}),(function(){}),!1,!0)}else this.events.emit("showMessage",this.resolveFields(e))},e.prototype.renderRichInAppMessage=function(e,t){var i=t.message.messageId,n=JSON.stringify(t.message),o=document.createElement("iframe");o.setAttribute("id","lp-message-".concat(i)),o.setAttribute("title","Popup"),o.setAttribute("aria-modal","true"),o.style.cssText=["border-width: 0","position: fixed","top: -100%","left: -100%","width: 100%","height: 100%","visibility: hidden","z-index: 100000"].join(";"),document.body.insertBefore(o,document.body.firstChild),o.metadata=t,o.contentWindow.messageId=i;var r=e.replace("##Vars##",n).replace("<body>","<body><script>window.messageId='".concat(i,"'<\/script>"));if("srcdoc"in o)o.srcdoc=r;else{var s=o.contentWindow.document;s.open(),s.write(r),s.close()}},e.prototype.trackMessage=function(e,t,i){void 0===t&&(t={event:null}),void 0===i&&(i=function(){});var n=(new s.default).add(r.default.PARAMS.MESSAGE_ID,e),o=function(e){return void 0!==e};t.event&&n.add(r.default.PARAMS.EVENT,t.event),o(t.value)&&n.add(r.default.PARAMS.VALUE,t.value||0),o(t.info)&&n.add(r.default.PARAMS.INFO,t.info),o(t.params)&&n.add(r.default.PARAMS.PARAMS,JSON.stringify(t.params)),this.createRequest(r.default.METHODS.TRACK,n,{queued:!0,sendNow:!0,response:i})},e.prototype.onAction=function(e,t){var i=this;if(void 0===t&&(t=""),e){var n=this._messageCache;if("Chain to Existing Message"!==e.__name__){var o=function(){var n=e.__name__;"Open URL"===e.__name__?i.events.emit("navigationChange",e.URL):"Register For Push"===e.__name__?i.events.emit("registerForPush"):n&&i.showMessage(t,{messageId:t,action:n,vars:e})},r=this.messageIdFromAction(e);r?this.trackMessage(r,{event:null},o):o()}else{var s=e["Chained message"],a=n[s];"Open URL"===a.action?this.trackMessage(s,{event:"View"},(function(){return i.onAction(a.vars,s)})):"Register For Push"===a.action?this.events.emit("registerForPush"):this.showMessage(s,a)}}},e.prototype.getMessages=function(){return this._messageCache||{}},e.prototype.addDefaults=function(e){var t=this,i=(this.getMessages().actionDefinitions||{})[e.__name__],o=null==i?void 0:i.kinds;if(!i)return e;var r=function(e,i,n){void 0===n&&(n="");for(var s=0,a=Object.keys(i);s<a.length;s++){var l=a[s],c=i[l];"object"==typeof c?e[l]=r(e[l]||{},c,"".concat(n).concat(l,".")):void 0===e[l]&&(e[l]=c),"FILE"===o["".concat(n).concat(l)]&&(e[l]=t.getFileUrl(e[l]))}return e};return r(n({},e),i.values)},e.prototype.resolveFiles=function(e){var t=/^__file__/;for(var i in e)t.test(i)?e[i.replace(t,"")]=this.getFileUrl(e[i]):"object"==typeof e[i]&&(e[i]=this.resolveFiles(e[i]));return e},e.prototype.resolveFields=function(e){var t=/\bcolor/i,i=/^__file__/;for(var n in e)i.test(n)?e[n.replace(i,"")+" URL"]=this.getFileUrl(e[n]):t.test(n)?e[n]=d.default.decodeColor(e[n]):"object"==typeof e[n]&&(e[n]=this.resolveFields(e[n]));return e},e.prototype.messageIdFromAction=function(e){var t=this._messageCache,i=n({},e);delete i.parentCampaignId;for(var o=0,r=Object.keys(t);o<r.length;o++){var s=r[o],a=t[s];if(a.parentCampaignId===e.parentCampaignId&&(0,l.default)(a.vars,i))return s}},e.prototype.matchesTrigger=function(e,t){if(!e)return!1;var i=function(e,t){return void 0===t&&(t=""),0===e.toString().localeCompare(t.toString(),void 0,{sensitivity:"accent"})},n=function(e,t,n){var o=e===n.noun;if("triggers"===n.verb)return o;if("triggersWithParameter"===n.verb){var r=n.objects,s=r[0],a=r[1],l=s in t&&i(a,t[s]);return o&&l}};return e.children.some((function(e){var o=e.subject;switch(t.trigger){case"start":return"start"===o||"resume"===o;case"resume":return"resume"===o;case"event":return"event"===o&&n(t.eventName,t.params,e);case"userAttribute":if("userAttribute"!==o)return!1;var r=e.noun in t.attributes;if("changes"===e.verb)return r;if("changesTo"===e.verb){if(!r)return!1;var s=t.attributes[e.noun];return e.objects.some((function(e){return null===e&&null===s||e&&s&&i(e,s)}))}break;case"state":return"state"===o&&n(t.state,t.params,e)}return!1}))},e.prototype.matchesLimits=function(e,t,i){var n=this;return!t||t.children.every((function(t){var o=t.subject,r=t.verb,s=parseInt(t.noun.toString());if("times"===o){if("limitSession"===r)return n.occurrenceTracker.getSessionOccurranceCount(e)+1===s;if("limitUser"===r)return(a=n.occurrenceTracker.getOccurrences(e).length)+1<=s;var a,l=parseInt(t.objects[0].toString())||1,c=function(e){switch(e){case"limitSecond":return 1e3;case"limitMinute":return 6e4;case"limitHour":return 36e5;case"limitDay":return 864e5}}(r)*l,d=(a=n.occurrenceTracker.getOccurrences(e)).length;return d<s||a.slice(d-s,d)[0]<Date.now()-c}return"onNthOccurrence"===o?i===s:"everyNthOccurrence"===o&&i%s==0}))},e}();t.default=p},316:function(e,t,i){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.IdentityManager=t.IdentityState=void 0;var o,r=n(i(739)),s=i(205),a=n(i(88)),l=n(i(749)),c=n(i(600)),d=function(){},u=function(e){switch(null==e?void 0:e.sdk){case"lp":return s.MigrationState.LEANPLUM;case"lp+ct":return s.MigrationState.DUPLICATE;case"ct":return s.MigrationState.CLEVERTAP;default:return s.MigrationState.UNKNOWN}},h=function(){function e(e){var t;this.createRequest=e,this.response=null,this._fetching=null;var i=a.default.get(l.default.DEFAULT_KEYS.MIGRATION_STATE),n=a.default.get(l.default.DEFAULT_KEYS.DEVICE_ID),o=null!==(t=a.default.get(l.default.DEFAULT_KEYS.USER_ID))&&void 0!==t?t:n;this.identity=new p(o,n),i&&(this.response=JSON.parse(i))}return e.prototype.getState=function(e){void 0===e&&(e=d);var t=this.response,i=u(this.response);t&&i!==s.MigrationState.UNKNOWN?e(i):this.getMigrationState(e)},e.prototype.verifyState=function(e){var t,i=this;e&&(null===(t=this.response)||void 0===t?void 0:t.sha256)!==e&&this.getMigrationState((function(e){e!==s.MigrationState.DUPLICATE&&e!==s.MigrationState.CLEVERTAP||(i.initCleverTap(),i.identity.isAnonymous||r.default.onUserLogin.push({Site:i.identity.profile}))}))},e.prototype.initCleverTap=function(){var e,t=null===(e=this.response)||void 0===e?void 0:e.ct;if(t)return r.default.init(t.accountId,t.regionCode),r.default},e.prototype.duplicateRequest=function(e,t,i){var n=u(this.response);if(n===s.MigrationState.LEANPLUM)return!1;t||(t=new c.default),n===s.MigrationState.DUPLICATE&&t.add(l.default.PARAMS.CT,!0);var o=(null==t?void 0:t.buildDict())||{},a=o[l.default.PARAMS.USER_ID];switch(a&&this.identity.setUserId(a),e){case l.default.METHODS.START:this.identity.isAnonymous||r.default.onUserLogin.push({Site:this.identity.profile});break;case l.default.METHODS.TRACK:this.eventPush(o,i);break;case l.default.METHODS.ADVANCE:o.event="state_".concat(o.state),this.eventPush(o,i);break;case l.default.METHODS.SET_USER_ATTRIBUTES:this.profilePush(o)}return n===s.MigrationState.CLEVERTAP},e.prototype.profilePush=function(e){var t=e[l.default.PARAMS.NEW_USER_ID],i=this.mapAttributes(this.convertArrays(JSON.parse(e.userAttributes||"{}")));t?(this.identity.setUserId(t),Object.assign(i,this.identity.profile),r.default.onUserLogin.push({Site:i})):r.default.profile.push({Site:i})},e.prototype.eventPush=function(e,t){var i=e[l.default.PARAMS.MESSAGE_ID],n=t.isPurchase?"Charged":e.event;if(n&&!i){var o={};if(e.params){var s=this.convertArrays(JSON.parse(e.params));Object.assign(o,s)}e.value&&Object.assign(o,{value:e.value}),e.info&&Object.assign(o,{info:e.info}),t.isPurchase&&e.currencyCode&&Object.assign(o,{currencyCode:e.currencyCode}),r.default.event.push(n,o)}},e.prototype.convertArrays=function(e){return Object.keys(e).reduce((function(t,i){if(Array.isArray(e[i])){var n=e[i];t[i]="[".concat(n.join(","),"]")}else t[i]=e[i];return t}),{})},e.prototype.mapAttributes=function(e){var t,i,n=null===(i=null===(t=this.response)||void 0===t?void 0:t.ct)||void 0===i?void 0:i.attributeMappings;return n?Object.keys(e).reduce((function(t,i){return n[i]?t[n[i]]=e[i]:t[i]=e[i],t}),{}):e},e.prototype.getMigrationState=function(e){var t=this;null===this._fetching&&(this._fetching=new Promise((function(e){return t.createRequest("getMigrateState",new c.default,{sendNow:!0,response:function(i){var n,o=null===(n=null==i?void 0:i.response)||void 0===n?void 0:n[0],r=u(o);r&&r!==s.MigrationState.UNKNOWN&&(a.default.save(l.default.DEFAULT_KEYS.MIGRATION_STATE,JSON.stringify(o)),t.response=o),e(r)}})}))),this._fetching.then(e).then((function(){return t._fetching=null}))},e}();t.default=h,function(e){e.ANONYMOUS="anonymous",e.IDENTIFIED="identified"}(o=t.IdentityState||(t.IdentityState={}));var p=function(){function e(e,t){this.userId=e,this.deviceId=t,this.state=o.ANONYMOUS,this.identify()}return e.prototype.setUserId=function(e){this.state===o.ANONYMOUS&&(this.state=o.IDENTIFIED),this.userId=e},e.prototype.identify=function(){this.isAnonymous?this.state=o.ANONYMOUS:this.identifyNonAnonymous()},e.prototype.identifyNonAnonymous=function(){this.state=o.IDENTIFIED},Object.defineProperty(e.prototype,"profile",{get:function(){return{Identity:this.userId}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isAnonymous",{get:function(){return this.userId===this.deviceId},enumerable:!1,configurable:!0}),e}();t.IdentityManager=p},967:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){this.networkTimeoutSeconds=10,this.requestQueue=[],this.runningRequest=!1}return e.prototype.setNetworkTimeout=function(e){this.networkTimeoutSeconds=e},e.prototype.ajax=function(e,t,i,n,o,r,s){var a=this;if(r){if(this.runningRequest)return this.enqueueRequest(arguments);this.runningRequest=!0}if("undefined"!=typeof XDomainRequest)return"http:"===location.protocol&&0===t.indexOf("https:")&&(t="http:".concat(t.substring(6))),this.ajaxIE8(e,t,i,n,o,r,s);var l=!1,c=new XMLHttpRequest;c.onreadystatechange=function(){if(4===c.readyState){if(l)return;var e;l=!0;var t=!1;if(s)e=c.responseText;else try{e=JSON.parse(c.responseText)}catch(e){setTimeout((function(){o&&o(null,c)}),0),t=!0}t||(c.status>=200&&c.status<300?setTimeout((function(){n&&n(e,c)}),0):setTimeout((function(){o&&o(e,c)}),0)),r&&(a.runningRequest=!1,a.dequeueRequest())}};var d=!1;c.onerror=c.ontimeout=function(){0===c.status&&(d=!0,a.requestQueue.splice(0,a.requestQueue.length))},d||(c.open(e,t,!0),c.setRequestHeader("Content-Type","text/plain"),c.send(i),setTimeout((function(){l||c.abort()}),1e3*this.networkTimeoutSeconds))},e.prototype.ajaxIE8=function(e,t,i,n,o,r,s){var a=this,l=new XDomainRequest;l.onload=function(){var e,t=!1;if(s)e=l.responseText;else try{e=JSON.parse(l.responseText)}catch(e){setTimeout((function(){o&&o(null,l)}),0),t=!0}t||setTimeout((function(){n&&n(e,l)}),0),r&&(a.runningRequest=!1,a.dequeueRequest())},l.onerror=l.ontimeout=function(){setTimeout((function(){o&&o(null,l)}),0),r&&(a.runningRequest=!1,a.dequeueRequest())},l.onprogress=function(){},l.open(e,t),l.timeout=1e3*this.networkTimeoutSeconds,l.send(i)},e.prototype.enqueueRequest=function(e){this.requestQueue.push(e)},e.prototype.dequeueRequest=function(){var e=this.requestQueue.shift();e&&this.ajax.apply(this,e)},e}();t.default=i},95:function(e,t,i){"use strict";var n=this&&this.__awaiter||function(e,t,i,n){return new(i||(i=Promise))((function(o,r){function s(e){try{l(n.next(e))}catch(e){r(e)}}function a(e){try{l(n.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,a)}l((n=n.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var i,n,o,r,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(a){return function(l){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;r&&(r=0,a[0]&&(s=0)),s;)try{if(i=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],n=0}finally{i=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var s=r(i(600)),a=r(i(749)),l=r(i(88)),c=function(){function e(e){this.createRequest=e,this.serviceWorkerRegistration=null}return Object.defineProperty(e.prototype,"serviceWorker",{get:function(){return window.navigator.serviceWorker},enumerable:!1,configurable:!0}),e.prototype.isWebPushSupported=function(){return Boolean(void 0!==(null===window||void 0===window?void 0:window.navigator)&&"serviceWorker"in window.navigator&&"PushManager"in window)},e.prototype.isWebPushSubscribed=function(e){return void 0===e&&(e=""),n(this,void 0,Promise,(function(){var t,i,n;return o(this,(function(o){switch(o.label){case 0:return this.isWebPushSupported()?[4,this.getServiceWorkerRegistration(e)]:[2,!1];case 1:return(t=o.sent())?[4,t.pushManager.getSubscription()]:[2,!1];case 2:return i=o.sent(),(n=null!==i)&&this.updateNewSubscriptionOnServer(i),[2,n]}}))}))},e.prototype.register=function(e,t,i){return n(this,void 0,Promise,(function(){var n,r,s,a;return o(this,(function(o){switch(o.label){case 0:if(!this.isWebPushSupported())return console.log("Leanplum: Push messaging is not supported."),[2,i(!1)];o.label=1;case 1:return o.trys.push([1,4,,5]),n=this,[4,this.serviceWorker.register(e||"/sw.min.js",t)];case 2:return n.serviceWorkerRegistration=o.sent(),[4,this.serviceWorkerRegistration.pushManager.getSubscription()];case 3:return r=o.sent(),(s=null!==r)&&this.updateNewSubscriptionOnServer(r),[2,i(s)];case 4:return a=o.sent(),console.log("Leanplum: Service Worker Error: ",a),[2,i(!1)];case 5:return[2]}}))}))},e.prototype.subscribeUser=function(){return n(this,void 0,Promise,(function(){var e,t,i;return o(this,(function(n){switch(n.label){case 0:e=this.urlB64ToUint8Array("BInWPpWntfR39rgXSP04pqdmEdDGa50z6zqbMvxyxJCwzXIuSpSh8C888-CfJ82WELl7Xe8cjAnfCt-3vK0Ci68"),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,this.serviceWorkerRegistration.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:e})];case 2:if(!(t=n.sent()))throw new Error;return this.updateNewSubscriptionOnServer(t),[3,4];case 3:throw i=n.sent(),new Error("Leanplum: Failed to subscribe the user: ".concat(i));case 4:return[2,!0]}}))}))},e.prototype.unsubscribeUser=function(e){return void 0===e&&(e=""),n(this,void 0,Promise,(function(){var t,i;return o(this,(function(n){switch(n.label){case 0:return[4,this.isWebPushSubscribed(e)];case 1:if(!n.sent())return[3,6];n.label=2;case 2:return n.trys.push([2,5,,6]),[4,this.serviceWorkerRegistration.pushManager.getSubscription()];case 3:if(!(t=n.sent()))throw new Error;return[4,t.unsubscribe()];case 4:return n.sent(),[3,6];case 5:throw i=n.sent(),new Error("Leanplum: Error unsubscribing: ".concat(i));case 6:return[2]}}))}))},e.prototype.getServiceWorkerRegistration=function(e){return void 0===e&&(e=""),n(this,void 0,Promise,(function(){var t;return o(this,(function(i){switch(i.label){case 0:return this.serviceWorkerRegistration?[3,2]:(t=this,[4,this.serviceWorker.getRegistration(e)]);case 1:t.serviceWorkerRegistration=i.sent(),i.label=2;case 2:return[2,this.serviceWorkerRegistration]}}))}))},e.prototype.urlB64ToUint8Array=function(e){for(var t=(e+"=".repeat((4-e.length%4)%4)).replace(/-/g,"+").replace(/_/g,"/"),i=this.decodeData(t),n=new Uint8Array(i.length),o=0;o<i.length;++o)n[o]=i.charCodeAt(o);return n},e.prototype.updateNewSubscriptionOnServer=function(e){if(e){var t=this.prepareSubscription(e),i=JSON.stringify(t);l.default.get(a.default.DEFAULT_KEYS.PUSH_SUBSCRIPTION)!==i&&(l.default.save(a.default.DEFAULT_KEYS.PUSH_SUBSCRIPTION,i),this.setSubscription(i))}},e.prototype.prepareSubscription=function(e){var t="getKey"in e?e.getKey("p256dh"):[],i="getKey"in e?e.getKey("auth"):[],n=this.encodeData(String.fromCharCode.apply(null,new Uint8Array(t))),o=this.encodeData(String.fromCharCode.apply(null,new Uint8Array(i)));return{endpoint:e.endpoint,key:n,auth:o}},e.prototype.setSubscription=function(e){if(e){var t=(new s.default).add(a.default.PARAMS.WEB_PUSH_SUBSCRIPTION,e);this.createRequest(a.default.METHODS.SET_DEVICE_ATTRIBUTES,t,{queued:!1,sendNow:!0})}},e.prototype.encodeData=function(e){return window.btoa(e)},e.prototype.decodeData=function(e){return window.atob(e)},e}();t.default=c},897:function(e,t,i){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(i(967)),r=function(){function e(){this.network=new o.default,this.connected=!1,this.connecting=!1,this.connected=!1,this.connecting=!1}return e.prototype.connect=function(e){var t=this;this.connecting=!0,this.network.ajax("POST","https://".concat(e,"/socket.io/1"),"",(function(i){var n=i.split(":"),o=n[0],r=parseInt(n[1])/2*1e3;t.socket=new WebSocket("wss://".concat(e,"/socket.io/1/websocket/").concat(o));var s=null;t.socket.onopen=function(){t.connected=!0,t.connecting=!1,t.onopen&&t.onopen(),s=setInterval((function(){t.socket.send("2:::")}),r)},t.socket.onclose=function(){t.connected=!1,clearInterval(s),t.onclose&&t.onclose()},t.socket.onmessage=function(e){var i=e.data.split(":"),n=parseInt(i[0]);if(2===n)t.socket.send("2::");else if(5===n){var o=i[1],r=JSON.parse(i.slice(3).join(":")),s=r.name,a=r.args;o&&t.socket.send("6:::".concat(o)),t.onmessage&&t.onmessage(s,a)}else 7===n&&console.log("Socket error: ".concat(e.data))},t.socket.onerror=function(e){t.socket.close(),t.onerror&&t.onerror(e)}}),null,!1,!0)},e.prototype.disconnect=function(){this.socket.close(),this.connected=!1,this.connecting=!1},e.prototype.send=function(e,t){if(this.connected){var i=JSON.stringify({name:e,args:t});this.socket.send("5:::".concat(i))}else console.log("Leanplum: Socket is not connected.")},e.prototype.setNetworkTimeout=function(e){this.network.setNetworkTimeout(e)},e}();t.default=r},88:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i={local:!0,session:!0},n={local:{},session:{}},o=function(){function e(){}return e.get=function(e,t){if(void 0===t&&(t="local"),!i[t])return n[t][e];try{return"local"===t?localStorage[e]:sessionStorage.getItem(e)}catch(o){return i[t]=!1,n[t][e]}},e.save=function(e,t,o){if(void 0===o&&(o="local"),i[o])try{"local"===o?localStorage[e]=t:sessionStorage.setItem(e,t)}catch(r){i[o]=!1,n[o][e]=t}else n[o][e]=t},e.remove=function(e,t){if(void 0===t&&(t="local"),i[t])try{"local"===t?localStorage.removeItem(e):sessionStorage.removeItem(e)}catch(o){i[t]=!1,delete n[t][e]}else delete n[t][e]},e}();t.default=o},375:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){}return e.decodeColor=function(e){var t=255&e,i=255&(e>>=8),n=255&(e>>=8),o=(255&(e>>=8))/255;return"rgba(".concat(n,",").concat(i,",").concat(t,",").concat(o,")")},e.encodeColor=function(e){if("number"==typeof e)return e;var t=/^rgba\((\d+),(\d+),(\d+),(\d+(\.\d+)?)\)$/.exec(e);if(t)return(255*parseInt(t[4],10)<<24)+((255&parseInt(t[1],10))<<16)+((255&parseInt(t[2],10))<<8)+(255&parseInt(t[3],10));var i=/^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(e);if(i)return(255<<24)+((255&parseInt(i[1],16))<<16)+((255&parseInt(i[2],16))<<8)+(255&parseInt(i[3],16));throw new Error('Could not parse color "'.concat(e,'"'))},e}();t.default=i},816:function(e,t,i){"use strict";var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,i=1,n=arguments.length;i<n;i++)for(var o in t=arguments[i])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},n.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=o(i(600)),s=o(i(749)),a=o(i(88)),l=o(i(375)),c=function(){function e(e){this.createRequest=e,this.actionDefinitions={},this.hasReceivedDiffs=!1,this.merged=void 0,this.variables=null,this.variablesChangedHandlers=[],this.variantDebugInfo={},this.diffs=void 0,this.token="",this.variants=[]}return e.prototype.applyDiffs=function(e,t,i){var o;this.diffs=e,this.variants=t,this.actionDefinitions=n(n({},this.actionDefinitions),(o=i)?Object.keys(o).reduce((function(e,t){e[t]=n({},o[t]);var i=o[t].kinds;return i&&(e[t].kinds=Object.keys(i).reduce((function(n,o){var r=i[o].toLowerCase();return n[o]=r,"action"===r&&(e[t].values[o]=""),n}),{})),e}),{}):o),this.hasReceivedDiffs=!0,this.merged=h(this.variables,e),this.saveDiffs(),this.onUpdate&&this.onUpdate()},e.prototype.loadDiffs=function(){try{this.applyDiffs(JSON.parse(this.loadLocal(s.default.DEFAULT_KEYS.VARIABLES)||null),JSON.parse(this.loadLocal(s.default.DEFAULT_KEYS.VARIANTS)||null),JSON.parse(this.loadLocal(s.default.DEFAULT_KEYS.ACTION_DEFINITIONS)||null)),this.token=this.loadLocal(s.default.DEFAULT_KEYS.TOKEN),this.variantDebugInfo=this.loadLocal(s.default.DEFAULT_KEYS.VARIANT_DEBUG_INFO)}catch(e){console.log("Leanplum: Invalid diffs: ".concat(e))}},e.prototype.saveDiffs=function(){this.saveLocal(s.default.DEFAULT_KEYS.VARIABLES,JSON.stringify(this.diffs||{})),this.saveLocal(s.default.DEFAULT_KEYS.VARIANTS,JSON.stringify(this.variants||[])),this.saveLocal(s.default.DEFAULT_KEYS.ACTION_DEFINITIONS,JSON.stringify(this.actionDefinitions||{})),this.saveLocal(s.default.DEFAULT_KEYS.VARIANT_DEBUG_INFO,JSON.stringify(this.variantDebugInfo||{})),this.saveLocal(s.default.DEFAULT_KEYS.TOKEN,this.token)},e.prototype.getVariable=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var i=this.getVariables();if(i)for(var n=0;n<e.length;n++)i=i[e[n]];return i},e.prototype.getVariables=function(){return void 0!==this.merged?this.merged:this.variables},e.prototype.setVariables=function(e){this.variables=e},e.prototype.addVariablesChangedHandler=function(e){this.variablesChangedHandlers.push(e),this.hasReceivedDiffs&&e()},e.prototype.removeVariablesChangedHandler=function(e){var t=this.variablesChangedHandlers.indexOf(e);t>=0&&this.variablesChangedHandlers.splice(t,1)},e.prototype.triggerVariablesChangedHandlers=function(){for(var e=0;e<this.variablesChangedHandlers.length;e++)this.variablesChangedHandlers[e]()},e.prototype.getVariantDebugInfo=function(){return this.variantDebugInfo},e.prototype.setVariantDebugInfo=function(e){this.variantDebugInfo=e},e.prototype.sendActions=function(){var e;return!!Object.keys(this.actionDefinitions).length&&(this.setVars(((e={})[s.default.PARAMS.ACTION_DEFINITIONS]=this.actionDefinitions,e)),!0)},e.prototype.sendVariables=function(){var e;this.setVars(((e={})[s.default.PARAMS.VARIABLES]=this.variables,e))},e.prototype.setVars=function(e){var t=(new r.default).body(JSON.stringify(e));this.createRequest(s.default.METHODS.SET_VARS,t,{sendNow:!0})},e.prototype.clearUserContent=function(){this.diffs=void 0,this.variables=null,this.variants=[],this.variantDebugInfo={},this.merged=void 0},e.prototype.registerActionDefinition=function(e){this.actionDefinitions[e.name]=function(e){return{kind:e.kind||3,options:null,values:d(e.args),kinds:u(e.args)}}(e)},e.prototype.loadLocal=function(e){return a.default.get(e)},e.prototype.saveLocal=function(e,t){a.default.save(e,t)},e}();function d(e){return e.reduce((function(e,t){return t.value instanceof Array?e[t.name]=d(t.value):"action"===t.type?e[t.name]="":"color"===t.type?e[t.name]=l.default.encodeColor(t.value):e[t.name]=t.value,e}),{})}function u(e,t){return void 0===t&&(t=""),e.reduce((function(e,i){var o,r="".concat(t).concat(i.name);return i.value instanceof Array?e=n(((o={})[r]="group",o),u(i.value,"".concat(r,"."))):e[r]=i.type.toLowerCase(),e}),{})}function h(e,t){if("number"==typeof t||"boolean"==typeof t||"string"==typeof t)return t;if(null==t)return e;var i=function(e){return function(t){if(e instanceof Array)for(var i=0;i<e.length;i++)t(e[i]);else for(var n in e)({}).hasOwnProperty.call(e,n)&&t(n)}},n=i(e),o=i(t),r=!1;if(null===e&&!(t instanceof Array))for(var s in r=null,t)if(t.hasOwnProperty(s)){if(null===r&&(r=!0),"string"!=typeof s){r=!1;break}if(s.length<3||"["!==s.charAt(0)||"]"!==s.charAt(s.length-1)){r=!1;break}}if(e instanceof Array||r){var a=[];return n((function(e){a.push(e)})),o((function(e){for(var i=parseInt(e.substring(1,e.length-1)),n=t[e];i>=a.length;)a.push(null);a[i]=h(a[i],n)})),a}var l={};return n((function(i){null!==t[i]&&void 0!==t[i]||(l[i]=e[i])})),o((function(i){l[i]=h(null===e?null:e[i]||{},t[i])})),l}t.default=c},804:(e,t,i)=>{var n=i(876);e.exports=n.default},205:(e,t)=>{"use strict";var i;Object.defineProperty(t,"__esModule",{value:!0}),t.MigrationState=void 0,(i=t.MigrationState||(t.MigrationState={})).UNKNOWN="unknown",i.LEANPLUM="lp",i.DUPLICATE="lp+ct",i.CLEVERTAP="ct"},772:(e,t)=>{"use strict";var i,n;Object.defineProperty(t,"__esModule",{value:!0}),t.MessageKind=t.ActionParameterType=void 0,(n=t.ActionParameterType||(t.ActionParameterType={})).Integer="integer",n.Color="color",n.Float="float",n.Decimal="decimal",n.Number="number",n.Boolean="bool",n.String="string",n.Text="text",n.HTML="html",n.File="file",n.List="list",n.Group="group",n.Action="action",n.Unknown="",(i=t.MessageKind||(t.MessageKind={}))[i.Action=2]="Action",i[i.Template=3]="Template"}},t={};function i(n){var o=t[n];if(void 0!==o)return o.exports;var r=t[n]={id:n,loaded:!1,exports:{}};return e[n].call(r.exports,r,r.exports,i),r.loaded=!0,r.exports}return i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),i(804)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,