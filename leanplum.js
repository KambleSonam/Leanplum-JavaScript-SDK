!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Leanplum=t():e.Leanplum=t()}(self,(()=>(()=>{var e={739:function(e){e.exports=function(){"use strict";function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function i(e,t,i){return t&&n(e.prototype,t),i&&n(e,i),e}function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}function c(e,t){return c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},c(e,t)}function u(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function d(e,t,n){return d=u()?Reflect.construct:function(e,t,n){var i=[null];i.push.apply(i,t);var o=new(Function.bind.apply(e,i));return n&&c(o,n.prototype),o},d.apply(null,arguments)}function p(e){var t="function"==typeof Map?new Map:void 0;return p=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,i)}function i(){return d(e,arguments,l(this).constructor)}return i.prototype=Object.create(e.prototype,{constructor:{value:i,enumerable:!1,writable:!0,configurable:!0}}),c(i,e)},p(e)}function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function h(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?f(e):t}function v(e){var t=u();return function(){var n,i=l(e);if(t){var o=l(this).constructor;n=Reflect.construct(i,arguments,o)}else n=i.apply(this,arguments);return h(this,n)}}function g(e){return function(e){if(Array.isArray(e))return b(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||y(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function y(e,t){if(e){if("string"==typeof e)return b(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?b(e,t):void 0}}function b(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}var m=0;function w(e){return"__private_"+m+++"_"+e}function S(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}var _,k="clevertap-prod.com",C="https:",E=w("accountId"),A=w("region"),I=w("targetDomain"),P=w("dcSdkversion"),O=function(){function e(){var n=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).id,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:k;t(this,e),Object.defineProperty(this,E,{writable:!0,value:void 0}),Object.defineProperty(this,A,{writable:!0,value:""}),Object.defineProperty(this,I,{writable:!0,value:k}),Object.defineProperty(this,P,{writable:!0,value:""}),this.id=n,i&&(this.region=i),o&&(this.targetDomain=o)}return i(e,[{key:"id",get:function(){return S(this,E)[E]},set:function(e){S(this,E)[E]=e}},{key:"region",get:function(){return S(this,A)[A]},set:function(e){S(this,A)[A]=e}},{key:"dcSDKVersion",get:function(){return S(this,P)[P]},set:function(e){S(this,P)[P]=e}},{key:"targetDomain",get:function(){return S(this,I)[I]},set:function(e){S(this,I)[I]=e}},{key:"finalTargetDomain",get:function(){return this.region?"".concat(this.region,".").concat(this.targetDomain):this.targetDomain===k?"".concat("eu1",".").concat(this.targetDomain):this.targetDomain}},{key:"dataPostURL",get:function(){return"".concat(C,"//").concat(this.finalTargetDomain,"/a?t=96")}},{key:"recorderURL",get:function(){return"".concat(C,"//").concat(this.finalTargetDomain,"/r?r=1")}},{key:"emailURL",get:function(){return"".concat(C,"//").concat(this.finalTargetDomain,"/e?r=1")}}]),e}(),T=new RegExp("^\\s+|\\.|:|\\$|'|\"|\\\\|\\s+$","g"),x=new RegExp("^\\s+|'|\"|\\\\|\\s+$","g"),M=new RegExp("'","g"),R="clear",D="Charged ID",L="WZRK_CHARGED_ID",N="WZRK_G",U="WZRK_K",j="WZRK_CAMP",F="WZRK_CAMP_G",V="WZRK_EV",B="WZRK_META",q="WZRK_PR",z="WZRK_ARP",H="WZRK_L",W="global",K="display",G="optOut",Y="useIP",J="WZRK_X",$="isOUL",Z="push",X=31536e4,Q="2",ee="cUsY",te="wzrk_",ne="wzrk_id",ie="Notification Viewed",oe="Notification Clicked",re="WZRK_FPU",ae="WZRK_PSD",se="$incr",le="$decr",ce="$set",ue="$add",de="$remove",pe="$delete",fe="WZRK_INBOX_CONFIG",he="WZRK_INBOX",ve=["Stayed","UTM Visited","App Launched","Notification Sent",ie,oe],ge=function(e){return"string"==typeof e||e instanceof String},ye=function(e){return"[object Object]"===Object.prototype.toString.call(e)},be=function(t){return"object"===e(t)&&t instanceof Date},me=function(e){for(var t in e)if(e.hasOwnProperty(t))return!1;return!0},we=function(e){return!isNaN(parseFloat(e))&&isFinite(e)},Se=function(e){return/^-?[\d.]+(?:e-?\d+)?$/.test(e)&&"number"==typeof e},_e=function(e){return null!=e&&"undefined"!==e},ke=function t(n,i){var o;if("object"!==e(n))return ge(n)?(o=Ce(n,x)).length>1024&&(o=o.substring(0,1024),i.reportError(521,o+"... length exceeded 1024 chars. Trimmed.")):o=n,o;for(var r in n)if(n.hasOwnProperty(r)){var a=t(n[r],i),s=void 0;(s=Ce(r,T)).length>1024&&(s=s.substring(0,1024),i.reportError(520,s+"... length exceeded 1024 chars. Trimmed.")),delete n[r],n[s]=a}return n},Ce=function(e,t){return e.replace(t,"")},Ee=function(){var e=new Date;return e.getFullYear()+""+e.getMonth()+e.getDay()},Ae=function(){return Math.floor((new Date).getTime()/1e3)},Ie=function(e){return"$D_"+Math.round(e.getTime()/1e3)},Pe=function(e){if(Oe(e))return"$D_"+e},Oe=function(e){var t=/^(\d{4})(\d{2})(\d{2})$/.exec(e);if(null==t)return!1;var n=t[3],i=t[2]-1,o=t[1],r=new Date(o,i,n);return r.getDate()==n&&r.getMonth()==i&&r.getFullYear()==o},Te=function(){function e(){t(this,e)}return i(e,null,[{key:"save",value:function(e,t){return!(!e||!t)&&(this._isLocalStorageSupported()?(localStorage.setItem(e,"string"==typeof t?t:JSON.stringify(t)),!0):void 0)}},{key:"read",value:function(e){if(!e)return!1;var t=null;if(this._isLocalStorageSupported()&&(t=localStorage.getItem(e)),null!=t)try{t=JSON.parse(t)}catch(e){}return t}},{key:"remove",value:function(e){return!!e&&(this._isLocalStorageSupported()?(localStorage.removeItem(e),!0):void 0)}},{key:"removeCookie",value:function(e,t){var n=e+"=; expires=Thu, 01 Jan 1970 00:00:01 GMT;";t&&(n=n+" domain="+t+"; path=/"),document.cookie=n}},{key:"createCookie",value:function(e,t,n,i){var o="",r="";if(n){var a=new Date;a.setTime(a.getTime()+1e3*n),o="; expires="+a.toGMTString()}i&&(r="; domain="+i),t=encodeURIComponent(t),document.cookie=e+"="+t+o+r+"; path=/"}},{key:"readCookie",value:function(e){for(var t=e+"=",n=document.cookie.split(";"),i=0;i<n.length;i++){for(var o=n[i];" "===o.charAt(0);)o=o.substring(1,o.length);if(0==o.indexOf(t))return decodeURIComponent(o.substring(t.length,o.length))}return null}},{key:"_isLocalStorageSupported",value:function(){return"localStorage"in window&&null!==window.localStorage&&"function"==typeof window.localStorage.setItem}},{key:"saveToLSorCookie",value:function(e,t){if(null!=t)try{this._isLocalStorageSupported()?this.save(e,encodeURIComponent(JSON.stringify(t))):e===N?this.createCookie(e,encodeURIComponent(t),0,window.location.hostname):this.createCookie(e,encodeURIComponent(JSON.stringify(t)),0,window.location.hostname),xe.globalCache[e]=t}catch(e){}}},{key:"readFromLSorCookie",value:function(e){var t;if(xe.globalCache.hasOwnProperty(e))return xe.globalCache[e];if(null!=(t=this._isLocalStorageSupported()?this.read(e):this.readCookie(e))&&("function"!=typeof t.trim||""!==t.trim())){var n;try{n=JSON.parse(decodeURIComponent(t))}catch(e){n=decodeURIComponent(t)}return xe.globalCache[e]=n,n}}},{key:"createBroadCookie",value:function(e,t,n,i){if(i){var o=xe.broadDomain;if(null==o)for(var r=i.split("."),a="",s=r.length-1;s>=0;s--){if(a=0===s?r[s]+a:"."+r[s]+a,this.readCookie(e)){var l="test_"+e+s;if(this.createCookie(l,t,10,a),!this.readCookie(l))continue;this.removeCookie(l,a)}if(this.createCookie(e,t,n,a),this.readCookie(e)==t){o=a,xe.broadDomain=o;break}}else this.createCookie(e,t,n,o)}else this.createCookie(e,t,n,i)}},{key:"getMetaProp",value:function(e){var t=this.readFromLSorCookie(B);if(null!=t)return t[e]}},{key:"setMetaProp",value:function(e,t){if(this._isLocalStorageSupported()){var n=this.readFromLSorCookie(B);null==n&&(n={}),void 0===t?delete n[e]:n[e]=t,this.saveToLSorCookie(B,n)}}},{key:"getAndClearMetaProp",value:function(e){var t=this.getMetaProp(e);return this.setMetaProp(e,void 0),t}},{key:"setInstantDeleteFlagInK",value:function(){var e=this.readFromLSorCookie(U);null==e&&(e={}),e.flag=!0,this.saveToLSorCookie(U,e)}},{key:"backupEvent",value:function(e,t,n){var i=this.readFromLSorCookie(H);void 0===i&&(i={}),i[t]={q:e},this.saveToLSorCookie(H,i),n.debug("stored in ".concat(H," reqNo : ").concat(t," -> ").concat(e))}},{key:"removeBackup",value:function(e,t){var n=this.readFromLSorCookie(H);null!=n&&void 0!==n[e]&&(t.debug("del event: ".concat(e," data-> ").concat(n[e].q)),delete n[e],this.saveToLSorCookie(H,n))}}]),e}(),xe={globalCache:{gcookie:null,REQ_N:0,RESP_N:0},LRU_CACHE:null,globalProfileMap:void 0,globalEventsMap:void 0,blockRequest:!1,isOptInRequest:!1,broadDomain:null,webPushEnabled:null,campaignDivMap:{},currentSessionId:null,wiz_counter:0,notifApi:{notifEnabledFromApi:!1},unsubGroups:[],updatedCategoryLong:null,inbox:null,isPrivacyArrPushed:!1,privacyArray:[],offline:!1,location:null},Me=w("keyOrder"),Re=w("deleteFromObject"),De=function(){function e(n){t(this,e),Object.defineProperty(this,Re,{value:Le}),Object.defineProperty(this,Me,{writable:!0,value:void 0}),this.max=n;var i=Te.readFromLSorCookie(J);if(i){var o={};for(var r in S(this,Me)[Me]=[],i=i.cache)i.hasOwnProperty(r)&&(o[i[r][0]]=i[r][1],S(this,Me)[Me].push(i[r][0]));this.cache=o}else this.cache={},S(this,Me)[Me]=[]}return i(e,[{key:"get",value:function(e){var t=this.cache[e];return t&&(this.cache=S(this,Re)[Re](e,this.cache),this.cache[e]=t,S(this,Me)[Me].push(e)),this.saveCacheToLS(this.cache),t}},{key:"set",value:function(e,t){var n=this.cache[e],i=S(this,Me)[Me];null!=n?this.cache=S(this,Re)[Re](e,this.cache):i.length===this.max&&(this.cache=S(this,Re)[Re](i[0],this.cache)),this.cache[e]=t,S(this,Me)[Me][S(this,Me)[Me]-1]!==e&&S(this,Me)[Me].push(e),this.saveCacheToLS(this.cache)}},{key:"saveCacheToLS",value:function(e){var t=[],n=S(this,Me)[Me];for(var i in n)if(n.hasOwnProperty(i)){var o=[];o.push(n[i]),o.push(e[n[i]]),t.push(o)}Te.saveToLSorCookie(J,{cache:t})}},{key:"getKey",value:function(e){if(null===e)return null;var t=S(this,Me)[Me];for(var n in t)if(t.hasOwnProperty(n)&&this.cache[t[n]]===e)return t[n];return null}},{key:"getSecondLastKey",value:function(){var e=S(this,Me)[Me];return null!=e&&e.length>1?e[e.length-2]:-1}},{key:"getLastKey",value:function(){var e=S(this,Me)[Me].length;if(e)return S(this,Me)[Me][e-1]}}]),e}(),Le=function(e,t){var n,i=JSON.parse(JSON.stringify(S(this,Me)[Me])),o={};for(var r in i)i.hasOwnProperty(r)&&(i[r]!==e?o[i[r]]=t[i[r]]:n=r);return i.splice(n,1),S(this,Me)[Me]=JSON.parse(JSON.stringify(i)),o},Ne=w("logger"),Ue=w("request"),je=w("device"),Fe=w("session"),Ve=function(){function e(n){var i=n.logger,o=n.request,r=n.device,a=n.session;t(this,e),Object.defineProperty(this,Ne,{writable:!0,value:void 0}),Object.defineProperty(this,Ue,{writable:!0,value:void 0}),Object.defineProperty(this,je,{writable:!0,value:void 0}),Object.defineProperty(this,Fe,{writable:!0,value:void 0}),S(this,Ne)[Ne]=i,S(this,Ue)[Ue]=o,S(this,je)[je]=r,S(this,Fe)[Fe]=a}return i(e,[{key:"s",value:function(e,t,n,i,o){var r=!1,a=!1;if(window.isOULInProgress&&(n||"undefined"!==i&&i===window.oulReqN)&&(window.isOULInProgress=!1,r=!0),void 0===i&&(i=0),Te.removeBackup(i,S(this,Ne)[Ne]),!(i>xe.globalCache.REQ_N)){if(_e(S(this,je)[je].gcookie)||e&&(a=!0),(!_e(S(this,je)[je].gcookie)||n||"boolean"==typeof o)&&(S(this,Ne)[Ne].debug("Cookie was ".concat(S(this,je)[je].gcookie," set to ").concat(e)),S(this,je)[je].gcookie=e,_e(S(this,je)[je].gcookie)||Te.getAndClearMetaProp(Y),e&&Te._isLocalStorageSupported())){null==xe.LRU_CACHE&&(xe.LRU_CACHE=new De(100));var s,l=Te.readFromLSorCookie(U);null!=l&&l.id&&(s=xe.LRU_CACHE.cache[l.id],n&&(s||(Te.saveToLSorCookie(re,!0),xe.LRU_CACHE.set(l.id,e)))),Te.saveToLSorCookie(N,e);var c=xe.LRU_CACHE.getSecondLastKey();if(Te.readFromLSorCookie(re)&&-1!==c){var u=xe.LRU_CACHE.cache[c];S(this,Ue)[Ue].unregisterTokenForGuid(u)}}Te.createBroadCookie(N,e,X,window.location.hostname),Te.saveToLSorCookie(N,e),Te._isLocalStorageSupported()&&S(this,Fe)[Fe].manageSession(t);var d=S(this,Fe)[Fe].getSessionCookieObject();(void 0===d.s||d.s<=t)&&(d.s=t,d.t=Ae(),S(this,Fe)[Fe].setSessionCookieObject(d)),_e(S(this,je)[je].gcookie)&&(xe.blockRequest=!1),!r&&!a||S(this,Ue)[Ue].processingBackup||S(this,Ue)[Ue].processBackupEvents(),xe.globalCache.RESP_N=i}}}]),e}(),Be=w("logger"),qe=function(){function e(n){var i=n.logger;t(this,e),Object.defineProperty(this,Be,{writable:!0,value:void 0}),this.gcookie=void 0,S(this,Be)[Be]=i,this.gcookie=this.getGuid()}return i(e,[{key:"getGuid",value:function(){var e=null;if(_e(this.gcookie))return this.gcookie;if(Te._isLocalStorageSupported()){var t=Te.read(N);if(_e(t)){try{e=JSON.parse(decodeURIComponent(t))}catch(n){S(this,Be)[Be].debug("Cannot parse Gcookie from localstorage - must be encoded "+t),32===t.length?(e=t,Te.saveToLSorCookie(N,t)):S(this,Be)[Be].error("Illegal guid "+t)}_e(e)&&Te.createBroadCookie(N,e,X,window.location.hostname)}}return _e(e)||(e=Te.readCookie(N),!_e(e)||0!==e.indexOf("%")&&0!==e.indexOf("'")&&0!==e.indexOf('"')||(e=null),_e(e)&&Te.saveToLSorCookie(N,e)),e}}]),e}(),ze="This property has been ignored.",He="CleverTap error:",We="".concat(He," Incorrect embed script."),Ke="".concat(He," Event structure not valid. ").concat(ze),Ge="".concat(He," Gender value should be either M or F. ").concat(ze),Ye="".concat(He," Employed value should be either Y or N. ").concat(ze),Je="".concat(He," Married value should be either Y or N. ").concat(ze),$e="".concat(He," Education value should be either School, College or Graduate. ").concat(ze),Ze="".concat(He," Age value should be a number. ").concat(ze),Xe="".concat(He," DOB value should be a Date Object"),Qe="".concat(He," setEnum(value). value should be a string or a number"),et="".concat(He," Phone number should be formatted as +[country code][number]"),tt=function(e){if(ye(e)){for(var t in e)if(e.hasOwnProperty(t)){if(ye(e[t])||Array.isArray(e[t]))return!1;be(e[t])&&(e[t]=Ie(e[t]))}return!0}return!1},nt=function(e,t){if(ye(e)){for(var n in e)if(e.hasOwnProperty(n))if("Items"===n){if(!Array.isArray(e[n]))return!1;for(var i in e[n].length>50&&t.reportError(522,"Charged Items exceed 50 limit. Actual count: "+e[n].length),e[n])if(e[n].hasOwnProperty(i)&&(!ye(e[n][i])||!tt(e[n][i])))return!1}else{if(ye(e[n])||Array.isArray(e[n]))return!1;be(e[n])&&(e[n]=Ie(e[n]))}if(ge(e[D])||Se(e[D])){var o=e[D]+"";if(void 0===_&&(_=Te.readFromLSorCookie(L)),void 0!==_&&_.trim()===o.trim())return t.error("Duplicate charged Id - Dropped"+e),!1;_=o,Te.saveToLSorCookie(L,o)}return!0}return!1},it=w("logger"),ot=w("oldValues"),rt=w("request"),at=w("isPersonalisationActive"),st=w("processEventArray"),lt=function(e){s(o,e);var n=v(o);function o(e,i){var r,a=e.logger,s=e.request,l=e.isPersonalisationActive;return t(this,o),r=n.call(this),Object.defineProperty(f(r),st,{value:ct}),Object.defineProperty(f(r),it,{writable:!0,value:void 0}),Object.defineProperty(f(r),ot,{writable:!0,value:void 0}),Object.defineProperty(f(r),rt,{writable:!0,value:void 0}),Object.defineProperty(f(r),at,{writable:!0,value:void 0}),S(f(r),it)[it]=a,S(f(r),ot)[ot]=i,S(f(r),rt)[rt]=s,S(f(r),at)[at]=l,r}return i(o,[{key:"push",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return S(this,st)[st](t),0}},{key:"_processOldValues",value:function(){S(this,ot)[ot]&&S(this,st)[st](S(this,ot)[ot]),S(this,ot)[ot]=null}},{key:"getDetails",value:function(e){if(S(this,at)[at]()&&(void 0===xe.globalEventsMap&&(xe.globalEventsMap=Te.readFromLSorCookie(V)),void 0!==xe.globalEventsMap)){var t=xe.globalEventsMap[e],n={};return void 0!==t?(n.firstTime=new Date(1e3*t[1]),n.lastTime=new Date(1e3*t[2]),n.count=t[0],n):void 0}}}]),o}(p(Array)),ct=function(e){if(Array.isArray(e))for(;e.length>0;){var t=e.shift();if(ge(t))if(t.length>1024&&(t=t.substring(0,1024),S(this,it)[it].reportError(510,t+"... length exceeded 1024 chars. Trimmed.")),ve.includes(t))S(this,it)[it].reportError(513,t+" is a restricted system event. It cannot be used as an event name.");else{var n={type:"event"};if(n.evtName=Ce(t,T),0!==e.length){var i=e.shift();if(ye(i)){if("Charged"===t){if(!nt(i,S(this,it)[it])){S(this,it)[it].reportError(511,"Charged event structure invalid. Not sent.");continue}}else if(!tt(i)){S(this,it)[it].reportError(512,t+" event structure invalid. Not sent.");continue}n.evtData=i}else e.unshift(i)}S(this,rt)[rt].processEvent(n)}else S(this,it)[it].error(Ke)}},ut=function(e){var t={},n=e.indexOf("?");if(n>1){var i,o=e.substring(n+1),r=/\+/g,a=/([^&=]+)=?([^&]*)/g,s=function(e){var t=e.replace(r," ");try{t=decodeURIComponent(t)}catch(e){}return t};for(i=a.exec(o);i;)t[s(i[1])]=s(i[2]),i=a.exec(o)}return t},dt=function(e,t,n){return e+"&"+t+"="+encodeURIComponent(n)},pt=function(){return window.location.hostname},ft=function(e,t){return t&&"function"==typeof t.debug&&t.debug("dobj:"+e),vt(e)},ht=function(){var e="",t=0;for(t=0;t<=25;t++)e+=String.fromCharCode(t+65);for(t=0;t<=25;t++)e+=String.fromCharCode(t+97);for(t=0;t<10;t++)e+=t;return e+"+/="}(),vt=function(e){if(null==e)return"";var t,n,i,o,r,a,s,l="",c=0;for(e=function(e){if(null==e)return"";var t,n,i,o={},r={},a="",s="",l="",c=2,u=3,d=2,p="",f=0,h=0,v=String.fromCharCode;for(i=0;i<e.length;i+=1)if(a=e.charAt(i),Object.prototype.hasOwnProperty.call(o,a)||(o[a]=u++,r[a]=!0),s=l+a,Object.prototype.hasOwnProperty.call(o,s))l=s;else{if(Object.prototype.hasOwnProperty.call(r,l)){if(l.charCodeAt(0)<256){for(t=0;t<d;t++)f<<=1,15==h?(h=0,p+=v(f),f=0):h++;for(n=l.charCodeAt(0),t=0;t<8;t++)f=f<<1|1&n,15==h?(h=0,p+=v(f),f=0):h++,n>>=1}else{for(n=1,t=0;t<d;t++)f=f<<1|n,15==h?(h=0,p+=v(f),f=0):h++,n=0;for(n=l.charCodeAt(0),t=0;t<16;t++)f=f<<1|1&n,15==h?(h=0,p+=v(f),f=0):h++,n>>=1}0==--c&&(c=Math.pow(2,d),d++),delete r[l]}else for(n=o[l],t=0;t<d;t++)f=f<<1|1&n,15==h?(h=0,p+=v(f),f=0):h++,n>>=1;0==--c&&(c=Math.pow(2,d),d++),o[s]=u++,l=String(a)}if(""!==l){if(Object.prototype.hasOwnProperty.call(r,l)){if(l.charCodeAt(0)<256){for(t=0;t<d;t++)f<<=1,15==h?(h=0,p+=v(f),f=0):h++;for(n=l.charCodeAt(0),t=0;t<8;t++)f=f<<1|1&n,15==h?(h=0,p+=v(f),f=0):h++,n>>=1}else{for(n=1,t=0;t<d;t++)f=f<<1|n,15==h?(h=0,p+=v(f),f=0):h++,n=0;for(n=l.charCodeAt(0),t=0;t<16;t++)f=f<<1|1&n,15==h?(h=0,p+=v(f),f=0):h++,n>>=1}0==--c&&(c=Math.pow(2,d),d++),delete r[l]}else for(n=o[l],t=0;t<d;t++)f=f<<1|1&n,15==h?(h=0,p+=v(f),f=0):h++,n>>=1;0==--c&&(c=Math.pow(2,d),d++)}for(n=2,t=0;t<d;t++)f=f<<1|1&n,15==h?(h=0,p+=v(f),f=0):h++,n>>=1;for(;;){if(f<<=1,15==h){p+=v(f);break}h++}return p}(e);c<2*e.length;)c%2==0?(t=e.charCodeAt(c/2)>>8,n=255&e.charCodeAt(c/2),i=c/2+1<e.length?e.charCodeAt(c/2+1)>>8:NaN):(t=255&e.charCodeAt((c-1)/2),(c+1)/2<e.length?(n=e.charCodeAt((c+1)/2)>>8,i=255&e.charCodeAt((c+1)/2)):n=i=NaN),c+=3,o=t>>2,r=(3&t)<<4|n>>4,a=(15&n)<<2|i>>6,s=63&i,isNaN(n)?a=s=64:isNaN(i)&&(s=64),l=l+ht.charAt(o)+ht.charAt(r)+ht.charAt(a)+ht.charAt(s);return l},gt=w("fireRequest"),yt=w("dropRequestDueToOptOut"),bt=w("addUseIPToRequest"),mt=w("addARPToRequest"),wt=function(){function e(){t(this,e)}return i(e,null,[{key:"fireRequest",value:function(e,t,n){S(this,gt)[gt](e,1,t,n)}}]),e}();wt.logger=void 0,wt.device=void 0,Object.defineProperty(wt,gt,{value:function(e,t,n,i){var o,r,a=this;if(S(this,yt)[yt]())this.logger.debug("req dropped due to optout cookie: "+this.device.gcookie);else if(_e(this.device.gcookie)||(xe.blockRequest=!0),!_e(this.device.gcookie)&&xe.globalCache.RESP_N<xe.globalCache.REQ_N-1&&t<200)setTimeout((function(){a.logger.debug("retrying fire request for url: ".concat(e,", tries: ").concat(t)),S(a,gt)[gt](e,t+1,n,i)}),50);else{if(i?window.isOULInProgress=!0:(_e(this.device.gcookie)&&(e=dt(e,"gc",this.device.gcookie)),e=S(this,mt)[mt](e,n)),e=dt(e,"tries",t),e=S(this,bt)[bt](e),e=dt(e,"r",(new Date).getTime()),(null===(o=window.clevertap)||void 0===o?void 0:o.hasOwnProperty("plugin"))||(null===(r=window.wizrocket)||void 0===r?void 0:r.hasOwnProperty("plugin"))){var s=window.clevertap.plugin||window.wizrocket.plugin;e=dt(e,"ct_pl",s)}-1!==e.indexOf("chrome-extension:")&&(e=e.replace("chrome-extension:","https:"));for(var l=document.getElementsByClassName("ct-jp-cb");l[0];)l[0].parentNode.removeChild(l[0]);var c=document.createElement("script");c.setAttribute("type","text/javascript"),c.setAttribute("src",e),c.setAttribute("class","ct-jp-cb"),c.setAttribute("rel","nofollow"),c.async=!0,document.getElementsByTagName("head")[0].appendChild(c),this.logger.debug("req snt -> url: "+e)}}}),Object.defineProperty(wt,yt,{value:function(){return!xe.isOptInRequest&&_e(this.device.gcookie)&&ge(this.device.gcookie)?":OO"===this.device.gcookie.slice(-3):(xe.isOptInRequest=!1,!1)}}),Object.defineProperty(wt,bt,{value:function(e){var t=Te.getMetaProp(Y);return"boolean"!=typeof t&&(t=!1),dt(e,Y,t?"true":"false")}}),Object.defineProperty(wt,mt,{value:function(e,t){if(!0===t){return dt(e,"arp",ft(JSON.stringify({skipResARP:!0}),this.logger))}return Te._isLocalStorageSupported()&&void 0!==localStorage.getItem(z)&&null!==localStorage.getItem(z)?dt(e,"arp",ft(JSON.stringify(Te.readFromLSorCookie(z)),this.logger)):e}});var St=function(){var e={};return Te._isLocalStorageSupported()&&(e=null!=(e=Te.read(j))?JSON.parse(decodeURIComponent(e).replace(M,'"')):{}),e},_t=function(e){if(Te._isLocalStorageSupported()){var t=JSON.stringify(e);Te.save(j,encodeURIComponent(t)),kt()}},kt=function(){if(Te._isLocalStorageSupported()){var e=Te.read(N);if(_e(e))try{e=JSON.parse(decodeURIComponent(Te.read(N)));var t=Te.read(F)?JSON.parse(decodeURIComponent(Te.read(F))):{},n={};if(e&&Te._isLocalStorageSupported()){n=St();var i=Object.keys(t).length&&t[e]?t[e]:{},o=n.global,r=n[Ee()];if(void 0!==o){var a=Object.keys(o);for(var s in a){var l=[];if(a.hasOwnProperty(s)){var c=0,u=0,d=a[s];if("tc"===d)continue;void 0!==r&&void 0!==r[d]&&(c=r[d]),void 0!==o&&void 0!==o[d]&&(u=o[d]),l=[d,c,u],i[d]=l}}}t[e]=i,Te.save(F,encodeURIComponent(JSON.stringify(t)))}}catch(e){console.error("Invalid clevertap Id "+e)}}},Ct=function(){var e=JSON.parse(decodeURIComponent(Te.read(N))),t={};if(Te._isLocalStorageSupported()){t=St();var n=Te.read(F)&&JSON.parse(decodeURIComponent(Te.read(F)))[e]?Object.values(JSON.parse(decodeURIComponent(Te.read(F)))[e]):[],i=t[Ee()],o=0;return void 0!==i&&void 0!==i.tc&&(o=i.tc),{wmp:o,tlc:n}}},Et=function(e,t){var n=t.logger,i=!1;if(ye(e))for(var o in e)if(e.hasOwnProperty(o)){i=!0;var r=e[o];if(null==r){delete e[o];continue}"Gender"!==o||r.match(/^M$|^F$/)||(i=!1,n.error(Ge)),"Employed"!==o||r.match(/^Y$|^N$/)||(i=!1,n.error(Ye)),"Married"!==o||r.match(/^Y$|^N$/)||(i=!1,n.error(Je)),"Education"!==o||r.match(/^School$|^College$|^Graduate$/)||(i=!1,n.error($e)),"Age"===o&&null!=r&&(we(r)?e.Age=+r:(i=!1,n.error(Ze))),"DOB"===o?(/^\$D_/.test(r)&&11===(r+"").length||be(r)||(i=!1,n.error(Xe)),be(r)&&(e[o]=Ie(r))):be(r)&&(e[o]=Ie(r)),"Phone"!==o||me(r)||(r.length>8&&"+"===r.charAt(0)?(r=r.substring(1,r.length),we(r)?e.Phone=+r:(i=!1,n.error(et+". Removed."))):(i=!1,n.error(et+". Removed."))),i||delete e[o]}return i},At=function(e){var t={};t.Name=e.name,null!=e.id&&(t.FBID=e.id+""),"male"===e.gender?t.Gender="M":"female"===e.gender?t.Gender="F":t.Gender="O";null!=e.relationship_status&&(t.Married="N","Married"===e.relationship_status&&(t.Married="Y"));var n=function(e){if(null!=e){for(var t="",n="",i=0;i<e.length;i++){var o=e[i];if(null!=o.type){var r=o.type;if("Graduate School"===r)return"Graduate";"College"===r?t="1":"High School"===r&&(n="1")}}if("1"===t)return"College";if("1"===n)return"School"}}(e.education);null!=n&&(t.Education=n);var i=null!=e.work?e.work.length:0;if(t.Employed=i>0?"Y":"N",null!=e.email&&(t.Email=e.email),null!=e.birthday){var o=e.birthday.split("/");t.DOB=Pe(o[2]+o[0]+o[1])}return t},It=function(e,t){var n=t.logger,i={};if(null!=e.displayName&&(i.Name=e.displayName),null!=e.id&&(i.GPID=e.id+""),null!=e.gender&&("male"===e.gender?i.Gender="M":"female"===e.gender?i.Gender="F":"other"===e.gender&&(i.Gender="O")),null!=e.image&&!1===e.image.isDefault&&(i.Photo=e.image.url.split("?sz")[0]),null!=e.emails)for(var o=0;o<e.emails.length;o++){var r=e.emails[o];"account"===r.type&&(i.Email=r.value)}if(null!=e.organizations){i.Employed="N";for(var a=0;a<e.organizations.length;a++)"work"===e.organizations[a].type&&(i.Employed="Y")}if(null!=e.birthday){var s=e.birthday.split("-");i.DOB=Pe(s[0]+s[1]+s[2])}return null!=e.relationshipStatus&&(i.Married="N","married"===e.relationshipStatus&&(i.Married="Y")),n.debug("gplus usr profile "+JSON.stringify(i)),i},Pt=function(e,t){if(Te._isLocalStorageSupported()){if(null==xe.globalProfileMap&&(xe.globalProfileMap=Te.readFromLSorCookie(q),null==xe.globalProfileMap&&(xe.globalProfileMap={})),null!=e._custom){var n=e._custom;for(var i in n)n.hasOwnProperty(i)&&(e[i]=n[i]);delete e._custom}for(var o in e)if(e.hasOwnProperty(o)){if(xe.globalProfileMap.hasOwnProperty(o)&&!t)continue;xe.globalProfileMap[o]=e[o]}null!=xe.globalProfileMap._custom&&delete xe.globalProfileMap._custom,Te.saveToLSorCookie(q,xe.globalProfileMap)}},Ot=function(e,t,n){if(null!=e&&"-1"!==e&&Te._isLocalStorageSupported()){var i=St(),o=i[n];null==o&&(o={},i[n]=o),o[e]="dnd",_t(i)}if(null!=xe.campaignDivMap){var r=xe.campaignDivMap[e];null!=r&&(document.getElementById(r).style.display="none","intentPreview"===r&&null!=document.getElementById("intentOpacityDiv")&&(document.getElementById("intentOpacityDiv").style.display="none"))}},Tt=function(e,t){if(ge(e)||Se(e))return"$E_"+e;t.error(Qe)},xt=function(e,t,n,i,o){var r=ut(location.href),a=r.e,s=r.p;if(void 0!==a){var l={};l.id=i.id,l.unsubGroups=xe.unsubGroups,xe.updatedCategoryLong&&(l[ee]=xe.updatedCategoryLong);var c=i.emailURL;n&&(c=dt(c,"fetchGroups",n)),t&&(c=dt(c,"encoded",t)),c=dt(c,"e",a),c=dt(c,"d",ft(JSON.stringify(l),o)),s&&(c=dt(c,"p",s)),"-1"!==e&&(c=dt(c,"sub",e)),wt.fireRequest(c)}},Mt=w("logger"),Rt=w("request"),Dt=w("account"),Lt=w("oldValues"),Nt=w("isPersonalisationActive"),Ut=w("processProfileArray"),jt=function(e){s(r,e);var n=v(r);function r(e,i){var o,a=e.logger,s=e.request,l=e.account,c=e.isPersonalisationActive;return t(this,r),o=n.call(this),Object.defineProperty(f(o),Ut,{value:Ft}),Object.defineProperty(f(o),Mt,{writable:!0,value:void 0}),Object.defineProperty(f(o),Rt,{writable:!0,value:void 0}),Object.defineProperty(f(o),Dt,{writable:!0,value:void 0}),Object.defineProperty(f(o),Lt,{writable:!0,value:void 0}),Object.defineProperty(f(o),Nt,{writable:!0,value:void 0}),S(f(o),Mt)[Mt]=a,S(f(o),Rt)[Rt]=s,S(f(o),Dt)[Dt]=l,S(f(o),Lt)[Lt]=i,S(f(o),Nt)[Nt]=c,o}return i(r,[{key:"push",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return S(this,Ut)[Ut](t),0}},{key:"_processOldValues",value:function(){S(this,Lt)[Lt]&&S(this,Ut)[Ut](S(this,Lt)[Lt]),S(this,Lt)[Lt]=null}},{key:"getAttribute",value:function(e){if(S(this,Nt)[Nt]())return null==xe.globalProfileMap&&(xe.globalProfileMap=Te.readFromLSorCookie(q)),null!=xe.globalProfileMap?xe.globalProfileMap[e]:void 0}},{key:"_handleIncrementDecrementValue",value:function(e,t,n){var i;if(null==xe.globalProfileMap&&(xe.globalProfileMap=Te.readFromLSorCookie(q)),null!=xe.globalProfileMap||(null===(i=xe.globalProfileMap)||void 0===i?void 0:i.hasOwnProperty(e)))if(!t||"number"!=typeof t||t<=0)console.error("Value should be a number greater than 0");else{xe.globalProfileMap[e]=n===se?xe.globalProfileMap[e]+t:xe.globalProfileMap[e]-t,Te.saveToLSorCookie(q,xe.globalProfileMap);var r={},a={};r.type="profile",a[e]=o({},n,t),null==a.tz&&(a.tz=(new Date).toString().match(/([A-Z]+[\+-][0-9]+)/)[1]),r.profile=a,r=S(this,Rt)[Rt].addSystemDataToProfileObject(r,void 0),S(this,Rt)[Rt].addFlags(r);var s=ft(JSON.stringify(r),S(this,Mt)[Mt]),l=S(this,Dt)[Dt].dataPostURL;l=dt(l,"type",Z),l=dt(l,"d",s),S(this,Rt)[Rt].saveAndFireRequest(l,xe.blockRequest)}else console.error("Kindly create profile with required proprty to increment/decrement.")}},{key:"_handleMultiValueSet",value:function(e,t,n){for(var i,o=[],r=0;r<t.length;r++)"number"!=typeof t[r]||o.includes(t[r])?"string"!=typeof t[r]||o.includes(t[r].toLowerCase())?console.error("array supports only string or number type values"):o.push(t[r].toLowerCase()):o.push(t[r]);null==xe.globalProfileMap&&(xe.globalProfileMap=null!==(i=Te.readFromLSorCookie(q))&&void 0!==i?i:{}),xe.globalProfileMap[e]=o,Te.saveToLSorCookie(q,xe.globalProfileMap),this.sendMultiValueData(e,t,n)}},{key:"_handleMultiValueAdd",value:function(e,t,n){var i,o=[];if(null==xe.globalProfileMap&&(xe.globalProfileMap=null!==(i=Te.readFromLSorCookie(q))&&void 0!==i?i:{}),"string"==typeof t||"number"==typeof t)xe.globalProfileMap.hasOwnProperty(e)?(o=xe.globalProfileMap[e],"number"==typeof t?o.push(t):o.push(t.toLowerCase())):xe.globalProfileMap[e]=t;else{xe.globalProfileMap.hasOwnProperty(e)&&(o=xe.globalProfileMap[e]);for(var r=0;r<t.length;r++)"number"!=typeof t[r]||o.includes(t[r])?"string"!=typeof t[r]||o.includes(t[r].toLowerCase())?"number"==typeof t[r]&&o.includes(t[r])||"string"==typeof t[r]&&o.includes(t[r].toLowerCase())?console.error("Values already included"):console.error("array supports only string or number type values"):o.push(t[r].toLowerCase()):o.push(t[r]);xe.globalProfileMap[e]=o}Te.saveToLSorCookie(q,xe.globalProfileMap),this.sendMultiValueData(e,t,n)}},{key:"_handleMultiValueRemove",value:function(e,t,n){var i;if(null==xe.globalProfileMap&&(xe.globalProfileMap=Te.readFromLSorCookie(q)),null==xe||null===(i=xe.globalProfileMap)||void 0===i?void 0:i.hasOwnProperty(e))if("string"==typeof t||"number"==typeof t){var o=xe.globalProfileMap[e].indexOf(t);-1!==o&&xe.globalProfileMap[e].splice(o,1)}else for(var r=0;r<t.length;r++){var a=xe.globalProfileMap[e].indexOf(t[r]);-1!==a&&xe.globalProfileMap[e].splice(a,1)}else console.error("The property ".concat(e," does not exist."));Te.saveToLSorCookie(q,xe.globalProfileMap),this.sendMultiValueData(e,t,n)}},{key:"_handleMultiValueDelete",value:function(e,t){var n;null==xe.globalProfileMap&&(xe.globalProfileMap=Te.readFromLSorCookie(q)),(null==xe||null===(n=xe.globalProfileMap)||void 0===n?void 0:n.hasOwnProperty(e))?delete xe.globalProfileMap[e]:console.error("The property ".concat(e," does not exist.")),Te.saveToLSorCookie(q,xe.globalProfileMap),this.sendMultiValueData(e,null,t)}},{key:"sendMultiValueData",value:function(e,t,n){var i={},r={};i.type="profile",r[e]=o({},n,n===pe||t),null==r.tz&&(r.tz=(new Date).toString().match(/([A-Z]+[\+-][0-9]+)/)[1]),i.profile=r,i=S(this,Rt)[Rt].addSystemDataToProfileObject(i,void 0),S(this,Rt)[Rt].addFlags(i);var a=ft(JSON.stringify(i),S(this,Mt)[Mt]),s=S(this,Dt)[Dt].dataPostURL;s=dt(s,"type",Z),s=dt(s,"d",a),S(this,Rt)[Rt].saveAndFireRequest(s,xe.blockRequest)}}]),r}(p(Array)),Ft=function(e){if(Array.isArray(e)&&e.length>0)for(var t in e)if(e.hasOwnProperty(t)){var n=e[t],i={},o=void 0;if(null!=n.Site){if(o=n.Site,me(o)||!Et(o,{logger:S(this,Mt)[Mt]}))return}else if(null!=n.Facebook){var r=n.Facebook;me(r)||r.error||(o=At(r))}else if(null!=n["Google Plus"]){var a=n["Google Plus"];me(a)||a.error||(o=It(a,{logger:S(this,Mt)[Mt]}))}if(null!=o&&!me(o)){i.type="profile",null==o.tz&&(o.tz=(new Date).toString().match(/([A-Z]+[\+-][0-9]+)/)[1]),i.profile=o,Pt(o,!0),i=S(this,Rt)[Rt].addSystemDataToObject(i,void 0),S(this,Rt)[Rt].addFlags(i);var s=ft(JSON.stringify(i),S(this,Mt)[Mt]),l=S(this,Dt)[Dt].dataPostURL;l=dt(l,"type",Z),l=dt(l,"d",s),S(this,Rt)[Rt].saveAndFireRequest(l,xe.blockRequest)}}},Vt=w("request"),Bt=w("logger"),qt=w("account"),zt=w("session"),Ht=w("oldValues"),Wt=w("device"),Kt=w("processOUL"),Gt=w("handleCookieFromCache"),Yt=w("deleteUser"),Jt=w("processLoginArray"),$t=function(e){s(o,e);var n=v(o);function o(e,i){var r,a=e.request,s=e.account,l=e.session,c=e.logger,u=e.device;return t(this,o),r=n.call(this),Object.defineProperty(f(r),Jt,{value:en}),Object.defineProperty(f(r),Yt,{value:Qt}),Object.defineProperty(f(r),Gt,{value:Xt}),Object.defineProperty(f(r),Kt,{value:Zt}),Object.defineProperty(f(r),Vt,{writable:!0,value:void 0}),Object.defineProperty(f(r),Bt,{writable:!0,value:void 0}),Object.defineProperty(f(r),qt,{writable:!0,value:void 0}),Object.defineProperty(f(r),zt,{writable:!0,value:void 0}),Object.defineProperty(f(r),Ht,{writable:!0,value:void 0}),Object.defineProperty(f(r),Wt,{writable:!0,value:void 0}),S(f(r),Vt)[Vt]=a,S(f(r),qt)[qt]=s,S(f(r),zt)[zt]=l,S(f(r),Bt)[Bt]=c,S(f(r),Ht)[Ht]=i,S(f(r),Wt)[Wt]=u,r}return i(o,[{key:"clear",value:function(){S(this,Bt)[Bt].debug("clear called. Reset flag has been set."),S(this,Yt)[Yt](),Te.setMetaProp(R,!0)}},{key:"push",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return S(this,Jt)[Jt](t),0}},{key:"_processOldValues",value:function(){S(this,Ht)[Ht]&&S(this,Jt)[Jt](S(this,Ht)[Ht]),S(this,Ht)[Ht]=null}}]),o}(p(Array)),Zt=function(e){var t=this,n=!0;Te.saveToLSorCookie(re,n);var i=function(e){var i,o=Te.readFromLSorCookie(U),r=Te.readFromLSorCookie(N);if(null==o)o={},i=e;else{var a=!1,s=!1;if(null==(i=o.id)&&(i=e[0],a=!0),null==xe.LRU_CACHE&&Te._isLocalStorageSupported()&&(xe.LRU_CACHE=new De(100)),a)null!=r&&(xe.LRU_CACHE.set(i,r),xe.blockRequest=!1);else for(var l in e)if(e.hasOwnProperty(l)){var c=e[l];if(xe.LRU_CACHE.cache[c]){i=c,s=!0;break}}if(s){i!==xe.LRU_CACHE.getLastKey()?S(t,Gt)[Gt]():(n=!1,Te.saveToLSorCookie(re,n));var u=xe.LRU_CACHE.get(i);xe.LRU_CACHE.set(i,u),Te.saveToLSorCookie(N,u),S(t,Wt)[Wt].gcookie=u;var d=xe.LRU_CACHE.getSecondLastKey();if(Te.readFromLSorCookie(re)&&-1!==d){var p=xe.LRU_CACHE.cache[d];S(t,Vt)[Vt].unregisterTokenForGuid(p)}}else a?null!=r&&(S(t,Wt)[Wt].gcookie=r,Te.saveToLSorCookie(N,r),n=!1):t.clear(),Te.saveToLSorCookie(re,!1),i=e[0]}o.id=i,Te.saveToLSorCookie(U,o)};if(Array.isArray(e)&&e.length>0)for(var o in e)if(e.hasOwnProperty(o)){var r=e[o],a={},s=void 0;if(null!=r.Site){if(s=r.Site,me(s)||!Et(s,{logger:S(this,Bt)[Bt]}))return}else if(null!=r.Facebook){var l=r.Facebook;me(l)||l.error||(s=At(l))}else if(null!=r["Google Plus"]){var c=r["Google Plus"];me(c)&&!c.error&&(s=It(c,{logger:S(this,Bt)[Bt]}))}if(null!=s&&!me(s)){a.type="profile",null==s.tz&&(s.tz=(new Date).toString().match(/([A-Z]+[\+-][0-9]+)/)[1]),a.profile=s;var u=[];Te._isLocalStorageSupported()&&(null!=s.Identity&&u.push(s.Identity),null!=s.Email&&u.push(s.Email),null!=s.GPID&&u.push("GP:"+s.GPID),null!=s.FBID&&u.push("FB:"+s.FBID),u.length>0&&i(u)),Pt(s,!0),a=S(this,Vt)[Vt].addSystemDataToObject(a,void 0),S(this,Vt)[Vt].addFlags(a),n&&(a[$]=!0);var d=ft(JSON.stringify(a),S(this,Bt)[Bt]),p=S(this,qt)[qt].dataPostURL;p=dt(p,"type",Z),p=dt(p,"d",d),S(this,Vt)[Vt].saveAndFireRequest(p,xe.blockRequest,n)}}},Xt=function(){xe.blockRequest=!1,console.debug("Block request is false"),Te._isLocalStorageSupported()&&(delete localStorage[q],delete localStorage[V],delete localStorage[B],delete localStorage[z],delete localStorage[j],delete localStorage[L]),Te.removeCookie(j,pt()),Te.removeCookie(S(this,zt)[zt].cookieName,xe.broadDomain),Te.removeCookie(z,xe.broadDomain),S(this,zt)[zt].setSessionCookieObject("")},Qt=function(){xe.blockRequest=!0,S(this,Bt)[Bt].debug("Block request is true"),xe.globalCache={gcookie:null,REQ_N:0,RESP_N:0},Te._isLocalStorageSupported()&&(delete localStorage[N],delete localStorage[U],delete localStorage[q],delete localStorage[V],delete localStorage[B],delete localStorage[z],delete localStorage[j],delete localStorage[L]),Te.removeCookie(N,xe.broadDomain),Te.removeCookie(j,pt()),Te.removeCookie(U,pt()),Te.removeCookie(S(this,zt)[zt].cookieName,xe.broadDomain),Te.removeCookie(z,xe.broadDomain),S(this,Wt)[Wt].gcookie=null,S(this,zt)[zt].setSessionCookieObject("")},en=function(e){if(Array.isArray(e)&&e.length>0){var t=e.pop();if(null!=t&&ye(t)&&(null!=t.Site&&Object.keys(t.Site).length>0||null!=t.Facebook&&Object.keys(t.Facebook).length>0||null!=t["Google Plus"]&&Object.keys(t["Google Plus"]).length>0)){Te.setInstantDeleteFlagInK();try{S(this,Kt)[Kt]([t])}catch(e){S(this,Bt)[Bt].debug(e)}}else S(this,Bt)[Bt].error("Profile object is in incorrect format")}},tn=function(e){s(o,e);var n=v(o);function o(){var e;return t(this,o),(e=n.call(this))._details=null,e.shadow=null,e.shadow=e.attachShadow({mode:"open"}),e}return i(o,[{key:"renderBanner",value:function(){var e=this;this.shadow.innerHTML=this.getBannerContent(),!1!==this.trackClick&&this.addEventListener("click",(function(){var t=e.details.onClick;t&&(e.details.window?window.open(t,"_blank"):window.parent.location.href=t),window.clevertap.renderNotificationClicked({msgId:e.msgId,pivotId:e.pivotId})})),window.clevertap.renderNotificationViewed({msgId:this.msgId,pivotId:this.pivotId})}},{key:"getBannerContent",value:function(){return'\n      <style type="text/css">\n        .banner {\n          position: relative;\n          cursor: '.concat(this.details.onClick?"pointer":"","\n        }\n        img {\n          height: ").concat(this.divHeight?this.divHeight:"auto",";\n          width: 100%;\n        }\n        .wrapper:is(.left, .right, .center) {\n          display: flex;\n          justify-content: center;\n          flex-direction: column;\n          align-items: center;\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          overflow: auto;\n          top: 0;\n        }\n        ").concat(this.details.css?this.details.css:"",'\n      </style>\n      <div class="banner">\n        <picture>\n          <source media="(min-width:480px)" srcset="').concat(this.details.desktopImageURL,'">\n          <source srcset="').concat(this.details.mobileImageURL,'">\n          <img src="').concat(this.details.desktopImageURL,'" alt="Please upload a picture" style="width:100%;" part="banner__img">\n        </picture>\n        ').concat(this.details.html?this.details.html:"","\n      </div>\n    ")}},{key:"details",get:function(){return this._details||""},set:function(e){null===this._details&&(this._details=e,this.renderBanner())}}]),o}(p(HTMLElement)),nn=function(e){s(o,e);var n=v(o);function o(){var e;return t(this,o),(e=n.call(this))._target=null,e._carousel=null,e.shadow=null,e.slides=0,e.previouslySelectedItem=-1,e.selectedItem=1,e.autoSlide=null,e.stopAutoSlideTimeout=null,e.shadow=e.attachShadow({mode:"open"}),void 0===customElements.get("ct-web-personalisation-banner")&&customElements.define("ct-web-personalisation-banner",tn),e}return i(o,[{key:"renderCarousel",value:function(){this.slides=this.details.length,this.shadow.innerHTML=this.getStyles();var e=this.getCarouselContent();this.display.showNavBtns&&e.insertAdjacentHTML("beforeend",this.display.navBtnsHtml),this.display.showNavArrows&&(e.insertAdjacentHTML("beforeend",this.display.leftNavArrowHtml),e.insertAdjacentHTML("beforeend",this.display.rightNavArrowHtml)),this._carousel=e,this.shadow.appendChild(e),this.setupClick(),this.updateSelectedItem(),this.startAutoSlide(),this.setupOnHover(),window.clevertap.renderNotificationViewed({msgId:this.target.wzrk_id,pivotId:this.target.wzrk_pivot})}},{key:"setupClick",value:function(){var e=this;this._carousel.addEventListener("click",(function(t){var n=t.target.id;if(n.startsWith("carousel__button")){var i=+n.split("-")[1];i!==e.selectedItem&&(e.previouslySelectedItem=e.selectedItem,e.selectedItem=i,e.updateSelectedItem(),e.startAutoSlide())}else if(n.startsWith("carousel__arrow"))n.endsWith("right")?e.goToNext():e.goToPrev(),e.startAutoSlide();else if(n.indexOf("-")>-1){var o=+n.split("-")[1],r=o-1;window.parent.clevertap&&window.clevertap.renderNotificationClicked({msgId:e.target.wzrk_id,pivotId:e.target.wzrk_pivot,wzrk_slideNo:o});var a=e.details[r].onClick;""!==a&&(e.details[r].window?window.open(a,"_blank"):window.location.href=a)}}))}},{key:"setupOnHover",value:function(){var e=this;this._carousel.addEventListener("mouseenter",(function(t){e.stopAutoSlideTimeout=setTimeout((function(){e.autoSlide=clearInterval(e.autoSlide)}),500)})),this._carousel.addEventListener("mouseleave",(function(t){clearTimeout(e.stopAutoSlideTimeout),void 0===e.autoSlide&&e.startAutoSlide()}))}},{key:"getCarouselContent",value:function(){var e=document.createElement("div");return e.setAttribute("class","carousel"),this.details.forEach((function(t,n){var i=document.createElement("ct-web-personalisation-banner");i.classList.add("carousel__item"),i.trackClick=!1,i.setAttribute("id","carousel__item-".concat(n+1)),i.details=t,e.appendChild(i)})),e}},{key:"getStyles",value:function(){var e,t;return"\n      <style>\n      .carousel {\n        position: relative;\n      }\n\n      .carousel__item {\n        background-color: grey;\n        display: none;\n        background-repeat: no-repeat;\n        background-size: cover;\n      }\n\n      ct-web-personalisation-banner::part(banner__img) {\n        height: ".concat((null==this||null===(e=this.target)||void 0===e||null===(t=e.display)||void 0===t?void 0:t.divHeight)?this.target.display.divHeight:"auto",";\n        width: 100%;\n        transition: 2s;\n      }\n\n      .carousel__item--selected {\n        display: block;\n      }\n      ").concat(this.display.navBtnsCss,"\n      ").concat(this.display.navArrowsCss,"\n      </style>\n  ")}},{key:"updateSelectedItem",value:function(){if(-1!==this.previouslySelectedItem){var e=this.shadow.getElementById("carousel__item-".concat(this.previouslySelectedItem)),t=this.shadow.getElementById("carousel__button-".concat(this.previouslySelectedItem));e.classList.remove("carousel__item--selected"),t.classList.remove("carousel__button--selected")}var n=this.shadow.getElementById("carousel__item-".concat(this.selectedItem)),i=this.shadow.getElementById("carousel__button-".concat(this.selectedItem));n.classList.add("carousel__item--selected"),i.classList.add("carousel__button--selected")}},{key:"startAutoSlide",value:function(){var e=this;clearInterval(this.autoSlide),this.autoSlide=setInterval((function(){e.goToNext()}),this.display.sliderTime?1e3*this.display.sliderTime:3e3)}},{key:"goToNext",value:function(){this.goTo(this.selectedItem,(this.selectedItem+1)%this.slides)}},{key:"goToPrev",value:function(){this.goTo(this.selectedItem,this.selectedItem-1)}},{key:"goTo",value:function(e,t){this.previouslySelectedItem=e,this.selectedItem=t,0===t&&(this.selectedItem=this.slides),this.updateSelectedItem()}},{key:"target",get:function(){return this._target||""},set:function(e){null===this._target&&(this._target=e,this.renderCarousel())}},{key:"details",get:function(){return this.target.display.details}},{key:"display",get:function(){return this.target.display}}]),o}(p(HTMLElement)),on=function(e){s(o,e);var n=v(o);function o(){var e;return t(this,o),(e=n.call(this))._target=null,e.shadow=null,e.popup=null,e.container=null,e.shadow=e.attachShadow({mode:"open"}),e}return i(o,[{key:"renderImageOnlyPopup",value:function(){var e=this;this.shadow.innerHTML=this.getImageOnlyPopupContent(),this.popup=this.shadowRoot.getElementById("imageOnlyPopup"),this.container=this.shadowRoot.getElementById("container"),this.closeIcon=this.shadowRoot.getElementById("close"),this.popup.addEventListener("load",this.updateImageAndContainerWidth()),this.closeIcon.addEventListener("click",(function(){document.getElementById("wzrkImageOnlyDiv").style.display="none",e.remove()})),window.clevertap.renderNotificationViewed({msgId:this.msgId,pivotId:this.pivotId}),this.onClickUrl&&this.popup.addEventListener("click",(function(){e.target.display.window?window.open(e.onClickUrl,"_blank"):window.parent.location.href=e.onClickUrl,window.clevertap.renderNotificationClicked({msgId:e.msgId,pivotId:e.pivotId})}))}},{key:"getImageOnlyPopupContent",value:function(){return"\n        ".concat(this.target.msgContent.css,"\n        ").concat(this.target.msgContent.html,"\n      ")}},{key:"updateImageAndContainerWidth",value:function(){var e=this;return function(){var t=e.getRenderedImageWidth(e.popup);e.popup.style.setProperty("width","".concat(t,"px")),e.container.style.setProperty("width","".concat(t,"px")),e.container.style.setProperty("height","auto"),e.popup.style.setProperty("visibility","visible"),e.closeIcon.style.setProperty("visibility","visible"),document.getElementById("wzrkImageOnlyDiv").style.visibility="visible"}}},{key:"getRenderedImageWidth",value:function(e){var t=e.naturalWidth/e.naturalHeight;return e.height*t}},{key:"target",get:function(){return this._target||""},set:function(e){null===this._target&&(this._target=e,this.renderImageOnlyPopup())}},{key:"msgId",get:function(){return this.target.wzrk_id}},{key:"pivotId",get:function(){return this.target.wzrk_pivot}},{key:"onClickUrl",get:function(){return this.target.display.onClickUrl}}]),o}(p(HTMLElement)),rn=function(e){s(o,e);var n=v(o);function o(e,i){var r;return t(this,o),(r=n.call(this)).wrapper=null,r.snackBar=null,r.shadow=r.attachShadow({mode:"open"}),r.config=e,r.message=i,r.renderMessage(i),r}return i(o,[{key:"createEl",value:function(e,t,n){var i=document.createElement(e);return i.setAttribute("id",t),i.setAttribute("part",n||t),i}},{key:"renderMessage",value:function(e){switch(this.wrapper=this.createEl("div","messageWrapper"),e.templateType){case"text-only":case"text-with-icon":case"text-with-icon-and-image":var t=this.prepareBasicMessage(e.msg[0]);this.wrapper.appendChild(t)}var n=this.createEl("div","timeStamp");if(n.innerHTML="<span>".concat(fn(e.id.split("_")[1]),"<span>"),!e.viewed){var i=this.createEl("span","unreadMarker");n.appendChild(i)}this.wrapper.appendChild(n),this.shadow.appendChild(this.wrapper)}},{key:"prepareBasicMessage",value:function(e){var t=this.createEl("div","message");if(e.imageUrl){var n=this.addImage(e.imageUrl,"mainImg");t.appendChild(n)}var i=this.createEl("div","iconTitleDescWrapper");if(e.iconUrl){var o=this.addImage(e.iconUrl,"iconImg");i.appendChild(o)}var r=this.createEl("div","titleDescWrapper");if(e.title){var a=this.createEl("div","title");a.innerText=e.title,r.appendChild(a)}if(e.description){var s=this.createEl("div","description");s.innerText=e.description,r.appendChild(s)}if((e.title||e.description)&&i.appendChild(r),(e.iconUrl||e.title||e.description)&&t.appendChild(i),e.buttons&&e.buttons.length){var l=this.addButtons(e.buttons);t.appendChild(l)}return t}},{key:"addButtons",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=this.createEl("div","buttonsContainer"),i=!1;return t.forEach((function(t,o){var r=e.createEl("button","button-".concat(o),"button");r.innerText=t.text,o>0&&(r.style.cssText+="margin-left: 2px;"),"copy"===t.action&&(i=!0),n.appendChild(r)})),i&&this.addSnackbar(n),n}},{key:"addSnackbar",value:function(e){this.snackBar=this.createEl("div","snackbar-".concat(this.campaignId),"snackbar"),this.snackBar.innerHTML=gn;var t=this.createEl("span","snackbar-msg-".concat(this.campaignId),"snackbar-msg");t.innerText="Copied to clipboard",this.snackBar.appendChild(t),e.appendChild(this.snackBar)}},{key:"addImage",value:function(e,t){var n=this.createEl("div","".concat(t,"Container")),i=this.createEl("img",t);return i.setAttribute("src",e),i.setAttribute("loading","lazy"),n.appendChild(i),n}},{key:"raiseClickedEvent",value:function(e,t){switch(this.message.templateType){case"text-only":case"text-with-icon":case"text-with-icon-and-image":this.raiseClickedForBasicTemplates(e,t)}}},{key:"raiseClickedForBasicTemplates",value:function(e,t){var n=this,i=this.message.msg[0],o={msgId:this.campaignId,pivotId:this.pivotId};if("BUTTON"===e.tagName){var r=e.id.split("-")[1],a=i.buttons[r];o.kv={wzrk_c2a:a.text},"url"===a.action?a.openUrlInNewTab?window.open(a.url,"_blank"):window.location=a.url:"copy"===a.action&&(window.focus(),navigator.clipboard.writeText(a.clipboardText),this.snackBar.style.setProperty("display","flex","important"),setTimeout((function(){n.snackBar.style.setProperty("display","none","important")}),2e3))}else"CT-INBOX-MESSAGE"===e.tagName&&i.onClickUrl&&(i.openUrlInNewTab?window.open(i.onClickUrl,"_blank"):window.location=i.onClickUrl);t?console.log("Notifiction clicked event will be raised at run time with payload ::",o):window.clevertap.renderNotificationClicked(o)}},{key:"pivotId",get:function(){return this.message.wzrk_pivot}},{key:"campaignId",get:function(){return this.message.wzrk_id}}]),o}(p(HTMLElement)),an=function(e){s(o,e);var n=v(o);function o(e){var i;return t(this,o),(i=n.call(this)).isInboxOpen=!1,i.selectedCategory=null,i.unviewedMessages={},i.unviewedCounter=0,i.isPreview=!1,i.inboxConfigForPreview={},i.inboxSelector=null,i.inbox=null,i.emptyInboxMsg=null,i.inboxCard=null,i.unviewedBadge=null,i.observer=null,i.selectedCategoryRef=null,i.addClickListenerOnDocument=function(e){if(e.composedPath().includes(i.inbox)){var t=e.path||e.composedPath&&e.composedPath();if(t.length){var n=t[0].id;if("closeInbox"===n)i.toggleInbox();else if(n.startsWith("category-"))i.prevCategoryRef=i.selectedCategoryRef,i.selectedCategoryRef=t[0],i.updateActiveCategory(t[0].innerText);else{var o=t.filter((function(e){var t;return(null===(t=e.id)||void 0===t?void 0:t.startsWith("button-"))||"CT-INBOX-MESSAGE"===e.tagName}));o.length&&o[o.length-1].raiseClickedEvent(o[0],i.isPreview)}}}else(i.inboxSelector.contains(e.target)||i.isInboxOpen)&&i.toggleInbox(e)},i.logger=e,i.shadow=i.attachShadow({mode:"open"}),i}return i(o,[{key:"connectedCallback",value:function(){this.init()}},{key:"init",value:function(){this.config=this.isPreview?this.inboxConfigForPreview:Te.readFromLSorCookie(fe)||{},0!==Object.keys(this.config).length&&(this.inboxSelector=document.getElementById(this.config.inboxSelector),null!==this.inboxSelector&&(this.config.styles.notificationsBadge?this.addUnviewedBadge():this.unviewedBadge&&this.unviewedBadge.remove(),this.createinbox(),document.removeEventListener("click",this.addClickListenerOnDocument),document.addEventListener("click",this.addClickListenerOnDocument),this.config.categories.length&&this.updateActiveCategory(this.selectedCategoryRef.innerText),this.shadow.innerHTML=this.getInboxStyles(),this.shadow.appendChild(this.inbox)))}},{key:"addMsgsToInboxFromLS",value:function(){var e=this,t=this.deleteExpiredAndGetUnexpiredMsgs(!1),n=Object.keys(t);0!==n.length&&(n.forEach((function(n){t[n].viewed||(e.unviewedMessages[n]=t[n],e.unviewedCounter++)})),this.buildUIForMessages(t),this.updateUnviewedBadgeCounter())}},{key:"deleteExpiredAndGetUnexpiredMsgs",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=Te.readFromLSorCookie(he)||{},n=Math.floor(Date.now()/1e3);for(var i in t)if(t[i].wzrk_ttl&&t[i].wzrk_ttl>0&&t[i].wzrk_ttl<n){if(e){var o=this.shadowRoot.getElementById(t[i].id);o&&o.remove(),t[i].viewed||(this.unviewedCounter--,this.updateUnviewedBadgeCounter())}delete t[i]}return t=Object.values(t).sort((function(e,t){return t.date-e.date})).reduce((function(e,t){return e[t.id]=t,e}),{}),Te.saveToLSorCookie(he,t),t}},{key:"updateInboxMessages",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=this.deleteExpiredAndGetUnexpiredMsgs(),i=Date.now(),o={};t.forEach((function(t,r){var a="".concat(t.wzrk_id.split("_")[0],"_").concat(Date.now());t.id=a,t.date=i-r,t.viewed=0,n[a]=t,o[a]=t,e.unviewedMessages[a]=t,e.unviewedCounter++})),Te.saveToLSorCookie(he,n),this.updateUnviewedBadgeCounter(),this.buildUIForMessages(o)}},{key:"createEl",value:function(e,t,n){var i=document.createElement(e);return i.setAttribute("id",t),i.setAttribute("part",n||t),i}},{key:"addUnviewedBadge",value:function(){var e=this;this.unviewedBadge||(this.unviewedBadge=this.createEl("div","unviewedBadge"),this.unviewedBadge.style.cssText="display: none; position: absolute; height: 16px; width: 26px; border-radius: 8px; background-color: ".concat(this.config.styles.notificationsBadge.backgroundColor,"; font-size: 12px; color: ").concat(this.config.styles.notificationsBadge.textColor,"; font-weight: bold; align-items: center; justify-content: center;"),document.body.appendChild(this.unviewedBadge)),this.updateUnviewedBadgePosition(),window.addEventListener("resize",(function(){e.updateUnviewedBadgePosition()}))}},{key:"updateUnviewedBadgePosition",value:function(){var e=this.inboxSelector.getBoundingClientRect(),t=e.top,n=e.right;this.unviewedBadge.style.top="".concat(t-8,"px"),this.unviewedBadge.style.left="".concat(n-8,"px")}},{key:"createinbox",value:function(){var e=this;this.inbox=this.createEl("div","inbox");var t=this.createEl("div","header"),n=this.createEl("div","headerTitle");n.innerText=this.config.title;var i=this.createEl("div","closeInbox");if(i.innerHTML="&times",t.appendChild(n),t.appendChild(i),this.inbox.appendChild(t),this.config.categories.length){var o=this.createCategories();this.inbox.appendChild(o)}if(this.inboxCard=this.createEl("div","inboxCard"),this.inbox.appendChild(this.inboxCard),this.emptyInboxMsg=this.createEl("div","emptyInboxMsg"),this.inboxCard.appendChild(this.emptyInboxMsg),!1===this.config.hidePoweredByCT){var r=this.createEl("img","poweredByCT");r.src="https://d2r1yp2w7bby2u.cloudfront.net/js/PB_CT_new.png",this.inbox.appendChild(r)}var a={root:this.inboxCard,rootMargin:"0px",threshold:.5};this.observer=new IntersectionObserver((function(t,n){e.handleMessageViewed(t)}),a),this.addMsgsToInboxFromLS()}},{key:"createCategories",value:function(){var e=this,t=this.createEl("div","categoriesContainer"),n=this.createEl("div","leftArrow");n.innerHTML=vn,n.children[0].style="transform: rotate(180deg)",n.addEventListener("click",(function(){e.shadowRoot.getElementById("categoriesWrapper").scrollBy(-70,0)})),t.appendChild(n);var i=this.createEl("div","categoriesWrapper");["All"].concat(g(this.config.categories)).forEach((function(t,n){var o=e.createEl("div","category-".concat(n),"category");o.innerText=t,0===n&&(e.selectedCategoryRef=o),i.appendChild(o)})),t.appendChild(i);var o=this.createEl("div","rightArrow");o.innerHTML=vn,o.addEventListener("click",(function(){e.shadowRoot.getElementById("categoriesWrapper").scrollBy(70,0)})),t.appendChild(o);var r={root:t,threshold:.9},a=i.children[0],s=i.children[this.config.categories.length];return new IntersectionObserver((function(t){e.categoryObserverCb(n,t[0].intersectionRatio>=.9)}),r).observe(a),new IntersectionObserver((function(t){e.categoryObserverCb(o,t[0].intersectionRatio>=.9)}),r).observe(s),t}},{key:"categoryObserverCb",value:function(e,t){e&&(e.style.display=t?"none":"flex")}},{key:"updateActiveCategory",value:function(e){var t=this;this.selectedCategory=e,this.inboxCard.scrollTop=0;var n=0;this.prevCategoryRef&&this.prevCategoryRef.setAttribute("selected","false"),this.selectedCategoryRef.setAttribute("selected","true"),this.inboxCard.childNodes.forEach((function(e){"emptyInboxMsg"!==e.getAttribute("id")&&(e.style.display="All"===t.selectedCategory||e.getAttribute("category")===t.selectedCategory?"block":"none","block"===e.style.display&&n++)})),0===n?(this.emptyInboxMsg.innerText="".concat(e," messages will be displayed here."),this.emptyInboxMsg.style.display="block"):this.emptyInboxMsg.style.display="none"}},{key:"buildUIForMessages",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!this.isPreview&&this.updateTSForRenderedMsgs(),this.inboxCard.scrollTop=0;var t=this.inboxCard.firstChild;for(var n in e){var i=new rn(this.config,e[n]);i.setAttribute("id",e[n].id),i.setAttribute("pivot",e[n].wzrk_pivot),i.setAttribute("part","ct-inbox-message"),this.config.categories.length>0?(i.setAttribute("category",e[n].tags[0]||""),i.style.display="All"===this.selectedCategory||e[n].category===this.selectedCategory?"block":"none"):i.style.display="block",this.inboxCard.insertBefore(i,t),this.observer.observe(i)}var o=this.inboxCard.querySelectorAll('ct-inbox-message[style*="display: block"]').length;this.emptyInboxMsg.style.display=o?"none":"block"}},{key:"handleMessageViewed",value:function(e){var t=this,n=!this.isPreview;this.isInboxOpen&&e.forEach((function(e){e.isIntersecting&&t.unviewedMessages.hasOwnProperty(e.target.id)&&0===e.target.message.viewed&&(e.target.message.viewed=1,n?(window.clevertap.renderNotificationViewed({msgId:e.target.campaignId,pivotId:e.target.pivotId}),t.updateMessageInLS(e.target.id,a(a({},e.target.message),{},{viewed:1})),setTimeout((function(){e.target.shadowRoot.getElementById("unreadMarker").style.display="none"}),1e3)):console.log("Notifiction viewed event will be raised at run time with payload ::",{msgId:e.target.campaignId,pivotId:e.target.pivotId}),t.unviewedCounter--,t.updateUnviewedBadgeCounter(),delete t.unviewedMessages[e.target.id])}))}},{key:"updateMessageInLS",value:function(e,t){if(!this.isPreview){var n=Te.readFromLSorCookie(he)||{};n[e]=t,Te.saveToLSorCookie(he,n)}}},{key:"toggleInbox",value:function(e){this.isInboxOpen=!this.isInboxOpen,this.isInboxOpen?(this.inboxCard.scrollTop=0,!this.isPreview&&this.deleteExpiredAndGetUnexpiredMsgs(),this.inbox.style.display="block",this.config.categories.length&&(this.selectedCategoryRef.setAttribute("selected","false"),this.selectedCategoryRef=this.shadowRoot.getElementById("category-0"),this.updateActiveCategory(this.selectedCategoryRef.innerText),this.shadowRoot.getElementById("categoriesWrapper").scrollLeft-=this.shadowRoot.getElementById("categoriesWrapper").scrollWidth),this.setInboxPosition(e)):this.inbox.style.display="none"}},{key:"setInboxPosition",value:function(e){var t=window.outerWidth,n=getComputedStyle(xe.inbox),i=n.getPropertyValue("--inbox-top"),o=n.getPropertyValue("--inbox-bottom"),r=n.getPropertyValue("--inbox-left"),a=n.getPropertyValue("--inbox-right");if(t>481&&!(i||o||r||a)){var s=pn(e,this.inbox.clientHeight,this.inbox.clientWidth),l=s.xPos,c=s.yPos;this.inbox.style.top=c+"px",this.inbox.style.left=l+"px"}}},{key:"updateUnviewedBadgeCounter",value:function(){null!==this.unviewedBadge&&(this.unviewedBadge.innerText=this.unviewedCounter>9?"9+":this.unviewedCounter,this.unviewedBadge.style.display=this.unviewedCounter>0?"flex":"none")}},{key:"updateTSForRenderedMsgs",value:function(){this.inboxCard.querySelectorAll("ct-inbox-message").forEach((function(e){var t=e.id.split("_")[1];e.shadow.getElementById("timeStamp").firstChild.innerText=fn(t)}))}},{key:"getInboxStyles",value:function(){var e=this.config.categories.length?64:16,t=!1===this.config.hidePoweredByCT?32:0,n={panelBackgroundColor:this.config.styles.panelBackgroundColor,panelBorderColor:this.config.styles.panelBorderColor,headerBackgroundColor:this.config.styles.header.backgroundColor,headerTitleColor:this.config.styles.header.titleColor,closeIconColor:this.config.styles.closeIconColor,categoriesTabColor:this.config.styles.categories.tabColor,categoriesTitleColor:this.config.styles.categories.titleColor,selectedCategoryTabColor:this.config.styles.categories.selectedTab.tabColor,selectedCategoryTitleColor:this.config.styles.categories.selectedTab.titleColor,headerCategoryAndPoweredByCTHeight:36+e+t};this.config.styles.categories.borderColor&&(n.categoriesBorderColor=this.config.styles.categories.borderColor),this.config.styles.categories.selectedTab.borderColor&&(n.selectedCategoryBorderColor=this.config.styles.categories.selectedTab.borderColor);var i,o,r,a,s,l,c,u,d,p,f,h,v,g,y,b,m,w,S,_,k,C=(o=(i=n).panelBackgroundColor,r=i.panelBorderColor,a=i.headerBackgroundColor,s=i.headerTitleColor,l=i.closeIconColor,c=i.categoriesTabColor,u=i.categoriesTitleColor,d=i.categoriesBorderColor,p=i.selectedCategoryTabColor,f=i.selectedCategoryTitleColor,h=i.selectedCategoryBorderColor,v=i.headerCategoryAndPoweredByCTHeight,'\n      <style id="webInboxStyles">\n        #inbox {\n          width: 100%;\n          position: fixed;\n          background-color: #fff; \n          display: none; \n          box-shadow: 0px 2px 10px 0px #d7d7d791;\n          background-color: '.concat(o,"; \n          border: 1px solid ").concat(r,";\n          top: 0;\n          left: 0;\n          height: 100%;\n          overflow: auto;\n          z-index: 1;\n          box-sizing: content-box;\n          border-radius: 4px;\n        }\n  \n        #emptyInboxMsg {\n          display: none;\n          padding: 10px;\n          text-align: center;\n          color: black;\n        }\n  \n        #header {\n          height: 36px; \n          width: 100%; \n          display: flex; \n          justify-content: center; \n          align-items: center; \n          background-color: ").concat(a,"; \n          background-color: var(--card-bg, ").concat(a,");\n          color: ").concat(s,"\n        }\n  \n        #closeInbox {\n          font-size: 20px; \n          margin-right: 12px; \n          color: ").concat(l,"; \n          cursor: pointer;\n        }\n  \n        #headerTitle {\n          font-size: 14px; \n          line-height: 20px; \n          flex-grow: 1; \n          font-weight: 700; \n          text-align: center;\n          flex-grow: 1;\n          text-align: center;\n        }\n  \n        #categoriesContainer {\n          padding: 16px 16px 0 16px; \n          height: 32px; \n          display: flex;\n          scroll-behavior: smooth;\n          position: relative;\n        }\n\n        #categoriesWrapper {\n          height: 32px; \n          overflow-x: scroll;\n          display: flex;\n          white-space: nowrap;\n          scrollbar-width: none;\n        }\n\n        #categoriesWrapper::-webkit-scrollbar {\n          display: none;\n        }\n  \n        #leftArrow, #rightArrow {\n          height: 32px;\n          align-items: center;\n          font-weight: 700;\n          position: absolute;\n          z-index: 2;\n          pointer-events: auto;\n          cursor: pointer;\n          display: none;\n        }\n\n        #leftArrow {\n          left: 0;\n          padding-left: 4px;\n          padding-right: 16px;\n          background: linear-gradient(90deg, ").concat(o," 0%, ").concat(o,"99 80%, ").concat(o,"0d 100%);\n        }\n\n        #rightArrow {\n          right: 0;\n          padding-right: 4px;\n          padding-left: 16px;\n          background: linear-gradient(-90deg, ").concat(o," 0%, ").concat(o,"99 80%, ").concat(o,'0d 100%);\n        }\n\n        [id^="category-"] {\n          display: flex; \n          flex: 1 1 0; \n          justify-content: center; \n          align-items: center; \n          font-size: 14px; \n          line-height: 20px; \n          background-color: ').concat(c,"; \n          color: ").concat(u,"; \n          cursor: pointer;\n          padding: 6px 24px;\n          margin: 0 3px;\n          border-radius: 16px;\n          border: ").concat(d?"1px solid "+d:"none",';\n        }\n\n        [id^="category-"][selected="true"] {\n          background-color: ').concat(p,"; \n          color: ").concat(f,"; \n          border: ").concat(h?"1px solid "+h:"none","\n        }\n  \n        #inboxCard {\n          padding: 0 16px 0 16px;\n          overflow-y: auto;\n          box-sizing: border-box;\n          margin-top: 16px;\n        }\n\n        #poweredByCT {\n          display: block;\n          height: 16px;\n          padding: 8px 0px;\n          margin: auto;\n        }\n  \n        @media only screen and (min-width: 420px) {\n          #inbox {\n            width: var(--inbox-width, 392px);\n            height: var(--inbox-height, 546px);\n            position: var(--inbox-position, fixed);\n            right: var(--inbox-right, unset);\n            bottom: var(--inbox-bottom, unset);\n            top: var(--inbox-top, unset);\n            left: var(--inbox-left, unset);\n          }\n  \n          #inboxCard {\n            height: calc(var(--inbox-height, 546px) - ").concat(v,"px); \n          }\n  \n        }\n      </style>\n      ")),E=this.config.styles.cards;return C+(g={backgroundColor:E.backgroundColor,borderColor:E.borderColor,titleColor:E.titleColor,descriptionColor:E.descriptionColor,buttonColor:E.buttonColor,buttonTextColor:E.buttonTextColor,unreadMarkerColor:E.unreadMarkerColor},y=g.backgroundColor,b=g.borderColor,m=g.titleColor,w=g.descriptionColor,S=g.buttonColor,_=g.buttonTextColor,k=g.unreadMarkerColor,'\n    <style id="messageStyles">\n      ct-inbox-message::part(messageWrapper) {\n        margin-bottom: 16px; \n      }\n      ct-inbox-message::part(message) {\n        background-color: '.concat(y,"; \n        border: 1px solid ").concat(b,";\n        border-radius: 4px; \n        overflow: hidden;\n        min-height: 40px;\n      }\n      ct-inbox-message::part(message):hover {\n        box-shadow: 0px 4px 8px rgb(0 0 0 / 10%);\n        cursor: pointer;\n      }\n      ct-inbox-message::part(iconTitleDescWrapper) {\n        display: flex; \n        padding: 16px;\n      }\n      ct-inbox-message::part(titleDescWrapper) {\n        display: flex; \n        flex-direction: column;\n      }\n      ct-inbox-message::part(iconImgContainer) {\n        display: flex; \n        margin-right: 16px;\n      }\n      ct-inbox-message::part(mainImgContainer) {\n        line-height: 0;\n      }\n      ct-inbox-message::part(mainImg) {\n        width: 100%; \n        background: #b2b1ae;\n      }\n      ct-inbox-message::part(iconImg) {\n        height: 40px; \n        width: 40px;\n      }\n      ct-inbox-message::part(title) {\n        font-size: 14px !important; \n        line-height: 20px; \n        font-weight: 600; \n        color: ").concat(m,"\n      }\n      ct-inbox-message::part(description) {\n        font-size: 14px !important; \n        line-height: 20px; \n        font-weight: 400; \n        color: ").concat(w,"\n      }\n      ct-inbox-message::part(button) {\n        background-color: ").concat(S,"; \n        color: ").concat(_,"; \n        padding: 8px 16px; \n        font-size: 12px; \n        line-height: 16px; \n        font-weight: 600; \n        flex: 1; \n        border-radius: 0px; \n        text-transform: capitalize; \n        cursor: pointer; \n        border: none;\n      }\n      ct-inbox-message::part(buttonsContainer) {\n        display: flex;\n        position: relative;\n      }\n      ct-inbox-message::part(snackbar) {\n        position: absolute;\n        top: calc(-100% - 12px);\n        left: 50%;\n        transform: translate(-50%, 0px);\n        font-size: 14px;\n        font-weight: 400;\n        background: #FFFFFF;\n        border: 1px solid #ECEDF2;\n        box-shadow: 0px 4px 8px rgb(0 0 0 / 6%), 0px 0px 2px rgb(0 0 0 / 4%);\n        border-radius: 4px;\n        z-index: 2;\n        display: none;\n        width: max-content;\n        align-items: center;\n        padding: 8px 16px;\n        justify-content: center;\n      }\n\n      ct-inbox-message::part(snackbar-msg) {\n        color: black;\n        margin-left: 8px;\n      }\n\n      ct-inbox-message::part(timeStamp) {\n        display: flex; \n        justify-content: end; \n        align-items: center; \n        margin-top: 4px; \n        font-size: 12px !important; \n        line-height: 16px; \n        color: black;\n      }\n      ct-inbox-message::part(unreadMarker) {\n        height: 8px; \n        width: 8px; \n        border-radius: 50%; \n        background-color: ").concat(k,"; \n        margin-left: 8px;\n      }\n      @media only screen and (min-width: 420px) {\n        ct-inbox-message::part(mainImg) {\n          height: 180px;\n        }\n      }\n    </style>\n  "))}},{key:"incomingMessages",get:function(){return[]},set:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];e.length>0&&this.inbox&&this.updateInboxMessages(e)}},{key:"incomingMessagesForPreview",get:function(){return[]},set:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];t.length>0&&this.inbox&&(this.isPreview=!0,this.unviewedCounter=0,t.forEach((function(t){t.id="".concat(t.wzrk_id.split("_")[0],"_").concat(Date.now()),e.unviewedMessages[t.id]=t,e.unviewedCounter++})),this.buildUIForMessages(t),this.updateUnviewedBadgeCounter())}}]),o}(p(HTMLElement)),sn=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=Te.readFromLSorCookie(fe)||{};t?(xe.inbox.inboxConfigForPreview=e,xe.inbox.isPreview=!0,xe.inbox&&xe.inbox.init()):JSON.stringify(n)!==JSON.stringify(e)&&(Te.saveToLSorCookie(fe,e),xe.inbox&&xe.inbox.init())},ln=function(e){e.webInboxSetting&&sn(e.webInboxSetting,e.inbox_preview),null!=e.inbox_notifs&&function(e){e.inbox_preview?xe.inbox.incomingMessagesForPreview=e.inbox_notifs:xe.inbox.incomingMessages=e.inbox_notifs}(e)},cn=function(e){dn(),xe.inbox=new an({logger:e}),document.body.appendChild(xe.inbox)},un=function(e){return new Promise((function(t){"complete"===document.readyState?(cn(e),t()):window.addEventListener("load",(function(){null===xe.inbox&&cn(e),t()}))}))},dn=function(){void 0===customElements.get("ct-web-inbox")&&(customElements.define("ct-web-inbox",an),customElements.define("ct-inbox-message",rn))},pn=function(e,t,n){var i,o,r=document.scrollingElement.scrollLeft,a=document.scrollingElement.scrollTop,s=window.innerWidth+r,l=window.innerHeight+a,c=e.target.getBoundingClientRect(),u=c.x+r,d=c.y+a,p=c.left+r,f=c.right+r,h=c.top+a,v=c.bottom+a,g=c.height,y=u+c.width/2,b=!1,m=16;if(v+t<=l){var w=l-(v+t);o=w>=m?v+m:v+w}else if(h-t>=a){var S=h-t;o=S>=m?h-t-m:h-t-S}else b=!0,(o=d+g/2-t/2)<a?o=a:o+t>l&&(o=l-t);if(b){var _=f+n;if(_<=s)i=f+(_+m<=s?m:s-_);else{var k=p-n;i=k-(k-m>=r?m:k-r)}}else(i=y-n/2)<r?i=p+n<=s?p:r:i+n>s&&(i=f-n>=r?f-n:s-n);return{xPos:i,yPos:o}},fn=function(e){var t=Date.now(),n=Math.floor((t-e)/6e4);return n<5?"Just now":n<60?"".concat(n," minute").concat(n>1?"s":""," ago"):(n=Math.floor(n/60))<24?"".concat(n," hour").concat(n>1?"s":""," ago"):(n=Math.floor(n/24),"".concat(n," day").concat(n>1?"s":""," ago"))},hn=function(){return Object.keys(Te.readFromLSorCookie(fe)||{}).length>0},vn='<svg width="6" height="10" viewBox="0 0 6 10" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path fill-rule="evenodd" clip-rule="evenodd" d="M0.258435 9.74751C-0.0478584 9.44825 -0.081891 8.98373 0.156337 8.64775L0.258435 8.52836L3.87106 5L0.258435 1.47164C-0.0478588 1.17239 -0.0818914 0.707867 0.156337 0.371887L0.258435 0.252494C0.564728 -0.0467585 1.04018 -0.0800085 1.38407 0.152743L1.50627 0.252494L5.74156 4.39042C6.04786 4.68968 6.08189 5.1542 5.84366 5.49018L5.74156 5.60957L1.50627 9.74751C1.16169 10.0842 0.603015 10.0842 0.258435 9.74751Z" fill="#63698F"/>\n</svg>\n',gn='<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path fill-rule="evenodd" clip-rule="evenodd" d="M16 8C16 3.58172 12.4183 0 8 0C3.58172 0 0 3.58172 0 8C0 12.4183 3.58172 16 8 16C12.4183 16 16 12.4183 16 8ZM9.6839 5.93602C9.97083 5.55698 10.503 5.48833 10.8725 5.78269C11.2135 6.0544 11.2968 6.54044 11.0819 6.91173L11.0219 7.00198L8.09831 10.864C7.80581 11.2504 7.26654 11.3086 6.90323 11.0122L6.82822 10.9433L5.04597 9.10191C4.71635 8.76136 4.71826 8.21117 5.05023 7.87303C5.35666 7.5609 5.83722 7.53855 6.16859 7.80482L6.24814 7.87739L7.35133 9.01717L9.6839 5.93602Z" fill="#03A387"/>\n</svg>\n',yn=function e(t,n){var i,r=n.device,s=n.session,l=n.request,c=n.logger,u=n.isWebPopUpSpamControlDisabled,d=r,p=s,f=l,h=c,v=0,g=function(n){var i=n.wzrk_id.split("_")[0],o=Ee(),r=function(e,t,n){var i=0,o=0;null!=e[t]&&(i=e[t]),i++,null!=e.tc&&(o=e.tc),n<0&&o++,e.tc=o,e[t]=i};if(Te._isLocalStorageSupported()){delete sessionStorage[j];var a=St();null==n[K].wmc&&(n[K].wmc=1);var s=-1,l=-1,c=-1,v=-1,g=-1,y=-1;null!=n[K].efc&&(s=parseInt(n[K].efc,10)),null!=n[K].mdc&&(l=parseInt(n[K].mdc,10)),null!=n[K].tdc&&(c=parseInt(n[K].tdc,10)),null!=n[K].tlc&&(v=parseInt(n[K].tlc,10)),null!=n[K].wmp&&(g=parseInt(n[K].wmp,10)),null!=n[K].wmc&&(y=parseInt(n[K].wmc,10));var b=a[p.sessionId];if(b){var m=b[i],w=b.tc;if("dnd"===m&&!u)return!1;if(y>0&&w>=y&&s<0)return!1;if(l>0&&m>=l)return!1}else b={},a[p.sessionId]=b;var S=a[o];if(null!=S){var _=S[i],k=S.tc;if(g>0&&k>=g&&s<0)return!1;if(c>0&&_>=c)return!1}else S={},a[o]=S;var C=a[W];if(null!=C){var E=C[i];if(v>0&&E>=v)return!1}else C={},a[W]=C}if(null!=n[K].delay&&n[K].delay>0){var A=n[K].delay;return n[K].delay=0,setTimeout(e,1e3*A,t,{device:d,session:p,request:f,logger:h}),!1}var I=p.getSessionCookieObject();r(I,i,s),r(S,i,s),r(C,i,s);var P={};P[p.sessionId]=I,P[o]=S,P[W]=C,_t(P)},b=function(){var e=d.getGuid(),t=p.getSessionCookieObject();return"&t=wc&d="+encodeURIComponent(vt(e+"|"+t.p+"|"+t.s))},m=function(e,t){var n=window.parent[e];"function"==typeof n&&(null!=t.display.kv?n(t.display.kv):n())},w=function(e,t,n,i,o){S(t),function(e,t,n,i,o){if(""!==e&&null!=e){var r,a;o?r=n:null!==n&&null!=(a=n.getElementsByClassName("jsCT_CTA"))&&1===a.length&&(r=a[0]);var s=t.display.jsFunc,l=t.display.preview;null==l&&(e+=b()),null!=r&&(r.onclick=function(){if(null!=s)return null==l&&wt.fireRequest(e),m(s,t),void Ot("-1",0,p.sessionId);1===t.display.window?window.open(e,"_blank"):window.location=e})}}(e,t,n,0,o)},S=function(e){var t={type:"event"};t.evtName=ie,t.evtData=o({},ne,e.wzrk_id),e.wzrk_pivot&&(t.evtData=a(a({},t.evtData),{},{wzrk_pivot:e.wzrk_pivot})),f.processEvent(t)},_=function(e){void 0===customElements.get("ct-web-personalisation-banner")&&customElements.define("ct-web-personalisation-banner",tn);var t=e.display.divId,n=document.createElement("ct-web-personalisation-banner");n.msgId=e.wzrk_id,n.pivotId=e.wzrk_pivot,n.divHeight=e.display.divHeight,n.details=e.display.details[0];var i=document.getElementById(t);i.innerHTML="",i.appendChild(n)},k=function(e){void 0===customElements.get("ct-web-personalisation-carousel")&&customElements.define("ct-web-personalisation-carousel",nn);var t=e.display.divId,n=document.createElement("ct-web-personalisation-carousel");n.target=e;var i=document.getElementById(t);i.innerHTML="",i.appendChild(n)},C=function(e){var t=e.wzrk_id.split("_")[0],n=e.display;if(2!==n.wtarget_type||1!==e.msgContent.type){if(1===n.layout)return P(void 0,e);if(3===n.layout){if(null!=document.getElementById("wzrkImageOnlyDiv"))return;var i=document.createElement("div");return i.id="wzrkImageOnlyDiv",document.body.appendChild(i),void 0===customElements.get("ct-web-popup-imageonly")&&customElements.define("ct-web-popup-imageonly",on),function(e){var t=document.createElement("ct-web-popup-imageonly");t.target=e;var n=document.getElementById("wzrkImageOnlyDiv");n.innerHTML="",n.style.visibility="hidden",n.appendChild(t)}(e)}if(!1!==g(e)){var o="wizParDiv"+n.layout;if(u&&null!=document.getElementById(o)&&document.getElementById(o).remove(),null==document.getElementById(o)){xe.campaignDivMap[t]=o;var r=2===n.layout,a=document.createElement("div");a.id=o;var s=window.innerHeight,l=window.innerWidth,c=!1;if(r)a.setAttribute("style",n.iFrameStyle);else{var d=10,p=5*l/100,f=d+5*s/100,h=30*l/100+20,v="width:30%;";(/mobile/i.test(navigator.userAgent)||/mini/i.test(navigator.userAgent))&&!1===/iPad/i.test(navigator.userAgent)?(h=85*l/100+20,p=5*l/100,f=5*s/100,v="width:80%;"):("ontouchstart"in window||/tablet/i.test(navigator.userAgent))&&(h=50*l/100+20,p=5*l/100,f=5*s/100,v="width:50%;"),null==n.proto?(c=!0,a.setAttribute("style","display:block;overflow:hidden; bottom:"+f+"px !important;width:"+h+"px !important;right:"+p+"px !important;position:fixed;z-index:2147483647;")):a.setAttribute("style",v+n.iFrameStyle)}document.body.appendChild(a);var y=document.createElement("iframe"),b=!1===n.br?"0":"8";y.frameborder="0px",y.marginheight="0px",y.marginwidth="0px",y.scrolling="no",y.id="wiz-iframe";var m,S=e.display.onClick,_="";if(""!==S&&null!=S&&(_="cursor:pointer;"),1===e.msgContent.type)m=(m=(m=e.msgContent.html).replace(/##campaignId##/g,t)).replace(/##campaignId_batchId##/g,e.wzrk_id);else{var k,C,A,I,O,T='<style type="text/css">body{margin:0;padding:0;}#contentDiv.wzrk{overflow:hidden;padding:0;text-align:center;'+_+"}#contentDiv.wzrk td{padding:15px 10px;}.wzrkPPtitle{font-weight: bold;font-size: 16px;font-family:arial;padding-bottom:10px;word-break: break-word;}.wzrkPPdscr{font-size: 14px;font-family:arial;line-height:16px;word-break: break-word;display:inline-block;}.PL15{padding-left:15px;}.wzrkPPwarp{margin:20px 20px 0 5px;padding:0px;border-radius: "+b+"px;box-shadow: 1px 1px 5px #888888;}a.wzrkClose{cursor:pointer;position: absolute;top: 11px;right: 11px;z-index: 2147483647;font-size:19px;font-family:arial;font-weight:bold;text-decoration: none;width: 25px;/*height: 25px;*/text-align: center; -webkit-appearance: none; line-height: 25px;background: #353535;border: #fff 2px solid;border-radius: 100%;box-shadow: #777 2px 2px 2px;color:#fff;}a:hover.wzrkClose{background-color:#d1914a !important;color:#fff !important; -webkit-appearance: none;}td{vertical-align:top;}td.imgTd{border-top-left-radius:8px;border-bottom-left-radius:8px;}</style>";"dark"===e.display.theme?(k="#2d2d2e",C="#eaeaea",A="#353535",I="#353535",O="#ffffff"):(k="#ffffff",C="#000000",I="#f4f4f4",A="#a5a6a6",O="#ffffff");var x=e.msgContent.title,M=e.msgContent.description,R="";null!=e.msgContent.imageUrl&&""!==e.msgContent.imageUrl&&(R="<td class='imgTd' style='background-color:"+I+"'><img src='"+e.msgContent.imageUrl+"' height='60' width='60'></td>"),m=T+"<div class='wzrkPPwarp' style='color:"+C+";background-color:"+k+";'><a href='javascript:void(0);' onclick=parent.$WZRK_WR.closeIframe("+t+",'"+o+"'); class='wzrkClose' style='background-color:"+A+";color:"+O+"'>&times;</a><div id='contentDiv' class='wzrk'><table cellpadding='0' cellspacing='0' border='0'><tr>"+R+"<td style='vertical-align:top;'><div class='wzrkPPtitle' style='color:"+C+"'>"+x+"</div><div class='wzrkPPdscr' style='color:"+C+"'>"+M+"<div></td></tr></table></div>"}y.setAttribute("style","z-index: 2147483647; display:block; width: 100% !important; border:0px !important; border-color:none !important;"),a.appendChild(y);var D=(y.contentWindow?y.contentWindow:y.contentDocument.document?y.contentDocument.document:y.contentDocument).document;D.open(),D.write(m),n["custom-editor"]&&E(e,D),D.close();var L=function(){d=document.getElementById("wiz-iframe").contentDocument.getElementById("contentDiv").scrollHeight,!0===n["custom-editor"]||r||(d+=25),document.getElementById("wiz-iframe").contentDocument.body.style.margin="0px",document.getElementById("wiz-iframe").style.height=d+"px"},N=navigator.userAgent.toLowerCase();if(-1!==N.indexOf("safari"))if(N.indexOf("chrome")>-1)y.onload=function(){L();var t=document.getElementById("wiz-iframe").contentDocument.getElementById("contentDiv");w(S,e,t,0,c)};else{var U=y.contentDocument||y.contentWindow;U.document&&(U=U.document),L();var j=setInterval((function(){if("complete"===U.readyState){clearInterval(j),L();var t=document.getElementById("wiz-iframe").contentDocument.getElementById("contentDiv");w(S,e,t,0,c)}}),10)}else y.onload=function(){L();var t=document.getElementById("wiz-iframe").contentDocument.getElementById("contentDiv");w(S,e,t,0,c)}}}}else{var F={};F.msgId=e.wzrk_id,e.wzrk_pivot&&(F.pivotId=e.wzrk_pivot),null!=e.msgContent.kv&&(F.kv=e.msgContent.kv);var V=new CustomEvent("CT_web_native_display",{detail:F});document.dispatchEvent(V)}},E=function(e,t){var n=t.createElement("script");n.innerHTML="\n      const ct__camapignId = '".concat(e.wzrk_id,"';\n      const ct__formatVal = (v) => {\n          return v && v.trim().substring(0, 20);\n      }\n      const ct__parentOrigin =  window.parent.origin;\n      document.body.addEventListener('click', (event) => {\n        const elem = event.target.closest?.('a[wzrk_c2a], button[wzrk_c2a]');\n        if (elem) {\n            const {innerText, id, name, value, href} = elem;\n            const clickAttr = elem.getAttribute('onclick') || elem.getAttribute('click');\n            const onclickURL = clickAttr?.match(/(window.open)[(](\"|')(.*)(\"|',)/)?.[3] || clickAttr?.match(/(location.href *= *)(\"|')(.*)(\"|')/)?.[3];\n            const props = {innerText, id, name, value};\n            let msgCTkv = Object.keys(props).reduce((acc, c) => {\n                const formattedVal = ct__formatVal(props[c]);\n                formattedVal && (acc['wzrk_click_' + c] = formattedVal);\n                return acc;\n            }, {});\n            if(onclickURL) { msgCTkv['wzrk_click_' + 'url'] = onclickURL; }\n            if(href) { msgCTkv['wzrk_click_' + 'c2a'] = href; }\n            const notifData = { msgId: ct__camapignId, msgCTkv, pivotId: '").concat(e.wzrk_pivot,"' };\n            window.parent.clevertap.renderNotificationClicked(notifData);\n        }\n      });\n    "),t.body.appendChild(n)},A=!1,I=function(e){var t=e.display.onClick;if(window.clevertap.hasOwnProperty("notificationCallback")&&void 0!==window.clevertap.notificationCallback&&"function"==typeof window.clevertap.notificationCallback){var n=window.clevertap.notificationCallback;if(!A){var i={};i.msgContent=e.msgContent,i.msgId=e.wzrk_id,e.wzrk_pivot&&(i.pivotId=e.wzrk_pivot),null!=e.display.kv&&(i.kv=e.display.kv),window.clevertap.raiseNotificationClicked=function(){if(""!==t&&null!=t){var n=e.display.jsFunc;if(t+=b(),null!=n)return wt.fireRequest(t),void m(n,e);1===e.display.window?window.open(t,"_blank"):window.location=t}},window.clevertap.raiseNotificationViewed=function(){S(e)},n(i),A=!0}}else if(window.clevertap.popupCurrentWzrkId=e.wzrk_id,C(e),window.clevertap.hasOwnProperty("popupCallbacks")&&void 0!==window.clevertap.popupCallbacks&&"function"==typeof window.clevertap.popupCallbacks[e.wzrk_id]){var r=window.clevertap.popupCallbacks[e.wzrk_id],s={};s.msgContent=e.msgContent,s.msgId=e.wzrk_id,e.wzrk_pivot&&(s.pivotId=e.wzrk_pivot);var l=[];for(var c in e)if(c.startsWith(te)&&c!==ne){var u=o({},c,e[c]);l.push(u)}l.length>0&&(s.msgCTkv=l),null!=e.display.kv&&(s.kv=e.display.kv),window.clevertap.raisePopupNotificationClicked=function(t){if(t&&t.msgId){var n={type:"event"};if(n.evtName=oe,n.evtData=o({},ne,t.msgId),e.wzrk_pivot&&(n.evtData=a(a({},n.evtData),{},{wzrk_pivot:t.pivotId})),t.msgCTkv){var i,r=function(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=y(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var i=0,o=function(){};return{s:o,n:function(){return i>=e.length?{done:!0}:{done:!1,value:e[i++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,a=!0,s=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return a=e.done,e},e:function(e){s=!0,r=e},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw r}}}}(t.msgCTkv);try{for(r.s();!(i=r.n()).done;){var s=i.value;n.evtData=a(a({},n.evtData),s)}}catch(e){r.e(e)}finally{r.f()}}f.processEvent(n)}},r(s)}},P=function(e,t){var n;if(!(null!=e&&e.clientY>0||(n=null==t?i:t,u&&0===n.display.wtarget_type&&null!=document.getElementById("intentPreview")&&null!=document.getElementById("intentOpacityDiv")&&(document.getElementById("intentPreview").remove(),document.getElementById("intentOpacityDiv").remove()),null!=document.getElementById("intentPreview")||null==n.display.layout&&(/mobile/i.test(navigator.userAgent)||/mini/i.test(navigator.userAgent)||/iPad/i.test(navigator.userAgent)||"ontouchstart"in window||/tablet/i.test(navigator.userAgent))||!1===g(n)))){var o=n.wzrk_id.split("_")[0];xe.campaignDivMap[o]="intentPreview";var r=!1,a=document.createElement("div");a.id="intentOpacityDiv",a.setAttribute("style","position: fixed;top: 0;bottom: 0;left: 0;width: 100%;height: 100%;z-index: 2147483646;background: rgba(0,0,0,0.7);"),document.body.appendChild(a);var s=document.createElement("div");s.id="intentPreview",null==n.display.proto?(r=!0,s.setAttribute("style","display:block;overflow:hidden;top:55% !important;left:50% !important;position:fixed;z-index:2147483647;width:600px !important;height:600px !important;margin:-300px 0 0 -300px !important;")):s.setAttribute("style",n.display.iFrameStyle),document.body.appendChild(s);var l=document.createElement("iframe"),c=!1===n.display.br?"0":"8";l.frameborder="0px",l.marginheight="0px",l.marginwidth="0px",l.scrolling="no",l.id="wiz-iframe-intent";var d,p=n.display.onClick,f="";if(""!==p&&null!=p&&(f="cursor:pointer;"),1===n.msgContent.type)d=(d=(d=n.msgContent.html).replace(/##campaignId##/g,o)).replace(/##campaignId_batchId##/g,n.wzrk_id);else{var h,v,y,b,m='<style type="text/css">body{margin:0;padding:0;}#contentDiv.wzrk{overflow:hidden;padding:0 0 20px 0;text-align:center;'+f+"}#contentDiv.wzrk td{padding:15px 10px;}.wzrkPPtitle{font-weight: bold;font-size: 24px;font-family:arial;word-break: break-word;padding-top:20px;}.wzrkPPdscr{font-size: 14px;font-family:arial;line-height:16px;word-break: break-word;display:inline-block;padding:20px 20px 0 20px;line-height:20px;}.PL15{padding-left:15px;}.wzrkPPwarp{margin:20px 20px 0 5px;padding:0px;border-radius: "+c+"px;box-shadow: 1px 1px 5px #888888;}a.wzrkClose{cursor:pointer;position: absolute;top: 11px;right: 11px;z-index: 2147483647;font-size:19px;font-family:arial;font-weight:bold;text-decoration: none;width: 25px;/*height: 25px;*/text-align: center; -webkit-appearance: none; line-height: 25px;background: #353535;border: #fff 2px solid;border-radius: 100%;box-shadow: #777 2px 2px 2px;color:#fff;}a:hover.wzrkClose{background-color:#d1914a !important;color:#fff !important; -webkit-appearance: none;}#contentDiv .button{padding-top:20px;}#contentDiv .button a{font-size: 14px;font-weight:bold;font-family:arial;text-align:center;display:inline-block;text-decoration:none;padding:0 30px;height:40px;line-height:40px;background:#ea693b;color:#fff;border-radius:4px;-webkit-border-radius:4px;-moz-border-radius:4px;}</style>";"dark"===n.display.theme?(h="#2d2d2e",v="#eaeaea",y="#353535",b="#ffffff"):(h="#ffffff",v="#000000",y="#a5a6a6",b="#ffffff");var S=n.msgContent.title,_=n.msgContent.description,k="";null!=n.msgContent.ctaText&&""!==n.msgContent.ctaText&&(k="<div class='button'><a href='#'>"+n.msgContent.ctaText+"</a></div>");var C="";null!=n.msgContent.imageUrl&&""!==n.msgContent.imageUrl&&(C="<div style='padding-top:20px;'><img src='"+n.msgContent.imageUrl+"' width='500' alt="+S+" /></div>"),d=m+"<div class='wzrkPPwarp' style='color:"+v+";background-color:"+h+";'><a href='javascript:void(0);' onclick=parent.$WZRK_WR.closeIframe("+o+",'intentPreview'); class='wzrkClose' style='background-color:"+y+";color:"+b+"'>&times;</a><div id='contentDiv' class='wzrk'><div class='wzrkPPtitle' style='color:"+v+"'>"+S+"</div><div class='wzrkPPdscr' style='color:"+v+"'>"+_+"</div>"+C+k+"</div></div>"}l.setAttribute("style","z-index: 2147483647; display:block; height: 100% !important; width: 100% !important;min-height:80px !important;border:0px !important; border-color:none !important;"),s.appendChild(l);var A=(l.contentWindow?l.contentWindow:l.contentDocument.document?l.contentDocument.document:l.contentDocument).document;A.open(),A.write(d),n.display["custom-editor"]&&E(n,A),A.close();var I=document.getElementById("wiz-iframe-intent").contentDocument.getElementById("contentDiv");w(p,n,I,0,r)}};if(document.body){var O=function(e){Object.keys(e).map((function(t){var n=e[t].display.divId;null!==document.getElementById(n)&&(2===e[t].msgContent.type?_(e[t]):k(e[t]),delete e[t])}))};if(null!=t.inapp_notifs){for(var T={},x=0;x<t.inapp_notifs.length;x++){var M=t.inapp_notifs[x];null==M.display.wtarget_type||0===M.display.wtarget_type?I(M):1===M.display.wtarget_type?(i=M,window.document.body.onmouseleave=P):2===M.display.wtarget_type&&(2===M.msgContent.type||3===M.msgContent.type?null!==document.getElementById(M.display.divId)?2===M.msgContent.type?_(M):k(M):T[M.wzrk_id.split("_")[0]]=M:I(M))}Object.keys(T).length&&("complete"===document.readyState?O(T):function(e){window.addEventListener("load",(function(){var t=0;if(t<20)var n=setInterval((function(){O(e),0!==Object.keys(e).length&&20!==t||(clearInterval(n),e={}),t++}),500)}))}(T))}if((t.webInboxSetting||null!=t.inbox_notifs)&&(hn()&&dn(),null===xe.inbox?(t.webInboxSetting&&sn(t.webInboxSetting),un(h).then((function(){ln(t)}))):ln(t)),Te._isLocalStorageSupported())try{if(null!=t.evpr){var R=t.evpr.events,D=t.evpr.profile,L=t.evpr.expires_in,U=Ae();Te.setMetaProp("lsTime",U),Te.setMetaProp("exTs",L),function(e){if(null!=xe.globalEventsMap||(xe.globalEventsMap=Te.readFromLSorCookie(V),null!=xe.globalEventsMap)){for(var t in e)if(e.hasOwnProperty(t)){var n=xe.globalEventsMap[t],i=e[t];null!=xe.globalEventsMap[t]?null!=i[0]&&i[0]>n[0]&&(xe.globalEventsMap[t]=i):xe.globalEventsMap[t]=i}}else xe.globalEventsMap=e}(R),Te.saveToLSorCookie(V,xe.globalEventsMap),null==xe.globalProfileMap?Pt(D,!0):Pt(D,!1)}if(null!=t.arp&&function(e){if(null!=e.skipResARP&&e.skipResARP)return console.debug("Update ARP Request rejected",e),null;var t=!(null==e[$]||!0!==e[$]);if(Te._isLocalStorageSupported())try{var n=Te.readFromLSorCookie(z);for(var i in(null==n||t)&&(n={}),e)e.hasOwnProperty(i)&&(-1===e[i]?delete n[i]:n[i]=e[i]);Te.saveToLSorCookie(z,n)}catch(e){console.error("Unable to parse ARP JSON: "+e)}}(t.arp),null!=t.inapp_stale&&t.inapp_stale.length>0){var B=St(),q=B.global;if(null!=q)for(var H in t.inapp_stale)if(t.inapp_stale.hasOwnProperty(H)&&(delete q[t.inapp_stale[H]],Te.read(F))){var G=JSON.parse(decodeURIComponent(Te.read(F))),Y=JSON.parse(decodeURIComponent(Te.read(N)));G[Y]&&G[Y][t.inapp_stale[H]]&&(delete G[Y][t.inapp_stale[H]],Te.save(F,encodeURIComponent(JSON.stringify(G))))}_t(B)}}catch(e){h.error("Unable to persist evrp/arp: "+e)}}else v<6&&(v++,setTimeout(e,1e3,t,{device:d,session:p,request:f,logger:h}))},bn=w("isPersonalisationActive"),mn=function(){function e(n){var i=n.isPersonalisationActive;t(this,e),Object.defineProperty(this,bn,{writable:!0,value:void 0}),S(this,bn)[bn]=i}return i(e,[{key:"getTotalVisits",value:function(){if(S(this,bn)[bn]()){var e=Te.getMetaProp("sc");return null==e&&(e=1),e}}},{key:"getLastVisit",value:function(){if(S(this,bn)[bn]()){var e=Te.getMetaProp("ps");return null!=e?new Date(1e3*e):void 0}}}]),e}(),wn=1,Sn=2,_n=3,kn=w("logLevel"),Cn=w("log"),En=w("isLegacyDebug"),An=function(){function e(n){t(this,e),Object.defineProperty(this,En,{get:Pn,set:void 0}),Object.defineProperty(this,Cn,{value:In}),Object.defineProperty(this,kn,{writable:!0,value:void 0}),this.wzrkError={},S(this,kn)[kn]=null==n?n:Sn,this.wzrkError={}}return i(e,[{key:"error",value:function(e){S(this,kn)[kn]>=wn&&S(this,Cn)[Cn]("error",e)}},{key:"info",value:function(e){S(this,kn)[kn]>=Sn&&S(this,Cn)[Cn]("log",e)}},{key:"debug",value:function(e){(S(this,kn)[kn]>=_n||S(this,En)[En])&&S(this,Cn)[Cn]("debug",e)}},{key:"reportError",value:function(e,t){this.wzrkError.c=e,this.wzrkError.d=t,this.error("".concat(He," ").concat(e,": ").concat(t))}},{key:"logLevel",get:function(){return S(this,kn)[kn]},set:function(e){S(this,kn)[kn]=e}}]),e}(),In=function(e,t){if(window.console)try{var n=(new Date).getTime();console[e]("CleverTap [".concat(n,"]: ").concat(t))}catch(e){}},Pn=function(){return"undefined"!=typeof sessionStorage&&""===sessionStorage.WZRK_D},On=w("logger"),Tn=w("sessionId"),xn=w("isPersonalisationActive"),Mn=function(){function e(n){var i=n.logger,o=n.isPersonalisationActive;t(this,e),Object.defineProperty(this,On,{writable:!0,value:void 0}),Object.defineProperty(this,Tn,{writable:!0,value:void 0}),Object.defineProperty(this,xn,{writable:!0,value:void 0}),this.cookieName=void 0,this.scookieObj=void 0,this.sessionId=Te.getMetaProp("cs"),S(this,On)[On]=i,S(this,xn)[xn]=o}return i(e,[{key:"getSessionCookieObject",value:function(){var e=Te.readCookie(this.cookieName),t={};if(null!=e)if(e=e.replace(M,'"'),t=JSON.parse(e),ye(t)){if(void 0!==t.t){var n=t.t;Ae()-n>1260&&(t={})}}else t={};return this.scookieObj=t,t}},{key:"setSessionCookieObject",value:function(e){var t=JSON.stringify(e);Te.createBroadCookie(this.cookieName,t,1200,pt())}},{key:"manageSession",value:function(e){if(void 0===this.sessionId||this.sessionId!==e){var t=Te.getMetaProp("cs");if(void 0===t)Te.setMetaProp("ps",e),Te.setMetaProp("cs",e),Te.setMetaProp("sc",1);else if(t!==e){Te.setMetaProp("ps",t),Te.setMetaProp("cs",e);var n=Te.getMetaProp("sc");void 0===n&&(n=0),Te.setMetaProp("sc",n+1)}this.sessionId=e}}},{key:"getTimeElapsed",value:function(){if(S(this,xn)[xn]()){null!=this.scookieObj&&(this.scookieObj=this.getSessionCookieObject());var e=this.scookieObj.s;if(null!=e){var t=Ae();return Math.floor(t-e)}}}},{key:"getPageCount",value:function(){if(S(this,xn)[xn]())return null!=this.scookieObj&&(this.scookieObj=this.getSessionCookieObject()),this.scookieObj.p}},{key:"sessionId",get:function(){return S(this,Tn)[Tn]},set:function(e){S(this,Tn)[Tn]=e}}]),e}(),Rn=0,Dn=0,Ln=w("logger"),Nn=w("account"),Un=w("device"),jn=w("session"),Fn=w("isPersonalisationActive"),Vn=w("clearCookie"),Bn=w("addToLocalEventMap"),qn=function(){function e(n){var i=n.logger,o=n.account,r=n.device,a=n.session,s=n.isPersonalisationActive;t(this,e),Object.defineProperty(this,Bn,{value:zn}),Object.defineProperty(this,Ln,{writable:!0,value:void 0}),Object.defineProperty(this,Nn,{writable:!0,value:void 0}),Object.defineProperty(this,Un,{writable:!0,value:void 0}),Object.defineProperty(this,jn,{writable:!0,value:void 0}),Object.defineProperty(this,Fn,{writable:!0,value:void 0}),Object.defineProperty(this,Vn,{writable:!0,value:!1}),this.processingBackup=!1,S(this,Ln)[Ln]=i,S(this,Nn)[Nn]=o,S(this,Un)[Un]=r,S(this,jn)[jn]=a,S(this,Fn)[Fn]=s,wt.logger=i,wt.device=r}return i(e,[{key:"processBackupEvents",value:function(){var e=Te.readFromLSorCookie(H);if(null!=e){for(var t in this.processingBackup=!0,e)if(e.hasOwnProperty(t)){var n=e[t];void 0===n.fired&&(S(this,Ln)[Ln].debug("Processing backup event : "+n.q),void 0!==n.q&&wt.fireRequest(n.q),n.fired=!0)}Te.saveToLSorCookie(H,e),this.processingBackup=!1}}},{key:"addSystemDataToObject",value:function(e,t){void 0===t&&(e=ke(e,S(this,Ln)[Ln])),me(S(this,Ln)[Ln].wzrkError)||(e.wzrk_error=S(this,Ln)[Ln].wzrkError,S(this,Ln)[Ln].wzrkError={}),e.id=S(this,Nn)[Nn].id,_e(S(this,Un)[Un].gcookie)&&(e.g=S(this,Un)[Un].gcookie);var n=S(this,jn)[jn].getSessionCookieObject();return e.s=n.s,e.pg=void 0===n.p?1:n.p,e}},{key:"addSystemDataToProfileObject",value:function(e,t){me(S(this,Ln)[Ln].wzrkError)||(e.wzrk_error=S(this,Ln)[Ln].wzrkError,S(this,Ln)[Ln].wzrkError={}),e.id=S(this,Nn)[Nn].id,_e(S(this,Un)[Un].gcookie)&&(e.g=S(this,Un)[Un].gcookie);var n=S(this,jn)[jn].getSessionCookieObject();return e.s=n.s,e.pg=void 0===n.p?1:n.p,e}},{key:"addFlags",value:function(e){if(S(this,Vn)[Vn]=Te.getAndClearMetaProp(R),void 0!==S(this,Vn)[Vn]&&S(this,Vn)[Vn]&&(e.rc=!0,S(this,Ln)[Ln].debug("reset cookie sent in request and cleared from meta for future requests.")),S(this,Fn)[Fn]()){var t=Te.getMetaProp("lsTime"),n=Te.getMetaProp("exTs");if(void 0===t||void 0===n)return void(e.dsync=!0);t+n<Ae()&&(e.dsync=!0)}}},{key:"saveAndFireRequest",value:function(e,t,n){var i=Ae(),o=(e=dt(e,"rn",++xe.globalCache.REQ_N))+"&i="+i+"&sn="+Rn;Te.backupEvent(o,xe.globalCache.REQ_N,S(this,Ln)[Ln]),xe.offline||(t&&(void 0===S(this,Vn)[Vn]||!S(this,Vn)[Vn])||window.isOULInProgress?S(this,Ln)[Ln].debug("Not fired due to override - ".concat(xe.blockRequest," or clearCookie - ").concat(S(this,Vn)[Vn]," or OUL request in progress - ").concat(window.isOULInProgress)):(i===Dn?Rn++:(Dn=i,Rn=0),window.oulReqN=xe.globalCache.REQ_N,wt.fireRequest(o,!1,n)))}},{key:"unregisterTokenForGuid",value:function(e){var t=Te.readFromLSorCookie(ae);if(t){var n={type:"data"};_e(e)&&(n.g=e),n.action="unregister",n.id=S(this,Nn)[Nn].id;var i=S(this,jn)[jn].getSessionCookieObject();n.s=i.s;var o=ft(JSON.stringify(n),S(this,Ln)[Ln]),r=S(this,Nn)[Nn].dataPostURL;r=dt(r,"type","data"),r=dt(r,"d",o),wt.fireRequest(r,!0),Te.saveToLSorCookie(re,!1)}this.registerToken(t)}},{key:"registerToken",value:function(e){if(e){e=this.addSystemDataToObject(e,!0),e=JSON.stringify(e);var t=S(this,Nn)[Nn].dataPostURL;t=dt(t,"type","data"),t=dt(t,"d",ft(e,S(this,Ln)[Ln])),wt.fireRequest(t),Te.save("WZRK_WPR","ok")}}},{key:"processEvent",value:function(e){S(this,Bn)[Bn](e.evtName),e=this.addSystemDataToObject(e,void 0),this.addFlags(e),e[j]=Ct();var t=ft(JSON.stringify(e),S(this,Ln)[Ln]),n=S(this,Nn)[Nn].dataPostURL;n=dt(n,"type",Z),n=dt(n,"d",t),this.saveAndFireRequest(n,xe.blockRequest)}}]),e}(),zn=function(e){if(Te._isLocalStorageSupported()){void 0===xe.globalEventsMap&&(xe.globalEventsMap=Te.readFromLSorCookie(V),void 0===xe.globalEventsMap&&(xe.globalEventsMap={}));var t=Ae(),n=xe.globalEventsMap[e];void 0!==n?(n[2]=t,n[0]++):((n=[]).push(1),n.push(t),n.push(t)),xe.globalEventsMap[e]=n,Te.saveToLSorCookie(V,xe.globalEventsMap)}},Hn=w("request"),Wn=w("account"),Kn=w("oldValues"),Gn=w("logger"),Yn=w("processPrivacyArray"),Jn=function(e){s(o,e);var n=v(o);function o(e,i){var r,a=e.request,s=e.account,l=e.logger;return t(this,o),r=n.call(this),Object.defineProperty(f(r),Yn,{value:$n}),Object.defineProperty(f(r),Hn,{writable:!0,value:void 0}),Object.defineProperty(f(r),Wn,{writable:!0,value:void 0}),Object.defineProperty(f(r),Kn,{writable:!0,value:void 0}),Object.defineProperty(f(r),Gn,{writable:!0,value:void 0}),S(f(r),Gn)[Gn]=l,S(f(r),Hn)[Hn]=a,S(f(r),Wn)[Wn]=s,S(f(r),Kn)[Kn]=i,r}return i(o,[{key:"push",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var i;return xe.isPrivacyArrPushed?S(this,Yn)[Yn](xe.privacyArray.length>0?xe.privacyArray:t):(i=xe.privacyArray).push.apply(i,t),0}},{key:"_processOldValues",value:function(){S(this,Kn)[Kn]&&S(this,Yn)[Yn](S(this,Kn)[Kn]),S(this,Kn)[Kn]=null}}]),o}(p(Array)),$n=function(e){if(Array.isArray(e)&&e.length>0){var t=e.reduce((function(e,t){return a(a({},e),t)}),{}),n={},i={},o=!1;if(t.hasOwnProperty(G)&&"boolean"==typeof(o=t[G])&&(i.ct_optout=o,xe.isOptInRequest=!o),t.hasOwnProperty(Y)){var r=t[Y],s="boolean"==typeof r&&r;Te.setMetaProp(Y,s)}if(!me(i)){n.type="profile",n.profile=i,n=S(this,Hn)[Hn].addSystemDataToObject(n,void 0);var l=ft(JSON.stringify(n),S(this,Gn)[Gn]),c=S(this,Wn)[Wn].dataPostURL;c=dt(c,"type",Z),c=dt(c,"d",l),c=dt(c,G,o?"true":"false"),S(this,Hn)[Hn].saveAndFireRequest(c,xe.blockRequest),e.splice(0,e.length)}}},Zn=w("oldValues"),Xn=w("logger"),Qn=w("request"),ei=w("account"),ti=w("wizAlertJSPath"),ni=w("fcmPublicKey"),ii=w("setUpWebPush"),oi=w("setUpWebPushNotifications"),ri=w("setApplicationServerKey"),ai=w("setUpSafariNotifications"),si=w("setUpChromeFirefoxNotifications"),li=w("addWizAlertJS"),ci=w("removeWizAlertJS"),ui=w("handleNotificationRegistration"),di=function(e){s(o,e);var n=v(o);function o(e,i){var r,a=e.logger,s=(e.session,e.request),l=e.account;return t(this,o),r=n.call(this),Object.defineProperty(f(r),ui,{value:mi}),Object.defineProperty(f(r),ci,{value:bi}),Object.defineProperty(f(r),li,{value:yi}),Object.defineProperty(f(r),si,{value:gi}),Object.defineProperty(f(r),ai,{value:vi}),Object.defineProperty(f(r),ri,{value:hi}),Object.defineProperty(f(r),oi,{value:fi}),Object.defineProperty(f(r),ii,{value:pi}),Object.defineProperty(f(r),Zn,{writable:!0,value:void 0}),Object.defineProperty(f(r),Xn,{writable:!0,value:void 0}),Object.defineProperty(f(r),Qn,{writable:!0,value:void 0}),Object.defineProperty(f(r),ei,{writable:!0,value:void 0}),Object.defineProperty(f(r),ti,{writable:!0,value:void 0}),Object.defineProperty(f(r),ni,{writable:!0,value:void 0}),S(f(r),ti)[ti]="https://d2r1yp2w7bby2u.cloudfront.net/js/wzrk_dialog.min.js",S(f(r),ni)[ni]=null,S(f(r),Zn)[Zn]=i,S(f(r),Xn)[Xn]=a,S(f(r),Qn)[Qn]=s,S(f(r),ei)[ei]=l,r}return i(o,[{key:"push",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return S(this,ii)[ii](t),0}},{key:"_processOldValues",value:function(){S(this,Zn)[Zn]&&S(this,ii)[ii](S(this,Zn)[Zn]),S(this,Zn)[Zn]=null}},{key:"_enableWebPush",value:function(e,t){xe.webPushEnabled=e,null!=t&&S(this,ri)[ri](t),xe.webPushEnabled&&xe.notifApi.notifEnabledFromApi?S(this,ui)[ui](xe.notifApi.displayArgs):!xe.webPushEnabled&&xe.notifApi.notifEnabledFromApi&&S(this,Xn)[Xn].error("Ensure that web push notifications are fully enabled and integrated before requesting them")}}]),o}(p(Array)),pi=function(e){xe.webPushEnabled&&e.length>0?S(this,ui)[ui](e):null==xe.webPushEnabled&&e.length>0?(xe.notifApi.notifEnabledFromApi=!0,xe.notifApi.displayArgs=e.slice()):!1===xe.webPushEnabled&&e.length>0&&S(this,Xn)[Xn].error("Make sure push notifications are fully enabled and integrated")},fi=function(e,t,n,i){-1!==navigator.userAgent.indexOf("Chrome")||-1!==navigator.userAgent.indexOf("Firefox")?S(this,si)[si](e,t):-1!==navigator.userAgent.indexOf("Safari")&&S(this,ai)[ai](e,n,i)},hi=function(e){S(this,ni)[ni]=e},vi=function(e,t,n){var i=this;void 0===t&&S(this,Xn)[Xn].error("Ensure that APNS Web Push ID is supplied"),void 0===n&&S(this,Xn)[Xn].error("Ensure that APNS Web Push service path is supplied"),"safari"in window&&"pushNotification"in window.safari&&window.safari.pushNotification.requestPermission(n,t,{},(function(e){if("granted"===e.permission){var t=JSON.parse(JSON.stringify(e));t.endpoint=e.deviceToken,t.browser="Safari",Te.saveToLSorCookie(ae,t),S(i,Qn)[Qn].registerToken(t),S(i,Xn)[Xn].info("Safari Web Push registered. Device Token: "+e.deviceToken)}else"denied"===e.permission&&S(i,Xn)[Xn].info("Error subscribing to Safari web push")}))},gi=function(e,t){var n=this,i="";"serviceWorker"in navigator&&navigator.serviceWorker.register(t).then((function(e){return"undefined"!=typeof __wzrk_account_id?new Promise((function(t){return setTimeout((function(){return t(e)}),5e3)})):(i=e.scope,/^(\.?)(\/?)([^/]*).js$/.test(t)?navigator.serviceWorker.ready:-1!==navigator.userAgent.indexOf("Chrome")?new Promise((function(t){return setTimeout((function(){return t(e)}),5e3)})):navigator.serviceWorker.getRegistrations())})).then((function(t){-1!==navigator.userAgent.indexOf("Firefox")&&Array.isArray(t)&&(t=t.filter((function(e){return e.scope===i}))[0]);var o={userVisibleOnly:!0};null!=S(n,ni)[ni]&&(o.applicationServerKey=function(e){for(var t=(e+"=".repeat((4-e.length%4)%4)).replace(/\-/g,"+").replace(/_/g,"/"),n=window.atob(t),i=[],o=0;o<n.length;o++)i.push(n.charCodeAt(o));return new Uint8Array(i)}(S(n,ni)[ni])),t.pushManager.subscribe(o).then((function(t){S(n,Xn)[Xn].info("Service Worker registered. Endpoint: "+t.endpoint);var i=JSON.parse(JSON.stringify(t));-1!==navigator.userAgent.indexOf("Chrome")?(i.endpoint=i.endpoint.split("/").pop(),i.browser="Chrome"):-1!==navigator.userAgent.indexOf("Firefox")&&(i.endpoint=i.endpoint.split("/").pop(),i.browser="Firefox"),Te.saveToLSorCookie(ae,i),S(n,Qn)[Qn].registerToken(i),void 0!==e&&"function"==typeof e&&e()})).catch((function(e){S(n,Xn)[Xn].error("Error subscribing: "+e),t.pushManager.getSubscription().then((function(e){null!==e&&e.unsubscribe().then((function(e){S(n,Xn)[Xn].info("Unsubscription successful")})).catch((function(e){S(n,Xn)[Xn].error("Error unsubscribing: "+e)}))}))}))})).catch((function(e){S(n,Xn)[Xn].error("error registering service worker: "+e)}))},yi=function(){var e=document.createElement("script");return e.setAttribute("type","text/javascript"),e.setAttribute("id","wzrk-alert-js"),e.setAttribute("src",S(this,ti)[ti]),document.getElementsByTagName("body")[0].appendChild(e),e},bi=function(){var e=document.getElementById("wzrk-alert-js");e.parentNode.removeChild(e)},mi=function(e){var t,n,i,o,r,a,s,l,c,u,d,p,f,h,v,g,y=this;if(1===e.length){if(ye(e[0])){var b=e[0];t=b.titleText,n=b.bodyText,i=b.okButtonText,o=b.rejectButtonText,r=b.okButtonColor,a=b.skipDialog,s=b.askAgainTimeInSeconds,l=b.okCallback,c=b.rejectCallback,u=b.subscriptionCallback,d=b.hidePoweredByCT,p=b.serviceWorkerPath,f=b.httpsPopupPath,h=b.httpsIframePath,v=b.apnsWebPushId,g=b.apnsWebPushServiceUrl}}else t=e[0],n=e[1],i=e[2],o=e[3],r=e[4],a=e[5],s=e[6];if(null==a&&(a=!1),null==d&&(d=!1),null==p&&(p="/clevertap_sw.js"),void 0!==navigator.serviceWorker){var m=null!=f&&null!=h;if("https:"===window.location.protocol||"localhost"===document.location.hostname||m){if(-1!==navigator.userAgent.indexOf("Chrome")){var w=navigator.userAgent.match(/Chrome\/(\d+)/);if(null==w||parseInt(w[1],10)<50)return}else if(-1!==navigator.userAgent.indexOf("Firefox")){var _=navigator.userAgent.match(/Firefox\/(\d+)/);if(null==_||parseInt(_[1],10)<50)return}else{if(-1===navigator.userAgent.indexOf("Safari"))return;var k=navigator.userAgent.match(/Safari\/(\d+)/);if(null==k||parseInt(k[1],10)<50)return}if(!m){if(null==Notification)return;if("granted"===Notification.permission)return void S(this,oi)[oi](u,p,v,g);if("denied"===Notification.permission)return;if(a)return void S(this,oi)[oi](u,p,v,g)}if(t&&n&&i&&o){null!=r&&r.match(/^#[a-f\d]{6}$/i)||(r="#f28046");var C=(new Date).getTime()/1e3;if(null==Te.getMetaProp("notif_last_time"))Te.setMetaProp("notif_last_time",C);else{if(null==s&&(s=604800),C-Te.getMetaProp("notif_last_time")<s)return;Te.setMetaProp("notif_last_time",C)}if(m){var E=document.createElement("iframe");E.setAttribute("style","display:none;"),E.setAttribute("src",h),document.body.appendChild(E),window.addEventListener("message",(function(e){if(null!=e.data){var a={};try{a=JSON.parse(e.data)}catch(e){return}null!=a.state&&"ct"===a.from&&"not"===a.state&&(S(y,li)[li]().onload=function(){window.wzrkPermissionPopup.wizAlert({title:t,body:n,confirmButtonText:i,confirmButtonColor:r,rejectButtonText:o,hidePoweredByCT:d},(function(e){e?("function"==typeof l&&l(),window.open(f)):"function"==typeof c&&c(),S(y,ci)[ci]()}))})}}),!1)}else S(this,li)[li]().onload=function(){window.wzrkPermissionPopup.wizAlert({title:t,body:n,confirmButtonText:i,confirmButtonColor:r,rejectButtonText:o,hidePoweredByCT:d},(function(e){e?("function"==typeof l&&l(),S(y,oi)[oi](u,p,v,g)):"function"==typeof c&&c(),S(y,ci)[ci]()}))}}else S(this,Xn)[Xn].error("Missing input parameters; please specify title, body, ok button and cancel button text")}else S(this,Xn)[Xn].error("Make sure you are https or localhost to register for notifications")}},wi=w("logger"),Si=w("api"),_i=w("onloadcalled"),ki=w("device"),Ci=w("session"),Ei=w("account"),Ai=w("request"),Ii=w("isSpa"),Pi=w("previousUrl"),Oi=w("boundCheckPageChanged"),Ti=w("isWebPopUpSpamControlDisabled"),xi=w("processOldValues"),Mi=w("checkPageChanged"),Ri=w("pingRequest"),Di=w("isPingContinuous"),Li=w("overrideDSyncFlag"),Ni=function(){function e(){var n,i,r,s,l=this,c=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};t(this,e),Object.defineProperty(this,Li,{value:Bi}),Object.defineProperty(this,Di,{value:Vi}),Object.defineProperty(this,Ri,{value:Fi}),Object.defineProperty(this,Mi,{value:ji}),Object.defineProperty(this,xi,{value:Ui}),Object.defineProperty(this,wi,{writable:!0,value:void 0}),Object.defineProperty(this,Si,{writable:!0,value:void 0}),Object.defineProperty(this,_i,{writable:!0,value:void 0}),Object.defineProperty(this,ki,{writable:!0,value:void 0}),Object.defineProperty(this,Ci,{writable:!0,value:void 0}),Object.defineProperty(this,Ei,{writable:!0,value:void 0}),Object.defineProperty(this,Ai,{writable:!0,value:void 0}),Object.defineProperty(this,Ii,{writable:!0,value:void 0}),Object.defineProperty(this,Pi,{writable:!0,value:void 0}),Object.defineProperty(this,Oi,{writable:!0,value:S(this,Mi)[Mi].bind(this)}),Object.defineProperty(this,Ti,{writable:!0,value:void 0}),this.enablePersonalization=void 0,this.popupCallbacks={},this.popupCurrentWzrkId="",S(this,_i)[_i]=0,this._isPersonalisationActive=this._isPersonalisationActive.bind(this),this.raiseNotificationClicked=function(){},S(this,wi)[wi]=new An(Sn),S(this,Ei)[Ei]=new O(null===(n=c.account)||void 0===n?void 0:n[0],c.region||(null===(i=c.account)||void 0===i?void 0:i[1]),c.targetDomain||(null===(r=c.account)||void 0===r?void 0:r[2])),S(this,ki)[ki]=new qe({logger:S(this,wi)[wi]}),S(this,Ci)[Ci]=new Mn({logger:S(this,wi)[wi],isPersonalisationActive:this._isPersonalisationActive}),S(this,Ai)[Ai]=new qn({logger:S(this,wi)[wi],account:S(this,Ei)[Ei],device:S(this,ki)[ki],session:S(this,Ci)[Ci],isPersonalisationActive:this._isPersonalisationActive}),this.enablePersonalization=c.enablePersonalization||!1,this.event=new lt({logger:S(this,wi)[wi],request:S(this,Ai)[Ai],isPersonalisationActive:this._isPersonalisationActive},c.event),this.profile=new jt({logger:S(this,wi)[wi],request:S(this,Ai)[Ai],account:S(this,Ei)[Ei],isPersonalisationActive:this._isPersonalisationActive},c.profile),this.onUserLogin=new $t({request:S(this,Ai)[Ai],account:S(this,Ei)[Ei],session:S(this,Ci)[Ci],logger:S(this,wi)[wi],device:S(this,ki)[ki]},c.onUserLogin),this.privacy=new Jn({request:S(this,Ai)[Ai],account:S(this,Ei)[Ei],logger:S(this,wi)[wi]},c.privacy),this.notifications=new di({logger:S(this,wi)[wi],request:S(this,Ai)[Ai],account:S(this,Ei)[Ei]},c.notifications),S(this,Si)[Si]=new Ve({logger:S(this,wi)[wi],request:S(this,Ai)[Ai],device:S(this,ki)[ki],session:S(this,Ci)[Ci]}),this.spa=c.spa,this.dismissSpamControl=c.dismissSpamControl,this.user=new mn({isPersonalisationActive:this._isPersonalisationActive}),this.session={getTimeElapsed:function(){return S(l,Ci)[Ci].getTimeElapsed()},getPageCount:function(){return S(l,Ci)[Ci].getPageCount()}},this.logout=function(){S(l,wi)[wi].debug("logout called"),Te.setInstantDeleteFlagInK()},this.clear=function(){l.onUserLogin.clear()},this.getCleverTapID=function(){return S(l,ki)[ki].getGuid()},this.getAccountID=function(){return S(l,Ei)[Ei].id},this.getSCDomain=function(){return S(l,Ei)[Ei].finalTargetDomain},this.setSCSDKVersion=function(e){S(l,Ei)[Ei].scSDKVersion=e;var t={};t.af={scv:"sc-sdk-v"+S(l,Ei)[Ei].scSDKVersion};var n=S(l,Ei)[Ei].dataPostURL;n=dt(n,"type","page"),n=dt(n,"d",ft(JSON.stringify(t),S(l,wi)[wi])),S(l,Ai)[Ai].saveAndFireRequest(n,xe.blockRequest)},hn()&&(dn(),un()),this.getInboxMessageCount=function(){var e=Te.readFromLSorCookie(he)||{};return Object.keys(e).length},this.getInboxMessageUnreadCount=function(){if(xe.inbox)return xe.inbox.unviewedCounter;S(l,wi)[wi].error("No Unread messages")},this.getAllInboxMessages=function(){return Te.readFromLSorCookie(he)||{}},this.getUnreadInboxMessages=function(){if(xe.inbox)return xe.inbox.unviewedMessages;S(l,wi)[wi].error("No Unread messages")},this.getInboxMessageForId=function(e){var t=Te.readFromLSorCookie(he)||{};if((null!==e||""!==e)&&t.hasOwnProperty(e))return t[e];S(l,wi)[wi].error("No message available for message Id "+e)},this.deleteInboxMessage=function(e){var t=Te.readFromLSorCookie(he)||{};if(null===e&&""===e||!t.hasOwnProperty(e))S(l,wi)[wi].error("No message available for message Id "+e);else{var n=document.querySelector("ct-web-inbox").shadowRoot.getElementById(e);0===t[e].viewed&&(xe.inbox.unviewedCounter--,delete xe.inbox.unviewedMessages[e],document.getElementById("unviewedBadge").innerText=xe.inbox.unviewedCounter,document.getElementById("unviewedBadge").style.display=xe.inbox.unviewedCounter>0?"flex":"none"),n&&n.remove(),delete t[e],Te.saveToLSorCookie(he,t)}},this.markReadInboxMessage=function(e){var t=xe.inbox.unviewedMessages,n=Te.readFromLSorCookie(he)||{};if(null===e&&""===e||!t.hasOwnProperty(e))S(l,wi)[wi].error("No message available for message Id "+e);else{document.querySelector("ct-web-inbox").shadowRoot.getElementById(e).shadowRoot.getElementById("unreadMarker").style.display="none",n[e].viewed=1;var i=parseInt(document.getElementById("unviewedBadge").innerText)-1;document.getElementById("unviewedBadge").innerText=i,document.getElementById("unviewedBadge").style.display=i>0?"flex":"none",window.clevertap.renderNotificationViewed({msgId:n[e].wzrk_id,pivotId:n[e].pivotId}),xe.inbox.unviewedCounter--,delete xe.inbox.unviewedMessages[e]}},this.markReadAllInboxMessage=function(){var e=xe.inbox.unviewedMessages,t=Te.readFromLSorCookie(he)||{};Object.keys(e).length>0?(Object.keys(e).forEach((function(e){document.querySelector("ct-web-inbox").shadowRoot.getElementById(e).shadowRoot.getElementById("unreadMarker").style.display="none",t[e].viewed=1,window.clevertap.renderNotificationViewed({msgId:t[e].wzrk_id,pivotId:t[e].wzrk_pivot})})),document.getElementById("unviewedBadge").innerText=0,document.getElementById("unviewedBadge").style.display="none",Te.saveToLSorCookie(he,t),xe.inbox.unviewedCounter=0,xe.inbox.unviewedMessages={}):S(l,wi)[wi].error("No Unread Messages")},this.renderNotificationViewed=function(e){u(ie,e)},this.renderNotificationClicked=function(e){u(oe,e)};var u=function(e,t){if(t&&t.msgId){var n={type:"event"};if(n.evtName=e,n.evtData=o({},ne,t.msgId),t.pivotId&&(n.evtData=a(a({},n.evtData),{},{wzrk_pivot:t.pivotId})),t.wzrk_slideNo&&(n.evtData=a(a({},n.evtData),{},{wzrk_slideNo:t.wzrk_slideNo})),t.kv&&null!==t.kv&&void 0!==t.kv)for(var i in t.kv)i.startsWith(te)&&(n.evtData=a(a({},n.evtData),{},o({},i,t.kv[i])));if(t.msgCTkv&&null!==t.msgCTkv&&void 0!==t.msgCTkv)for(var r in t.msgCTkv)r.startsWith(te)&&(n.evtData=a(a({},n.evtData),{},o({},r,t.msgCTkv[r])));S(l,Ai)[Ai].processEvent(n)}};this.setLogLevel=function(e){S(l,wi)[wi].logLevel=Number(e),3===e?sessionStorage.WZRK_D="":delete sessionStorage.WZRK_D},this.handleIncrementValue=function(e,t){l.profile._handleIncrementDecrementValue(e,t,se)},this.handleDecrementValue=function(e,t){l.profile._handleIncrementDecrementValue(e,t,le)},this.setMultiValuesForKey=function(e,t){Array.isArray(t)?l.profile._handleMultiValueSet(e,t,ce):console.error("setMultiValuesForKey should be called with a value of type array")},this.addMultiValueForKey=function(e,t){"string"==typeof t||"number"==typeof t?l.profile._handleMultiValueAdd(e,t,ue):console.error("addMultiValueForKey should be called with a value of type string or number.")},this.addMultiValuesForKey=function(e,t){Array.isArray(t)?l.profile._handleMultiValueAdd(e,t,ue):console.error("addMultiValuesForKey should be called with a value of type array.")},this.removeMultiValueForKey=function(e,t){"string"==typeof t||"number"==typeof t?l.profile._handleMultiValueRemove(e,t,de):console.error("removeMultiValueForKey should be called with a value of type string or number.")},this.removeMultiValuesForKey=function(e,t){Array.isArray(t)?l.profile._handleMultiValueRemove(e,t,de):console.error("removeMultiValuesForKey should be called with a value of type array.")},this.removeValueForKey=function(e){l.profile._handleMultiValueDelete(e,pe)};var d=function(e,t,n){xt(e,t,n,S(l,Ei)[Ei],S(l,wi)[wi])};function p(e){var t=e.coords.latitude,n=e.coords.longitude;xe.location={Latitude:t,Longitude:n},this.sendMultiValueData({Latitude:t,Longitude:n})}function f(e){switch(e.code){case e.PERMISSION_DENIED:console.log("User denied the request for Geolocation.");break;case e.POSITION_UNAVAILABLE:console.log("Location information is unavailable.");break;case e.TIMEOUT:console.log("The request to get user location timed out.");break;case e.UNKNOWN_ERROR:console.log("An unknown error occurred.")}}this.getLocation=function(e,t){if(e&&"number"!=typeof e||t&&"number"!=typeof t)console.log("Latitude and Longitude must be of number type");else if(e&&t){if(e<=-90||e>90)return void console.log("A vaid latitude must range between -90 and 90");if(t<=-180||t>180)return void console.log("A valid longitude must range between -180 and 180");xe.location={Latitude:e,Longitude:t},this.sendMultiValueData({Latitude:e,Longitude:t})}else navigator.geolocation?navigator.geolocation.getCurrentPosition(p.bind(this),f):console.log("Geolocation is not supported by this browser.")};var h=S(this,Si)[Si];h.logout=this.logout,h.clear=this.clear,h.closeIframe=function(e,t){Ot(e,0,S(l,Ci)[Ci].sessionId)},h.enableWebPush=function(e,t){l.notifications._enableWebPush(e,t)},h.tr=function(e){yn(e,{device:S(l,ki)[ki],session:S(l,Ci)[Ci],request:S(l,Ai)[Ai],logger:S(l,wi)[wi],isWebPopUpSpamControlDisabled:S(l,Ti)[Ti]})},h.setEnum=function(e){Tt(e,S(l,wi)[wi])},h.is_onloadcalled=function(){return 1===S(l,_i)[_i]},h.subEmail=function(e){d("1",e)},h.getEmail=function(e,t){d("-1",e,t)},h.unSubEmail=function(e){d("0",e)},h.unsubEmailGroups=function(e){xe.unsubGroups=[];for(var t=document.getElementsByClassName("ct-unsub-group-input-item"),n=0;n<t.length;n++){var i=t[n];if(i.name){var o={name:i.name,isUnsubscribed:i.checked};xe.unsubGroups.push(o)}}d(Q,e)},h.setSubscriptionGroups=function(e){xe.unsubGroups=e},h.getSubscriptionGroups=function(){return xe.unsubGroups},h.changeSubscriptionGroups=function(e,t){h.setSubscriptionGroups(t),d(Q,e)},h.setUpdatedCategoryLong=function(e){e[ee]&&(xe.updatedCategoryLong=e[ee])},window.$CLTP_WR=window.$WZRK_WR=h,(null===(s=c.account)||void 0===s?void 0:s[0].id)&&this.init()}return i(e,[{key:"spa",get:function(){return S(this,Ii)[Ii]},set:function(e){var t=!0===e;S(this,Ii)[Ii]!==t&&1===S(this,_i)[_i]&&(t?document.addEventListener("click",S(this,Oi)[Oi]):document.removeEventListener("click",S(this,Oi)[Oi])),S(this,Ii)[Ii]=t}},{key:"dismissSpamControl",get:function(){return S(this,Ti)[Ti]},set:function(e){var t=!0===e;S(this,Ti)[Ti]=t}}]),i(e,[{key:"init",value:function(e,t,n){var i=this;if(1!==S(this,_i)[_i]){if(Te.removeCookie("WZRK_P",window.location.hostname),!S(this,Ei)[Ei].id){if(!e)return void S(this,wi)[wi].error(We);S(this,Ei)[Ei].id=e}S(this,Ci)[Ci].cookieName="WZRK_S_"+S(this,Ei)[Ei].id,t&&(S(this,Ei)[Ei].region=t),n&&(S(this,Ei)[Ei].targetDomain=n);var o=location.href,r=ut(o.toLowerCase());if(void 0===r.e||"0"!=r.wzrk_ex){xe.isPrivacyArrPushed=!0,xe.privacyArray.length>0&&this.privacy.push(xe.privacyArray),S(this,xi)[xi](),this.pageChanged();var a=setInterval((function(){S(i,ki)[ki].gcookie&&(clearInterval(a),S(i,Ai)[Ai].processBackupEvents())}),3e3);S(this,Ii)[Ii]?document.addEventListener("click",S(this,Oi)[Oi]):document.removeEventListener("click",S(this,Oi)[Oi]),S(this,_i)[_i]=1}}}},{key:"pageChanged",value:function(){var e=this,t=window.location.href,n=ut(t.toLowerCase()),i=S(this,Ci)[Ci].getSessionCookieObject(),o=void 0===i.p?0:i.p;i.p=++o,S(this,Ci)[Ci].setSessionCookieObject(i);var r={},a=function(e){if(""===e)return"";var t=document.createElement("a");return t.href=e,t.hostname}(document.referrer);if(window.location.hostname!==a){var s=120;""!==a&&(a=a.length>s?a.substring(0,s):a,r.referrer=a);var l=n.utm_source||n.wzrk_source;void 0!==l&&(l=l.length>s?l.substring(0,s):l,r.us=l);var c=n.utm_medium||n.wzrk_medium;void 0!==c&&(c=c.length>s?c.substring(0,s):c,r.um=c);var u=n.utm_campaign||n.wzrk_campaign;if(void 0!==u&&(u=u.length>s?u.substring(0,s):u,r.uc=u),void 0!==n.wzrk_medium){var d=n.wzrk_medium;d.match(/^email$|^social$|^search$/)&&(r.wm=d)}}(r=S(this,Ai)[Ai].addSystemDataToObject(r,void 0)).cpg=t,r[j]=Ct();var p=S(this,Ei)[Ei].dataPostURL;S(this,Ai)[Ai].addFlags(r),1===parseInt(r.pg)&&S(this,Li)[Li](r),r.af={lib:"web-sdk-v1.5.0"},p=dt(p,"type","page"),p=dt(p,"d",ft(JSON.stringify(r),S(this,wi)[wi])),S(this,Ai)[Ai].saveAndFireRequest(p,xe.blockRequest),S(this,Pi)[Pi]=t,setTimeout((function(){o<=3&&S(e,Ri)[Ri](),S(e,Di)[Di]()&&setInterval((function(){S(e,Ri)[Ri]()}),3e5)}),12e4)}},{key:"_isPersonalisationActive",value:function(){return Te._isLocalStorageSupported()&&this.enablePersonalization}},{key:"sendMultiValueData",value:function(e){var t={af:{}},n={};t.type="profile",null==n.tz&&(n.tz=(new Date).toString().match(/([A-Z]+[\+-][0-9]+)/)[1]),t.profile=n,e&&Object.keys(e).forEach((function(n){t.af[n]=e[n]})),xe.location&&(t.af=a(a({},t.af),xe.location)),t=S(this,Ai)[Ai].addSystemDataToProfileObject(t,void 0),S(this,Ai)[Ai].addFlags(t);var i=ft(JSON.stringify(t),S(this,wi)[wi]),o=S(this,Ei)[Ei].dataPostURL;o=dt(o,"type",Z),o=dt(o,"d",i),S(this,Ai)[Ai].saveAndFireRequest(o,xe.blockRequest)}},{key:"setOffline",value:function(e){"boolean"==typeof e?(xe.offline=e,e||S(this,Ai)[Ai].processBackupEvents()):console.error("setOffline should be called with a value of type boolean")}},{key:"popupCallback",set:function(e){this.popupCallbacks[this.popupCurrentWzrkId]=e}}]),e}(),Ui=function(){this.onUserLogin._processOldValues(),this.privacy._processOldValues(),this.event._processOldValues(),this.profile._processOldValues(),this.notifications._processOldValues()},ji=function(){S(this,Pi)[Pi]!==location.href&&this.pageChanged()},Fi=function(){var e=S(this,Ei)[Ei].dataPostURL,t={};t=S(this,Ai)[Ai].addSystemDataToObject(t,void 0),e=dt(e,"type","ping"),e=dt(e,"d",ft(JSON.stringify(t),S(this,wi)[wi])),S(this,Ai)[Ai].saveAndFireRequest(e,xe.blockRequest)},Vi=function(){return void 0!==window.wzrk_d&&"continuous"===window.wzrk_d.ping},Bi=function(e){this._isPersonalisationActive()&&(e.dsync=!0)},qi=new Ni(window.clevertap);return window.clevertap=window.wizrocket=qi,qi}()},307:(e,t,n)=>{e=n.nmd(e);var i="__lodash_hash_undefined__",o=9007199254740991,r="[object Arguments]",a="[object Array]",s="[object Boolean]",l="[object Date]",c="[object Error]",u="[object Function]",d="[object Map]",p="[object Number]",f="[object Object]",h="[object Promise]",v="[object RegExp]",g="[object Set]",y="[object String]",b="[object WeakMap]",m="[object ArrayBuffer]",w="[object DataView]",S=/^\[object .+?Constructor\]$/,_=/^(?:0|[1-9]\d*)$/,k={};k["[object Float32Array]"]=k["[object Float64Array]"]=k["[object Int8Array]"]=k["[object Int16Array]"]=k["[object Int32Array]"]=k["[object Uint8Array]"]=k["[object Uint8ClampedArray]"]=k["[object Uint16Array]"]=k["[object Uint32Array]"]=!0,k[r]=k[a]=k[m]=k[s]=k[w]=k[l]=k[c]=k[u]=k[d]=k[p]=k[f]=k[v]=k[g]=k[y]=k[b]=!1;var C="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,E="object"==typeof self&&self&&self.Object===Object&&self,A=C||E||Function("return this")(),I=t&&!t.nodeType&&t,P=I&&e&&!e.nodeType&&e,O=P&&P.exports===I,T=O&&C.process,x=function(){try{return T&&T.binding&&T.binding("util")}catch(e){}}(),M=x&&x.isTypedArray;function R(e,t){for(var n=-1,i=null==e?0:e.length;++n<i;)if(t(e[n],n,e))return!0;return!1}function D(e){var t=-1,n=Array(e.size);return e.forEach((function(e,i){n[++t]=[i,e]})),n}function L(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}var N,U,j,F=Array.prototype,V=Function.prototype,B=Object.prototype,q=A["__core-js_shared__"],z=V.toString,H=B.hasOwnProperty,W=(N=/[^.]+$/.exec(q&&q.keys&&q.keys.IE_PROTO||""))?"Symbol(src)_1."+N:"",K=B.toString,G=RegExp("^"+z.call(H).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Y=O?A.Buffer:void 0,J=A.Symbol,$=A.Uint8Array,Z=B.propertyIsEnumerable,X=F.splice,Q=J?J.toStringTag:void 0,ee=Object.getOwnPropertySymbols,te=Y?Y.isBuffer:void 0,ne=(U=Object.keys,j=Object,function(e){return U(j(e))}),ie=Pe(A,"DataView"),oe=Pe(A,"Map"),re=Pe(A,"Promise"),ae=Pe(A,"Set"),se=Pe(A,"WeakMap"),le=Pe(Object,"create"),ce=Me(ie),ue=Me(oe),de=Me(re),pe=Me(ae),fe=Me(se),he=J?J.prototype:void 0,ve=he?he.valueOf:void 0;function ge(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var i=e[t];this.set(i[0],i[1])}}function ye(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var i=e[t];this.set(i[0],i[1])}}function be(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var i=e[t];this.set(i[0],i[1])}}function me(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new be;++t<n;)this.add(e[t])}function we(e){var t=this.__data__=new ye(e);this.size=t.size}function Se(e,t){for(var n=e.length;n--;)if(Re(e[n][0],t))return n;return-1}function _e(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":Q&&Q in Object(e)?function(e){var t=H.call(e,Q),n=e[Q];try{e[Q]=void 0;var i=!0}catch(e){}var o=K.call(e);return i&&(t?e[Q]=n:delete e[Q]),o}(e):function(e){return K.call(e)}(e)}function ke(e){return Ve(e)&&_e(e)==r}function Ce(e,t,n,i,o){return e===t||(null==e||null==t||!Ve(e)&&!Ve(t)?e!=e&&t!=t:function(e,t,n,i,o,u){var h=Le(e),b=Le(t),S=h?a:Te(e),_=b?a:Te(t),k=(S=S==r?f:S)==f,C=(_=_==r?f:_)==f,E=S==_;if(E&&Ne(e)){if(!Ne(t))return!1;h=!0,k=!1}if(E&&!k)return u||(u=new we),h||Be(e)?Ee(e,t,n,i,o,u):function(e,t,n,i,o,r,a){switch(n){case w:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case m:return!(e.byteLength!=t.byteLength||!r(new $(e),new $(t)));case s:case l:case p:return Re(+e,+t);case c:return e.name==t.name&&e.message==t.message;case v:case y:return e==t+"";case d:var u=D;case g:var f=1&i;if(u||(u=L),e.size!=t.size&&!f)return!1;var h=a.get(e);if(h)return h==t;i|=2,a.set(e,t);var b=Ee(u(e),u(t),i,o,r,a);return a.delete(e),b;case"[object Symbol]":if(ve)return ve.call(e)==ve.call(t)}return!1}(e,t,S,n,i,o,u);if(!(1&n)){var A=k&&H.call(e,"__wrapped__"),I=C&&H.call(t,"__wrapped__");if(A||I){var P=A?e.value():e,O=I?t.value():t;return u||(u=new we),o(P,O,n,i,u)}}return!!E&&(u||(u=new we),function(e,t,n,i,o,r){var a=1&n,s=Ae(e),l=s.length;if(l!=Ae(t).length&&!a)return!1;for(var c=l;c--;){var u=s[c];if(!(a?u in t:H.call(t,u)))return!1}var d=r.get(e);if(d&&r.get(t))return d==t;var p=!0;r.set(e,t),r.set(t,e);for(var f=a;++c<l;){var h=e[u=s[c]],v=t[u];if(i)var g=a?i(v,h,u,t,e,r):i(h,v,u,e,t,r);if(!(void 0===g?h===v||o(h,v,n,i,r):g)){p=!1;break}f||(f="constructor"==u)}if(p&&!f){var y=e.constructor,b=t.constructor;y==b||!("constructor"in e)||!("constructor"in t)||"function"==typeof y&&y instanceof y&&"function"==typeof b&&b instanceof b||(p=!1)}return r.delete(e),r.delete(t),p}(e,t,n,i,o,u))}(e,t,n,i,Ce,o))}function Ee(e,t,n,i,o,r){var a=1&n,s=e.length,l=t.length;if(s!=l&&!(a&&l>s))return!1;var c=r.get(e);if(c&&r.get(t))return c==t;var u=-1,d=!0,p=2&n?new me:void 0;for(r.set(e,t),r.set(t,e);++u<s;){var f=e[u],h=t[u];if(i)var v=a?i(h,f,u,t,e,r):i(f,h,u,e,t,r);if(void 0!==v){if(v)continue;d=!1;break}if(p){if(!R(t,(function(e,t){if(a=t,!p.has(a)&&(f===e||o(f,e,n,i,r)))return p.push(t);var a}))){d=!1;break}}else if(f!==h&&!o(f,h,n,i,r)){d=!1;break}}return r.delete(e),r.delete(t),d}function Ae(e){return function(e,t,n){var i=t(e);return Le(e)?i:function(e,t){for(var n=-1,i=t.length,o=e.length;++n<i;)e[o+n]=t[n];return e}(i,n(e))}(e,qe,Oe)}function Ie(e,t){var n,i,o=e.__data__;return("string"==(i=typeof(n=t))||"number"==i||"symbol"==i||"boolean"==i?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function Pe(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return function(e){return!(!Fe(e)||function(e){return!!W&&W in e}(e))&&(Ue(e)?G:S).test(Me(e))}(n)?n:void 0}ge.prototype.clear=function(){this.__data__=le?le(null):{},this.size=0},ge.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},ge.prototype.get=function(e){var t=this.__data__;if(le){var n=t[e];return n===i?void 0:n}return H.call(t,e)?t[e]:void 0},ge.prototype.has=function(e){var t=this.__data__;return le?void 0!==t[e]:H.call(t,e)},ge.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=le&&void 0===t?i:t,this},ye.prototype.clear=function(){this.__data__=[],this.size=0},ye.prototype.delete=function(e){var t=this.__data__,n=Se(t,e);return!(n<0||(n==t.length-1?t.pop():X.call(t,n,1),--this.size,0))},ye.prototype.get=function(e){var t=this.__data__,n=Se(t,e);return n<0?void 0:t[n][1]},ye.prototype.has=function(e){return Se(this.__data__,e)>-1},ye.prototype.set=function(e,t){var n=this.__data__,i=Se(n,e);return i<0?(++this.size,n.push([e,t])):n[i][1]=t,this},be.prototype.clear=function(){this.size=0,this.__data__={hash:new ge,map:new(oe||ye),string:new ge}},be.prototype.delete=function(e){var t=Ie(this,e).delete(e);return this.size-=t?1:0,t},be.prototype.get=function(e){return Ie(this,e).get(e)},be.prototype.has=function(e){return Ie(this,e).has(e)},be.prototype.set=function(e,t){var n=Ie(this,e),i=n.size;return n.set(e,t),this.size+=n.size==i?0:1,this},me.prototype.add=me.prototype.push=function(e){return this.__data__.set(e,i),this},me.prototype.has=function(e){return this.__data__.has(e)},we.prototype.clear=function(){this.__data__=new ye,this.size=0},we.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},we.prototype.get=function(e){return this.__data__.get(e)},we.prototype.has=function(e){return this.__data__.has(e)},we.prototype.set=function(e,t){var n=this.__data__;if(n instanceof ye){var i=n.__data__;if(!oe||i.length<199)return i.push([e,t]),this.size=++n.size,this;n=this.__data__=new be(i)}return n.set(e,t),this.size=n.size,this};var Oe=ee?function(e){return null==e?[]:(e=Object(e),function(t,n){for(var i=-1,o=null==t?0:t.length,r=0,a=[];++i<o;){var s=t[i];l=s,Z.call(e,l)&&(a[r++]=s)}var l;return a}(ee(e)))}:function(){return[]},Te=_e;function xe(e,t){return!!(t=null==t?o:t)&&("number"==typeof e||_.test(e))&&e>-1&&e%1==0&&e<t}function Me(e){if(null!=e){try{return z.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function Re(e,t){return e===t||e!=e&&t!=t}(ie&&Te(new ie(new ArrayBuffer(1)))!=w||oe&&Te(new oe)!=d||re&&Te(re.resolve())!=h||ae&&Te(new ae)!=g||se&&Te(new se)!=b)&&(Te=function(e){var t=_e(e),n=t==f?e.constructor:void 0,i=n?Me(n):"";if(i)switch(i){case ce:return w;case ue:return d;case de:return h;case pe:return g;case fe:return b}return t});var De=ke(function(){return arguments}())?ke:function(e){return Ve(e)&&H.call(e,"callee")&&!Z.call(e,"callee")},Le=Array.isArray,Ne=te||function(){return!1};function Ue(e){if(!Fe(e))return!1;var t=_e(e);return t==u||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}function je(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=o}function Fe(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Ve(e){return null!=e&&"object"==typeof e}var Be=M?function(e){return function(t){return e(t)}}(M):function(e){return Ve(e)&&je(e.length)&&!!k[_e(e)]};function qe(e){return null!=(t=e)&&je(t.length)&&!Ue(t)?function(e,t){var n=Le(e),i=!n&&De(e),o=!n&&!i&&Ne(e),r=!n&&!i&&!o&&Be(e),a=n||i||o||r,s=a?function(e,t){for(var n=-1,i=Array(e);++n<e;)i[n]=t(n);return i}(e.length,String):[],l=s.length;for(var c in e)!t&&!H.call(e,c)||a&&("length"==c||o&&("offset"==c||"parent"==c)||r&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||xe(c,l))||s.push(c);return s}(e):function(e){if(n=(t=e)&&t.constructor,t!==("function"==typeof n&&n.prototype||B))return ne(e);var t,n,i=[];for(var o in Object(e))H.call(e,o)&&"constructor"!=o&&i.push(o);return i}(e);var t}e.exports=function(e,t){return Ce(e,t)}},600:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=i(n(749)),r=function(){function e(){this.argString="",this.argValues={}}return e.prototype.add=function(e,t){if(void 0===t)return this;this.argString&&(this.argString+="&");var n;return n=t instanceof Array?JSON.stringify(t):encodeURIComponent(t),this.argString+="".concat(e,"=").concat(n),this.argValues[e]=t,this},e.prototype.body=function(e){return e?(this._body=e,this):this._body},e.prototype.attachApiKeys=function(e,t){return this.add(o.default.PARAMS.APP_ID,e).add(o.default.PARAMS.CLIENT,o.default.CLIENT).add(o.default.PARAMS.CLIENT_KEY,t)},e.prototype.build=function(){return this.argString},e.prototype.buildDict=function(){return this.argValues},e}();t.default=r},266:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e){this.browser=this.searchString(this.getBrowserData(e))||"Unknown Browser",this.version=this.searchVersion(e.navigator.userAgent)||this.searchVersion(e.navigator.appVersion)||"Unknown Version",this.OS=this.searchString(this.getOSData(e))||"Unknown OS"}return e.prototype.searchString=function(e){for(var t=0;t<e.length;t++){var n=e[t].string,i=e[t].prop;if(this.versionSearchString=e[t].versionSearch||e[t].identity,n){if(-1!==n.indexOf(e[t].subString))return e[t].identity}else if(i)return e[t].identity}},e.prototype.searchVersion=function(e){if(e){var t=e.indexOf(this.versionSearchString);if(-1!==t)return parseFloat(e.substring(t+this.versionSearchString.length+1))}},e.prototype.getBrowserData=function(e){return[{string:e.navigator.userAgent,subString:"Chrome",identity:"Chrome"},{string:e.navigator.userAgent,subString:"OmniWeb",identity:"OmniWeb",versionSearch:"OmniWeb/"},{string:e.navigator.userAgent,subString:"CriOS",identity:"Chrome",versionSearch:"CriOS"},{string:e.navigator.userAgent,subString:"FxiOS",identity:"Firefox",versionSearch:"FxiOS"},{string:e.navigator.vendor,subString:"Apple",identity:"Safari",versionSearch:"Version"},{prop:e.opera,identity:"Opera",versionSearch:"Version"},{string:e.navigator.vendor,subString:"iCab",identity:"iCab"},{string:e.navigator.vendor,subString:"KDE",identity:"Konqueror"},{string:e.navigator.userAgent,subString:"Firefox",identity:"Firefox"},{string:e.navigator.vendor,subString:"Camino",identity:"Camino"},{string:e.navigator.userAgent,subString:"Netscape",identity:"Netscape"},{string:e.navigator.userAgent,subString:"MSIE",identity:"Explorer",versionSearch:"MSIE"},{string:e.navigator.userAgent,subString:"Android",identity:"Android Browser",versionSearch:"Version"},{string:e.navigator.userAgent,subString:"Gecko",identity:"Mozilla",versionSearch:"rv"},{string:e.navigator.userAgent,subString:"Mozilla",identity:"Netscape",versionSearch:"Mozilla"}]},e.prototype.getOSData=function(e){return[{string:e.navigator.platform,subString:"Win",identity:"Windows"},{string:e.navigator.platform,subString:"Mac",identity:"Mac OS"},{string:e.navigator.platform,subString:"iPad",identity:"iOS"},{string:e.navigator.userAgent,subString:"iPhone",identity:"iOS"},{string:e.navigator.userAgent,subString:"Android",identity:"Android"},{string:e.navigator.platform,subString:"Linux",identity:"Linux"}]},e}();t.default=n},749:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={METHODS:{START:"start",STOP:"stop",ADVANCE:"advance",TRACK:"track",PAUSE_SESSION:"pauseSession",RESUME_SESSION:"resumeSession",PAUSE_STATE:"pauseState",RESUME_STATE:"resumeState",DOWNLOAD_FILE:"downloadFile",MULTI:"multi",SET_VARS:"setVars",GET_VARS:"getVars",SET_USER_ATTRIBUTES:"setUserAttributes",SET_DEVICE_ATTRIBUTES:"setDeviceAttributes",UPLOAD_FILE:"uploadFile",REGISTER_DEVICE:"registerDevice"},SDK_VERSION:"1.11.2",CLIENT:"js",PARAMS:{ACTION:"action",APP_ID:"appId",CLIENT:"client",CLIENT_KEY:"clientKey",CT:"ct",CURRENCY_CODE:"currencyCode",DEVICE_ID:"deviceId",SDK_VERSION:"sdkVersion",USER_ID:"userId",NEW_USER_ID:"newUserId",DEV_MODE:"devMode",VERSION_NAME:"versionName",SYSTEM_NAME:"systemName",SYSTEM_VERSION:"systemVersion",BROWSER_NAME:"browserName",BROWSER_VERSION:"browserVersion",DEVICE_NAME:"deviceName",DEVICE_MODEL:"deviceModel",USER_ATTRIBUTES:"userAttributes",LOCALE:"locale",COUNTRY:"country",REGION:"region",CITY:"city",LOCATION:"location",STATE:"state",INFO:"info",EVENT:"event",VALUE:"value",FILENAME:"filename",TIME:"time",DATA:"data",VARS:"vars",FILE:"file",SIZE:"size",VARIATION:"variation",HASH:"hash",EMAIL:"email",VARIABLES:"vars",ACTION_DEFINITIONS:"actionDefinitions",PARAMS:"params",INCLUDE_DEFAULTS:"includeDefaults",INCLUDE_VARIANT_DEBUG_INFO:"includeVariantDebugInfo",NEWSFEED_MESSAGES:"newsfeedMessages",MESSAGE_ID:"messageId",WEB_PUSH_SUBSCRIPTION:"webPushSubscription"},KEYS:{IS_REGISTERED:"isRegistered",LATEST_VERSION:"latestVersion",SYNC_INBOX:"syncNewsfeed",MESSAGES:"messages",VARS:"vars",VARIANTS:"variants",VARIANT_DEBUG_INFO:"variantDebugInfo",ACTION_DEFINITIONS:"actionDefinitions",TOKEN:"token"},DEFAULT_KEYS:{COUNT:"__leanplum_unsynced",ITEM:"__leanplum_unsynced_",VARIABLES:"__leanplum_variables",VARIANTS:"__leanplum_variants",VARIANT_DEBUG_INFO:"__leanplum_variant_debug_info",ACTION_DEFINITIONS:"__leanplum_action_definitions",HOST_CONFIG:"__leanplum_hosts",INBOX_MESSAGES:"__leanplum_inbox_messages",TOKEN:"__leanplum_token",DEVICE_ID:"__leanplum_device_id",USER_ID:"__leanplum_user_id",SESSION:"__leanplum_session",MESSAGE_OCCURRENCES:"__leanplum_message_occurrences",MESSAGE_CACHE:"__leanplum_message_cache",MIGRATION_STATE:"__leanplum_migration_state",PUSH_SUBSCRIPTION:"__leanplum_push_subscription"},VALUES:{DETECT:"(detect)",DEFAULT_PUSH_ACTION:"Open action"}}},565:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this.handlers=[]}return e.prototype.on=function(e,t){this.handlers.push({eventName:e,callback:t})},e.prototype.off=function(e,t){this.handlers=this.handlers.filter((function(n){return n.eventName!==e||n.callback!==t}))},e.prototype.emit=function(e,t){this.handlers.forEach((function(n){n.eventName===e&&n.callback(t)}))},e}();t.default=n},157:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this.startHandlers=[],this.devMode=!1,this.hasStarted=!1,this.startSuccessful=!1,this.variantDebugInfoEnabled=!1}return e.prototype.addStartResponseHandler=function(e){this.startHandlers.push(e),this.hasStarted&&e(this.startSuccessful)},e.prototype.removeStartResponseHandler=function(e){var t=this.startHandlers.indexOf(e);t>=0&&this.startHandlers.splice(t,1)},e.prototype.triggerStartHandlers=function(){for(var e=0;e<this.startHandlers.length;e++)this.startHandlers[e](this.startSuccessful)},e}();t.default=n},876:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=i(n(749)),r=i(n(642)),a=function(){function e(){}return e.setApiPath=function(t){e._lp.setApiPath(t)},e.setEmail=function(){},e.setNetworkTimeout=function(t){e._lp.setNetworkTimeout(t)},e.setAppIdForDevelopmentMode=function(t,n){e._lp.setAppIdForDevelopmentMode(t,n)},e.setAppIdForProductionMode=function(t,n){e._lp.setAppIdForProductionMode(t,n)},e.setSocketHost=function(t){e._lp.setSocketHost(t)},e.setDeviceId=function(t){e._lp.setDeviceId(t)},e.setLocale=function(t){e._lp.setLocale(t)},e.setAppVersion=function(t){e._lp.setAppVersion(t)},e.setDeviceName=function(t){e._lp.setDeviceName(t)},e.setDeviceModel=function(t){e._lp.setDeviceModel(t)},e.setRequestBatching=function(t,n){e._lp.setRequestBatching(t,n)},e.setSystemName=function(t){e._lp.setSystemName(t)},e.setSystemVersion=function(t){e._lp.setSystemVersion(t)},e.setVariables=function(t){e._lp.setVariables(t)},e.setVariantDebugInfoEnabled=function(t){e._lp.setVariantDebugInfoEnabled(t)},e.enableRichInAppMessages=function(t){e._lp.enableRichInAppMessages(t)},e.processMessageEvent=function(t,n){e._lp.processMessageEvent(t,n)},e.getVariantDebugInfo=function(){return e._lp.getVariantDebugInfo()},e.getVariables=function(){return e._lp.getVariables()},e.getVariable=function(){for(var t,n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];return(t=e._lp).getVariable.apply(t,n)},e.getVariants=function(){return e._lp.getVariants()},e.inbox=function(){return e._lp.inbox()},e.addStartResponseHandler=function(t){e._lp.addStartResponseHandler(t)},e.removeStartResponseHandler=function(t){e._lp.removeStartResponseHandler(t)},e.addVariablesChangedHandler=function(t){e._lp.addVariablesChangedHandler(t)},e.removeVariablesChangedHandler=function(t){e._lp.removeVariablesChangedHandler(t)},e.forceContentUpdate=function(t){e._lp.forceContentUpdate(t)},e.useSessionLength=function(t){e._lp.useSessionLength(t)},e.start=function(t,n,i){e._lp.start(t,n,i)},e.startFromCache=function(t,n,i){e._lp.startFromCache(t,n,i)},e.stop=function(){e._lp.stop()},e.pauseSession=function(){e._lp.pauseSession()},e.resumeSession=function(){e._lp.resumeSession()},e.pauseState=function(){e._lp.pauseState()},e.resumeState=function(){e._lp.resumeState()},e.getUserId=function(){return this._lp.getUserId()},e.setUserId=function(t){e.setUserAttributes(t)},e.setUserAttributes=function(t,n){e._lp.setUserAttributes(t,n)},e.track=function(t,n,i,o){e._lp.track(t,n,i,o)},e.trackPurchase=function(t,n,i,o){void 0===o&&(o="Purchase"),e._lp.trackPurchase(t,n,i,o)},e.advanceTo=function(t,n,i){e._lp.advanceTo(t,n,i)},e.isWebPushSupported=function(){return e._lp.isWebPushSupported()},e.isWebPushSubscribed=function(){return e._lp.isWebPushSubscribed()},e.setWebPushOptions=function(t){return e._lp.setWebPushOptions(t)},e.registerForWebPush=function(t){return e._lp.registerForWebPush(t)},e.unregisterFromWebPush=function(){return e._lp.unregisterFromWebPush()},e.clearUserContent=function(){e._lp.clearUserContent()},e.defineAction=function(t){e._lp.defineAction(t)},e.applyQueue=function(t){e._lp.applyQueue(t)},e.on=function(t,n){e._lp.on(t,n)},e.off=function(t,n){e._lp.off(t,n)},e.getFileUrl=function(t){return e._lp.getFileUrl(t)},e.__destroy=function(){this._lp=new r.default(window)},e._lp=new r.default(window),e.VERSION=o.default.SDK_VERSION,e}();t.default=a},234:function(e,t,n){"use strict";var i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},i.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.LeanplumInboxMessage=void 0;var r=o(n(600)),a=o(n(749)),s=o(n(88)),l=function(e){return Object.keys(e).map((function(t){return e[t]}))},c=function(){function e(e,t){this.createRequest=e,this.onAction=t,this.messageMap={},this.changeHandlers=[],this.load()}return e.prototype.downloadMessages=function(){var e=this;this.createRequest("getNewsfeedMessages",void 0,{queued:!0,sendNow:!0,response:function(t){var n=null==t?void 0:t.response[0];n&&n.newsfeedMessages&&(e.messageMap=n.newsfeedMessages,e.triggerChangeHandlers())}})},e.prototype.markAsRead=function(e){var t=this.messageMap[e];if(t&&!t.isRead){t.isRead=!0,this.triggerChangeHandlers();var n=new r.default;n.add("newsfeedMessageId",e),this.createRequest("markNewsfeedMessageAsRead",n,{})}},e.prototype.read=function(e){this.markAsRead(e);var t=this.message(e),n=e.split("##")[0],i=(null==t?void 0:t.openAction())||null;this.onAction(n,i)},e.prototype.remove=function(e){if(this.messageMap[e]){delete this.messageMap[e],this.triggerChangeHandlers();var t=new r.default;t.add("newsfeedMessageId",e),this.createRequest("deleteNewsfeedMessage",t,{})}},e.prototype.onChanged=function(e){var t=this,n=this.changeHandlers.push(e);return function(){return t.changeHandlers.splice(n-1,1)}},e.prototype.triggerChangeHandlers=function(){this.changeHandlers.forEach((function(e){return e()})),this.save()},e.prototype.save=function(){s.default.save(a.default.DEFAULT_KEYS.INBOX_MESSAGES,JSON.stringify(this.messageMap),"session")},e.prototype.load=function(){var e=s.default.get(a.default.DEFAULT_KEYS.INBOX_MESSAGES,"session");try{this.messageMap=JSON.parse(e)||{}}catch(e){this.messageMap={}}},e.prototype.count=function(){return l(this.messageMap).length},e.prototype.unreadCount=function(){return l(this.messageMap).filter((function(e){return!e.isRead})).length},e.prototype.messages=function(e){var t=[];for(var n in this.messageMap){var i=this.messageMap[n];e(i)&&t.push(u.create(n,i))}return t},e.prototype.allMessages=function(){return this.messages((function(){return!0}))},e.prototype.unreadMessages=function(){return this.messages((function(e){return!e.isRead}))},e.prototype.messageIds=function(){return Object.keys(this.messageMap)},e.prototype.message=function(e){var t=this.messageMap[e];return t?u.create(e,t):null},e}();t.default=c;var u=function(){function e(e,t,n,i,o,r,a,s){this._id=e,this._title=t,this._subtitle=n,this._data=i,this._timestamp=o,this._isRead=r,this._imageUrl=a,this._openAction=s}return e.create=function(t,n){var o,r,s,l,c,u,d,p,f,h,v,g=null===(o=n.messageData)||void 0===o?void 0:o.parentCampaignId,y=i(i({},null===(s=null===(r=n.messageData)||void 0===r?void 0:r.vars)||void 0===s?void 0:s[a.default.VALUES.DEFAULT_PUSH_ACTION]),{parentCampaignId:g});return new e(t,null===(c=null===(l=n.messageData)||void 0===l?void 0:l.vars)||void 0===c?void 0:c.Title,null===(d=null===(u=n.messageData)||void 0===u?void 0:u.vars)||void 0===d?void 0:d.Subtitle,null===(f=null===(p=n.messageData)||void 0===p?void 0:p.vars)||void 0===f?void 0:f.Data,n.deliveryTimestamp,n.isRead,null===(v=null===(h=n.messageData)||void 0===h?void 0:h.vars)||void 0===v?void 0:v.Image,y)},e.prototype.id=function(){return this._id},e.prototype.title=function(){return this._title},e.prototype.subtitle=function(){return this._subtitle},e.prototype.data=function(){return this._data},e.prototype.timestamp=function(){return this._timestamp},e.prototype.isRead=function(){return this._isRead},e.prototype.imageUrl=function(){return this._imageUrl},e.prototype.openAction=function(){return this._openAction},e}();t.LeanplumInboxMessage=u},642:function(e,t,n){"use strict";var i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},i.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(600)),a=o(n(266)),s=o(n(749)),l=o(n(157)),c=o(n(234)),u=o(n(343)),d=o(n(34)),p=o(n(88)),f=o(n(95)),h=o(n(14)),v=o(n(565)),g=o(n(316)),y=n(772),b=n(205),m=o(n(816)),w=s.default.DEFAULT_KEYS.SESSION,S=function(){function e(e){var t=this;this.wnd=e,this._migration=new g.default(this.createRequest.bind(this)),this._events=new v.default,this._internalState=new l.default,this._lpInbox=new c.default(this.createRequest.bind(this),this.onInboxAction.bind(this)),this._lpRequest=new u.default(this._events),this._varCache=new m.default(this.createRequest.bind(this)),this._lpSocket=new d.default(this._varCache,this.createRequest.bind(this),this._lpRequest.getLastResponse.bind(this._lpRequest),this._events),this._pushManager=new f.default(this.createRequest.bind(this)),this._messages=new h.default(this._events,this.createRequest.bind(this),this.getFileUrl.bind(this)),this._browserDetector=new a.default(e),this._events.on("navigationChange",(function(e){var n=!1;t._events.emit("openUrl",{preventDefault:function(){return n=!0},url:e}),n||t.wnd.location.assign(e)})),this._events.on("registerForPush",(function(){return t.registerForWebPush()})),this._events.on("updateDevServerHost",(function(e){return t.setSocketHost(e)})),this._events.on("migrateStateReceived",(function(e){return t._migration.verifyState(e)}))}return e.prototype.setApiPath=function(e){this._lpRequest.apiPath&&(this._lpRequest.apiPath=e)},e.prototype.setNetworkTimeout=function(e){this._lpRequest.setNetworkTimeout(e),this._lpSocket.setNetworkTimeout(e)},e.prototype.setAppIdForDevelopmentMode=function(e,t){this._lpRequest.appId=e,this._lpRequest.clientKey=t,this._internalState.devMode=!0},e.prototype.setAppIdForProductionMode=function(e,t){this._lpRequest.appId=e,this._lpRequest.clientKey=t,this._internalState.devMode=!1},e.prototype.setSocketHost=function(e){this._lpSocket.setSocketHost(e)},e.prototype.setDeviceId=function(e){this._lpRequest.deviceId=e},e.prototype.setLocale=function(e){this._locale=e},e.prototype.setAppVersion=function(e){this._lpRequest.versionName=e},e.prototype.setDeviceName=function(e){this._deviceName=e},e.prototype.setDeviceModel=function(e){this._deviceModel=e},e.prototype.setRequestBatching=function(e,t){this._lpRequest.batchEnabled=e,this._lpRequest.batchCooldown=t},e.prototype.setSystemName=function(e){this._systemName=e},e.prototype.setSystemVersion=function(e){this._systemVersion=e},e.prototype.setVariables=function(e){this._varCache.setVariables(e)},e.prototype.setVariantDebugInfoEnabled=function(e){this._internalState.variantDebugInfoEnabled=e},e.prototype.enableRichInAppMessages=function(e){this._messages.enableRichInAppMessages(e)},e.prototype.processMessageEvent=function(e,t){this._messages.processMessageEvent(e,t)},e.prototype.getVariantDebugInfo=function(){return this._varCache.getVariantDebugInfo()},e.prototype.getVariables=function(){return this._varCache.getVariables()},e.prototype.getVariable=function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return(e=this._varCache).getVariable.apply(e,t)},e.prototype.getVariants=function(){return this._varCache.variants||[]},e.prototype.inbox=function(){return this._lpInbox},e.prototype.on=function(e,t){this._events.on(e,t)},e.prototype.off=function(e,t){this._events.off(e,t)},e.prototype.onInboxAction=function(e,t){var n=this;this._messages.trackMessage(e,{event:"Open"},(function(){return t&&n._messages.onAction(t)}))},e.prototype.defineAction=function(e){this._varCache.registerActionDefinition(i({kind:y.MessageKind.Template},e))},e.prototype.addStartResponseHandler=function(e){this._internalState.addStartResponseHandler(e)},e.prototype.removeStartResponseHandler=function(e){this._internalState.removeStartResponseHandler(e)},e.prototype.addVariablesChangedHandler=function(e){this._varCache.addVariablesChangedHandler(e)},e.prototype.removeVariablesChangedHandler=function(e){this._varCache.removeVariablesChangedHandler(e)},e.prototype.getFileUrl=function(e){return this._lpRequest.getFileUrl(e)},e.prototype.forceContentUpdate=function(e){var t=this,n=(new r.default).add(s.default.PARAMS.INCLUDE_DEFAULTS,!1).add(s.default.PARAMS.INCLUDE_VARIANT_DEBUG_INFO,this._internalState.variantDebugInfoEnabled);this.createRequest(s.default.METHODS.GET_VARS,n,{queued:!1,sendNow:!0,response:function(n){var i=t._lpRequest.getLastResponse(n),o=t._lpRequest.isResponseSuccess(i);o&&(t._varCache.applyDiffs(i[s.default.KEYS.VARS],i[s.default.KEYS.VARIANTS],i[s.default.KEYS.ACTION_DEFINITIONS]),t._varCache.setVariantDebugInfo(i[s.default.KEYS.VARIANT_DEBUG_INFO]),t._events.emit("messagesReceived",i[s.default.KEYS.MESSAGES])),e&&e(o)}})},e.prototype.useSessionLength=function(e){this._sessionLength=e},e.prototype.start=function(e,t,n){var i=this;if("function"==typeof e?(n=e,t={},e=null):"object"==typeof e&&null!=e?(n=t,t=e,e=null):"function"==typeof t&&(n=t,t={}),this.hasActiveSession()&&!this._internalState.devMode)return this.startFromCache(e,t,n);this._migration.getState((function(o){o===b.MigrationState.DUPLICATE?i._ct=i._migration.initCleverTap():o===b.MigrationState.CLEVERTAP&&(i._ct=i._migration.initCleverTap(),i.migratePushToken(),Object.values(s.default.DEFAULT_KEYS).filter((function(e){return![s.default.DEFAULT_KEYS.USER_ID,s.default.DEFAULT_KEYS.DEVICE_ID,s.default.DEFAULT_KEYS.TOKEN,s.default.DEFAULT_KEYS.MIGRATION_STATE].includes(e)})).forEach((function(e){return p.default.remove(e)})),i._messages.cleanup()),i._lpRequest.userId=e,e&&i._migration.identity.setUserId(e),n&&i.addStartResponseHandler(n),i._varCache.onUpdate=function(){i._varCache.triggerVariablesChangedHandlers()};var a=(new r.default).add(s.default.PARAMS.USER_ATTRIBUTES,JSON.stringify(t)).add(s.default.PARAMS.COUNTRY,s.default.VALUES.DETECT).add(s.default.PARAMS.REGION,s.default.VALUES.DETECT).add(s.default.PARAMS.CITY,s.default.VALUES.DETECT).add(s.default.PARAMS.LOCATION,s.default.VALUES.DETECT).add(s.default.PARAMS.SYSTEM_NAME,i._systemName||i._browserDetector.OS).add(s.default.PARAMS.SYSTEM_VERSION,(i._systemVersion||"").toString()).add(s.default.PARAMS.BROWSER_NAME,i._browserDetector.browser).add(s.default.PARAMS.BROWSER_VERSION,i._browserDetector.version.toString()).add(s.default.PARAMS.LOCALE,i._locale||s.default.VALUES.DETECT).add(s.default.PARAMS.DEVICE_NAME,i._deviceName||"".concat(i._browserDetector.browser," ").concat(i._browserDetector.version)).add(s.default.PARAMS.DEVICE_MODEL,i._deviceModel||"Web Browser").add(s.default.PARAMS.NEWSFEED_MESSAGES,i._lpInbox.messageIds()).add(s.default.PARAMS.INCLUDE_DEFAULTS,!1).add(s.default.PARAMS.INCLUDE_VARIANT_DEBUG_INFO,i._internalState.variantDebugInfoEnabled);i.createRequest(s.default.METHODS.START,a,{queued:!0,sendNow:!0,response:function(e){i._internalState.hasStarted=!0;var t=i._lpRequest.getLastResponse(e),n=i._lpRequest.isResponseSuccess(t);if(i._internalState.startSuccessful=n,n){i.updateSession();var o=t[s.default.KEYS.MESSAGES];if(t.actionDefinitions&&(o.actionDefinitions=t.actionDefinitions),i._events.emit("messagesReceived",o),t[s.default.KEYS.SYNC_INBOX]&&i._lpInbox.downloadMessages(),i._internalState.devMode){var r=t[s.default.KEYS.LATEST_VERSION];r&&console.log("A newer version of the Leanplum SDK, ".concat(r,', is available.\n  Use "npm update leanplum-sdk" or go to https://docs.leanplum.com/reference#javascript-setup to download it.')),i.connectSocket()}i._varCache.applyDiffs(t[s.default.KEYS.VARS],t[s.default.KEYS.VARIANTS],t[s.default.KEYS.ACTION_DEFINITIONS]),i._varCache.setVariantDebugInfo(t[s.default.KEYS.VARIANT_DEBUG_INFO]),i._varCache.token=t[s.default.KEYS.TOKEN]}else i._varCache.loadDiffs();i._events.emit("start",{success:n}),i._internalState.triggerStartHandlers()}})}))},e.prototype.startFromCache=function(e,t,n){var i=this;"function"==typeof e?(n=e,t={},e=null):"object"==typeof e&&null!=e?(n=t,t=e,e=null):"function"==typeof t&&(n=t,t={}),this.updateSession(),this._lpRequest.userId=e,n&&this.addStartResponseHandler(n),this._internalState.hasStarted=!0,this._internalState.startSuccessful=!0,this._migration.getState((function(e){e!==b.MigrationState.DUPLICATE&&e!==b.MigrationState.CLEVERTAP||(i._ct=i._migration.initCleverTap())})),this._internalState.devMode&&this.connectSocket(),this._varCache.loadDiffs(),this._events.emit("resume"),this._internalState.triggerStartHandlers()},e.prototype.stop=function(){this.createRequest(s.default.METHODS.STOP,void 0,{sendNow:!0,queued:!0,response:function(){p.default.remove(w)}})},e.prototype.pauseSession=function(){this.createRequest(s.default.METHODS.PAUSE_SESSION,void 0,{sendNow:!0,queued:!0})},e.prototype.resumeSession=function(){this._events.emit("resume"),this.createRequest(s.default.METHODS.RESUME_SESSION,void 0,{sendNow:!0,queued:!0})},e.prototype.pauseState=function(){this.createRequest(s.default.METHODS.PAUSE_STATE,void 0,{queued:!0})},e.prototype.resumeState=function(){this.createRequest(s.default.METHODS.RESUME_STATE,void 0,{queued:!0})},e.prototype.getUserId=function(){return this._lpRequest.userId},e.prototype.setUserId=function(e){this.setUserAttributes(e)},e.prototype.setUserAttributes=function(e,t){if(void 0===t)if("object"==typeof e)t=e,e=void 0;else if("string"!=typeof e)return void console.log("Leanplum: setUserAttributes expects a string or an object");var n=(new r.default).add(s.default.PARAMS.USER_ATTRIBUTES,t?JSON.stringify(t):void 0).add(s.default.PARAMS.NEW_USER_ID,e);this._events.emit("setUserAttribute",t),this.createRequest(s.default.METHODS.SET_USER_ATTRIBUTES,n,{queued:!0}),e&&(this._lpRequest.userId=e,p.default.save(s.default.DEFAULT_KEYS.USER_ID,this._lpRequest.userId))},e.prototype.track=function(e,t,n,i){var o=this;"object"==typeof t&&null!=t?(i=t,n=void 0,t=void 0):"string"==typeof t?(i=n,n=t,t=void 0):"object"==typeof n&&null!=n&&(i=n,n=void 0);var a=(new r.default).add(s.default.PARAMS.EVENT,e).add(s.default.PARAMS.VALUE,t||0).add(s.default.PARAMS.INFO,n).add(s.default.PARAMS.PARAMS,JSON.stringify(i));this._events.emit("track",{eventName:e,params:i}),this.createRequest(s.default.METHODS.TRACK,a,{queued:!0,response:function(){return o.updateSession()}})},e.prototype.trackPurchase=function(e,t,n,i){void 0===i&&(i="Purchase");var o=(new r.default).add(s.default.PARAMS.EVENT,i).add(s.default.PARAMS.VALUE,e||0).add(s.default.PARAMS.PARAMS,JSON.stringify(n));t&&o.add(s.default.PARAMS.CURRENCY_CODE,t),this._events.emit("track",{eventName:i}),this.createRequest(s.default.METHODS.TRACK,o,{queued:!0,isPurchase:!0})},e.prototype.advanceTo=function(e,t,n){"object"==typeof t&&null!=t&&(n=t,t=void 0);var i=(new r.default).add(s.default.PARAMS.STATE,e).add(s.default.PARAMS.INFO,t).add(s.default.PARAMS.PARAMS,JSON.stringify(n));this._events.emit("advanceState",{state:e,params:n}),this.createRequest(s.default.METHODS.ADVANCE,i,{queued:!0})},e.prototype.isWebPushSupported=function(){return this._pushManager.isWebPushSupported()},e.prototype.isWebPushSubscribed=function(){var e,t=(null===(e=this._webPushOptions)||void 0===e?void 0:e.clientUrl)||"";return this._pushManager.isWebPushSubscribed(t)},e.prototype.setWebPushOptions=function(e){this._webPushOptions=i({},e)},e.prototype.registerForWebPush=function(e){var t=this;if(this._pushManager.isWebPushSupported()){var n=this._webPushOptions||{},i=e||n.serviceWorkerUrl,o=n&&n.scope?{scope:n.scope}:null;return this._pushManager.register(i,o,(function(e){return e?Promise.resolve(!0):t._pushManager.subscribeUser()}))}return Promise.reject("Leanplum: WebPush is not supported.")},e.prototype.unregisterFromWebPush=function(){var e,t=(null===(e=this._webPushOptions)||void 0===e?void 0:e.clientUrl)||"";return this._pushManager.unsubscribeUser(t)},e.prototype.clearUserContent=function(){this._varCache.clearUserContent()},e.prototype.applyQueue=function(e){var t=this;e.forEach((function(e){return t[e.name].apply(t,e.args)}))},e.prototype.createRequest=function(e,t,n){void 0===n&&(n={}),this._migration.duplicateRequest(e,t,n)||this._lpRequest.request(e,t,i({devMode:this._internalState.devMode},n))},e.prototype.connectSocket=function(){this._lpSocket.connect({appId:this._lpRequest.appId,deviceId:this._lpRequest.deviceId})},e.prototype.hasActiveSession=function(){if(!this._sessionLength)return!1;var e=Date.now(),t=parseInt(p.default.get(w));return!isNaN(t)&&e-t<1e3*this._sessionLength},e.prototype.updateSession=function(){p.default.save(w,String(Date.now()))},e.prototype.migratePushToken=function(){var e=this;p.default.get(s.default.DEFAULT_KEYS.PUSH_SUBSCRIPTION)&&this.isWebPushSubscribed().then((function(t){var n;if(t){e._pushManager.unsubscribeUser();var o=null===(n=e._webPushOptions)||void 0===n?void 0:n.serviceWorkerUrl,r=o?{serviceWorkerPath:o}:{};e._ct&&e._ct.notifications.push(i({titleText:"",bodyText:"",okButtonText:"",rejectButtonText:""},r))}}))},e}();t.default=S},343:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=i(n(600)),r=i(n(749)),a=i(n(88)),s=i(n(967)),l=function(){function e(e,t){void 0===t&&(t=new s.default),this.events=e,this.network=t,this.cooldownTimeout=null,this.lastRequestTime=void 0,this.userIdValue=void 0,this.apiPath="https://api.leanplum.com/api",this.batchCooldown=5,this.batchEnabled=!0,this.loadHostConfig()}return Object.defineProperty(e.prototype,"userId",{get:function(){var e,t;return null!==(t=null!==(e=this.userIdValue)&&void 0!==e?e:this.loadLocal(r.default.DEFAULT_KEYS.USER_ID))&&void 0!==t?t:this.deviceId},set:function(e){this.userIdValue=e},enumerable:!1,configurable:!0}),e.prototype.request=function(e,t,n){var i=this;if(void 0===n&&(n={}),n=n||{},t=t||new o.default,this.deviceId||(this.deviceId=this.loadLocal(r.default.DEFAULT_KEYS.DEVICE_ID)),!this.deviceId){for(var a="",s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",l=0;l<16;l++)a+=s.charAt(Math.floor(Math.random()*s.length));this.deviceId=a,this.saveLocal(r.default.DEFAULT_KEYS.DEVICE_ID,a)}this.saveLocal(r.default.DEFAULT_KEYS.USER_ID,this.userId);var c=t.attachApiKeys(this.appId,this.clientKey).add(r.default.PARAMS.SDK_VERSION,r.default.SDK_VERSION).add(r.default.PARAMS.DEVICE_ID,this.deviceId).add(r.default.PARAMS.USER_ID,this.userId).add(r.default.PARAMS.ACTION,e).add(r.default.PARAMS.VERSION_NAME,this.versionName).add(r.default.PARAMS.DEV_MODE,n.devMode).add(r.default.PARAMS.TIME,((new Date).getTime()/1e3).toString()),u=n.success||n.response,d=n.error||n.response;if(!this.appId||!this.clientKey){var p="Leanplum App ID and client key are not set. Make sure you are calling setAppIdForDevelopmentMode or setAppIdForProductionMode before issuing API calls.";return console.error(p),void(d&&d(p))}if(t.body())this.sendRequest("?".concat(c.build()),t.body(),u,d,n.queued);else{var f=n.devMode||n.sendNow||!this.batchEnabled,h=function(){var e=i.popUnsentRequests();if(e.length>0){var t=JSON.stringify({data:e}),a=(new o.default).attachApiKeys(i.appId,i.clientKey).add(r.default.PARAMS.SDK_VERSION,r.default.SDK_VERSION).add(r.default.PARAMS.ACTION,r.default.METHODS.MULTI).add(r.default.PARAMS.TIME,((new Date).getTime()/1e3).toString().toString()).build();i.sendRequest("?".concat(a),t,u,d,n.queued)}};if(!f&&this.batchCooldown){var v=(new Date).getTime()/1e3;!this.lastRequestTime||v-this.lastRequestTime>=this.batchCooldown?(f=!0,this.lastRequestTime=v):this.cooldownTimeout||(this.cooldownTimeout=setTimeout((function(){i.cooldownTimeout=null,i.lastRequestTime=(new Date).getTime()/1e3,h()}),1e3*(this.batchCooldown-(v-this.lastRequestTime))))}this.saveRequestForLater(c.buildDict()),f&&h()}},e.prototype.getFileUrl=function(e){if(!e)return"";if(/^https?:/.test(e))return e;var t=(new o.default).attachApiKeys(this.appId,this.clientKey).add(r.default.PARAMS.SDK_VERSION,r.default.SDK_VERSION).add(r.default.PARAMS.ACTION,"downloadFile").add("filename",e);return"".concat(this.apiPath,"?").concat(t.build())},e.prototype.setNetworkTimeout=function(e){this.network.setNetworkTimeout(e)},e.prototype.getLastResponse=function(e){var t,n,i,o=null!==(n=null===(t=null==e?void 0:e.response)||void 0===t?void 0:t.length)&&void 0!==n?n:0;return o>0?null===(i=null==e?void 0:e.response)||void 0===i?void 0:i[o-1]:null},e.prototype.getFirstResponse=function(e){var t,n,i;return(null!==(n=null===(t=null==e?void 0:e.response)||void 0===t?void 0:t.length)&&void 0!==n?n:0)>0?null===(i=null==e?void 0:e.response)||void 0===i?void 0:i[0]:null},e.prototype.isResponseSuccess=function(e){return Boolean(null==e?void 0:e.success)},e.prototype.saveRequestForLater=function(e){var t=this.loadLocal(r.default.DEFAULT_KEYS.COUNT)||0,n=r.default.DEFAULT_KEYS.ITEM+t;this.saveLocal(n,JSON.stringify(e)),t++,this.saveLocal(r.default.DEFAULT_KEYS.COUNT,t)},e.prototype.sendRequest=function(e,t,n,i,o){var a=this;this.network.ajax("POST","".concat(this.apiPath).concat(e),t,(function(s){var l,c=a.getFirstResponse(s),u=(null===(l=s.migrateState)||void 0===l?void 0:l.sha256)||c.sha256;if(/\bgetMigrateState\b/.test(t)||a.events.emit("migrateStateReceived",u),!c.success&&c.apiHost){var d=c.apiHost,p=c.apiPath,f=c.devServerHost;a.saveLocal(r.default.DEFAULT_KEYS.HOST_CONFIG,JSON.stringify({apiHost:d,apiPath:p,devServerHost:f})),a.apiPath="https://".concat(d,"/").concat(p),a.sendRequest(e,t,n,i,o),a.events.emit("updateDevServerHost",f)}else n&&n(s)}),i,o)},e.prototype.popUnsentRequests=function(){var e=[],t=this.loadLocal(r.default.DEFAULT_KEYS.COUNT)||0;this.removeLocal(r.default.DEFAULT_KEYS.COUNT);for(var n=0;n<t;n++){var i=r.default.DEFAULT_KEYS.ITEM+n;try{e.push(JSON.parse(this.loadLocal(i)))}catch(e){}this.removeLocal(i)}return e},e.prototype.loadHostConfig=function(){var e=JSON.parse(this.loadLocal(r.default.DEFAULT_KEYS.HOST_CONFIG)||"null");if(e){var t=e.apiHost,n=e.apiPath,i=e.devServerHost;this.apiPath="https://".concat(t,"/").concat(n),this.events.emit("updateDevServerHost",i)}},e.prototype.loadLocal=function(e){return a.default.get(e)},e.prototype.saveLocal=function(e,t){a.default.save(e,t)},e.prototype.removeLocal=function(e){a.default.remove(e)},e}();t.default=l},34:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=i(n(307)),r=i(n(600)),a=i(n(749)),s=i(n(897)),l=function(){function e(e,t,n,i){this.cache=e,this.createRequest=t,this.getLastResponse=n,this.events=i,this.networkTimeoutSeconds=10,this.socketClient=null,this.socketHost="dev.leanplum.com",this.auth=null}return e.prototype.connect=function(e){var t=this;if(WebSocket){this.auth=e;var n=!1;this.socketClient=new s.default,this.socketClient.setNetworkTimeout(this.networkTimeoutSeconds),this.socketClient.onopen=function(){var i;n||(console.log("Leanplum: Connected to development server."),t.socketClient.send("auth",((i={})[a.default.PARAMS.APP_ID]=e.appId,i[a.default.PARAMS.DEVICE_ID]=e.deviceId,i)),n=!0)},this.socketClient.onerror=function(e){console.log("Leanplum: Socket error",e)},this.socketClient.onmessage=this.onMessageReceived.bind(this),this.socketClient.onclose=function(){console.log("Leanplum: Disconnected from development server."),n=!1},this.socketClient.connect(this.socketHost),setInterval((function(){t.socketClient.connected||t.socketClient.connecting||t.socketClient.connect(t.socketHost)}),5e3)}else console.log("Your browser doesn't support WebSockets.")},e.prototype.setSocketHost=function(e){this.socketHost=e,this.socketClient.connected&&(this.socketClient.disconnect(),this.connect(this.auth))},e.prototype.setNetworkTimeout=function(e){var t;this.networkTimeoutSeconds=e,null===(t=this.socketClient)||void 0===t||t.setNetworkTimeout(e)},e.prototype.onMessageReceived=function(e,t){var n=this;if("updateVars"===e){var i=(new r.default).add(a.default.PARAMS.INCLUDE_DEFAULTS,!1);this.createRequest(a.default.METHODS.GET_VARS,i,{queued:!1,sendNow:!0,response:function(e){var t=n.getLastResponse(e),i=t[a.default.KEYS.VARS],r=t[a.default.KEYS.VARIANTS],s=t[a.default.KEYS.ACTION_DEFINITIONS];(0,o.default)(i,n.cache.diffs)||n.cache.applyDiffs(i,r,s)}})}else if("getVariables"===e)this.cache.sendVariables(),this.socketClient.send("getContentResponse",{updated:!0});else if("getActions"===e){var s=this.cache.sendActions();this.socketClient.send("getContentResponse",{updated:s})}else if("registerDevice"===e){var l=t[0];alert("Your device has been registered to ".concat(l.email,"."))}else"trigger"===e&&(l=t[0],this.events.emit("previewRequest",l))},e}();t.default=l},14:function(e,t,n){"use strict";var i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},i.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(749)),a=o(n(600)),s=o(n(967)),l=o(n(307)),c=o(n(88)),u=o(n(375)),d=function(){function e(){this.session={},this.triggers={},this.occurrences={}}return e.prototype.recordOccurrence=function(e){var t=(this.session[e]||0)+1;this.session[e]=t;var n=this.occurrences[e]||[];n.push(Date.now()),this.occurrences[e]=n,this.save()},e.prototype.recordTriggerOccurrence=function(e){var t=this.triggers[e]||[];return t.push(Date.now()),this.triggers[e]=t,this.save(),t.length},e.prototype.getSessionOccurranceCount=function(e){return this.session[e]||0},e.prototype.getOccurrences=function(e){return this.occurrences[e]||[]},e.prototype.clearSession=function(){this.session={}},e.prototype.load=function(){var e=c.default.get(r.default.DEFAULT_KEYS.MESSAGE_OCCURRENCES);if(e){var t=p(e);t&&(this.session=t.session,this.triggers=t.triggers,this.occurrences=t.occurrences)}},e.prototype.save=function(){var e=r.default.DEFAULT_KEYS.MESSAGE_OCCURRENCES;c.default.save(e,JSON.stringify({session:this.session,triggers:this.triggers,occurrences:this.occurrences}))},e}(),p=function(e){try{return JSON.parse(e)}catch(e){return}},f=function(){function e(e,t,n){var i=this;this.events=e,this.createRequest=t,this.getFileUrl=n,this._messageCache={},this.occurrenceTracker=new d,this._showRichIAM=!1,e.on("previewRequest",this.onMessagePreview.bind(this)),e.on("messagesReceived",this.onMessagesReceived.bind(this)),e.on("start",(function(){i.occurrenceTracker.load(),i.occurrenceTracker.clearSession(),i.onTrigger({trigger:"start"})})),e.on("resume",(function(){var e=r.default.DEFAULT_KEYS.MESSAGE_CACHE,t=p(c.default.get(e));i._messageCache=t||i._messageCache,i.occurrenceTracker.load(),i.onTrigger({trigger:"resume"})})),e.on("track",(function(e){i.onTrigger({trigger:"event",eventName:e.eventName,params:e.params||{}})})),e.on("advanceState",(function(e){return i.onTrigger({trigger:"state",state:e.state,params:e.params||{}})})),e.on("setUserAttribute",(function(e){return i.onTrigger({trigger:"userAttribute",attributes:e})}))}return e.prototype.cleanup=function(){c.default.remove(r.default.DEFAULT_KEYS.MESSAGE_CACHE),this._messageCache={},this.onTrigger=function(){}},e.prototype.enableRichInAppMessages=function(e){this._showRichIAM=e},e.prototype.onTrigger=function(e){var t=this,n=this.getMessages();Object.keys(n).filter((function(i){return t.shouldShowMessage(i,n[i],e)})).slice(0,1).forEach((function(e){return t.showMessage(e,n[e])}))},e.prototype.onMessagePreview=function(e){var t=e.action,n={track:function(t){var n=t?"event '".concat(t,"'"):"impression";console.log("Tracking ".concat(n," for ").concat(e.messageId))},runActionNamed:function(e){return console.log("Running untracked action '".concat(e,"'"))},runTrackedActionNamed:function(e){return console.log("Running tracked action '".concat(e,"'"))}};this.handleMessage({isPreview:!0,message:this.addDefaults(i({messageId:e.messageId},t)),context:n})},e.prototype.onMessagesReceived=function(e){var t=e||{};this._messageCache=t,c.default.save(r.default.DEFAULT_KEYS.MESSAGE_CACHE,JSON.stringify(t))},e.prototype.shouldShowMessage=function(e,t,n){var i=Date.now(),o=this.matchesTrigger(t.whenTriggers,n),r=this.matchesTrigger(t.unlessTriggers,n);if(!o||r)return!1;var a=this.occurrenceTracker.recordTriggerOccurrence(e);return!!this.matchesLimits(e,t.whenLimits,a)&&!(t.startTime&&t.endTime&&(i<t.startTime||t.endTime<i))},e.prototype.showMessage=function(e,t){var n=this,o=this.addDefaults(i({},t.vars)),r={track:function(t,i,o,r){n.occurrenceTracker.recordOccurrence(e),n.trackMessage(e,{event:t,value:i,info:o,params:r})},runActionNamed:function(t){return n.onAction(o[t],e)},runTrackedActionNamed:function(t){var i=t.replace(/ action$/,"");n.trackMessage(e,{event:i},(function(){return n.onAction(o[t],e)}))}};this.handleMessage({context:r,message:i({messageId:e},o)})},e.prototype.processMessageEvent=function(e,t){var n=document.getElementById("lp-message-".concat(e));if(n){var i=t.replace(/^http:\/\/leanplum\//,"").split("?"),o=i[0],r=i[1],a=(void 0===r?"":r).split("&").reduce((function(e,t){var n=t.split("="),i=n[0],o=n[1];return e[i]=decodeURIComponent(o),e}),{}),s=n.metadata,l=s.message,c=s.context;switch(o){case"loadFinished":if(n.style.visibility="visible",n.style.left="0",l["HTML Height"]>0){var u=l["HTML Width"];n.style.height="".concat(l["HTML Height"],"px"),n.style.width=u,n.style.left="calc((100% - ".concat(u,") / 2)");var d=l["HTML Align"].toLowerCase(),f="top"===d?"bottom":"top";n.style[d]="0",n.style[f]=""}else n.style.top="0";n.contentWindow.focus(),c.track();break;case"track":c.track(a.event,parseFloat(a.value),a.info,p(a.parameters));break;case"runAction":case"runTrackedAction":c["".concat(o,"Named")](a.action);case"close":n.metadata=null,n.parentNode.removeChild(n)}}else console.log("message closed, skipping event processing")},e.prototype.handleMessage=function(e){var t=this;if(this._showRichIAM&&"HTML"===e.message.__name__){this.resolveFiles(e.message);var n=e.message.Template||"";(new s.default).ajax("get",n.replace("-10.html","-11.html"),"",(function(n){return t.renderRichInAppMessage(n,e)}),(function(){}),!1,!0)}else this.events.emit("showMessage",this.resolveFields(e))},e.prototype.renderRichInAppMessage=function(e,t){var n=t.message.messageId,i=JSON.stringify(t.message),o=document.createElement("iframe");o.setAttribute("id","lp-message-".concat(n)),o.setAttribute("title","Popup"),o.setAttribute("aria-modal","true"),o.style.cssText=["border-width: 0","position: fixed","top: -100%","left: -100%","width: 100%","height: 100%","visibility: hidden","z-index: 100000"].join(";"),document.body.insertBefore(o,document.body.firstChild),o.metadata=t,o.contentWindow.messageId=n;var r=e.replace("##Vars##",i).replace("<body>","<body><script>window.messageId='".concat(n,"'<\/script>"));if("srcdoc"in o)o.srcdoc=r;else{var a=o.contentWindow.document;a.open(),a.write(r),a.close()}},e.prototype.trackMessage=function(e,t,n){void 0===t&&(t={event:null}),void 0===n&&(n=function(){});var i=(new a.default).add(r.default.PARAMS.MESSAGE_ID,e),o=function(e){return void 0!==e};t.event&&i.add(r.default.PARAMS.EVENT,t.event),o(t.value)&&i.add(r.default.PARAMS.VALUE,t.value||0),o(t.info)&&i.add(r.default.PARAMS.INFO,t.info),o(t.params)&&i.add(r.default.PARAMS.PARAMS,JSON.stringify(t.params)),this.createRequest(r.default.METHODS.TRACK,i,{queued:!0,sendNow:!0,response:n})},e.prototype.onAction=function(e,t){var n=this;if(void 0===t&&(t=""),e){var i=this._messageCache;if("Chain to Existing Message"!==e.__name__){var o=function(){var i=e.__name__;"Open URL"===e.__name__?n.events.emit("navigationChange",e.URL):"Register For Push"===e.__name__?n.events.emit("registerForPush"):i&&n.showMessage(t,{messageId:t,action:i,vars:e})},r=this.messageIdFromAction(e);r?this.trackMessage(r,{event:null},o):o()}else{var a=e["Chained message"],s=i[a];"Open URL"===s.action?this.trackMessage(a,{event:"View"},(function(){return n.onAction(s.vars,a)})):"Register For Push"===s.action?this.events.emit("registerForPush"):this.showMessage(a,s)}}},e.prototype.getMessages=function(){return this._messageCache||{}},e.prototype.addDefaults=function(e){var t=this,n=(this.getMessages().actionDefinitions||{})[e.__name__],o=null==n?void 0:n.kinds;if(!n)return e;var r=function(e,n,i){void 0===i&&(i="");for(var a=0,s=Object.keys(n);a<s.length;a++){var l=s[a],c=n[l];"object"==typeof c?e[l]=r(e[l]||{},c,"".concat(i).concat(l,".")):void 0===e[l]&&(e[l]=c),"FILE"===o["".concat(i).concat(l)]&&(e[l]=t.getFileUrl(e[l]))}return e};return r(i({},e),n.values)},e.prototype.resolveFiles=function(e){var t=/^__file__/;for(var n in e)t.test(n)?e[n.replace(t,"")]=this.getFileUrl(e[n]):"object"==typeof e[n]&&(e[n]=this.resolveFiles(e[n]));return e},e.prototype.resolveFields=function(e){var t=/\bcolor/i,n=/^__file__/;for(var i in e)n.test(i)?e[i.replace(n,"")+" URL"]=this.getFileUrl(e[i]):t.test(i)?e[i]=u.default.decodeColor(e[i]):"object"==typeof e[i]&&(e[i]=this.resolveFields(e[i]));return e},e.prototype.messageIdFromAction=function(e){var t=this._messageCache,n=i({},e);delete n.parentCampaignId;for(var o=0,r=Object.keys(t);o<r.length;o++){var a=r[o],s=t[a];if(s.parentCampaignId===e.parentCampaignId&&(0,l.default)(s.vars,n))return a}},e.prototype.matchesTrigger=function(e,t){if(!e)return!1;var n=function(e,t){return void 0===t&&(t=""),0===e.toString().localeCompare(t.toString(),void 0,{sensitivity:"accent"})},i=function(e,t,i){var o=e===i.noun;if("triggers"===i.verb)return o;if("triggersWithParameter"===i.verb){var r=i.objects,a=r[0],s=r[1],l=a in t&&n(s,t[a]);return o&&l}};return e.children.some((function(e){var o=e.subject;switch(t.trigger){case"start":return"start"===o||"resume"===o;case"resume":return"resume"===o;case"event":return"event"===o&&i(t.eventName,t.params,e);case"userAttribute":if("userAttribute"!==o)return!1;var r=e.noun in t.attributes;if("changes"===e.verb)return r;if("changesTo"===e.verb){if(!r)return!1;var a=t.attributes[e.noun];return e.objects.some((function(e){return null===e&&null===a||e&&a&&n(e,a)}))}break;case"state":return"state"===o&&i(t.state,t.params,e)}return!1}))},e.prototype.matchesLimits=function(e,t,n){var i=this;return!t||t.children.every((function(t){var o=t.subject,r=t.verb,a=parseInt(t.noun.toString());if("times"===o){if("limitSession"===r)return i.occurrenceTracker.getSessionOccurranceCount(e)+1===a;if("limitUser"===r)return(s=i.occurrenceTracker.getOccurrences(e).length)+1<=a;var s,l=parseInt(t.objects[0].toString())||1,c=function(e){switch(e){case"limitSecond":return 1e3;case"limitMinute":return 6e4;case"limitHour":return 36e5;case"limitDay":return 864e5}}(r)*l,u=(s=i.occurrenceTracker.getOccurrences(e)).length;return u<a||s.slice(u-a,u)[0]<Date.now()-c}return"onNthOccurrence"===o?n===a:"everyNthOccurrence"===o&&n%a==0}))},e}();t.default=f},316:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.IdentityManager=t.IdentityState=void 0;var o,r=i(n(739)),a=n(205),s=i(n(88)),l=i(n(749)),c=i(n(600)),u=function(){},d=function(e){switch(null==e?void 0:e.sdk){case"lp":return a.MigrationState.LEANPLUM;case"lp+ct":return a.MigrationState.DUPLICATE;case"ct":return a.MigrationState.CLEVERTAP;default:return a.MigrationState.UNKNOWN}},p=function(){function e(e){var t;this.createRequest=e,this.response=null,this._fetching=null;var n=s.default.get(l.default.DEFAULT_KEYS.MIGRATION_STATE),i=s.default.get(l.default.DEFAULT_KEYS.DEVICE_ID),o=null!==(t=s.default.get(l.default.DEFAULT_KEYS.USER_ID))&&void 0!==t?t:i;this.identity=new f(o,i),n&&(this.response=JSON.parse(n))}return e.prototype.getState=function(e){void 0===e&&(e=u);var t=this.response,n=d(this.response);t&&n!==a.MigrationState.UNKNOWN?e(n):this.getMigrationState(e)},e.prototype.verifyState=function(e){var t,n=this;e&&(null===(t=this.response)||void 0===t?void 0:t.sha256)!==e&&this.getMigrationState((function(e){e!==a.MigrationState.DUPLICATE&&e!==a.MigrationState.CLEVERTAP||(n.initCleverTap(),n.identity.isAnonymous||r.default.onUserLogin.push({Site:n.identity.profile}))}))},e.prototype.initCleverTap=function(){var e,t=null===(e=this.response)||void 0===e?void 0:e.ct;if(t)return r.default.init(t.accountId,t.regionCode),r.default},e.prototype.duplicateRequest=function(e,t,n){var i=d(this.response);if(i===a.MigrationState.LEANPLUM)return!1;t||(t=new c.default),i===a.MigrationState.DUPLICATE&&t.add(l.default.PARAMS.CT,!0);var o=(null==t?void 0:t.buildDict())||{},s=o[l.default.PARAMS.USER_ID];switch(s&&this.identity.setUserId(s),e){case l.default.METHODS.START:this.identity.isAnonymous||r.default.onUserLogin.push({Site:this.identity.profile});break;case l.default.METHODS.TRACK:this.eventPush(o,n);break;case l.default.METHODS.ADVANCE:o.event="state_".concat(o.state),this.eventPush(o,n);break;case l.default.METHODS.SET_USER_ATTRIBUTES:this.profilePush(o)}return i===a.MigrationState.CLEVERTAP},e.prototype.profilePush=function(e){var t=e[l.default.PARAMS.NEW_USER_ID],n=this.mapAttributes(this.convertArrays(JSON.parse(e.userAttributes||"{}")));t?(this.identity.setUserId(t),Object.assign(n,this.identity.profile),r.default.onUserLogin.push({Site:n})):r.default.profile.push({Site:n})},e.prototype.eventPush=function(e,t){var n=e[l.default.PARAMS.MESSAGE_ID],i=t.isPurchase?"Charged":e.event;if(i&&!n){var o={};if(e.params){var a=this.convertArrays(JSON.parse(e.params));Object.assign(o,a)}e.value&&Object.assign(o,{value:e.value}),e.info&&Object.assign(o,{info:e.info}),t.isPurchase&&e.currencyCode&&Object.assign(o,{currencyCode:e.currencyCode}),r.default.event.push(i,o)}},e.prototype.convertArrays=function(e){return Object.keys(e).reduce((function(t,n){if(Array.isArray(e[n])){var i=e[n];t[n]="[".concat(i.join(","),"]")}else t[n]=e[n];return t}),{})},e.prototype.mapAttributes=function(e){var t,n,i=null===(n=null===(t=this.response)||void 0===t?void 0:t.ct)||void 0===n?void 0:n.attributeMappings;return i?Object.keys(e).reduce((function(t,n){return i[n]?t[i[n]]=e[n]:t[n]=e[n],t}),{}):e},e.prototype.getMigrationState=function(e){var t=this;null===this._fetching&&(this._fetching=new Promise((function(e){return t.createRequest("getMigrateState",new c.default,{sendNow:!0,response:function(n){var i,o=null===(i=null==n?void 0:n.response)||void 0===i?void 0:i[0],r=d(o);r&&r!==a.MigrationState.UNKNOWN&&(s.default.save(l.default.DEFAULT_KEYS.MIGRATION_STATE,JSON.stringify(o)),t.response=o),e(r)}})}))),this._fetching.then(e).then((function(){return t._fetching=null}))},e}();t.default=p,function(e){e.ANONYMOUS="anonymous",e.IDENTIFIED="identified"}(o=t.IdentityState||(t.IdentityState={}));var f=function(){function e(e,t){this.userId=e,this.deviceId=t,this.state=o.ANONYMOUS,this.identify()}return e.prototype.setUserId=function(e){this.state===o.ANONYMOUS&&(this.state=o.IDENTIFIED),this.userId=e},e.prototype.identify=function(){this.isAnonymous?this.state=o.ANONYMOUS:this.identifyNonAnonymous()},e.prototype.identifyNonAnonymous=function(){this.state=o.IDENTIFIED},Object.defineProperty(e.prototype,"profile",{get:function(){return{Identity:this.userId}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isAnonymous",{get:function(){return this.userId===this.deviceId},enumerable:!1,configurable:!0}),e}();t.IdentityManager=f},967:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this.networkTimeoutSeconds=10,this.requestQueue=[],this.runningRequest=!1}return e.prototype.setNetworkTimeout=function(e){this.networkTimeoutSeconds=e},e.prototype.ajax=function(e,t,n,i,o,r,a){var s=this;if(r){if(this.runningRequest)return this.enqueueRequest(arguments);this.runningRequest=!0}if("undefined"!=typeof XDomainRequest)return"http:"===location.protocol&&0===t.indexOf("https:")&&(t="http:".concat(t.substring(6))),this.ajaxIE8(e,t,n,i,o,r,a);var l=!1,c=new XMLHttpRequest;c.onreadystatechange=function(){if(4===c.readyState){if(l)return;var e;l=!0;var t=!1;if(a)e=c.responseText;else try{e=JSON.parse(c.responseText)}catch(e){setTimeout((function(){o&&o(null,c)}),0),t=!0}t||(c.status>=200&&c.status<300?setTimeout((function(){i&&i(e,c)}),0):setTimeout((function(){o&&o(e,c)}),0)),r&&(s.runningRequest=!1,s.dequeueRequest())}};var u=!1;c.onerror=c.ontimeout=function(){0===c.status&&(u=!0,s.requestQueue.splice(0,s.requestQueue.length))},u||(c.open(e,t,!0),c.setRequestHeader("Content-Type","text/plain"),c.send(n),setTimeout((function(){l||c.abort()}),1e3*this.networkTimeoutSeconds))},e.prototype.ajaxIE8=function(e,t,n,i,o,r,a){var s=this,l=new XDomainRequest;l.onload=function(){var e,t=!1;if(a)e=l.responseText;else try{e=JSON.parse(l.responseText)}catch(e){setTimeout((function(){o&&o(null,l)}),0),t=!0}t||setTimeout((function(){i&&i(e,l)}),0),r&&(s.runningRequest=!1,s.dequeueRequest())},l.onerror=l.ontimeout=function(){setTimeout((function(){o&&o(null,l)}),0),r&&(s.runningRequest=!1,s.dequeueRequest())},l.onprogress=function(){},l.open(e,t),l.timeout=1e3*this.networkTimeoutSeconds,l.send(n)},e.prototype.enqueueRequest=function(e){this.requestQueue.push(e)},e.prototype.dequeueRequest=function(){var e=this.requestQueue.shift();e&&this.ajax.apply(this,e)},e}();t.default=n},95:function(e,t,n){"use strict";var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(o,r){function a(e){try{l(i.next(e))}catch(e){r(e)}}function s(e){try{l(i.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((i=i.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,i,o,r,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,s[0]&&(a=0)),a;)try{if(n=1,i&&(o=2&s[0]?i.return:s[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,s[1])).done)return o;switch(i=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,i=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],i=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=r(n(600)),s=r(n(749)),l=r(n(88)),c=function(){function e(e){this.createRequest=e,this.serviceWorkerRegistration=null}return Object.defineProperty(e.prototype,"serviceWorker",{get:function(){return window.navigator.serviceWorker},enumerable:!1,configurable:!0}),e.prototype.isWebPushSupported=function(){return Boolean(void 0!==(null===window||void 0===window?void 0:window.navigator)&&"serviceWorker"in window.navigator&&"PushManager"in window)},e.prototype.isWebPushSubscribed=function(e){return void 0===e&&(e=""),i(this,void 0,Promise,(function(){var t,n,i;return o(this,(function(o){switch(o.label){case 0:return this.isWebPushSupported()?[4,this.getServiceWorkerRegistration(e)]:[2,!1];case 1:return(t=o.sent())?[4,t.pushManager.getSubscription()]:[2,!1];case 2:return n=o.sent(),(i=null!==n)&&this.updateNewSubscriptionOnServer(n),[2,i]}}))}))},e.prototype.register=function(e,t,n){return i(this,void 0,Promise,(function(){var i,r,a,s;return o(this,(function(o){switch(o.label){case 0:if(!this.isWebPushSupported())return console.log("Leanplum: Push messaging is not supported."),[2,n(!1)];o.label=1;case 1:return o.trys.push([1,4,,5]),i=this,[4,this.serviceWorker.register(e||"/sw.min.js",t)];case 2:return i.serviceWorkerRegistration=o.sent(),[4,this.serviceWorkerRegistration.pushManager.getSubscription()];case 3:return r=o.sent(),(a=null!==r)&&this.updateNewSubscriptionOnServer(r),[2,n(a)];case 4:return s=o.sent(),console.log("Leanplum: Service Worker Error: ",s),[2,n(!1)];case 5:return[2]}}))}))},e.prototype.subscribeUser=function(){return i(this,void 0,Promise,(function(){var e,t,n;return o(this,(function(i){switch(i.label){case 0:e=this.urlB64ToUint8Array("BInWPpWntfR39rgXSP04pqdmEdDGa50z6zqbMvxyxJCwzXIuSpSh8C888-CfJ82WELl7Xe8cjAnfCt-3vK0Ci68"),i.label=1;case 1:return i.trys.push([1,3,,4]),[4,this.serviceWorkerRegistration.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:e})];case 2:if(!(t=i.sent()))throw new Error;return this.updateNewSubscriptionOnServer(t),[3,4];case 3:throw n=i.sent(),new Error("Leanplum: Failed to subscribe the user: ".concat(n));case 4:return[2,!0]}}))}))},e.prototype.unsubscribeUser=function(e){return void 0===e&&(e=""),i(this,void 0,Promise,(function(){var t,n;return o(this,(function(i){switch(i.label){case 0:return[4,this.isWebPushSubscribed(e)];case 1:if(!i.sent())return[3,6];i.label=2;case 2:return i.trys.push([2,5,,6]),[4,this.serviceWorkerRegistration.pushManager.getSubscription()];case 3:if(!(t=i.sent()))throw new Error;return[4,t.unsubscribe()];case 4:return i.sent(),[3,6];case 5:throw n=i.sent(),new Error("Leanplum: Error unsubscribing: ".concat(n));case 6:return[2]}}))}))},e.prototype.getServiceWorkerRegistration=function(e){return void 0===e&&(e=""),i(this,void 0,Promise,(function(){var t;return o(this,(function(n){switch(n.label){case 0:return this.serviceWorkerRegistration?[3,2]:(t=this,[4,this.serviceWorker.getRegistration(e)]);case 1:t.serviceWorkerRegistration=n.sent(),n.label=2;case 2:return[2,this.serviceWorkerRegistration]}}))}))},e.prototype.urlB64ToUint8Array=function(e){for(var t=(e+"=".repeat((4-e.length%4)%4)).replace(/-/g,"+").replace(/_/g,"/"),n=this.decodeData(t),i=new Uint8Array(n.length),o=0;o<n.length;++o)i[o]=n.charCodeAt(o);return i},e.prototype.updateNewSubscriptionOnServer=function(e){if(e){var t=this.prepareSubscription(e),n=JSON.stringify(t);l.default.get(s.default.DEFAULT_KEYS.PUSH_SUBSCRIPTION)!==n&&(l.default.save(s.default.DEFAULT_KEYS.PUSH_SUBSCRIPTION,n),this.setSubscription(n))}},e.prototype.prepareSubscription=function(e){var t="getKey"in e?e.getKey("p256dh"):[],n="getKey"in e?e.getKey("auth"):[],i=this.encodeData(String.fromCharCode.apply(null,new Uint8Array(t))),o=this.encodeData(String.fromCharCode.apply(null,new Uint8Array(n)));return{endpoint:e.endpoint,key:i,auth:o}},e.prototype.setSubscription=function(e){if(e){var t=(new a.default).add(s.default.PARAMS.WEB_PUSH_SUBSCRIPTION,e);this.createRequest(s.default.METHODS.SET_DEVICE_ATTRIBUTES,t,{queued:!1,sendNow:!0})}},e.prototype.encodeData=function(e){return window.btoa(e)},e.prototype.decodeData=function(e){return window.atob(e)},e}();t.default=c},897:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=i(n(967)),r=function(){function e(){this.network=new o.default,this.connected=!1,this.connecting=!1,this.connected=!1,this.connecting=!1}return e.prototype.connect=function(e){var t=this;this.connecting=!0,this.network.ajax("POST","https://".concat(e,"/socket.io/1"),"",(function(n){var i=n.split(":"),o=i[0],r=parseInt(i[1])/2*1e3;t.socket=new WebSocket("wss://".concat(e,"/socket.io/1/websocket/").concat(o));var a=null;t.socket.onopen=function(){t.connected=!0,t.connecting=!1,t.onopen&&t.onopen(),a=setInterval((function(){t.socket.send("2:::")}),r)},t.socket.onclose=function(){t.connected=!1,clearInterval(a),t.onclose&&t.onclose()},t.socket.onmessage=function(e){var n=e.data.split(":"),i=parseInt(n[0]);if(2===i)t.socket.send("2::");else if(5===i){var o=n[1],r=JSON.parse(n.slice(3).join(":")),a=r.name,s=r.args;o&&t.socket.send("6:::".concat(o)),t.onmessage&&t.onmessage(a,s)}else 7===i&&console.log("Socket error: ".concat(e.data))},t.socket.onerror=function(e){t.socket.close(),t.onerror&&t.onerror(e)}}),null,!1,!0)},e.prototype.disconnect=function(){this.socket.close(),this.connected=!1,this.connecting=!1},e.prototype.send=function(e,t){if(this.connected){var n=JSON.stringify({name:e,args:t});this.socket.send("5:::".concat(n))}else console.log("Leanplum: Socket is not connected.")},e.prototype.setNetworkTimeout=function(e){this.network.setNetworkTimeout(e)},e}();t.default=r},88:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={local:!0,session:!0},i={local:{},session:{}},o=function(){function e(){}return e.get=function(e,t){if(void 0===t&&(t="local"),!n[t])return i[t][e];try{return"local"===t?localStorage[e]:sessionStorage.getItem(e)}catch(o){return n[t]=!1,i[t][e]}},e.save=function(e,t,o){if(void 0===o&&(o="local"),n[o])try{"local"===o?localStorage[e]=t:sessionStorage.setItem(e,t)}catch(r){n[o]=!1,i[o][e]=t}else i[o][e]=t},e.remove=function(e,t){if(void 0===t&&(t="local"),n[t])try{"local"===t?localStorage.removeItem(e):sessionStorage.removeItem(e)}catch(o){n[t]=!1,delete i[t][e]}else delete i[t][e]},e}();t.default=o},375:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.decodeColor=function(e){var t=255&e,n=255&(e>>=8),i=255&(e>>=8),o=(255&(e>>=8))/255;return"rgba(".concat(i,",").concat(n,",").concat(t,",").concat(o,")")},e.encodeColor=function(e){if("number"==typeof e)return e;var t=/^rgba\((\d+),(\d+),(\d+),(\d+(\.\d+)?)\)$/.exec(e);if(t)return(255*parseInt(t[4],10)<<24)+((255&parseInt(t[1],10))<<16)+((255&parseInt(t[2],10))<<8)+(255&parseInt(t[3],10));var n=/^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(e);if(n)return(255<<24)+((255&parseInt(n[1],16))<<16)+((255&parseInt(n[2],16))<<8)+(255&parseInt(n[3],16));throw new Error('Could not parse color "'.concat(e,'"'))},e}();t.default=n},816:function(e,t,n){"use strict";var i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},i.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(600)),a=o(n(749)),s=o(n(88)),l=o(n(375)),c=function(){function e(e){this.createRequest=e,this.actionDefinitions={},this.hasReceivedDiffs=!1,this.merged=void 0,this.variables=null,this.variablesChangedHandlers=[],this.variantDebugInfo={},this.diffs=void 0,this.token="",this.variants=[]}return e.prototype.applyDiffs=function(e,t,n){var o;this.diffs=e,this.variants=t,this.actionDefinitions=i(i({},this.actionDefinitions),(o=n)?Object.keys(o).reduce((function(e,t){e[t]=i({},o[t]);var n=o[t].kinds;return n&&(e[t].kinds=Object.keys(n).reduce((function(i,o){var r=n[o].toLowerCase();return i[o]=r,"action"===r&&(e[t].values[o]=""),i}),{})),e}),{}):o),this.hasReceivedDiffs=!0,this.merged=p(this.variables,e),this.saveDiffs(),this.onUpdate&&this.onUpdate()},e.prototype.loadDiffs=function(){try{this.applyDiffs(JSON.parse(this.loadLocal(a.default.DEFAULT_KEYS.VARIABLES)||null),JSON.parse(this.loadLocal(a.default.DEFAULT_KEYS.VARIANTS)||null),JSON.parse(this.loadLocal(a.default.DEFAULT_KEYS.ACTION_DEFINITIONS)||null)),this.token=this.loadLocal(a.default.DEFAULT_KEYS.TOKEN),this.variantDebugInfo=this.loadLocal(a.default.DEFAULT_KEYS.VARIANT_DEBUG_INFO)}catch(e){console.log("Leanplum: Invalid diffs: ".concat(e))}},e.prototype.saveDiffs=function(){this.saveLocal(a.default.DEFAULT_KEYS.VARIABLES,JSON.stringify(this.diffs||{})),this.saveLocal(a.default.DEFAULT_KEYS.VARIANTS,JSON.stringify(this.variants||[])),this.saveLocal(a.default.DEFAULT_KEYS.ACTION_DEFINITIONS,JSON.stringify(this.actionDefinitions||{})),this.saveLocal(a.default.DEFAULT_KEYS.VARIANT_DEBUG_INFO,JSON.stringify(this.variantDebugInfo||{})),this.saveLocal(a.default.DEFAULT_KEYS.TOKEN,this.token)},e.prototype.getVariable=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this.getVariables();if(n)for(var i=0;i<e.length;i++)n=n[e[i]];return n},e.prototype.getVariables=function(){return void 0!==this.merged?this.merged:this.variables},e.prototype.setVariables=function(e){this.variables=e},e.prototype.addVariablesChangedHandler=function(e){this.variablesChangedHandlers.push(e),this.hasReceivedDiffs&&e()},e.prototype.removeVariablesChangedHandler=function(e){var t=this.variablesChangedHandlers.indexOf(e);t>=0&&this.variablesChangedHandlers.splice(t,1)},e.prototype.triggerVariablesChangedHandlers=function(){for(var e=0;e<this.variablesChangedHandlers.length;e++)this.variablesChangedHandlers[e]()},e.prototype.getVariantDebugInfo=function(){return this.variantDebugInfo},e.prototype.setVariantDebugInfo=function(e){this.variantDebugInfo=e},e.prototype.sendActions=function(){var e;return!!Object.keys(this.actionDefinitions).length&&(this.setVars(((e={})[a.default.PARAMS.ACTION_DEFINITIONS]=this.actionDefinitions,e)),!0)},e.prototype.sendVariables=function(){var e;this.setVars(((e={})[a.default.PARAMS.VARIABLES]=this.variables,e))},e.prototype.setVars=function(e){var t=(new r.default).body(JSON.stringify(e));this.createRequest(a.default.METHODS.SET_VARS,t,{sendNow:!0})},e.prototype.clearUserContent=function(){this.diffs=void 0,this.variables=null,this.variants=[],this.variantDebugInfo={},this.merged=void 0},e.prototype.registerActionDefinition=function(e){this.actionDefinitions[e.name]=function(e){return{kind:e.kind||3,options:null,values:u(e.args),kinds:d(e.args)}}(e)},e.prototype.loadLocal=function(e){return s.default.get(e)},e.prototype.saveLocal=function(e,t){s.default.save(e,t)},e}();function u(e){return e.reduce((function(e,t){return t.value instanceof Array?e[t.name]=u(t.value):"action"===t.type?e[t.name]="":"color"===t.type?e[t.name]=l.default.encodeColor(t.value):e[t.name]=t.value,e}),{})}function d(e,t){return void 0===t&&(t=""),e.reduce((function(e,n){var o,r="".concat(t).concat(n.name);return n.value instanceof Array?e=i(((o={})[r]="group",o),d(n.value,"".concat(r,"."))):e[r]=n.type.toLowerCase(),e}),{})}function p(e,t){if("number"==typeof t||"boolean"==typeof t||"string"==typeof t)return t;if(null==t)return e;var n=function(e){return function(t){if(e instanceof Array)for(var n=0;n<e.length;n++)t(e[n]);else for(var i in e)({}).hasOwnProperty.call(e,i)&&t(i)}},i=n(e),o=n(t),r=!1;if(null===e&&!(t instanceof Array))for(var a in r=null,t)if(t.hasOwnProperty(a)){if(null===r&&(r=!0),"string"!=typeof a){r=!1;break}if(a.length<3||"["!==a.charAt(0)||"]"!==a.charAt(a.length-1)){r=!1;break}}if(e instanceof Array||r){var s=[];return i((function(e){s.push(e)})),o((function(e){for(var n=parseInt(e.substring(1,e.length-1)),i=t[e];n>=s.length;)s.push(null);s[n]=p(s[n],i)})),s}var l={};return i((function(n){null!==t[n]&&void 0!==t[n]||(l[n]=e[n])})),o((function(n){l[n]=p(null===e?null:e[n]||{},t[n])})),l}t.default=c},804:(e,t,n)=>{var i=n(876);e.exports=i.default},205:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.MigrationState=void 0,(n=t.MigrationState||(t.MigrationState={})).UNKNOWN="unknown",n.LEANPLUM="lp",n.DUPLICATE="lp+ct",n.CLEVERTAP="ct"},772:(e,t)=>{"use strict";var n,i;Object.defineProperty(t,"__esModule",{value:!0}),t.MessageKind=t.ActionParameterType=void 0,(i=t.ActionParameterType||(t.ActionParameterType={})).Integer="integer",i.Color="color",i.Float="float",i.Decimal="decimal",i.Number="number",i.Boolean="bool",i.String="string",i.Text="text",i.HTML="html",i.File="file",i.List="list",i.Group="group",i.Action="action",i.Unknown="",(n=t.MessageKind||(t.MessageKind={}))[n.Action=2]="Action",n[n.Template=3]="Template"}},t={};function n(i){var o=t[i];if(void 0!==o)return o.exports;var r=t[i]={id:i,loaded:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}return n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),n(804)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,