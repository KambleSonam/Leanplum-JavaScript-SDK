!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Leanplum=t():e.Leanplum=t()}(self,(()=>(()=>{var e={739:function(e){e.exports=function(){"use strict";function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function i(e,t,i){return t&&n(e.prototype,t),i&&n(e,i),e}function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}function u(e){return u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},u(e)}function l(e,t){return l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},l(e,t)}function c(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function d(e,t,n){return d=c()?Reflect.construct:function(e,t,n){var i=[null];i.push.apply(i,t);var r=new(Function.bind.apply(e,i));return n&&l(r,n.prototype),r},d.apply(null,arguments)}function f(e){var t="function"==typeof Map?new Map:void 0;return f=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,i)}function i(){return d(e,arguments,u(this).constructor)}return i.prototype=Object.create(e.prototype,{constructor:{value:i,enumerable:!1,writable:!0,configurable:!0}}),l(i,e)},f(e)}function p(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function h(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?p(e):t}function v(e){var t=c();return function(){var n,i=u(e);if(t){var r=u(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return h(this,n)}}function g(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}function y(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return g(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?g(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var i=0,r=function(){};return{s:r,n:function(){return i>=e.length?{done:!0}:{done:!1,value:e[i++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return a=e.done,e},e:function(e){s=!0,o=e},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}var m=0;function b(e){return"__private_"+m+++"_"+e}function S(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}var _,w="clevertap-prod.com",k="https:",A=b("accountId"),E=b("region"),P=b("targetDomain"),O=b("dcSdkversion"),C=function(){function e(){var n=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).id,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:w;t(this,e),Object.defineProperty(this,A,{writable:!0,value:void 0}),Object.defineProperty(this,E,{writable:!0,value:""}),Object.defineProperty(this,P,{writable:!0,value:w}),Object.defineProperty(this,O,{writable:!0,value:""}),this.id=n,i&&(this.region=i),r&&(this.targetDomain=r)}return i(e,[{key:"id",get:function(){return S(this,A)[A]},set:function(e){S(this,A)[A]=e}},{key:"region",get:function(){return S(this,E)[E]},set:function(e){S(this,E)[E]=e}},{key:"dcSDKVersion",get:function(){return S(this,O)[O]},set:function(e){S(this,O)[O]=e}},{key:"targetDomain",get:function(){return S(this,P)[P]},set:function(e){S(this,P)[P]=e}},{key:"finalTargetDomain",get:function(){return this.region?"".concat(this.region,".").concat(this.targetDomain):this.targetDomain===w?"".concat("eu1",".").concat(this.targetDomain):this.targetDomain}},{key:"dataPostURL",get:function(){return"".concat(k,"//").concat(this.finalTargetDomain,"/a?t=96")}},{key:"recorderURL",get:function(){return"".concat(k,"//").concat(this.finalTargetDomain,"/r?r=1")}},{key:"emailURL",get:function(){return"".concat(k,"//").concat(this.finalTargetDomain,"/e?r=1")}}]),e}(),I=new RegExp("^\\s+|\\.|:|\\$|'|\"|\\\\|\\s+$","g"),T=new RegExp("^\\s+|'|\"|\\\\|\\s+$","g"),R=new RegExp("'","g"),M="clear",D="Charged ID",N="WZRK_CHARGED_ID",L="WZRK_G",j="WZRK_K",U="WZRK_CAMP",x="WZRK_EV",F="WZRK_META",V="WZRK_PR",q="WZRK_ARP",z="WZRK_L",K="global",H="display",W="optOut",B="useIP",G="WZRK_X",Y="isOUL",J="push",$=31536e4,Z="2",Q="cUsY",X="wzrk_",ee="wzrk_id",te="Notification Viewed",ne="Notification Clicked",ie="WZRK_FPU",re="WZRK_PSD",oe="$incr",ae="$decr",se="$set",ue="$add",le="$remove",ce="$delete",de=["Stayed","UTM Visited","App Launched","Notification Sent",te,ne],fe=function(e){return"string"==typeof e||e instanceof String},pe=function(e){return"[object Object]"===Object.prototype.toString.call(e)},he=function(t){return"object"===e(t)&&t instanceof Date},ve=function(e){for(var t in e)if(e.hasOwnProperty(t))return!1;return!0},ge=function(e){return!isNaN(parseFloat(e))&&isFinite(e)},ye=function(e){return/^-?[\d.]+(?:e-?\d+)?$/.test(e)&&"number"==typeof e},me=function(e){return null!=e&&"undefined"!==e},be=function t(n,i){var r;if("object"!==e(n))return fe(n)?(r=Se(n,T)).length>1024&&(r=r.substring(0,1024),i.reportError(521,r+"... length exceeded 1024 chars. Trimmed.")):r=n,r;for(var o in n)if(n.hasOwnProperty(o)){var a=t(n[o],i),s=void 0;(s=Se(o,I)).length>1024&&(s=s.substring(0,1024),i.reportError(520,s+"... length exceeded 1024 chars. Trimmed.")),delete n[o],n[s]=a}return n},Se=function(e,t){return e.replace(t,"")},_e=function(){var e=new Date;return e.getFullYear()+""+e.getMonth()+e.getDay()},we=function(){return Math.floor((new Date).getTime()/1e3)},ke=function(e){return"$D_"+Math.round(e.getTime()/1e3)},Ae=function(e){if(Ee(e))return"$D_"+e},Ee=function(e){var t=/^(\d{4})(\d{2})(\d{2})$/.exec(e);if(null==t)return!1;var n=t[3],i=t[2]-1,r=t[1],o=new Date(r,i,n);return o.getDate()==n&&o.getMonth()==i&&o.getFullYear()==r},Pe=function(){function e(){t(this,e)}return i(e,null,[{key:"save",value:function(e,t){return!(!e||!t)&&(this._isLocalStorageSupported()?(localStorage.setItem(e,"string"==typeof t?t:JSON.stringify(t)),!0):void 0)}},{key:"read",value:function(e){if(!e)return!1;var t=null;if(this._isLocalStorageSupported()&&(t=localStorage.getItem(e)),null!=t)try{t=JSON.parse(t)}catch(e){}return t}},{key:"remove",value:function(e){return!!e&&(this._isLocalStorageSupported()?(localStorage.removeItem(e),!0):void 0)}},{key:"removeCookie",value:function(e,t){var n=e+"=; expires=Thu, 01 Jan 1970 00:00:01 GMT;";t&&(n=n+" domain="+t+"; path=/"),document.cookie=n}},{key:"createCookie",value:function(e,t,n,i){var r="",o="";if(n){var a=new Date;a.setTime(a.getTime()+1e3*n),r="; expires="+a.toGMTString()}i&&(o="; domain="+i),t=encodeURIComponent(t),document.cookie=e+"="+t+r+o+"; path=/"}},{key:"readCookie",value:function(e){for(var t=e+"=",n=document.cookie.split(";"),i=0;i<n.length;i++){for(var r=n[i];" "===r.charAt(0);)r=r.substring(1,r.length);if(0==r.indexOf(t))return decodeURIComponent(r.substring(t.length,r.length))}return null}},{key:"_isLocalStorageSupported",value:function(){return"localStorage"in window&&null!==window.localStorage&&"function"==typeof window.localStorage.setItem}},{key:"saveToLSorCookie",value:function(e,t){if(null!=t)try{this._isLocalStorageSupported()?this.save(e,encodeURIComponent(JSON.stringify(t))):e===L?this.createCookie(e,encodeURIComponent(t),0,window.location.hostname):this.createCookie(e,encodeURIComponent(JSON.stringify(t)),0,window.location.hostname),Oe.globalCache[e]=t}catch(e){}}},{key:"readFromLSorCookie",value:function(e){var t;if(Oe.globalCache.hasOwnProperty(e))return Oe.globalCache[e];if(null!=(t=this._isLocalStorageSupported()?this.read(e):this.readCookie(e))&&("function"!=typeof t.trim||""!==t.trim())){var n;try{n=JSON.parse(decodeURIComponent(t))}catch(e){n=decodeURIComponent(t)}return Oe.globalCache[e]=n,n}}},{key:"createBroadCookie",value:function(e,t,n,i){if(i){var r=Oe.broadDomain;if(null==r)for(var o=i.split("."),a="",s=o.length-1;s>=0;s--){if(a=0===s?o[s]+a:"."+o[s]+a,this.readCookie(e)){var u="test_"+e+s;if(this.createCookie(u,t,10,a),!this.readCookie(u))continue;this.removeCookie(u,a)}if(this.createCookie(e,t,n,a),this.readCookie(e)==t){r=a,Oe.broadDomain=r;break}}else this.createCookie(e,t,n,r)}else this.createCookie(e,t,n,i)}},{key:"getMetaProp",value:function(e){var t=this.readFromLSorCookie(F);if(null!=t)return t[e]}},{key:"setMetaProp",value:function(e,t){if(this._isLocalStorageSupported()){var n=this.readFromLSorCookie(F);null==n&&(n={}),void 0===t?delete n[e]:n[e]=t,this.saveToLSorCookie(F,n)}}},{key:"getAndClearMetaProp",value:function(e){var t=this.getMetaProp(e);return this.setMetaProp(e,void 0),t}},{key:"setInstantDeleteFlagInK",value:function(){var e=this.readFromLSorCookie(j);null==e&&(e={}),e.flag=!0,this.saveToLSorCookie(j,e)}},{key:"backupEvent",value:function(e,t,n){var i=this.readFromLSorCookie(z);void 0===i&&(i={}),i[t]={q:e},this.saveToLSorCookie(z,i),n.debug("stored in ".concat(z," reqNo : ").concat(t," -> ").concat(e))}},{key:"removeBackup",value:function(e,t){var n=this.readFromLSorCookie(z);null!=n&&void 0!==n[e]&&(t.debug("del event: ".concat(e," data-> ").concat(n[e].q)),delete n[e],this.saveToLSorCookie(z,n))}}]),e}(),Oe={globalCache:{gcookie:null,REQ_N:0,RESP_N:0},LRU_CACHE:null,globalProfileMap:void 0,globalEventsMap:void 0,blockRequest:!1,isOptInRequest:!1,broadDomain:null,webPushEnabled:null,campaignDivMap:{},currentSessionId:null,wiz_counter:0,notifApi:{notifEnabledFromApi:!1},unsubGroups:[],updatedCategoryLong:null,isPrivacyArrPushed:!1,privacyArray:[]},Ce=b("keyOrder"),Ie=b("deleteFromObject"),Te=function(){function e(n){t(this,e),Object.defineProperty(this,Ie,{value:Re}),Object.defineProperty(this,Ce,{writable:!0,value:void 0}),this.max=n;var i=Pe.readFromLSorCookie(G);if(i){var r={};for(var o in S(this,Ce)[Ce]=[],i=i.cache)i.hasOwnProperty(o)&&(r[i[o][0]]=i[o][1],S(this,Ce)[Ce].push(i[o][0]));this.cache=r}else this.cache={},S(this,Ce)[Ce]=[]}return i(e,[{key:"get",value:function(e){var t=this.cache[e];return t&&(this.cache=S(this,Ie)[Ie](e,this.cache),this.cache[e]=t,S(this,Ce)[Ce].push(e)),this.saveCacheToLS(this.cache),t}},{key:"set",value:function(e,t){var n=this.cache[e],i=S(this,Ce)[Ce];null!=n?this.cache=S(this,Ie)[Ie](e,this.cache):i.length===this.max&&(this.cache=S(this,Ie)[Ie](i[0],this.cache)),this.cache[e]=t,S(this,Ce)[Ce][S(this,Ce)[Ce]-1]!==e&&S(this,Ce)[Ce].push(e),this.saveCacheToLS(this.cache)}},{key:"saveCacheToLS",value:function(e){var t=[],n=S(this,Ce)[Ce];for(var i in n)if(n.hasOwnProperty(i)){var r=[];r.push(n[i]),r.push(e[n[i]]),t.push(r)}Pe.saveToLSorCookie(G,{cache:t})}},{key:"getKey",value:function(e){if(null===e)return null;var t=S(this,Ce)[Ce];for(var n in t)if(t.hasOwnProperty(n)&&this.cache[t[n]]===e)return t[n];return null}},{key:"getSecondLastKey",value:function(){var e=S(this,Ce)[Ce];return null!=e&&e.length>1?e[e.length-2]:-1}},{key:"getLastKey",value:function(){var e=S(this,Ce)[Ce].length;if(e)return S(this,Ce)[Ce][e-1]}}]),e}(),Re=function(e,t){var n,i=JSON.parse(JSON.stringify(S(this,Ce)[Ce])),r={};for(var o in i)i.hasOwnProperty(o)&&(i[o]!==e?r[i[o]]=t[i[o]]:n=o);return i.splice(n,1),S(this,Ce)[Ce]=JSON.parse(JSON.stringify(i)),r},Me=b("logger"),De=b("request"),Ne=b("device"),Le=b("session"),je=function(){function e(n){var i=n.logger,r=n.request,o=n.device,a=n.session;t(this,e),Object.defineProperty(this,Me,{writable:!0,value:void 0}),Object.defineProperty(this,De,{writable:!0,value:void 0}),Object.defineProperty(this,Ne,{writable:!0,value:void 0}),Object.defineProperty(this,Le,{writable:!0,value:void 0}),S(this,Me)[Me]=i,S(this,De)[De]=r,S(this,Ne)[Ne]=o,S(this,Le)[Le]=a}return i(e,[{key:"s",value:function(e,t,n,i,r){if(void 0===i&&(i=0),Pe.removeBackup(i,S(this,Me)[Me]),!(i>Oe.globalCache.REQ_N)&&(!window.isOULInProgress||n)){if(n&&(window.isOULInProgress=!1),(!me(S(this,Ne)[Ne].gcookie)||n||"boolean"==typeof r)&&(S(this,Me)[Me].debug("Cookie was ".concat(S(this,Ne)[Ne].gcookie," set to ").concat(e)),S(this,Ne)[Ne].gcookie=e,me(S(this,Ne)[Ne].gcookie)||Pe.getAndClearMetaProp(B),e&&Pe._isLocalStorageSupported())){null==Oe.LRU_CACHE&&(Oe.LRU_CACHE=new Te(100));var o=Pe.readFromLSorCookie(j);null!=o&&o.id&&n&&(Oe.LRU_CACHE.cache[o.id]||(Pe.saveToLSorCookie(ie,!0),Oe.LRU_CACHE.set(o.id,e))),Pe.saveToLSorCookie(L,e);var a=Oe.LRU_CACHE.getSecondLastKey();if(Pe.readFromLSorCookie(ie)&&-1!==a){var s=Oe.LRU_CACHE.cache[a];S(this,De)[De].unregisterTokenForGuid(s)}}Pe.createBroadCookie(L,e,$,window.location.hostname),Pe.saveToLSorCookie(L,e),Pe._isLocalStorageSupported()&&S(this,Le)[Le].manageSession(t);var u=S(this,Le)[Le].getSessionCookieObject();(void 0===u.s||u.s<=t)&&(u.s=t,u.t=we(),S(this,Le)[Le].setSessionCookieObject(u)),me(S(this,Ne)[Ne].gcookie)&&(Oe.blockRequest=!1),Oe.blockRequest||S(this,De)[De].processingBackup||S(this,De)[De].processBackupEvents(),Oe.globalCache.RESP_N=i}}}]),e}(),Ue=b("logger"),xe=function(){function e(n){var i=n.logger;t(this,e),Object.defineProperty(this,Ue,{writable:!0,value:void 0}),this.gcookie=void 0,S(this,Ue)[Ue]=i,this.gcookie=this.getGuid()}return i(e,[{key:"getGuid",value:function(){var e=null;if(me(this.gcookie))return this.gcookie;if(Pe._isLocalStorageSupported()){var t=Pe.read(L);if(me(t)){try{e=JSON.parse(decodeURIComponent(t))}catch(n){S(this,Ue)[Ue].debug("Cannot parse Gcookie from localstorage - must be encoded "+t),32===t.length?(e=t,Pe.saveToLSorCookie(L,t)):S(this,Ue)[Ue].error("Illegal guid "+t)}me(e)&&Pe.createBroadCookie(L,e,$,window.location.hostname)}}return me(e)||(e=Pe.readCookie(L),!me(e)||0!==e.indexOf("%")&&0!==e.indexOf("'")&&0!==e.indexOf('"')||(e=null),me(e)&&Pe.saveToLSorCookie(L,e)),e}}]),e}(),Fe="This property has been ignored.",Ve="CleverTap error:",qe="".concat(Ve," Incorrect embed script."),ze="".concat(Ve," Event structure not valid. ").concat(Fe),Ke="".concat(Ve," Gender value should be either M or F. ").concat(Fe),He="".concat(Ve," Employed value should be either Y or N. ").concat(Fe),We="".concat(Ve," Married value should be either Y or N. ").concat(Fe),Be="".concat(Ve," Education value should be either School, College or Graduate. ").concat(Fe),Ge="".concat(Ve," Age value should be a number. ").concat(Fe),Ye="".concat(Ve," DOB value should be a Date Object"),Je="".concat(Ve," setEnum(value). value should be a string or a number"),$e="".concat(Ve," Phone number should be formatted as +[country code][number]"),Ze=function(e){if(pe(e)){for(var t in e)if(e.hasOwnProperty(t)){if(pe(e[t])||Array.isArray(e[t]))return!1;he(e[t])&&(e[t]=ke(e[t]))}return!0}return!1},Qe=function(e,t){if(pe(e)){for(var n in e)if(e.hasOwnProperty(n))if("Items"===n){if(!Array.isArray(e[n]))return!1;for(var i in e[n].length>16&&t.reportError(522,"Charged Items exceed 16 limit. Actual count: "+e[n].length+". Additional items will be dropped."),e[n])if(e[n].hasOwnProperty(i)&&(!pe(e[n][i])||!Ze(e[n][i])))return!1}else{if(pe(e[n])||Array.isArray(e[n]))return!1;he(e[n])&&(e[n]=ke(e[n]))}if(fe(e[D])||ye(e[D])){var r=e[D]+"";if(void 0===_&&(_=Pe.readFromLSorCookie(N)),void 0!==_&&_.trim()===r.trim())return t.error("Duplicate charged Id - Dropped"+e),!1;_=r,Pe.saveToLSorCookie(N,r)}return!0}return!1},Xe=b("logger"),et=b("oldValues"),tt=b("request"),nt=b("isPersonalisationActive"),it=b("processEventArray"),rt=function(e){s(r,e);var n=v(r);function r(e,i){var o,a=e.logger,s=e.request,u=e.isPersonalisationActive;return t(this,r),o=n.call(this),Object.defineProperty(p(o),it,{value:ot}),Object.defineProperty(p(o),Xe,{writable:!0,value:void 0}),Object.defineProperty(p(o),et,{writable:!0,value:void 0}),Object.defineProperty(p(o),tt,{writable:!0,value:void 0}),Object.defineProperty(p(o),nt,{writable:!0,value:void 0}),S(p(o),Xe)[Xe]=a,S(p(o),et)[et]=i,S(p(o),tt)[tt]=s,S(p(o),nt)[nt]=u,o}return i(r,[{key:"push",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return S(this,it)[it](t),0}},{key:"_processOldValues",value:function(){S(this,et)[et]&&S(this,it)[it](S(this,et)[et]),S(this,et)[et]=null}},{key:"getDetails",value:function(e){if(S(this,nt)[nt]()&&(void 0===Oe.globalEventsMap&&(Oe.globalEventsMap=Pe.readFromLSorCookie(x)),void 0!==Oe.globalEventsMap)){var t=Oe.globalEventsMap[e],n={};return void 0!==t?(n.firstTime=new Date(1e3*t[1]),n.lastTime=new Date(1e3*t[2]),n.count=t[0],n):void 0}}}]),r}(f(Array)),ot=function(e){if(Array.isArray(e))for(;e.length>0;){var t=e.shift();if(fe(t))if(t.length>1024&&(t=t.substring(0,1024),S(this,Xe)[Xe].reportError(510,t+"... length exceeded 1024 chars. Trimmed.")),de.includes(t))S(this,Xe)[Xe].reportError(513,t+" is a restricted system event. It cannot be used as an event name.");else{var n={type:"event"};if(n.evtName=Se(t,I),0!==e.length){var i=e.shift();if(pe(i)){if("Charged"===t){if(!Qe(i,S(this,Xe)[Xe])){S(this,Xe)[Xe].reportError(511,"Charged event structure invalid. Not sent.");continue}}else if(!Ze(i)){S(this,Xe)[Xe].reportError(512,t+" event structure invalid. Not sent.");continue}n.evtData=i}else e.unshift(i)}S(this,tt)[tt].processEvent(n)}else S(this,Xe)[Xe].error(ze)}},at=function(e){var t={},n=e.indexOf("?");if(n>1){var i,r=e.substring(n+1),o=/\+/g,a=/([^&=]+)=?([^&]*)/g,s=function(e){var t=e.replace(o," ");try{t=decodeURIComponent(t)}catch(e){}return t};for(i=a.exec(r);i;)t[s(i[1])]=s(i[2]),i=a.exec(r)}return t},st=function(e,t,n){return e+"&"+t+"="+encodeURIComponent(n)},ut=function(){return window.location.hostname},lt=function(e,t){return t&&"function"==typeof t.debug&&t.debug("dobj:"+e),dt(e)},ct=function(){var e="",t=0;for(t=0;t<=25;t++)e+=String.fromCharCode(t+65);for(t=0;t<=25;t++)e+=String.fromCharCode(t+97);for(t=0;t<10;t++)e+=t;return e+"+/="}(),dt=function(e){if(null==e)return"";var t,n,i,r,o,a,s,u="",l=0;for(e=function(e){if(null==e)return"";var t,n,i,r={},o={},a="",s="",u="",l=2,c=3,d=2,f="",p=0,h=0,v=String.fromCharCode;for(i=0;i<e.length;i+=1)if(a=e.charAt(i),Object.prototype.hasOwnProperty.call(r,a)||(r[a]=c++,o[a]=!0),s=u+a,Object.prototype.hasOwnProperty.call(r,s))u=s;else{if(Object.prototype.hasOwnProperty.call(o,u)){if(u.charCodeAt(0)<256){for(t=0;t<d;t++)p<<=1,15==h?(h=0,f+=v(p),p=0):h++;for(n=u.charCodeAt(0),t=0;t<8;t++)p=p<<1|1&n,15==h?(h=0,f+=v(p),p=0):h++,n>>=1}else{for(n=1,t=0;t<d;t++)p=p<<1|n,15==h?(h=0,f+=v(p),p=0):h++,n=0;for(n=u.charCodeAt(0),t=0;t<16;t++)p=p<<1|1&n,15==h?(h=0,f+=v(p),p=0):h++,n>>=1}0==--l&&(l=Math.pow(2,d),d++),delete o[u]}else for(n=r[u],t=0;t<d;t++)p=p<<1|1&n,15==h?(h=0,f+=v(p),p=0):h++,n>>=1;0==--l&&(l=Math.pow(2,d),d++),r[s]=c++,u=String(a)}if(""!==u){if(Object.prototype.hasOwnProperty.call(o,u)){if(u.charCodeAt(0)<256){for(t=0;t<d;t++)p<<=1,15==h?(h=0,f+=v(p),p=0):h++;for(n=u.charCodeAt(0),t=0;t<8;t++)p=p<<1|1&n,15==h?(h=0,f+=v(p),p=0):h++,n>>=1}else{for(n=1,t=0;t<d;t++)p=p<<1|n,15==h?(h=0,f+=v(p),p=0):h++,n=0;for(n=u.charCodeAt(0),t=0;t<16;t++)p=p<<1|1&n,15==h?(h=0,f+=v(p),p=0):h++,n>>=1}0==--l&&(l=Math.pow(2,d),d++),delete o[u]}else for(n=r[u],t=0;t<d;t++)p=p<<1|1&n,15==h?(h=0,f+=v(p),p=0):h++,n>>=1;0==--l&&(l=Math.pow(2,d),d++)}for(n=2,t=0;t<d;t++)p=p<<1|1&n,15==h?(h=0,f+=v(p),p=0):h++,n>>=1;for(;;){if(p<<=1,15==h){f+=v(p);break}h++}return f}(e);l<2*e.length;)l%2==0?(t=e.charCodeAt(l/2)>>8,n=255&e.charCodeAt(l/2),i=l/2+1<e.length?e.charCodeAt(l/2+1)>>8:NaN):(t=255&e.charCodeAt((l-1)/2),(l+1)/2<e.length?(n=e.charCodeAt((l+1)/2)>>8,i=255&e.charCodeAt((l+1)/2)):n=i=NaN),l+=3,r=t>>2,o=(3&t)<<4|n>>4,a=(15&n)<<2|i>>6,s=63&i,isNaN(n)?a=s=64:isNaN(i)&&(s=64),u=u+ct.charAt(r)+ct.charAt(o)+ct.charAt(a)+ct.charAt(s);return u},ft=b("fireRequest"),pt=b("dropRequestDueToOptOut"),ht=b("addUseIPToRequest"),vt=b("addARPToRequest"),gt=function(){function e(){t(this,e)}return i(e,null,[{key:"fireRequest",value:function(e,t,n){S(this,ft)[ft](e,1,t,n)}}]),e}();gt.logger=void 0,gt.device=void 0,Object.defineProperty(gt,ft,{value:function(e,t,n,i){var r,o,a=this;if(S(this,pt)[pt]())this.logger.debug("req dropped due to optout cookie: "+this.device.gcookie);else if(me(this.device.gcookie)||(Oe.blockRequest=!0),!me(this.device.gcookie)&&Oe.globalCache.RESP_N<Oe.globalCache.REQ_N-1&&t<200)setTimeout((function(){a.logger.debug("retrying fire request for url: ".concat(e,", tries: ").concat(t)),S(a,ft)[ft](e,t+1,n,i)}),50);else{if(i?window.isOULInProgress=!0:(me(this.device.gcookie)&&(e=st(e,"gc",this.device.gcookie)),e=S(this,vt)[vt](e,n)),e=st(e,"tries",t),e=S(this,ht)[ht](e),e=st(e,"r",(new Date).getTime()),(null===(r=window.clevertap)||void 0===r?void 0:r.hasOwnProperty("plugin"))||(null===(o=window.wizrocket)||void 0===o?void 0:o.hasOwnProperty("plugin"))){var s=window.clevertap.plugin||window.wizrocket.plugin;e=st(e,"ct_pl",s)}-1!==e.indexOf("chrome-extension:")&&(e=e.replace("chrome-extension:","https:"));for(var u=document.getElementsByClassName("ct-jp-cb");u[0];)u[0].parentNode.removeChild(u[0]);var l=document.createElement("script");l.setAttribute("type","text/javascript"),l.setAttribute("src",e),l.setAttribute("class","ct-jp-cb"),l.setAttribute("rel","nofollow"),l.async=!0,document.getElementsByTagName("head")[0].appendChild(l),this.logger.debug("req snt -> url: "+e)}}}),Object.defineProperty(gt,pt,{value:function(){return!Oe.isOptInRequest&&me(this.device.gcookie)&&fe(this.device.gcookie)?":OO"===this.device.gcookie.slice(-3):(Oe.isOptInRequest=!1,!1)}}),Object.defineProperty(gt,ht,{value:function(e){var t=Pe.getMetaProp(B);return"boolean"!=typeof t&&(t=!1),st(e,B,t?"true":"false")}}),Object.defineProperty(gt,vt,{value:function(e,t){if(!0===t){return st(e,"arp",lt(JSON.stringify({skipResARP:!0}),this.logger))}return Pe._isLocalStorageSupported()&&void 0!==localStorage.getItem(q)&&null!==localStorage.getItem(q)?st(e,"arp",lt(JSON.stringify(Pe.readFromLSorCookie(q)),this.logger)):e}});var yt=function(){var e={};return Pe._isLocalStorageSupported()&&(e=null!=(e=Pe.read(U))?JSON.parse(decodeURIComponent(e).replace(R,'"')):{}),e},mt=function(e){if(Pe._isLocalStorageSupported()){var t=JSON.stringify(e);Pe.save(U,encodeURIComponent(t))}},bt=function(){var e={};if(Pe._isLocalStorageSupported()){var t=[],n=(e=yt()).global,i=e[_e()];if(void 0!==n){var r=Object.keys(n);for(var o in r)if(r.hasOwnProperty(o)){var a=0,s=0,u=r[o];if("tc"===u)continue;void 0!==i&&void 0!==i[u]&&(a=i[u]),void 0!==n&&void 0!==n[u]&&(s=n[u]);var l=[u,a,s];t.push(l)}}var c=0;return void 0!==i&&void 0!==i.tc&&(c=i.tc),{wmp:c,tlc:t}}},St=function(e,t){var n=t.logger,i=!1;if(pe(e))for(var r in e)if(e.hasOwnProperty(r)){i=!0;var o=e[r];if(null==o){delete e[r];continue}"Gender"!==r||o.match(/^M$|^F$/)||(i=!1,n.error(Ke)),"Employed"!==r||o.match(/^Y$|^N$/)||(i=!1,n.error(He)),"Married"!==r||o.match(/^Y$|^N$/)||(i=!1,n.error(We)),"Education"!==r||o.match(/^School$|^College$|^Graduate$/)||(i=!1,n.error(Be)),"Age"===r&&null!=o&&(ge(o)?e.Age=+o:(i=!1,n.error(Ge))),"DOB"===r?(/^\$D_/.test(o)&&11===(o+"").length||he(o)||(i=!1,n.error(Ye)),he(o)&&(e[r]=ke(o))):he(o)&&(e[r]=ke(o)),"Phone"!==r||ve(o)||(o.length>8&&"+"===o.charAt(0)?(o=o.substring(1,o.length),ge(o)?e.Phone=+o:(i=!1,n.error($e+". Removed."))):(i=!1,n.error($e+". Removed."))),i||delete e[r]}return i},_t=function(e){var t={};t.Name=e.name,null!=e.id&&(t.FBID=e.id+""),"male"===e.gender?t.Gender="M":"female"===e.gender?t.Gender="F":t.Gender="O";null!=e.relationship_status&&(t.Married="N","Married"===e.relationship_status&&(t.Married="Y"));var n=function(e){if(null!=e){for(var t="",n="",i=0;i<e.length;i++){var r=e[i];if(null!=r.type){var o=r.type;if("Graduate School"===o)return"Graduate";"College"===o?t="1":"High School"===o&&(n="1")}}if("1"===t)return"College";if("1"===n)return"School"}}(e.education);null!=n&&(t.Education=n);var i=null!=e.work?e.work.length:0;if(t.Employed=i>0?"Y":"N",null!=e.email&&(t.Email=e.email),null!=e.birthday){var r=e.birthday.split("/");t.DOB=Ae(r[2]+r[0]+r[1])}return t},wt=function(e,t){var n=t.logger,i={};if(null!=e.displayName&&(i.Name=e.displayName),null!=e.id&&(i.GPID=e.id+""),null!=e.gender&&("male"===e.gender?i.Gender="M":"female"===e.gender?i.Gender="F":"other"===e.gender&&(i.Gender="O")),null!=e.image&&!1===e.image.isDefault&&(i.Photo=e.image.url.split("?sz")[0]),null!=e.emails)for(var r=0;r<e.emails.length;r++){var o=e.emails[r];"account"===o.type&&(i.Email=o.value)}if(null!=e.organizations){i.Employed="N";for(var a=0;a<e.organizations.length;a++)"work"===e.organizations[a].type&&(i.Employed="Y")}if(null!=e.birthday){var s=e.birthday.split("-");i.DOB=Ae(s[0]+s[1]+s[2])}return null!=e.relationshipStatus&&(i.Married="N","married"===e.relationshipStatus&&(i.Married="Y")),n.debug("gplus usr profile "+JSON.stringify(i)),i},kt=function(e,t){if(Pe._isLocalStorageSupported()){if(null==Oe.globalProfileMap&&(Oe.globalProfileMap=Pe.readFromLSorCookie(V),null==Oe.globalProfileMap&&(Oe.globalProfileMap={})),null!=e._custom){var n=e._custom;for(var i in n)n.hasOwnProperty(i)&&(e[i]=n[i]);delete e._custom}for(var r in e)if(e.hasOwnProperty(r)){if(Oe.globalProfileMap.hasOwnProperty(r)&&!t)continue;Oe.globalProfileMap[r]=e[r]}null!=Oe.globalProfileMap._custom&&delete Oe.globalProfileMap._custom,Pe.saveToLSorCookie(V,Oe.globalProfileMap)}},At=function(e,t,n){if(null!=e&&"-1"!==e&&Pe._isLocalStorageSupported()){var i=yt(),r=i[n];null==r&&(r={},i[n]=r),r[e]="dnd",mt(i)}if(null!=Oe.campaignDivMap){var o=Oe.campaignDivMap[e];null!=o&&(document.getElementById(o).style.display="none","intentPreview"===o&&null!=document.getElementById("intentOpacityDiv")&&(document.getElementById("intentOpacityDiv").style.display="none"))}},Et=function(e,t){if(fe(e)||ye(e))return"$E_"+e;t.error(Je)},Pt=function(e,t,n,i,r){var o=at(location.href),a=o.e,s=o.p;if(void 0!==a){var u={};u.id=i.id,u.unsubGroups=Oe.unsubGroups,Oe.updatedCategoryLong&&(u[Q]=Oe.updatedCategoryLong);var l=i.emailURL;n&&(l=st(l,"fetchGroups",n)),t&&(l=st(l,"encoded",t)),l=st(l,"e",a),l=st(l,"d",lt(JSON.stringify(u),r)),s&&(l=st(l,"p",s)),"-1"!==e&&(l=st(l,"sub",e)),gt.fireRequest(l)}},Ot=b("logger"),Ct=b("request"),It=b("account"),Tt=b("oldValues"),Rt=b("isPersonalisationActive"),Mt=b("processProfileArray"),Dt=function(e){s(o,e);var n=v(o);function o(e,i){var r,a=e.logger,s=e.request,u=e.account,l=e.isPersonalisationActive;return t(this,o),r=n.call(this),Object.defineProperty(p(r),Mt,{value:Nt}),Object.defineProperty(p(r),Ot,{writable:!0,value:void 0}),Object.defineProperty(p(r),Ct,{writable:!0,value:void 0}),Object.defineProperty(p(r),It,{writable:!0,value:void 0}),Object.defineProperty(p(r),Tt,{writable:!0,value:void 0}),Object.defineProperty(p(r),Rt,{writable:!0,value:void 0}),S(p(r),Ot)[Ot]=a,S(p(r),Ct)[Ct]=s,S(p(r),It)[It]=u,S(p(r),Tt)[Tt]=i,S(p(r),Rt)[Rt]=l,r}return i(o,[{key:"push",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return S(this,Mt)[Mt](t),0}},{key:"_processOldValues",value:function(){S(this,Tt)[Tt]&&S(this,Mt)[Mt](S(this,Tt)[Tt]),S(this,Tt)[Tt]=null}},{key:"getAttribute",value:function(e){if(S(this,Rt)[Rt]())return null==Oe.globalProfileMap&&(Oe.globalProfileMap=Pe.readFromLSorCookie(V)),null!=Oe.globalProfileMap?Oe.globalProfileMap[e]:void 0}},{key:"_handleIncrementDecrementValue",value:function(e,t,n){var i;if(null==Oe.globalProfileMap&&(Oe.globalProfileMap=Pe.readFromLSorCookie(V)),null!=Oe.globalProfileMap||(null===(i=Oe.globalProfileMap)||void 0===i?void 0:i.hasOwnProperty(e)))if(!t||"number"!=typeof t||t<=0)console.error("Value should be a number greater than 0");else{Oe.globalProfileMap[e]=n===oe?Oe.globalProfileMap[e]+t:Oe.globalProfileMap[e]-t,Pe.saveToLSorCookie(V,Oe.globalProfileMap);var o={},a={};o.type="profile",a[e]=r({},n,t),null==a.tz&&(a.tz=(new Date).toString().match(/([A-Z]+[\+-][0-9]+)/)[1]),o.profile=a,o=S(this,Ct)[Ct].addSystemDataToProfileObject(o,void 0),S(this,Ct)[Ct].addFlags(o);var s=lt(JSON.stringify(o),S(this,Ot)[Ot]),u=S(this,It)[It].dataPostURL;u=st(u,"type",J),u=st(u,"d",s),S(this,Ct)[Ct].saveAndFireRequest(u,Oe.blockRequest)}else console.error("Kindly create profile with required proprty to increment/decrement.")}},{key:"_handleMultiValueSet",value:function(e,t,n){for(var i=[],r=0;r<t.length;r++)"number"!=typeof t[r]||i.includes(t[r])?"string"!=typeof t[r]||i.includes(t[r].toLowerCase())?console.error("array supports only string or number type values"):i.push(t[r].toLowerCase()):i.push(t[r]);null==Oe.globalProfileMap&&(Oe.globalProfileMap=Pe.readFromLSorCookie(V)),Oe.globalProfileMap[e]=i,Pe.saveToLSorCookie(V,Oe.globalProfileMap),this.sendMultiValueData(e,t,n)}},{key:"_handleMultiValueAdd",value:function(e,t,n){var i=[];if(null==Oe.globalProfileMap&&(Oe.globalProfileMap=Pe.readFromLSorCookie(V)),"string"==typeof t||"number"==typeof t)Oe.globalProfileMap.hasOwnProperty(e)?(i=Oe.globalProfileMap[e],"number"==typeof t?i.push(t):i.push(t.toLowerCase())):Oe.globalProfileMap[e]=t;else{Oe.globalProfileMap.hasOwnProperty(e)&&(i=Oe.globalProfileMap[e]);for(var r=0;r<t.length;r++)"number"!=typeof t[r]||i.includes(t[r])?"string"!=typeof t[r]||i.includes(t[r].toLowerCase())?"number"==typeof t[r]&&i.includes(t[r])||"string"==typeof t[r]&&i.includes(t[r].toLowerCase())?console.error("Values already included"):console.error("array supports only string or number type values"):i.push(t[r].toLowerCase()):i.push(t[r]);Oe.globalProfileMap[e]=i}Pe.saveToLSorCookie(V,Oe.globalProfileMap),this.sendMultiValueData(e,t,n)}},{key:"_handleMultiValueRemove",value:function(e,t,n){if(null==Oe.globalProfileMap&&(Oe.globalProfileMap=Pe.readFromLSorCookie(V)),Oe.globalProfileMap.hasOwnProperty(e))if("string"==typeof t||"number"==typeof t){var i=Oe.globalProfileMap[e].indexOf(t);-1!==i&&Oe.globalProfileMap[e].splice(i,1)}else for(var r=0;r<t.length;r++){var o=Oe.globalProfileMap[e].indexOf(t[r]);-1!==o&&Oe.globalProfileMap[e].splice(o,1)}else console.error("The property ".concat(e," does not exist."));Pe.saveToLSorCookie(V,Oe.globalProfileMap),this.sendMultiValueData(e,t,n)}},{key:"_handleMultiValueDelete",value:function(e,t){null==Oe.globalProfileMap&&(Oe.globalProfileMap=Pe.readFromLSorCookie(V)),Oe.globalProfileMap.hasOwnProperty(e)?delete Oe.globalProfileMap[e]:console.error("The property ".concat(e," does not exist.")),Pe.saveToLSorCookie(V,Oe.globalProfileMap),this.sendMultiValueData(e,null,t)}},{key:"sendMultiValueData",value:function(e,t,n){var i={},o={};i.type="profile",o[e]=r({},n,n===ce||t),null==o.tz&&(o.tz=(new Date).toString().match(/([A-Z]+[\+-][0-9]+)/)[1]),i.profile=o,i=S(this,Ct)[Ct].addSystemDataToProfileObject(i,void 0),S(this,Ct)[Ct].addFlags(i);var a=lt(JSON.stringify(i),S(this,Ot)[Ot]),s=S(this,It)[It].dataPostURL;s=st(s,"type",J),s=st(s,"d",a),S(this,Ct)[Ct].saveAndFireRequest(s,Oe.blockRequest)}}]),o}(f(Array)),Nt=function(e){if(Array.isArray(e)&&e.length>0)for(var t in e)if(e.hasOwnProperty(t)){var n=e[t],i={},r=void 0;if(null!=n.Site){if(r=n.Site,ve(r)||!St(r,{logger:S(this,Ot)[Ot]}))return}else if(null!=n.Facebook){var o=n.Facebook;ve(o)||o.error||(r=_t(o))}else if(null!=n["Google Plus"]){var a=n["Google Plus"];ve(a)||a.error||(r=wt(a,{logger:S(this,Ot)[Ot]}))}if(null!=r&&!ve(r)){i.type="profile",null==r.tz&&(r.tz=(new Date).toString().match(/([A-Z]+[\+-][0-9]+)/)[1]),i.profile=r,kt(r,!0),i=S(this,Ct)[Ct].addSystemDataToObject(i,void 0),S(this,Ct)[Ct].addFlags(i);var s=lt(JSON.stringify(i),S(this,Ot)[Ot]),u=S(this,It)[It].dataPostURL;u=st(u,"type",J),u=st(u,"d",s),S(this,Ct)[Ct].saveAndFireRequest(u,Oe.blockRequest)}}},Lt=b("request"),jt=b("logger"),Ut=b("account"),xt=b("session"),Ft=b("oldValues"),Vt=b("device"),qt=b("processOUL"),zt=b("handleCookieFromCache"),Kt=b("deleteUser"),Ht=b("processLoginArray"),Wt=function(e){s(r,e);var n=v(r);function r(e,i){var o,a=e.request,s=e.account,u=e.session,l=e.logger,c=e.device;return t(this,r),o=n.call(this),Object.defineProperty(p(o),Ht,{value:Jt}),Object.defineProperty(p(o),Kt,{value:Yt}),Object.defineProperty(p(o),zt,{value:Gt}),Object.defineProperty(p(o),qt,{value:Bt}),Object.defineProperty(p(o),Lt,{writable:!0,value:void 0}),Object.defineProperty(p(o),jt,{writable:!0,value:void 0}),Object.defineProperty(p(o),Ut,{writable:!0,value:void 0}),Object.defineProperty(p(o),xt,{writable:!0,value:void 0}),Object.defineProperty(p(o),Ft,{writable:!0,value:void 0}),Object.defineProperty(p(o),Vt,{writable:!0,value:void 0}),S(p(o),Lt)[Lt]=a,S(p(o),Ut)[Ut]=s,S(p(o),xt)[xt]=u,S(p(o),jt)[jt]=l,S(p(o),Ft)[Ft]=i,S(p(o),Vt)[Vt]=c,o}return i(r,[{key:"clear",value:function(){S(this,jt)[jt].debug("clear called. Reset flag has been set."),S(this,Kt)[Kt](),Pe.setMetaProp(M,!0)}},{key:"push",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return S(this,Ht)[Ht](t),0}},{key:"_processOldValues",value:function(){S(this,Ft)[Ft]&&S(this,Ht)[Ht](S(this,Ft)[Ft]),S(this,Ft)[Ft]=null}}]),r}(f(Array)),Bt=function(e){var t=this,n=!0;Pe.saveToLSorCookie(ie,n);var i=function(e){var i,r=Pe.readFromLSorCookie(j),o=Pe.readFromLSorCookie(L);if(null==r)r={},i=e;else{var a=!1,s=!1;if(null==(i=r.id)&&(i=e[0],a=!0),null==Oe.LRU_CACHE&&Pe._isLocalStorageSupported()&&(Oe.LRU_CACHE=new Te(100)),a)null!=o&&(Oe.LRU_CACHE.set(i,o),Oe.blockRequest=!1);else for(var u in e)if(e.hasOwnProperty(u)){var l=e[u];if(Oe.LRU_CACHE.cache[l]){i=l,s=!0;break}}if(s){i!==Oe.LRU_CACHE.getLastKey()?S(t,zt)[zt]():(n=!1,Pe.saveToLSorCookie(ie,n));var c=Oe.LRU_CACHE.get(i);Oe.LRU_CACHE.set(i,c),Pe.saveToLSorCookie(L,c),S(t,Vt)[Vt].gcookie=c;var d=Oe.LRU_CACHE.getSecondLastKey();if(Pe.readFromLSorCookie(ie)&&-1!==d){var f=Oe.LRU_CACHE.cache[d];S(t,Lt)[Lt].unregisterTokenForGuid(f)}}else a?null!=o&&(S(t,Vt)[Vt].gcookie=o,Pe.saveToLSorCookie(L,o),n=!1):t.clear(),Pe.saveToLSorCookie(ie,!1),i=e[0]}r.id=i,Pe.saveToLSorCookie(j,r)};if(Array.isArray(e)&&e.length>0)for(var r in e)if(e.hasOwnProperty(r)){var o=e[r],a={},s=void 0;if(null!=o.Site){if(s=o.Site,ve(s)||!St(s,{logger:S(this,jt)[jt]}))return}else if(null!=o.Facebook){var u=o.Facebook;ve(u)||u.error||(s=_t(u))}else if(null!=o["Google Plus"]){var l=o["Google Plus"];ve(l)&&!l.error&&(s=wt(l,{logger:S(this,jt)[jt]}))}if(null!=s&&!ve(s)){a.type="profile",null==s.tz&&(s.tz=(new Date).toString().match(/([A-Z]+[\+-][0-9]+)/)[1]),a.profile=s;var c=[];Pe._isLocalStorageSupported()&&(null!=s.Identity&&c.push(s.Identity),null!=s.Email&&c.push(s.Email),null!=s.GPID&&c.push("GP:"+s.GPID),null!=s.FBID&&c.push("FB:"+s.FBID),c.length>0&&i(c)),kt(s,!0),a=S(this,Lt)[Lt].addSystemDataToObject(a,void 0),S(this,Lt)[Lt].addFlags(a),n&&(a[Y]=!0);var d=lt(JSON.stringify(a),S(this,jt)[jt]),f=S(this,Ut)[Ut].dataPostURL;f=st(f,"type",J),f=st(f,"d",d),S(this,Lt)[Lt].saveAndFireRequest(f,Oe.blockRequest,n)}}},Gt=function(){Oe.blockRequest=!1,console.debug("Block request is false"),Pe._isLocalStorageSupported()&&(delete localStorage[V],delete localStorage[x],delete localStorage[F],delete localStorage[q],delete localStorage[U],delete localStorage[N]),Pe.removeCookie(U,ut()),Pe.removeCookie(S(this,xt)[xt].cookieName,Oe.broadDomain),Pe.removeCookie(q,Oe.broadDomain),S(this,xt)[xt].setSessionCookieObject("")},Yt=function(){Oe.blockRequest=!0,S(this,jt)[jt].debug("Block request is true"),Oe.globalCache={gcookie:null,REQ_N:0,RESP_N:0},Pe._isLocalStorageSupported()&&(delete localStorage[L],delete localStorage[j],delete localStorage[V],delete localStorage[x],delete localStorage[F],delete localStorage[q],delete localStorage[U],delete localStorage[N]),Pe.removeCookie(L,Oe.broadDomain),Pe.removeCookie(U,ut()),Pe.removeCookie(j,ut()),Pe.removeCookie(S(this,xt)[xt].cookieName,Oe.broadDomain),Pe.removeCookie(q,Oe.broadDomain),S(this,Vt)[Vt].gcookie=null,S(this,xt)[xt].setSessionCookieObject("")},Jt=function(e){if(Array.isArray(e)&&e.length>0){var t=e.pop();if(null!=t&&pe(t)&&(null!=t.Site&&Object.keys(t.Site).length>0||null!=t.Facebook&&Object.keys(t.Facebook).length>0||null!=t["Google Plus"]&&Object.keys(t["Google Plus"]).length>0)){Pe.setInstantDeleteFlagInK();try{S(this,qt)[qt]([t])}catch(e){S(this,jt)[jt].debug(e)}}else S(this,jt)[jt].error("Profile object is in incorrect format")}},$t=function(e){s(r,e);var n=v(r);function r(){var e;return t(this,r),(e=n.call(this))._details=null,e.shadow=null,e.shadow=e.attachShadow({mode:"open"}),e}return i(r,[{key:"renderBanner",value:function(){var e=this;this.shadow.innerHTML=this.getBannerContent(),!1!==this.trackClick&&this.addEventListener("click",(function(){var t=e.details.onClick;t&&(e.details.window?window.open(t,"_blank"):window.parent.location.href=t),window.clevertap.renderNotificationClicked({msgId:e.msgId,pivotId:e.pivotId})})),window.clevertap.renderNotificationViewed({msgId:this.msgId,pivotId:this.pivotId})}},{key:"getBannerContent",value:function(){return'\n      <style type="text/css">\n        .banner {\n          position: relative;\n          cursor: pointer;\n        }\n        img {\n          height: '.concat(this.divHeight?this.divHeight:"auto",";\n          width: 100%;\n        }\n        .wrapper:is(.left, .right, .center) {\n          display: flex;\n          justify-content: center;\n          flex-direction: column;\n          align-items: center;\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          overflow: auto;\n          top: 0;\n        }\n        ").concat(this.details.css?this.details.css:"",'\n      </style>\n      <div class="banner">\n        <picture>\n          <source media="(min-width:480px)" srcset="').concat(this.details.desktopImageURL,'">\n          <source srcset="').concat(this.details.mobileImageURL,'">\n          <img src="').concat(this.details.desktopImageURL,'" alt="Please upload a picture" style="width:100%;">\n        </picture>\n        ').concat(this.details.html?this.details.html:"","\n      </div>\n    ")}},{key:"details",get:function(){return this._details||""},set:function(e){null===this._details&&(this._details=e,this.renderBanner())}}]),r}(f(HTMLElement)),Zt=function(e){s(r,e);var n=v(r);function r(){var e;return t(this,r),(e=n.call(this))._target=null,e._carousel=null,e.shadow=null,e.slides=0,e.previouslySelectedItem=-1,e.selectedItem=1,e.autoSlide=null,e.stopAutoSlideTimeout=null,e.shadow=e.attachShadow({mode:"open"}),void 0===customElements.get("ct-web-personalisation-banner")&&customElements.define("ct-web-personalisation-banner",$t),e}return i(r,[{key:"renderCarousel",value:function(){this.slides=this.details.length,this.shadow.innerHTML=this.getStyles();var e=this.getCarouselContent();this.display.showNavBtns&&e.insertAdjacentHTML("beforeend",this.display.navBtnsHtml),this.display.showNavArrows&&(e.insertAdjacentHTML("beforeend",this.display.leftNavArrowHtml),e.insertAdjacentHTML("beforeend",this.display.rightNavArrowHtml)),this._carousel=e,this.shadow.appendChild(e),this.setupClick(),this.updateSelectedItem(),this.startAutoSlide(),this.setupOnHover(),window.clevertap.renderNotificationViewed({msgId:this.target.wzrk_id,pivotId:this.target.wzrk_pivot})}},{key:"setupClick",value:function(){var e=this;this._carousel.addEventListener("click",(function(t){var n=t.target.id;if(n.startsWith("carousel__button")){var i=+n.split("-")[1];i!==e.selectedItem&&(e.previouslySelectedItem=e.selectedItem,e.selectedItem=i,e.updateSelectedItem(),e.startAutoSlide())}else if(n.startsWith("carousel__arrow"))n.endsWith("right")?e.goToNext():e.goToPrev(),e.startAutoSlide();else if(n.indexOf("-")>-1){var r=+n.split("-")[1],o=r-1;window.parent.clevertap&&window.clevertap.renderNotificationClicked({msgId:e.target.wzrk_id,pivotId:e.target.wzrk_pivot,wzrk_slideNo:r});var a=e.details[o].onClick;""!==a&&(e.details[o].window?window.open(a,"_blank"):window.location.href=a)}}))}},{key:"setupOnHover",value:function(){var e=this;this._carousel.addEventListener("mouseenter",(function(t){e.stopAutoSlideTimeout=setTimeout((function(){e.autoSlide=clearInterval(e.autoSlide)}),500)})),this._carousel.addEventListener("mouseleave",(function(t){clearTimeout(e.stopAutoSlideTimeout),void 0===e.autoSlide&&e.startAutoSlide()}))}},{key:"getCarouselContent",value:function(){var e=document.createElement("div");return e.setAttribute("class","carousel"),this.details.forEach((function(t,n){var i=document.createElement("ct-web-personalisation-banner");i.classList.add("carousel__item"),i.trackClick=!1,i.setAttribute("id","carousel__item-".concat(n+1)),i.details=t,e.appendChild(i)})),e}},{key:"getStyles",value:function(){return"\n      <style>\n      .carousel {\n        position: relative;\n      }\n\n      .carousel__item {\n        background-color: grey;\n        display: none;\n        background-repeat: no-repeat;\n        background-size: cover;\n      }\n\n      .carousel__item img {\n        height: auto;\n        width: 100%;\n        transition: 2s;\n      }\n\n      .carousel__item--selected {\n        display: block;\n      }\n      ".concat(this.display.navBtnsCss,"\n      ").concat(this.display.navArrowsCss,"\n      </style>\n  ")}},{key:"updateSelectedItem",value:function(){var e;if(-1!==this.previouslySelectedItem){var t,n=this.shadow.getElementById("carousel__item-".concat(this.previouslySelectedItem)),i=this.shadow.getElementById("carousel__button-".concat(this.previouslySelectedItem));n.classList.remove("carousel__item--selected"),null!==(t=null!==i)&&void 0!==t||i.classList.remove("carousel__button--selected")}var r=this.shadow.getElementById("carousel__item-".concat(this.selectedItem)),o=this.shadow.getElementById("carousel__button-".concat(this.selectedItem));r.classList.add("carousel__item--selected"),null!==(e=null!==o)&&void 0!==e||o.classList.add("carousel__button--selected")}},{key:"startAutoSlide",value:function(){var e=this;clearInterval(this.autoSlide),this.autoSlide=setInterval((function(){e.goToNext()}),this.display.sliderTime?1e3*this.display.sliderTime:3e3)}},{key:"goToNext",value:function(){this.goTo(this.selectedItem,(this.selectedItem+1)%this.slides)}},{key:"goToPrev",value:function(){this.goTo(this.selectedItem,this.selectedItem-1)}},{key:"goTo",value:function(e,t){this.previouslySelectedItem=e,this.selectedItem=t,0===t&&(this.selectedItem=this.slides),this.updateSelectedItem()}},{key:"target",get:function(){return this._target||""},set:function(e){null===this._target&&(this._target=e,this.renderCarousel())}},{key:"details",get:function(){return this.target.display.details}},{key:"display",get:function(){return this.target.display}}]),r}(f(HTMLElement)),Qt=function e(t,n){var i,o=n.device,s=n.session,u=n.request,l=n.logger,c=n.isWebPopUpSpamControlDisabled,d=o,f=s,p=u,h=l,v=0,g=function(n){var i=n.wzrk_id.split("_")[0],r=_e(),o=function(e,t,n){var i=0,r=0;null!=e[t]&&(i=e[t]),i++,null!=e.tc&&(r=e.tc),n<0&&r++,e.tc=r,e[t]=i};if(Pe._isLocalStorageSupported()){delete sessionStorage[U];var a=yt();null==n[H].wmc&&(n[H].wmc=1);var s=-1,u=-1,l=-1,c=-1,v=-1,g=-1;null!=n[H].efc&&(s=parseInt(n[H].efc,10)),null!=n[H].mdc&&(u=parseInt(n[H].mdc,10)),null!=n[H].tdc&&(l=parseInt(n[H].tdc,10)),null!=n[H].tlc&&(c=parseInt(n[H].tlc,10)),null!=n[H].wmp&&(v=parseInt(n[H].wmp,10)),null!=n[H].wmc&&(g=parseInt(n[H].wmc,10));var y=a[f.sessionId];if(y){var m=y[i],b=y.tc;if("dnd"===m)return!1;if(g>0&&b>=g&&s<0)return!1;if(u>0&&m>=u)return!1}else y={},a[f.sessionId]=y;var S=a[r];if(null!=S){var _=S[i],w=S.tc;if(v>0&&w>=v&&s<0)return!1;if(l>0&&_>=l)return!1}else S={},a[r]=S;var k=a[K];if(null!=k){var A=k[i];if(c>0&&A>=c)return!1}else k={},a[K]=k}if(null!=n[H].delay&&n[H].delay>0){var E=n[H].delay;return n[H].delay=0,setTimeout(e,1e3*E,t,{device:d,session:f,request:p,logger:h}),!1}var P=f.getSessionCookieObject();o(P,i,s),o(S,i,s),o(k,i,s);var O={};O[f.sessionId]=P,O[r]=S,O[K]=k,mt(O)},m=function(){var e=d.getGuid(),t=f.getSessionCookieObject();return"&t=wc&d="+encodeURIComponent(dt(e+"|"+t.p+"|"+t.s))},b=function(e,t){var n=window.parent[e];"function"==typeof n&&(null!=t.display.kv?n(t.display.kv):n())},S=function(e,t,n,i,r){_(t),function(e,t,n,i,r){if(""!==e&&null!=e){var o,a;r?o=n:null!==n&&null!=(a=n.getElementsByClassName("jsCT_CTA"))&&1===a.length&&(o=a[0]);var s=t.display.jsFunc,u=t.display.preview;null==u&&(e+=m()),null!=o&&(o.onclick=function(){if(null!=s)return null==u&&gt.fireRequest(e),b(s,t),void At("-1",0,f.sessionId);1===t.display.window?window.open(e,"_blank"):window.location=e})}}(e,t,n,0,r)},_=function(e){var t={type:"event"};t.evtName=te,t.evtData=r({},ee,e.wzrk_id),e.wzrk_pivot&&(t.evtData=a(a({},t.evtData),{},{wzrk_pivot:e.wzrk_pivot})),p.processEvent(t)},w=function(e){var t=e.wzrk_id.split("_")[0],n=e.display;if(2===n.wtarget_type){if(1===e.msgContent.type){var i={};i.msgId=e.wzrk_id,e.wzrk_pivot&&(i.pivotId=e.wzrk_pivot),null!=e.msgContent.kv&&(i.kv=e.msgContent.kv);var r=new CustomEvent("CT_web_native_display",{detail:i});return void document.dispatchEvent(r)}if(2===e.msgContent.type){var o=e.display.divId;if(null==document.getElementById(o))return;return void 0===customElements.get("ct-web-personalisation-banner")&&customElements.define("ct-web-personalisation-banner",$t),function(e){var t=e.display.divId,n=document.createElement("ct-web-personalisation-banner");n.msgId=e.wzrk_id,n.pivotId=e.wzrk_pivot,n.divHeight=e.display.divHeight,n.details=e.display.details[0];var i=document.getElementById(t);i.innerHTML="",i.appendChild(n)}(e)}if(3===e.msgContent.type){var a=e.display.divId;if(null==document.getElementById(a))return;return void 0===customElements.get("ct-web-personalisation-carousel")&&customElements.define("ct-web-personalisation-carousel",Zt),function(e){var t=e.display.divId,n=document.createElement("ct-web-personalisation-carousel");n.target=e;var i=document.getElementById(t);i.innerHTML="",i.appendChild(n)}(e)}}if(1===n.layout)return P(void 0,e);if(c||!1!==g(e)){var s="wizParDiv"+n.layout;if(c&&null!=document.getElementById(s)&&document.getElementById(s).remove(),null==document.getElementById(s)){Oe.campaignDivMap[t]=s;var u=2===n.layout,l=document.createElement("div");l.id=s;var d=window.innerHeight,f=window.innerWidth,p=!1;if(u)l.setAttribute("style",n.iFrameStyle);else{var h=10,v=5*f/100,y=h+5*d/100,m=30*f/100+20,b="width:30%;";(/mobile/i.test(navigator.userAgent)||/mini/i.test(navigator.userAgent))&&!1===/iPad/i.test(navigator.userAgent)?(m=85*f/100+20,v=5*f/100,y=5*d/100,b="width:80%;"):("ontouchstart"in window||/tablet/i.test(navigator.userAgent))&&(m=50*f/100+20,v=5*f/100,y=5*d/100,b="width:50%;"),null==n.proto?(p=!0,l.setAttribute("style","display:block;overflow:hidden; bottom:"+y+"px !important;width:"+m+"px !important;right:"+v+"px !important;position:fixed;z-index:2147483647;")):l.setAttribute("style",b+n.iFrameStyle)}document.body.appendChild(l);var _=document.createElement("iframe"),w=!1===n.br?"0":"8";_.frameborder="0px",_.marginheight="0px",_.marginwidth="0px",_.scrolling="no",_.id="wiz-iframe";var A,E=e.display.onClick,O="";if(""!==E&&null!=E&&(O="cursor:pointer;"),1===e.msgContent.type)A=(A=e.msgContent.html).replace(/##campaignId##/g,t);else{var C,I,T,R,M,D='<style type="text/css">body{margin:0;padding:0;}#contentDiv.wzrk{overflow:hidden;padding:0;text-align:center;'+O+"}#contentDiv.wzrk td{padding:15px 10px;}.wzrkPPtitle{font-weight: bold;font-size: 16px;font-family:arial;padding-bottom:10px;word-break: break-word;}.wzrkPPdscr{font-size: 14px;font-family:arial;line-height:16px;word-break: break-word;display:inline-block;}.PL15{padding-left:15px;}.wzrkPPwarp{margin:20px 20px 0 5px;padding:0px;border-radius: "+w+"px;box-shadow: 1px 1px 5px #888888;}a.wzrkClose{cursor:pointer;position: absolute;top: 11px;right: 11px;z-index: 2147483647;font-size:19px;font-family:arial;font-weight:bold;text-decoration: none;width: 25px;/*height: 25px;*/text-align: center; -webkit-appearance: none; line-height: 25px;background: #353535;border: #fff 2px solid;border-radius: 100%;box-shadow: #777 2px 2px 2px;color:#fff;}a:hover.wzrkClose{background-color:#d1914a !important;color:#fff !important; -webkit-appearance: none;}td{vertical-align:top;}td.imgTd{border-top-left-radius:8px;border-bottom-left-radius:8px;}</style>";"dark"===e.display.theme?(C="#2d2d2e",I="#eaeaea",T="#353535",R="#353535",M="#ffffff"):(C="#ffffff",I="#000000",R="#f4f4f4",T="#a5a6a6",M="#ffffff");var N=e.msgContent.title,L=e.msgContent.description,j="";null!=e.msgContent.imageUrl&&""!==e.msgContent.imageUrl&&(j="<td class='imgTd' style='background-color:"+R+"'><img src='"+e.msgContent.imageUrl+"' height='60' width='60'></td>"),A=D+"<div class='wzrkPPwarp' style='color:"+I+";background-color:"+C+";'><a href='javascript:void(0);' onclick=parent.$WZRK_WR.closeIframe("+t+",'"+s+"'); class='wzrkClose' style='background-color:"+T+";color:"+M+"'>&times;</a><div id='contentDiv' class='wzrk'><table cellpadding='0' cellspacing='0' border='0'><tr>"+j+"<td style='vertical-align:top;'><div class='wzrkPPtitle' style='color:"+I+"'>"+N+"</div><div class='wzrkPPdscr' style='color:"+I+"'>"+L+"<div></td></tr></table></div>"}_.setAttribute("style","z-index: 2147483647; display:block; width: 100% !important; border:0px !important; border-color:none !important;"),l.appendChild(_);var U=(_.contentWindow?_.contentWindow:_.contentDocument.document?_.contentDocument.document:_.contentDocument).document;U.open(),U.write(A),n["custom-editor"]&&k(e,U),U.close();var x=function(){h=document.getElementById("wiz-iframe").contentDocument.getElementById("contentDiv").scrollHeight,!0===n["custom-editor"]||u||(h+=25),document.getElementById("wiz-iframe").contentDocument.body.style.margin="0px",document.getElementById("wiz-iframe").style.height=h+"px"},F=navigator.userAgent.toLowerCase();if(-1!==F.indexOf("safari"))if(F.indexOf("chrome")>-1)_.onload=function(){x();var t=document.getElementById("wiz-iframe").contentDocument.getElementById("contentDiv");S(E,e,t,0,p)};else{var V=_.contentDocument||_.contentWindow;V.document&&(V=V.document),x();var q=setInterval((function(){if("complete"===V.readyState){clearInterval(q),x();var t=document.getElementById("wiz-iframe").contentDocument.getElementById("contentDiv");S(E,e,t,0,p)}}),10)}else _.onload=function(){x();var t=document.getElementById("wiz-iframe").contentDocument.getElementById("contentDiv");S(E,e,t,0,p)}}}},k=function(e,t){var n=t.createElement("script");n.innerHTML="\n      const ct__camapignId = '".concat(e.wzrk_id,"';\n      const ct__formatVal = (v) => {\n          return v && v.trim().substring(0, 20);\n      }\n      const ct__parentOrigin =  window.parent.origin;\n      document.body.addEventListener('click', (event) => {\n        const elem = event.target.closest?.('a[wzrk_c2a], button[wzrk_c2a]');\n        if (elem) {\n            const {innerText, id, name, value, href} = elem;\n            const clickAttr = elem.getAttribute('onclick') || elem.getAttribute('click');\n            const onclickURL = clickAttr?.match(/(window.open)[(](\"|')(.*)(\"|',)/)?.[3] || clickAttr?.match(/(location.href *= *)(\"|')(.*)(\"|')/)?.[3];\n            const props = {innerText, id, name, value};\n            let msgCTkv = Object.keys(props).reduce((acc, c) => {\n                const formattedVal = ct__formatVal(props[c]);\n                formattedVal && (acc['wzrk_click_' + c] = formattedVal);\n                return acc;\n            }, {});\n            if(onclickURL) { msgCTkv['wzrk_click_' + 'url'] = onclickURL; }\n            if(href) { msgCTkv['wzrk_click_' + 'c2a'] = href; }\n            const notifData = { msgId: ct__camapignId, msgCTkv, pivotId: '").concat(e.wzrk_pivot,"' };\n            window.parent.clevertap.renderNotificationClicked(notifData);\n        }\n      });\n    "),t.body.appendChild(n)},A=!1,E=function(e){var t=e.display.onClick;if(window.clevertap.hasOwnProperty("notificationCallback")&&void 0!==window.clevertap.notificationCallback&&"function"==typeof window.clevertap.notificationCallback){var n=window.clevertap.notificationCallback;if(!A){var i={};i.msgContent=e.msgContent,i.msgId=e.wzrk_id,e.wzrk_pivot&&(i.pivotId=e.wzrk_pivot),null!=e.display.kv&&(i.kv=e.display.kv),window.clevertap.raiseNotificationClicked=function(){if(""!==t&&null!=t){var n=e.display.jsFunc;if(t+=m(),null!=n)return gt.fireRequest(t),void b(n,e);1===e.display.window?window.open(t,"_blank"):window.location=t}},window.clevertap.raiseNotificationViewed=function(){_(e)},n(i),A=!0}}else if(window.clevertap.popupCurrentWzrkId=e.wzrk_id,w(e),window.clevertap.hasOwnProperty("popupCallbacks")&&void 0!==window.clevertap.popupCallbacks&&"function"==typeof window.clevertap.popupCallbacks[e.wzrk_id]){var o=window.clevertap.popupCallbacks[e.wzrk_id],s={};s.msgContent=e.msgContent,s.msgId=e.wzrk_id,e.wzrk_pivot&&(s.pivotId=e.wzrk_pivot);var u=[];for(var l in e)if(l.startsWith(X)&&l!==ee){var c=r({},l,e[l]);u.push(c)}u.length>0&&(s.msgCTkv=u),null!=e.display.kv&&(s.kv=e.display.kv),window.clevertap.raisePopupNotificationClicked=function(t){if(t&&t.msgId){var n={type:"event"};if(n.evtName=ne,n.evtData=r({},ee,t.msgId),e.wzrk_pivot&&(n.evtData=a(a({},n.evtData),{},{wzrk_pivot:t.pivotId})),t.msgCTkv){var i,o=y(t.msgCTkv);try{for(o.s();!(i=o.n()).done;){var s=i.value;n.evtData=a(a({},n.evtData),s)}}catch(e){o.e(e)}finally{o.f()}}p.processEvent(n)}},o(s)}},P=function(e,t){var n;if(!(null!=e&&e.clientY>0||(n=null==t?i:t,c&&0===n.display.wtarget_type&&null!=document.getElementById("intentPreview")&&null!=document.getElementById("intentOpacityDiv")&&(document.getElementById("intentPreview").remove(),document.getElementById("intentOpacityDiv").remove()),null!=document.getElementById("intentPreview")||null==n.display.layout&&(/mobile/i.test(navigator.userAgent)||/mini/i.test(navigator.userAgent)||/iPad/i.test(navigator.userAgent)||"ontouchstart"in window||/tablet/i.test(navigator.userAgent))))){var r=n.wzrk_id.split("_")[0];if(c||!1!==g(n)){Oe.campaignDivMap[r]="intentPreview";var o=!1,a=document.createElement("div");a.id="intentOpacityDiv",a.setAttribute("style","position: fixed;top: 0;bottom: 0;left: 0;width: 100%;height: 100%;z-index: 2147483646;background: rgba(0,0,0,0.7);"),document.body.appendChild(a);var s=document.createElement("div");s.id="intentPreview",null==n.display.proto?(o=!0,s.setAttribute("style","display:block;overflow:hidden;top:55% !important;left:50% !important;position:fixed;z-index:2147483647;width:600px !important;height:600px !important;margin:-300px 0 0 -300px !important;")):s.setAttribute("style",n.display.iFrameStyle),document.body.appendChild(s);var u=document.createElement("iframe"),l=!1===n.display.br?"0":"8";u.frameborder="0px",u.marginheight="0px",u.marginwidth="0px",u.scrolling="no",u.id="wiz-iframe-intent";var d,f=n.display.onClick,p="";if(""!==f&&null!=f&&(p="cursor:pointer;"),1===n.msgContent.type)d=(d=n.msgContent.html).replace(/##campaignId##/g,r);else{var h,v,y,m,b='<style type="text/css">body{margin:0;padding:0;}#contentDiv.wzrk{overflow:hidden;padding:0 0 20px 0;text-align:center;'+p+"}#contentDiv.wzrk td{padding:15px 10px;}.wzrkPPtitle{font-weight: bold;font-size: 24px;font-family:arial;word-break: break-word;padding-top:20px;}.wzrkPPdscr{font-size: 14px;font-family:arial;line-height:16px;word-break: break-word;display:inline-block;padding:20px 20px 0 20px;line-height:20px;}.PL15{padding-left:15px;}.wzrkPPwarp{margin:20px 20px 0 5px;padding:0px;border-radius: "+l+"px;box-shadow: 1px 1px 5px #888888;}a.wzrkClose{cursor:pointer;position: absolute;top: 11px;right: 11px;z-index: 2147483647;font-size:19px;font-family:arial;font-weight:bold;text-decoration: none;width: 25px;/*height: 25px;*/text-align: center; -webkit-appearance: none; line-height: 25px;background: #353535;border: #fff 2px solid;border-radius: 100%;box-shadow: #777 2px 2px 2px;color:#fff;}a:hover.wzrkClose{background-color:#d1914a !important;color:#fff !important; -webkit-appearance: none;}#contentDiv .button{padding-top:20px;}#contentDiv .button a{font-size: 14px;font-weight:bold;font-family:arial;text-align:center;display:inline-block;text-decoration:none;padding:0 30px;height:40px;line-height:40px;background:#ea693b;color:#fff;border-radius:4px;-webkit-border-radius:4px;-moz-border-radius:4px;}</style>";"dark"===n.display.theme?(h="#2d2d2e",v="#eaeaea",y="#353535",m="#ffffff"):(h="#ffffff",v="#000000",y="#a5a6a6",m="#ffffff");var _=n.msgContent.title,w=n.msgContent.description,A="";null!=n.msgContent.ctaText&&""!==n.msgContent.ctaText&&(A="<div class='button'><a href='#'>"+n.msgContent.ctaText+"</a></div>");var E="";null!=n.msgContent.imageUrl&&""!==n.msgContent.imageUrl&&(E="<div style='padding-top:20px;'><img src='"+n.msgContent.imageUrl+"' width='500' alt="+_+" /></div>"),d=b+"<div class='wzrkPPwarp' style='color:"+v+";background-color:"+h+";'><a href='javascript:void(0);' onclick=parent.$WZRK_WR.closeIframe("+r+",'intentPreview'); class='wzrkClose' style='background-color:"+y+";color:"+m+"'>&times;</a><div id='contentDiv' class='wzrk'><div class='wzrkPPtitle' style='color:"+v+"'>"+_+"</div><div class='wzrkPPdscr' style='color:"+v+"'>"+w+"</div>"+E+A+"</div></div>"}u.setAttribute("style","z-index: 2147483647; display:block; height: 100% !important; width: 100% !important;min-height:80px !important;border:0px !important; border-color:none !important;"),s.appendChild(u);var P=(u.contentWindow?u.contentWindow:u.contentDocument.document?u.contentDocument.document:u.contentDocument).document;P.open(),P.write(d),n.display["custom-editor"]&&k(n,P),P.close();var O=document.getElementById("wiz-iframe-intent").contentDocument.getElementById("contentDiv");S(f,n,O,0,o)}}};if(document.body){if(null!=t.inapp_notifs)for(var O=0;O<t.inapp_notifs.length;O++){var C=t.inapp_notifs[O];null==C.display.wtarget_type||0===C.display.wtarget_type||2===C.display.wtarget_type?E(C):1===C.display.wtarget_type&&(i=C,window.document.body.onmouseleave=P)}if(Pe._isLocalStorageSupported())try{if(null!=t.evpr){var I=t.evpr.events,T=t.evpr.profile,R=t.evpr.expires_in,M=we();Pe.setMetaProp("lsTime",M),Pe.setMetaProp("exTs",R),function(e){if(null!=Oe.globalEventsMap||(Oe.globalEventsMap=Pe.readFromLSorCookie(x),null!=Oe.globalEventsMap)){for(var t in e)if(e.hasOwnProperty(t)){var n=Oe.globalEventsMap[t],i=e[t];null!=Oe.globalEventsMap[t]?null!=i[0]&&i[0]>n[0]&&(Oe.globalEventsMap[t]=i):Oe.globalEventsMap[t]=i}}else Oe.globalEventsMap=e}(I),Pe.saveToLSorCookie(x,Oe.globalEventsMap),null==Oe.globalProfileMap?kt(T,!0):kt(T,!1)}if(null!=t.arp&&function(e){if(null!=e.skipResARP&&e.skipResARP)return console.debug("Update ARP Request rejected",e),null;var t=!(null==e[Y]||!0!==e[Y]);if(Pe._isLocalStorageSupported())try{var n=Pe.readFromLSorCookie(q);for(var i in(null==n||t)&&(n={}),e)e.hasOwnProperty(i)&&(-1===e[i]?delete n[i]:n[i]=e[i]);Pe.saveToLSorCookie(q,n)}catch(e){console.error("Unable to parse ARP JSON: "+e)}}(t.arp),null!=t.inapp_stale){var D=yt(),N=D.global;if(null!=N)for(var L in t.inapp_stale)t.inapp_stale.hasOwnProperty(L)&&delete N[t.inapp_stale[L]];mt(D)}}catch(e){h.error("Unable to persist evrp/arp: "+e)}}else v<6&&(v++,setTimeout(e,1e3,t,{device:d,session:f,request:p,logger:h}))},Xt=b("isPersonalisationActive"),en=function(){function e(n){var i=n.isPersonalisationActive;t(this,e),Object.defineProperty(this,Xt,{writable:!0,value:void 0}),S(this,Xt)[Xt]=i}return i(e,[{key:"getTotalVisits",value:function(){if(S(this,Xt)[Xt]()){var e=Pe.getMetaProp("sc");return null==e&&(e=1),e}}},{key:"getLastVisit",value:function(){if(S(this,Xt)[Xt]()){var e=Pe.getMetaProp("ps");return null!=e?new Date(1e3*e):void 0}}}]),e}(),tn=1,nn=2,rn=3,on=b("logLevel"),an=b("log"),sn=b("isLegacyDebug"),un=function(){function e(n){t(this,e),Object.defineProperty(this,sn,{get:cn,set:void 0}),Object.defineProperty(this,an,{value:ln}),Object.defineProperty(this,on,{writable:!0,value:void 0}),this.wzrkError={},S(this,on)[on]=null==n?n:nn,this.wzrkError={}}return i(e,[{key:"error",value:function(e){S(this,on)[on]>=tn&&S(this,an)[an]("error",e)}},{key:"info",value:function(e){S(this,on)[on]>=nn&&S(this,an)[an]("log",e)}},{key:"debug",value:function(e){(S(this,on)[on]>=rn||S(this,sn)[sn])&&S(this,an)[an]("debug",e)}},{key:"reportError",value:function(e,t){this.wzrkError.c=e,this.wzrkError.d=t,this.error("".concat(Ve," ").concat(e,": ").concat(t))}},{key:"logLevel",get:function(){return S(this,on)[on]},set:function(e){S(this,on)[on]=e}}]),e}(),ln=function(e,t){if(window.console)try{var n=(new Date).getTime();console[e]("CleverTap [".concat(n,"]: ").concat(t))}catch(e){}},cn=function(){return"undefined"!=typeof sessionStorage&&""===sessionStorage.WZRK_D},dn=b("logger"),fn=b("sessionId"),pn=b("isPersonalisationActive"),hn=function(){function e(n){var i=n.logger,r=n.isPersonalisationActive;t(this,e),Object.defineProperty(this,dn,{writable:!0,value:void 0}),Object.defineProperty(this,fn,{writable:!0,value:void 0}),Object.defineProperty(this,pn,{writable:!0,value:void 0}),this.cookieName=void 0,this.scookieObj=void 0,this.sessionId=Pe.getMetaProp("cs"),S(this,dn)[dn]=i,S(this,pn)[pn]=r}return i(e,[{key:"getSessionCookieObject",value:function(){var e=Pe.readCookie(this.cookieName),t={};if(null!=e)if(e=e.replace(R,'"'),t=JSON.parse(e),pe(t)){if(void 0!==t.t){var n=t.t;we()-n>1260&&(t={})}}else t={};return this.scookieObj=t,t}},{key:"setSessionCookieObject",value:function(e){var t=JSON.stringify(e);Pe.createBroadCookie(this.cookieName,t,1200,ut())}},{key:"manageSession",value:function(e){if(void 0===this.sessionId||this.sessionId!==e){var t=Pe.getMetaProp("cs");if(void 0===t)Pe.setMetaProp("ps",e),Pe.setMetaProp("cs",e),Pe.setMetaProp("sc",1);else if(t!==e){Pe.setMetaProp("ps",t),Pe.setMetaProp("cs",e);var n=Pe.getMetaProp("sc");void 0===n&&(n=0),Pe.setMetaProp("sc",n+1)}this.sessionId=e}}},{key:"getTimeElapsed",value:function(){if(S(this,pn)[pn]()){null!=this.scookieObj&&(this.scookieObj=this.getSessionCookieObject());var e=this.scookieObj.s;if(null!=e){var t=we();return Math.floor(t-e)}}}},{key:"getPageCount",value:function(){if(S(this,pn)[pn]())return null!=this.scookieObj&&(this.scookieObj=this.getSessionCookieObject()),this.scookieObj.p}},{key:"sessionId",get:function(){return S(this,fn)[fn]},set:function(e){S(this,fn)[fn]=e}}]),e}(),vn=0,gn=0,yn=b("logger"),mn=b("account"),bn=b("device"),Sn=b("session"),_n=b("isPersonalisationActive"),wn=b("clearCookie"),kn=b("addToLocalEventMap"),An=function(){function e(n){var i=n.logger,r=n.account,o=n.device,a=n.session,s=n.isPersonalisationActive;t(this,e),Object.defineProperty(this,kn,{value:En}),Object.defineProperty(this,yn,{writable:!0,value:void 0}),Object.defineProperty(this,mn,{writable:!0,value:void 0}),Object.defineProperty(this,bn,{writable:!0,value:void 0}),Object.defineProperty(this,Sn,{writable:!0,value:void 0}),Object.defineProperty(this,_n,{writable:!0,value:void 0}),Object.defineProperty(this,wn,{writable:!0,value:!1}),this.processingBackup=!1,S(this,yn)[yn]=i,S(this,mn)[mn]=r,S(this,bn)[bn]=o,S(this,Sn)[Sn]=a,S(this,_n)[_n]=s,gt.logger=i,gt.device=o}return i(e,[{key:"processBackupEvents",value:function(){var e=Pe.readFromLSorCookie(z);if(null!=e){for(var t in this.processingBackup=!0,e)if(e.hasOwnProperty(t)){var n=e[t];void 0===n.fired&&(S(this,yn)[yn].debug("Processing backup event : "+n.q),void 0!==n.q&&gt.fireRequest(n.q),n.fired=!0)}Pe.saveToLSorCookie(z,e),this.processingBackup=!1}}},{key:"addSystemDataToObject",value:function(e,t){void 0===t&&(e=be(e,S(this,yn)[yn])),ve(S(this,yn)[yn].wzrkError)||(e.wzrk_error=S(this,yn)[yn].wzrkError,S(this,yn)[yn].wzrkError={}),e.id=S(this,mn)[mn].id,me(S(this,bn)[bn].gcookie)&&(e.g=S(this,bn)[bn].gcookie);var n=S(this,Sn)[Sn].getSessionCookieObject();return e.s=n.s,e.pg=void 0===n.p?1:n.p,e}},{key:"addSystemDataToProfileObject",value:function(e,t){ve(S(this,yn)[yn].wzrkError)||(e.wzrk_error=S(this,yn)[yn].wzrkError,S(this,yn)[yn].wzrkError={}),e.id=S(this,mn)[mn].id,me(S(this,bn)[bn].gcookie)&&(e.g=S(this,bn)[bn].gcookie);var n=S(this,Sn)[Sn].getSessionCookieObject();return e.s=n.s,e.pg=void 0===n.p?1:n.p,e}},{key:"addFlags",value:function(e){if(S(this,wn)[wn]=Pe.getAndClearMetaProp(M),void 0!==S(this,wn)[wn]&&S(this,wn)[wn]&&(e.rc=!0,S(this,yn)[yn].debug("reset cookie sent in request and cleared from meta for future requests.")),S(this,_n)[_n]()){var t=Pe.getMetaProp("lsTime"),n=Pe.getMetaProp("exTs");if(void 0===t||void 0===n)return void(e.dsync=!0);t+n<we()&&(e.dsync=!0)}}},{key:"saveAndFireRequest",value:function(e,t,n){var i=we(),r=(e=st(e,"rn",++Oe.globalCache.REQ_N))+"&i="+i+"&sn="+vn;Pe.backupEvent(r,Oe.globalCache.REQ_N,S(this,yn)[yn]),t&&(void 0===S(this,wn)[wn]||!S(this,wn)[wn])||window.isOULInProgress?S(this,yn)[yn].debug("Not fired due to override - ".concat(Oe.blockRequest," or clearCookie - ").concat(S(this,wn)[wn]," or OUL request in progress - ").concat(window.isOULInProgress)):(i===gn?vn++:(gn=i,vn=0),gt.fireRequest(r,!1,n))}},{key:"unregisterTokenForGuid",value:function(e){var t=Pe.readFromLSorCookie(re);if(t){var n={type:"data"};me(e)&&(n.g=e),n.action="unregister",n.id=S(this,mn)[mn].id;var i=S(this,Sn)[Sn].getSessionCookieObject();n.s=i.s;var r=lt(JSON.stringify(n),S(this,yn)[yn]),o=S(this,mn)[mn].dataPostURL;o=st(o,"type","data"),o=st(o,"d",r),gt.fireRequest(o,!0),Pe.saveToLSorCookie(ie,!1)}this.registerToken(t)}},{key:"registerToken",value:function(e){if(e){e=this.addSystemDataToObject(e,!0),e=JSON.stringify(e);var t=S(this,mn)[mn].dataPostURL;t=st(t,"type","data"),t=st(t,"d",lt(e,S(this,yn)[yn])),gt.fireRequest(t),Pe.save("WZRK_WPR","ok")}}},{key:"processEvent",value:function(e){S(this,kn)[kn](e.evtName),e=this.addSystemDataToObject(e,void 0),this.addFlags(e),e[U]=bt();var t=lt(JSON.stringify(e),S(this,yn)[yn]),n=S(this,mn)[mn].dataPostURL;n=st(n,"type",J),n=st(n,"d",t),this.saveAndFireRequest(n,Oe.blockRequest)}}]),e}(),En=function(e){if(Pe._isLocalStorageSupported()){void 0===Oe.globalEventsMap&&(Oe.globalEventsMap=Pe.readFromLSorCookie(x),void 0===Oe.globalEventsMap&&(Oe.globalEventsMap={}));var t=we(),n=Oe.globalEventsMap[e];void 0!==n?(n[2]=t,n[0]++):((n=[]).push(1),n.push(t),n.push(t)),Oe.globalEventsMap[e]=n,Pe.saveToLSorCookie(x,Oe.globalEventsMap)}},Pn=b("request"),On=b("account"),Cn=b("oldValues"),In=b("logger"),Tn=b("processPrivacyArray"),Rn=function(e){s(r,e);var n=v(r);function r(e,i){var o,a=e.request,s=e.account,u=e.logger;return t(this,r),o=n.call(this),Object.defineProperty(p(o),Tn,{value:Mn}),Object.defineProperty(p(o),Pn,{writable:!0,value:void 0}),Object.defineProperty(p(o),On,{writable:!0,value:void 0}),Object.defineProperty(p(o),Cn,{writable:!0,value:void 0}),Object.defineProperty(p(o),In,{writable:!0,value:void 0}),S(p(o),In)[In]=u,S(p(o),Pn)[Pn]=a,S(p(o),On)[On]=s,S(p(o),Cn)[Cn]=i,o}return i(r,[{key:"push",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var i;return Oe.isPrivacyArrPushed?S(this,Tn)[Tn](Oe.privacyArray.length>0?Oe.privacyArray:t):(i=Oe.privacyArray).push.apply(i,t),0}},{key:"_processOldValues",value:function(){S(this,Cn)[Cn]&&S(this,Tn)[Tn](S(this,Cn)[Cn]),S(this,Cn)[Cn]=null}}]),r}(f(Array)),Mn=function(e){if(Array.isArray(e)&&e.length>0){var t=e.reduce((function(e,t){return a(a({},e),t)}),{}),n={},i={},r=!1;if(t.hasOwnProperty(W)&&"boolean"==typeof(r=t[W])&&(i.ct_optout=r,Oe.isOptInRequest=!r),t.hasOwnProperty(B)){var o=t[B],s="boolean"==typeof o&&o;Pe.setMetaProp(B,s)}if(!ve(i)){n.type="profile",n.profile=i,n=S(this,Pn)[Pn].addSystemDataToObject(n,void 0);var u=lt(JSON.stringify(n),S(this,In)[In]),l=S(this,On)[On].dataPostURL;l=st(l,"type",J),l=st(l,"d",u),l=st(l,W,r?"true":"false"),S(this,Pn)[Pn].saveAndFireRequest(l,Oe.blockRequest),e.splice(0,e.length)}}},Dn=b("oldValues"),Nn=b("logger"),Ln=b("request"),jn=b("account"),Un=b("wizAlertJSPath"),xn=b("fcmPublicKey"),Fn=b("setUpWebPush"),Vn=b("setUpWebPushNotifications"),qn=b("setApplicationServerKey"),zn=b("setUpSafariNotifications"),Kn=b("setUpChromeFirefoxNotifications"),Hn=b("addWizAlertJS"),Wn=b("removeWizAlertJS"),Bn=b("handleNotificationRegistration"),Gn=function(e){s(r,e);var n=v(r);function r(e,i){var o,a=e.logger,s=(e.session,e.request),u=e.account;return t(this,r),o=n.call(this),Object.defineProperty(p(o),Bn,{value:ti}),Object.defineProperty(p(o),Wn,{value:ei}),Object.defineProperty(p(o),Hn,{value:Xn}),Object.defineProperty(p(o),Kn,{value:Qn}),Object.defineProperty(p(o),zn,{value:Zn}),Object.defineProperty(p(o),qn,{value:$n}),Object.defineProperty(p(o),Vn,{value:Jn}),Object.defineProperty(p(o),Fn,{value:Yn}),Object.defineProperty(p(o),Dn,{writable:!0,value:void 0}),Object.defineProperty(p(o),Nn,{writable:!0,value:void 0}),Object.defineProperty(p(o),Ln,{writable:!0,value:void 0}),Object.defineProperty(p(o),jn,{writable:!0,value:void 0}),Object.defineProperty(p(o),Un,{writable:!0,value:void 0}),Object.defineProperty(p(o),xn,{writable:!0,value:void 0}),S(p(o),Un)[Un]="https://d2r1yp2w7bby2u.cloudfront.net/js/wzrk_dialog.min.js",S(p(o),xn)[xn]=null,S(p(o),Dn)[Dn]=i,S(p(o),Nn)[Nn]=a,S(p(o),Ln)[Ln]=s,S(p(o),jn)[jn]=u,o}return i(r,[{key:"push",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return S(this,Fn)[Fn](t),0}},{key:"_processOldValues",value:function(){S(this,Dn)[Dn]&&S(this,Fn)[Fn](S(this,Dn)[Dn]),S(this,Dn)[Dn]=null}},{key:"_enableWebPush",value:function(e,t){Oe.webPushEnabled=e,null!=t&&S(this,qn)[qn](t),Oe.webPushEnabled&&Oe.notifApi.notifEnabledFromApi?S(this,Bn)[Bn](Oe.notifApi.displayArgs):!Oe.webPushEnabled&&Oe.notifApi.notifEnabledFromApi&&S(this,Nn)[Nn].error("Ensure that web push notifications are fully enabled and integrated before requesting them")}}]),r}(f(Array)),Yn=function(e){Oe.webPushEnabled&&e.length>0?S(this,Bn)[Bn](e):null==Oe.webPushEnabled&&e.length>0?(Oe.notifApi.notifEnabledFromApi=!0,Oe.notifApi.displayArgs=e.slice()):!1===Oe.webPushEnabled&&e.length>0&&S(this,Nn)[Nn].error("Make sure push notifications are fully enabled and integrated")},Jn=function(e,t,n,i){-1!==navigator.userAgent.indexOf("Chrome")||-1!==navigator.userAgent.indexOf("Firefox")?S(this,Kn)[Kn](e,t):-1!==navigator.userAgent.indexOf("Safari")&&S(this,zn)[zn](e,n,i)},$n=function(e){S(this,xn)[xn]=e},Zn=function(e,t,n){var i=this;void 0===t&&S(this,Nn)[Nn].error("Ensure that APNS Web Push ID is supplied"),void 0===n&&S(this,Nn)[Nn].error("Ensure that APNS Web Push service path is supplied"),"safari"in window&&"pushNotification"in window.safari&&window.safari.pushNotification.requestPermission(n,t,{},(function(e){if("granted"===e.permission){var t=JSON.parse(JSON.stringify(e));t.endpoint=e.deviceToken,t.browser="Safari",Pe.saveToLSorCookie(re,t),S(i,Ln)[Ln].registerToken(t),S(i,Nn)[Nn].info("Safari Web Push registered. Device Token: "+e.deviceToken)}else"denied"===e.permission&&S(i,Nn)[Nn].info("Error subscribing to Safari web push")}))},Qn=function(e,t){var n=this,i="";"serviceWorker"in navigator&&navigator.serviceWorker.register(t).then((function(e){return"undefined"!=typeof __wzrk_account_id?new Promise((function(t){return setTimeout((function(){return t(e)}),5e3)})):(i=e.scope,/^(\.?)(\/?)([^/]*).js$/.test(t)?navigator.serviceWorker.ready:-1!==navigator.userAgent.indexOf("Chrome")?new Promise((function(t){return setTimeout((function(){return t(e)}),5e3)})):navigator.serviceWorker.getRegistrations())})).then((function(t){-1!==navigator.userAgent.indexOf("Firefox")&&Array.isArray(t)&&(t=t.filter((function(e){return e.scope===i}))[0]);var r={userVisibleOnly:!0};null!=S(n,xn)[xn]&&(r.applicationServerKey=function(e){for(var t=(e+"=".repeat((4-e.length%4)%4)).replace(/\-/g,"+").replace(/_/g,"/"),n=window.atob(t),i=[],r=0;r<n.length;r++)i.push(n.charCodeAt(r));return new Uint8Array(i)}(S(n,xn)[xn])),t.pushManager.subscribe(r).then((function(t){S(n,Nn)[Nn].info("Service Worker registered. Endpoint: "+t.endpoint);var i=JSON.parse(JSON.stringify(t));-1!==navigator.userAgent.indexOf("Chrome")?(i.endpoint=i.endpoint.split("/").pop(),i.browser="Chrome"):-1!==navigator.userAgent.indexOf("Firefox")&&(i.endpoint=i.endpoint.split("/").pop(),i.browser="Firefox"),Pe.saveToLSorCookie(re,i),S(n,Ln)[Ln].registerToken(i),void 0!==e&&"function"==typeof e&&e()})).catch((function(e){S(n,Nn)[Nn].error("Error subscribing: "+e),t.pushManager.getSubscription().then((function(e){null!==e&&e.unsubscribe().then((function(e){S(n,Nn)[Nn].info("Unsubscription successful")})).catch((function(e){S(n,Nn)[Nn].error("Error unsubscribing: "+e)}))}))}))})).catch((function(e){S(n,Nn)[Nn].error("error registering service worker: "+e)}))},Xn=function(){var e=document.createElement("script");return e.setAttribute("type","text/javascript"),e.setAttribute("id","wzrk-alert-js"),e.setAttribute("src",S(this,Un)[Un]),document.getElementsByTagName("body")[0].appendChild(e),e},ei=function(){var e=document.getElementById("wzrk-alert-js");e.parentNode.removeChild(e)},ti=function(e){var t,n,i,r,o,a,s,u,l,c,d,f,p,h,v,g,y=this;if(1===e.length){if(pe(e[0])){var m=e[0];t=m.titleText,n=m.bodyText,i=m.okButtonText,r=m.rejectButtonText,o=m.okButtonColor,a=m.skipDialog,s=m.askAgainTimeInSeconds,u=m.okCallback,l=m.rejectCallback,c=m.subscriptionCallback,d=m.hidePoweredByCT,f=m.serviceWorkerPath,p=m.httpsPopupPath,h=m.httpsIframePath,v=m.apnsWebPushId,g=m.apnsWebPushServiceUrl}}else t=e[0],n=e[1],i=e[2],r=e[3],o=e[4],a=e[5],s=e[6];if(null==a&&(a=!1),null==d&&(d=!1),null==f&&(f="/clevertap_sw.js"),void 0!==navigator.serviceWorker){var b=null!=p&&null!=h;if("https:"===window.location.protocol||"localhost"===document.location.hostname||b){if(-1!==navigator.userAgent.indexOf("Chrome")){var _=navigator.userAgent.match(/Chrome\/(\d+)/);if(null==_||parseInt(_[1],10)<50)return}else if(-1!==navigator.userAgent.indexOf("Firefox")){var w=navigator.userAgent.match(/Firefox\/(\d+)/);if(null==w||parseInt(w[1],10)<50)return}else{if(-1===navigator.userAgent.indexOf("Safari"))return;var k=navigator.userAgent.match(/Safari\/(\d+)/);if(null==k||parseInt(k[1],10)<50)return}if(!b){if(null==Notification)return;if("granted"===Notification.permission)return void S(this,Vn)[Vn](c,f,v,g);if("denied"===Notification.permission)return;if(a)return void S(this,Vn)[Vn](c,f,v,g)}if(t&&n&&i&&r){null!=o&&o.match(/^#[a-f\d]{6}$/i)||(o="#f28046");var A=(new Date).getTime()/1e3;if(null==Pe.getMetaProp("notif_last_time"))Pe.setMetaProp("notif_last_time",A);else{if(null==s&&(s=604800),A-Pe.getMetaProp("notif_last_time")<s)return;Pe.setMetaProp("notif_last_time",A)}if(b){var E=document.createElement("iframe");E.setAttribute("style","display:none;"),E.setAttribute("src",h),document.body.appendChild(E),window.addEventListener("message",(function(e){if(null!=e.data){var a={};try{a=JSON.parse(e.data)}catch(e){return}null!=a.state&&"ct"===a.from&&"not"===a.state&&(S(y,Hn)[Hn]().onload=function(){window.wzrkPermissionPopup.wizAlert({title:t,body:n,confirmButtonText:i,confirmButtonColor:o,rejectButtonText:r,hidePoweredByCT:d},(function(e){e?("function"==typeof u&&u(),window.open(p)):"function"==typeof l&&l(),S(y,Wn)[Wn]()}))})}}),!1)}else S(this,Hn)[Hn]().onload=function(){window.wzrkPermissionPopup.wizAlert({title:t,body:n,confirmButtonText:i,confirmButtonColor:o,rejectButtonText:r,hidePoweredByCT:d},(function(e){e?("function"==typeof u&&u(),S(y,Vn)[Vn](c,f,v,g)):"function"==typeof l&&l(),S(y,Wn)[Wn]()}))}}else S(this,Nn)[Nn].error("Missing input parameters; please specify title, body, ok button and cancel button text")}else S(this,Nn)[Nn].error("Make sure you are https or localhost to register for notifications")}},ni=b("logger"),ii=b("api"),ri=b("onloadcalled"),oi=b("device"),ai=b("session"),si=b("account"),ui=b("request"),li=b("isSpa"),ci=b("previousUrl"),di=b("boundCheckPageChanged"),fi=b("isWebPopUpSpamControlDisabled"),pi=b("processOldValues"),hi=b("checkPageChanged"),vi=b("pingRequest"),gi=b("isPingContinuous"),yi=b("overrideDSyncFlag"),mi=function(){function e(){var n,i,o,s,u=this,l=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};t(this,e),Object.defineProperty(this,yi,{value:ki}),Object.defineProperty(this,gi,{value:wi}),Object.defineProperty(this,vi,{value:_i}),Object.defineProperty(this,hi,{value:Si}),Object.defineProperty(this,pi,{value:bi}),Object.defineProperty(this,ni,{writable:!0,value:void 0}),Object.defineProperty(this,ii,{writable:!0,value:void 0}),Object.defineProperty(this,ri,{writable:!0,value:void 0}),Object.defineProperty(this,oi,{writable:!0,value:void 0}),Object.defineProperty(this,ai,{writable:!0,value:void 0}),Object.defineProperty(this,si,{writable:!0,value:void 0}),Object.defineProperty(this,ui,{writable:!0,value:void 0}),Object.defineProperty(this,li,{writable:!0,value:void 0}),Object.defineProperty(this,ci,{writable:!0,value:void 0}),Object.defineProperty(this,di,{writable:!0,value:S(this,hi)[hi].bind(this)}),Object.defineProperty(this,fi,{writable:!0,value:void 0}),this.enablePersonalization=void 0,this.popupCallbacks={},this.popupCurrentWzrkId="",S(this,ri)[ri]=0,this._isPersonalisationActive=this._isPersonalisationActive.bind(this),this.raiseNotificationClicked=function(){},S(this,ni)[ni]=new un(nn),S(this,si)[si]=new C(null===(n=l.account)||void 0===n?void 0:n[0],l.region||(null===(i=l.account)||void 0===i?void 0:i[1]),l.targetDomain||(null===(o=l.account)||void 0===o?void 0:o[2])),S(this,oi)[oi]=new xe({logger:S(this,ni)[ni]}),S(this,ai)[ai]=new hn({logger:S(this,ni)[ni],isPersonalisationActive:this._isPersonalisationActive}),S(this,ui)[ui]=new An({logger:S(this,ni)[ni],account:S(this,si)[si],device:S(this,oi)[oi],session:S(this,ai)[ai],isPersonalisationActive:this._isPersonalisationActive}),this.enablePersonalization=l.enablePersonalization||!1,this.event=new rt({logger:S(this,ni)[ni],request:S(this,ui)[ui],isPersonalisationActive:this._isPersonalisationActive},l.event),this.profile=new Dt({logger:S(this,ni)[ni],request:S(this,ui)[ui],account:S(this,si)[si],isPersonalisationActive:this._isPersonalisationActive},l.profile),this.onUserLogin=new Wt({request:S(this,ui)[ui],account:S(this,si)[si],session:S(this,ai)[ai],logger:S(this,ni)[ni],device:S(this,oi)[oi]},l.onUserLogin),this.privacy=new Rn({request:S(this,ui)[ui],account:S(this,si)[si],logger:S(this,ni)[ni]},l.privacy),this.notifications=new Gn({logger:S(this,ni)[ni],request:S(this,ui)[ui],account:S(this,si)[si]},l.notifications),S(this,ii)[ii]=new je({logger:S(this,ni)[ni],request:S(this,ui)[ui],device:S(this,oi)[oi],session:S(this,ai)[ai]}),this.spa=l.spa,this.dismissSpamControl=l.dismissSpamControl,this.user=new en({isPersonalisationActive:this._isPersonalisationActive}),this.session={getTimeElapsed:function(){return S(u,ai)[ai].getTimeElapsed()},getPageCount:function(){return S(u,ai)[ai].getPageCount()}},this.logout=function(){S(u,ni)[ni].debug("logout called"),Pe.setInstantDeleteFlagInK()},this.clear=function(){u.onUserLogin.clear()},this.getCleverTapID=function(){return S(u,oi)[oi].getGuid()},this.getAccountID=function(){return S(u,si)[si].id},this.getSCDomain=function(){return S(u,si)[si].finalTargetDomain},this.setSCSDKVersion=function(e){S(u,si)[si].scSDKVersion=e;var t={};t.af={scv:"sc-sdk-v"+S(u,si)[si].scSDKVersion};var n=S(u,si)[si].dataPostURL;n=st(n,"type","page"),n=st(n,"d",lt(JSON.stringify(t),S(u,ni)[ni])),S(u,ui)[ui].saveAndFireRequest(n,!1)},this.renderNotificationViewed=function(e){c(te,e)},this.renderNotificationClicked=function(e){c(ne,e)};var c=function(e,t){if(t&&t.msgId){var n={type:"event"};if(n.evtName=e,n.evtData=r({},ee,t.msgId),t.pivotId&&(n.evtData=a(a({},n.evtData),{},{wzrk_pivot:t.pivotId})),t.wzrk_slideNo&&(n.evtData=a(a({},n.evtData),{},{wzrk_slideNo:t.wzrk_slideNo})),t.kv&&null!==t.kv&&void 0!==t.kv)for(var i in t.kv)i.startsWith(X)&&(n.evtData=a(a({},n.evtData),{},r({},i,t.kv[i])));if(t.msgCTkv&&null!==t.msgCTkv&&void 0!==t.msgCTkv)for(var o in t.msgCTkv)o.startsWith(X)&&(n.evtData=a(a({},n.evtData),{},r({},o,t.msgCTkv[o])));S(u,ui)[ui].processEvent(n)}};this.setLogLevel=function(e){S(u,ni)[ni].logLevel=Number(e),3===e?sessionStorage.WZRK_D="":delete sessionStorage.WZRK_D},this.handleIncrementValue=function(e,t){u.profile._handleIncrementDecrementValue(e,t,oe)},this.handleDecrementValue=function(e,t){u.profile._handleIncrementDecrementValue(e,t,ae)},this.setMultiValuesForKey=function(e,t){Array.isArray(t)?u.profile._handleMultiValueSet(e,t,se):console.error("setMultiValuesForKey should be called with a value of type array")},this.addMultiValueForKey=function(e,t){"string"==typeof t||"number"==typeof t?u.profile._handleMultiValueAdd(e,t,ue):console.error("addMultiValueForKey should be called with a value of type string or number.")},this.addMultiValuesForKey=function(e,t){Array.isArray(t)?u.profile._handleMultiValueAdd(e,t,ue):console.error("addMultiValuesForKey should be called with a value of type array.")},this.removeMultiValueForKey=function(e,t){"string"==typeof t||"number"==typeof t?u.profile._handleMultiValueRemove(e,t,le):console.error("removeMultiValueForKey should be called with a value of type string or number.")},this.removeMultiValuesForKey=function(e,t){Array.isArray(t)?u.profile._handleMultiValueRemove(e,t,le):console.error("removeMultiValuesForKey should be called with a value of type array.")},this.removeValueForKey=function(e){u.profile._handleMultiValueDelete(e,ce)};var d=function(e,t,n){Pt(e,t,n,S(u,si)[si],S(u,ni)[ni])},f=S(this,ii)[ii];f.logout=this.logout,f.clear=this.clear,f.closeIframe=function(e,t){At(e,0,S(u,ai)[ai].sessionId)},f.enableWebPush=function(e,t){u.notifications._enableWebPush(e,t)},f.tr=function(e){Qt(e,{device:S(u,oi)[oi],session:S(u,ai)[ai],request:S(u,ui)[ui],logger:S(u,ni)[ni],isWebPopUpSpamControlDisabled:S(u,fi)[fi]})},f.setEnum=function(e){Et(e,S(u,ni)[ni])},f.is_onloadcalled=function(){return 1===S(u,ri)[ri]},f.subEmail=function(e){d("1",e)},f.getEmail=function(e,t){d("-1",e,t)},f.unSubEmail=function(e){d("0",e)},f.unsubEmailGroups=function(e){Oe.unsubGroups=[];for(var t=document.getElementsByClassName("ct-unsub-group-input-item"),n=0;n<t.length;n++){var i=t[n];if(i.name){var r={name:i.name,isUnsubscribed:i.checked};Oe.unsubGroups.push(r)}}d(Z,e)},f.setSubscriptionGroups=function(e){Oe.unsubGroups=e},f.getSubscriptionGroups=function(){return Oe.unsubGroups},f.changeSubscriptionGroups=function(e,t){f.setSubscriptionGroups(t),d(Z,e)},f.setUpdatedCategoryLong=function(e){e[Q]&&(Oe.updatedCategoryLong=e[Q])},window.$CLTP_WR=window.$WZRK_WR=f,(null===(s=l.account)||void 0===s?void 0:s[0].id)&&this.init()}return i(e,[{key:"spa",get:function(){return S(this,li)[li]},set:function(e){var t=!0===e;S(this,li)[li]!==t&&1===S(this,ri)[ri]&&(t?document.addEventListener("click",S(this,di)[di]):document.removeEventListener("click",S(this,di)[di])),S(this,li)[li]=t}},{key:"dismissSpamControl",get:function(){return S(this,fi)[fi]},set:function(e){var t=!0===e;S(this,fi)[fi]=t}}]),i(e,[{key:"init",value:function(e,t,n){if(1!==S(this,ri)[ri]){if(Pe.removeCookie("WZRK_P",window.location.hostname),!S(this,si)[si].id){if(!e)return void S(this,ni)[ni].error(qe);S(this,si)[si].id=e}S(this,ai)[ai].cookieName="WZRK_S_"+S(this,si)[si].id,t&&(S(this,si)[si].region=t),n&&(S(this,si)[si].targetDomain=n);var i=location.href,r=at(i.toLowerCase());void 0!==r.e&&"0"==r.wzrk_ex||(S(this,ui)[ui].processBackupEvents(),Oe.isPrivacyArrPushed=!0,Oe.privacyArray.length>0&&this.privacy.push(Oe.privacyArray),S(this,pi)[pi](),this.pageChanged(),S(this,li)[li]?document.addEventListener("click",S(this,di)[di]):document.removeEventListener("click",S(this,di)[di]),S(this,ri)[ri]=1)}}},{key:"pageChanged",value:function(){var e=this,t=window.location.href,n=at(t.toLowerCase()),i=S(this,ai)[ai].getSessionCookieObject(),r=void 0===i.p?0:i.p;i.p=++r,S(this,ai)[ai].setSessionCookieObject(i);var o={},a=function(e){if(""===e)return"";var t=document.createElement("a");return t.href=e,t.hostname}(document.referrer);if(window.location.hostname!==a){var s=120;""!==a&&(a=a.length>s?a.substring(0,s):a,o.referrer=a);var u=n.utm_source||n.wzrk_source;void 0!==u&&(u=u.length>s?u.substring(0,s):u,o.us=u);var l=n.utm_medium||n.wzrk_medium;void 0!==l&&(l=l.length>s?l.substring(0,s):l,o.um=l);var c=n.utm_campaign||n.wzrk_campaign;if(void 0!==c&&(c=c.length>s?c.substring(0,s):c,o.uc=c),void 0!==n.wzrk_medium){var d=n.wzrk_medium;d.match(/^email$|^social$|^search$/)&&(o.wm=d)}}(o=S(this,ui)[ui].addSystemDataToObject(o,void 0)).cpg=t,o[U]=bt();var f=S(this,si)[si].dataPostURL;S(this,ui)[ui].addFlags(o),1===parseInt(o.pg)&&S(this,yi)[yi](o),o.af={lib:"web-sdk-v1.3.3"},f=st(f,"type","page"),f=st(f,"d",lt(JSON.stringify(o),S(this,ni)[ni])),S(this,ui)[ui].saveAndFireRequest(f,!1),S(this,ci)[ci]=t,setTimeout((function(){r<=3&&S(e,vi)[vi](),S(e,gi)[gi]()&&setInterval((function(){S(e,vi)[vi]()}),3e5)}),12e4)}},{key:"_isPersonalisationActive",value:function(){return Pe._isLocalStorageSupported()&&this.enablePersonalization}},{key:"sendMultiValueData",value:function(e){var t={af:{}},n={};t.type="profile",null==n.tz&&(n.tz=(new Date).toString().match(/([A-Z]+[\+-][0-9]+)/)[1]),t.profile=n,e&&Object.keys(e).forEach((function(n){t.af[n]=e[n]})),t=S(this,ui)[ui].addSystemDataToProfileObject(t,void 0),S(this,ui)[ui].addFlags(t);var i=lt(JSON.stringify(t),S(this,ni)[ni]),r=S(this,si)[si].dataPostURL;r=st(r,"type",J),r=st(r,"d",i),S(this,ui)[ui].saveAndFireRequest(r,Oe.blockRequest)}},{key:"popupCallback",set:function(e){this.popupCallbacks[this.popupCurrentWzrkId]=e}}]),e}(),bi=function(){this.onUserLogin._processOldValues(),this.privacy._processOldValues(),this.event._processOldValues(),this.profile._processOldValues(),this.notifications._processOldValues()},Si=function(){S(this,ci)[ci]!==location.href&&this.pageChanged()},_i=function(){var e=S(this,si)[si].dataPostURL,t={};t=S(this,ui)[ui].addSystemDataToObject(t,void 0),e=st(e,"type","ping"),e=st(e,"d",lt(JSON.stringify(t),S(this,ni)[ni])),S(this,ui)[ui].saveAndFireRequest(e,!1)},wi=function(){return void 0!==window.wzrk_d&&"continuous"===window.wzrk_d.ping},ki=function(e){this._isPersonalisationActive()&&(e.dsync=!0)},Ai=new mi(window.clevertap);return window.clevertap=window.wizrocket=Ai,Ai}()},307:(e,t,n)=>{e=n.nmd(e);var i="__lodash_hash_undefined__",r=9007199254740991,o="[object Arguments]",a="[object Array]",s="[object Boolean]",u="[object Date]",l="[object Error]",c="[object Function]",d="[object Map]",f="[object Number]",p="[object Object]",h="[object Promise]",v="[object RegExp]",g="[object Set]",y="[object String]",m="[object WeakMap]",b="[object ArrayBuffer]",S="[object DataView]",_=/^\[object .+?Constructor\]$/,w=/^(?:0|[1-9]\d*)$/,k={};k["[object Float32Array]"]=k["[object Float64Array]"]=k["[object Int8Array]"]=k["[object Int16Array]"]=k["[object Int32Array]"]=k["[object Uint8Array]"]=k["[object Uint8ClampedArray]"]=k["[object Uint16Array]"]=k["[object Uint32Array]"]=!0,k[o]=k[a]=k[b]=k[s]=k[S]=k[u]=k[l]=k[c]=k[d]=k[f]=k[p]=k[v]=k[g]=k[y]=k[m]=!1;var A="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,E="object"==typeof self&&self&&self.Object===Object&&self,P=A||E||Function("return this")(),O=t&&!t.nodeType&&t,C=O&&e&&!e.nodeType&&e,I=C&&C.exports===O,T=I&&A.process,R=function(){try{return T&&T.binding&&T.binding("util")}catch(e){}}(),M=R&&R.isTypedArray;function D(e,t){for(var n=-1,i=null==e?0:e.length;++n<i;)if(t(e[n],n,e))return!0;return!1}function N(e){var t=-1,n=Array(e.size);return e.forEach((function(e,i){n[++t]=[i,e]})),n}function L(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}var j,U,x,F=Array.prototype,V=Function.prototype,q=Object.prototype,z=P["__core-js_shared__"],K=V.toString,H=q.hasOwnProperty,W=(j=/[^.]+$/.exec(z&&z.keys&&z.keys.IE_PROTO||""))?"Symbol(src)_1."+j:"",B=q.toString,G=RegExp("^"+K.call(H).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Y=I?P.Buffer:void 0,J=P.Symbol,$=P.Uint8Array,Z=q.propertyIsEnumerable,Q=F.splice,X=J?J.toStringTag:void 0,ee=Object.getOwnPropertySymbols,te=Y?Y.isBuffer:void 0,ne=(U=Object.keys,x=Object,function(e){return U(x(e))}),ie=Ce(P,"DataView"),re=Ce(P,"Map"),oe=Ce(P,"Promise"),ae=Ce(P,"Set"),se=Ce(P,"WeakMap"),ue=Ce(Object,"create"),le=Me(ie),ce=Me(re),de=Me(oe),fe=Me(ae),pe=Me(se),he=J?J.prototype:void 0,ve=he?he.valueOf:void 0;function ge(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var i=e[t];this.set(i[0],i[1])}}function ye(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var i=e[t];this.set(i[0],i[1])}}function me(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var i=e[t];this.set(i[0],i[1])}}function be(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new me;++t<n;)this.add(e[t])}function Se(e){var t=this.__data__=new ye(e);this.size=t.size}function _e(e,t){for(var n=e.length;n--;)if(De(e[n][0],t))return n;return-1}function we(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":X&&X in Object(e)?function(e){var t=H.call(e,X),n=e[X];try{e[X]=void 0;var i=!0}catch(e){}var r=B.call(e);return i&&(t?e[X]=n:delete e[X]),r}(e):function(e){return B.call(e)}(e)}function ke(e){return Ve(e)&&we(e)==o}function Ae(e,t,n,i,r){return e===t||(null==e||null==t||!Ve(e)&&!Ve(t)?e!=e&&t!=t:function(e,t,n,i,r,c){var h=Le(e),m=Le(t),_=h?a:Te(e),w=m?a:Te(t),k=(_=_==o?p:_)==p,A=(w=w==o?p:w)==p,E=_==w;if(E&&je(e)){if(!je(t))return!1;h=!0,k=!1}if(E&&!k)return c||(c=new Se),h||qe(e)?Ee(e,t,n,i,r,c):function(e,t,n,i,r,o,a){switch(n){case S:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case b:return!(e.byteLength!=t.byteLength||!o(new $(e),new $(t)));case s:case u:case f:return De(+e,+t);case l:return e.name==t.name&&e.message==t.message;case v:case y:return e==t+"";case d:var c=N;case g:var p=1&i;if(c||(c=L),e.size!=t.size&&!p)return!1;var h=a.get(e);if(h)return h==t;i|=2,a.set(e,t);var m=Ee(c(e),c(t),i,r,o,a);return a.delete(e),m;case"[object Symbol]":if(ve)return ve.call(e)==ve.call(t)}return!1}(e,t,_,n,i,r,c);if(!(1&n)){var P=k&&H.call(e,"__wrapped__"),O=A&&H.call(t,"__wrapped__");if(P||O){var C=P?e.value():e,I=O?t.value():t;return c||(c=new Se),r(C,I,n,i,c)}}return!!E&&(c||(c=new Se),function(e,t,n,i,r,o){var a=1&n,s=Pe(e),u=s.length;if(u!=Pe(t).length&&!a)return!1;for(var l=u;l--;){var c=s[l];if(!(a?c in t:H.call(t,c)))return!1}var d=o.get(e);if(d&&o.get(t))return d==t;var f=!0;o.set(e,t),o.set(t,e);for(var p=a;++l<u;){var h=e[c=s[l]],v=t[c];if(i)var g=a?i(v,h,c,t,e,o):i(h,v,c,e,t,o);if(!(void 0===g?h===v||r(h,v,n,i,o):g)){f=!1;break}p||(p="constructor"==c)}if(f&&!p){var y=e.constructor,m=t.constructor;y==m||!("constructor"in e)||!("constructor"in t)||"function"==typeof y&&y instanceof y&&"function"==typeof m&&m instanceof m||(f=!1)}return o.delete(e),o.delete(t),f}(e,t,n,i,r,c))}(e,t,n,i,Ae,r))}function Ee(e,t,n,i,r,o){var a=1&n,s=e.length,u=t.length;if(s!=u&&!(a&&u>s))return!1;var l=o.get(e);if(l&&o.get(t))return l==t;var c=-1,d=!0,f=2&n?new be:void 0;for(o.set(e,t),o.set(t,e);++c<s;){var p=e[c],h=t[c];if(i)var v=a?i(h,p,c,t,e,o):i(p,h,c,e,t,o);if(void 0!==v){if(v)continue;d=!1;break}if(f){if(!D(t,(function(e,t){if(a=t,!f.has(a)&&(p===e||r(p,e,n,i,o)))return f.push(t);var a}))){d=!1;break}}else if(p!==h&&!r(p,h,n,i,o)){d=!1;break}}return o.delete(e),o.delete(t),d}function Pe(e){return function(e,t,n){var i=t(e);return Le(e)?i:function(e,t){for(var n=-1,i=t.length,r=e.length;++n<i;)e[r+n]=t[n];return e}(i,n(e))}(e,ze,Ie)}function Oe(e,t){var n,i,r=e.__data__;return("string"==(i=typeof(n=t))||"number"==i||"symbol"==i||"boolean"==i?"__proto__"!==n:null===n)?r["string"==typeof t?"string":"hash"]:r.map}function Ce(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return function(e){return!(!Fe(e)||function(e){return!!W&&W in e}(e))&&(Ue(e)?G:_).test(Me(e))}(n)?n:void 0}ge.prototype.clear=function(){this.__data__=ue?ue(null):{},this.size=0},ge.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},ge.prototype.get=function(e){var t=this.__data__;if(ue){var n=t[e];return n===i?void 0:n}return H.call(t,e)?t[e]:void 0},ge.prototype.has=function(e){var t=this.__data__;return ue?void 0!==t[e]:H.call(t,e)},ge.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=ue&&void 0===t?i:t,this},ye.prototype.clear=function(){this.__data__=[],this.size=0},ye.prototype.delete=function(e){var t=this.__data__,n=_e(t,e);return!(n<0||(n==t.length-1?t.pop():Q.call(t,n,1),--this.size,0))},ye.prototype.get=function(e){var t=this.__data__,n=_e(t,e);return n<0?void 0:t[n][1]},ye.prototype.has=function(e){return _e(this.__data__,e)>-1},ye.prototype.set=function(e,t){var n=this.__data__,i=_e(n,e);return i<0?(++this.size,n.push([e,t])):n[i][1]=t,this},me.prototype.clear=function(){this.size=0,this.__data__={hash:new ge,map:new(re||ye),string:new ge}},me.prototype.delete=function(e){var t=Oe(this,e).delete(e);return this.size-=t?1:0,t},me.prototype.get=function(e){return Oe(this,e).get(e)},me.prototype.has=function(e){return Oe(this,e).has(e)},me.prototype.set=function(e,t){var n=Oe(this,e),i=n.size;return n.set(e,t),this.size+=n.size==i?0:1,this},be.prototype.add=be.prototype.push=function(e){return this.__data__.set(e,i),this},be.prototype.has=function(e){return this.__data__.has(e)},Se.prototype.clear=function(){this.__data__=new ye,this.size=0},Se.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},Se.prototype.get=function(e){return this.__data__.get(e)},Se.prototype.has=function(e){return this.__data__.has(e)},Se.prototype.set=function(e,t){var n=this.__data__;if(n instanceof ye){var i=n.__data__;if(!re||i.length<199)return i.push([e,t]),this.size=++n.size,this;n=this.__data__=new me(i)}return n.set(e,t),this.size=n.size,this};var Ie=ee?function(e){return null==e?[]:(e=Object(e),function(t,n){for(var i=-1,r=null==t?0:t.length,o=0,a=[];++i<r;){var s=t[i];u=s,Z.call(e,u)&&(a[o++]=s)}var u;return a}(ee(e)))}:function(){return[]},Te=we;function Re(e,t){return!!(t=null==t?r:t)&&("number"==typeof e||w.test(e))&&e>-1&&e%1==0&&e<t}function Me(e){if(null!=e){try{return K.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function De(e,t){return e===t||e!=e&&t!=t}(ie&&Te(new ie(new ArrayBuffer(1)))!=S||re&&Te(new re)!=d||oe&&Te(oe.resolve())!=h||ae&&Te(new ae)!=g||se&&Te(new se)!=m)&&(Te=function(e){var t=we(e),n=t==p?e.constructor:void 0,i=n?Me(n):"";if(i)switch(i){case le:return S;case ce:return d;case de:return h;case fe:return g;case pe:return m}return t});var Ne=ke(function(){return arguments}())?ke:function(e){return Ve(e)&&H.call(e,"callee")&&!Z.call(e,"callee")},Le=Array.isArray,je=te||function(){return!1};function Ue(e){if(!Fe(e))return!1;var t=we(e);return t==c||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}function xe(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=r}function Fe(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Ve(e){return null!=e&&"object"==typeof e}var qe=M?function(e){return function(t){return e(t)}}(M):function(e){return Ve(e)&&xe(e.length)&&!!k[we(e)]};function ze(e){return null!=(t=e)&&xe(t.length)&&!Ue(t)?function(e,t){var n=Le(e),i=!n&&Ne(e),r=!n&&!i&&je(e),o=!n&&!i&&!r&&qe(e),a=n||i||r||o,s=a?function(e,t){for(var n=-1,i=Array(e);++n<e;)i[n]=t(n);return i}(e.length,String):[],u=s.length;for(var l in e)!t&&!H.call(e,l)||a&&("length"==l||r&&("offset"==l||"parent"==l)||o&&("buffer"==l||"byteLength"==l||"byteOffset"==l)||Re(l,u))||s.push(l);return s}(e):function(e){if(n=(t=e)&&t.constructor,t!==("function"==typeof n&&n.prototype||q))return ne(e);var t,n,i=[];for(var r in Object(e))H.call(e,r)&&"constructor"!=r&&i.push(r);return i}(e);var t}e.exports=function(e,t){return Ae(e,t)}},600:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=i(n(749)),o=function(){function e(){this.argString="",this.argValues={}}return e.prototype.add=function(e,t){if(void 0===t)return this;this.argString&&(this.argString+="&");var n;return n=t instanceof Array?JSON.stringify(t):encodeURIComponent(t),this.argString+="".concat(e,"=").concat(n),this.argValues[e]=t,this},e.prototype.body=function(e){return e?(this._body=e,this):this._body},e.prototype.attachApiKeys=function(e,t){return this.add(r.default.PARAMS.APP_ID,e).add(r.default.PARAMS.CLIENT,r.default.CLIENT).add(r.default.PARAMS.CLIENT_KEY,t)},e.prototype.build=function(){return this.argString},e.prototype.buildDict=function(){return this.argValues},e}();t.default=o},266:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e){this.browser=this.searchString(this.getBrowserData(e))||"Unknown Browser",this.version=this.searchVersion(e.navigator.userAgent)||this.searchVersion(e.navigator.appVersion)||"Unknown Version",this.OS=this.searchString(this.getOSData(e))||"Unknown OS"}return e.prototype.searchString=function(e){for(var t=0;t<e.length;t++){var n=e[t].string,i=e[t].prop;if(this.versionSearchString=e[t].versionSearch||e[t].identity,n){if(-1!==n.indexOf(e[t].subString))return e[t].identity}else if(i)return e[t].identity}},e.prototype.searchVersion=function(e){if(e){var t=e.indexOf(this.versionSearchString);if(-1!==t)return parseFloat(e.substring(t+this.versionSearchString.length+1))}},e.prototype.getBrowserData=function(e){return[{string:e.navigator.userAgent,subString:"Chrome",identity:"Chrome"},{string:e.navigator.userAgent,subString:"OmniWeb",identity:"OmniWeb",versionSearch:"OmniWeb/"},{string:e.navigator.userAgent,subString:"CriOS",identity:"Chrome",versionSearch:"CriOS"},{string:e.navigator.userAgent,subString:"FxiOS",identity:"Firefox",versionSearch:"FxiOS"},{string:e.navigator.vendor,subString:"Apple",identity:"Safari",versionSearch:"Version"},{prop:e.opera,identity:"Opera",versionSearch:"Version"},{string:e.navigator.vendor,subString:"iCab",identity:"iCab"},{string:e.navigator.vendor,subString:"KDE",identity:"Konqueror"},{string:e.navigator.userAgent,subString:"Firefox",identity:"Firefox"},{string:e.navigator.vendor,subString:"Camino",identity:"Camino"},{string:e.navigator.userAgent,subString:"Netscape",identity:"Netscape"},{string:e.navigator.userAgent,subString:"MSIE",identity:"Explorer",versionSearch:"MSIE"},{string:e.navigator.userAgent,subString:"Android",identity:"Android Browser",versionSearch:"Version"},{string:e.navigator.userAgent,subString:"Gecko",identity:"Mozilla",versionSearch:"rv"},{string:e.navigator.userAgent,subString:"Mozilla",identity:"Netscape",versionSearch:"Mozilla"}]},e.prototype.getOSData=function(e){return[{string:e.navigator.platform,subString:"Win",identity:"Windows"},{string:e.navigator.platform,subString:"Mac",identity:"Mac OS"},{string:e.navigator.platform,subString:"iPad",identity:"iOS"},{string:e.navigator.userAgent,subString:"iPhone",identity:"iOS"},{string:e.navigator.userAgent,subString:"Android",identity:"Android"},{string:e.navigator.platform,subString:"Linux",identity:"Linux"}]},e}();t.default=n},749:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={METHODS:{START:"start",STOP:"stop",ADVANCE:"advance",TRACK:"track",PAUSE_SESSION:"pauseSession",RESUME_SESSION:"resumeSession",PAUSE_STATE:"pauseState",RESUME_STATE:"resumeState",DOWNLOAD_FILE:"downloadFile",MULTI:"multi",SET_VARS:"setVars",GET_VARS:"getVars",SET_USER_ATTRIBUTES:"setUserAttributes",SET_DEVICE_ATTRIBUTES:"setDeviceAttributes",UPLOAD_FILE:"uploadFile",REGISTER_DEVICE:"registerDevice"},SDK_VERSION:"1.11.0-develop.2",CLIENT:"js",PARAMS:{ACTION:"action",APP_ID:"appId",CLIENT:"client",CLIENT_KEY:"clientKey",CT:"ct",CURRENCY_CODE:"currencyCode",DEVICE_ID:"deviceId",SDK_VERSION:"sdkVersion",USER_ID:"userId",NEW_USER_ID:"newUserId",DEV_MODE:"devMode",VERSION_NAME:"versionName",SYSTEM_NAME:"systemName",SYSTEM_VERSION:"systemVersion",BROWSER_NAME:"browserName",BROWSER_VERSION:"browserVersion",DEVICE_NAME:"deviceName",DEVICE_MODEL:"deviceModel",USER_ATTRIBUTES:"userAttributes",LOCALE:"locale",COUNTRY:"country",REGION:"region",CITY:"city",LOCATION:"location",STATE:"state",INFO:"info",EVENT:"event",VALUE:"value",FILENAME:"filename",TIME:"time",DATA:"data",VARS:"vars",FILE:"file",SIZE:"size",VARIATION:"variation",HASH:"hash",EMAIL:"email",VARIABLES:"vars",ACTION_DEFINITIONS:"actionDefinitions",PARAMS:"params",INCLUDE_DEFAULTS:"includeDefaults",INCLUDE_VARIANT_DEBUG_INFO:"includeVariantDebugInfo",NEWSFEED_MESSAGES:"newsfeedMessages",MESSAGE_ID:"messageId",WEB_PUSH_SUBSCRIPTION:"webPushSubscription"},KEYS:{IS_REGISTERED:"isRegistered",LATEST_VERSION:"latestVersion",SYNC_INBOX:"syncNewsfeed",MESSAGES:"messages",VARS:"vars",VARIANTS:"variants",VARIANT_DEBUG_INFO:"variantDebugInfo",ACTION_DEFINITIONS:"actionDefinitions",TOKEN:"token"},DEFAULT_KEYS:{COUNT:"__leanplum_unsynced",ITEM:"__leanplum_unsynced_",VARIABLES:"__leanplum_variables",VARIANTS:"__leanplum_variants",VARIANT_DEBUG_INFO:"__leanplum_variant_debug_info",ACTION_DEFINITIONS:"__leanplum_action_definitions",HOST_CONFIG:"__leanplum_hosts",INBOX_MESSAGES:"__leanplum_inbox_messages",TOKEN:"__leanplum_token",DEVICE_ID:"__leanplum_device_id",USER_ID:"__leanplum_user_id",SESSION:"__leanplum_session",MESSAGE_OCCURRENCES:"__leanplum_message_occurrences",MESSAGE_CACHE:"__leanplum_message_cache",MIGRATION_STATE:"__leanplum_migration_state",PUSH_SUBSCRIPTION:"__leanplum_push_subscription"},VALUES:{DETECT:"(detect)",DEFAULT_PUSH_ACTION:"Open action"}}},565:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this.handlers=[]}return e.prototype.on=function(e,t){this.handlers.push({eventName:e,callback:t})},e.prototype.off=function(e,t){this.handlers=this.handlers.filter((function(n){return n.eventName!==e||n.callback!==t}))},e.prototype.emit=function(e,t){this.handlers.forEach((function(n){n.eventName===e&&n.callback(t)}))},e}();t.default=n},157:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this.startHandlers=[],this.devMode=!1,this.hasStarted=!1,this.startSuccessful=!1,this.variantDebugInfoEnabled=!1}return e.prototype.addStartResponseHandler=function(e){this.startHandlers.push(e),this.hasStarted&&e(this.startSuccessful)},e.prototype.removeStartResponseHandler=function(e){var t=this.startHandlers.indexOf(e);t>=0&&this.startHandlers.splice(t,1)},e.prototype.triggerStartHandlers=function(){for(var e=0;e<this.startHandlers.length;e++)this.startHandlers[e](this.startSuccessful)},e}();t.default=n},876:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=i(n(749)),o=i(n(642)),a=function(){function e(){}return e.setApiPath=function(t){e._lp.setApiPath(t)},e.setEmail=function(){},e.setNetworkTimeout=function(t){e._lp.setNetworkTimeout(t)},e.setAppIdForDevelopmentMode=function(t,n){e._lp.setAppIdForDevelopmentMode(t,n)},e.setAppIdForProductionMode=function(t,n){e._lp.setAppIdForProductionMode(t,n)},e.setSocketHost=function(t){e._lp.setSocketHost(t)},e.setDeviceId=function(t){e._lp.setDeviceId(t)},e.setLocale=function(t){e._lp.setLocale(t)},e.setAppVersion=function(t){e._lp.setAppVersion(t)},e.setDeviceName=function(t){e._lp.setDeviceName(t)},e.setDeviceModel=function(t){e._lp.setDeviceModel(t)},e.setRequestBatching=function(t,n){e._lp.setRequestBatching(t,n)},e.setSystemName=function(t){e._lp.setSystemName(t)},e.setSystemVersion=function(t){e._lp.setSystemVersion(t)},e.setVariables=function(t){e._lp.setVariables(t)},e.setVariantDebugInfoEnabled=function(t){e._lp.setVariantDebugInfoEnabled(t)},e.enableRichInAppMessages=function(t){e._lp.enableRichInAppMessages(t)},e.processMessageEvent=function(t,n){e._lp.processMessageEvent(t,n)},e.getVariantDebugInfo=function(){return e._lp.getVariantDebugInfo()},e.getVariables=function(){return e._lp.getVariables()},e.getVariable=function(){for(var t,n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];return(t=e._lp).getVariable.apply(t,n)},e.getVariants=function(){return e._lp.getVariants()},e.inbox=function(){return e._lp.inbox()},e.addStartResponseHandler=function(t){e._lp.addStartResponseHandler(t)},e.removeStartResponseHandler=function(t){e._lp.removeStartResponseHandler(t)},e.addVariablesChangedHandler=function(t){e._lp.addVariablesChangedHandler(t)},e.removeVariablesChangedHandler=function(t){e._lp.removeVariablesChangedHandler(t)},e.forceContentUpdate=function(t){e._lp.forceContentUpdate(t)},e.useSessionLength=function(t){e._lp.useSessionLength(t)},e.start=function(t,n,i){e._lp.start(t,n,i)},e.startFromCache=function(t,n,i){e._lp.startFromCache(t,n,i)},e.stop=function(){e._lp.stop()},e.pauseSession=function(){e._lp.pauseSession()},e.resumeSession=function(){e._lp.resumeSession()},e.pauseState=function(){e._lp.pauseState()},e.resumeState=function(){e._lp.resumeState()},e.getUserId=function(){return this._lp.getUserId()},e.setUserId=function(t){e.setUserAttributes(t)},e.setUserAttributes=function(t,n){e._lp.setUserAttributes(t,n)},e.track=function(t,n,i,r){e._lp.track(t,n,i,r)},e.trackPurchase=function(t,n,i,r){void 0===r&&(r="Purchase"),e._lp.trackPurchase(t,n,i,r)},e.advanceTo=function(t,n,i){e._lp.advanceTo(t,n,i)},e.isWebPushSupported=function(){return e._lp.isWebPushSupported()},e.isWebPushSubscribed=function(){return e._lp.isWebPushSubscribed()},e.setWebPushOptions=function(t){return e._lp.setWebPushOptions(t)},e.registerForWebPush=function(t){return e._lp.registerForWebPush(t)},e.unregisterFromWebPush=function(){return e._lp.unregisterFromWebPush()},e.clearUserContent=function(){e._lp.clearUserContent()},e.defineAction=function(t){e._lp.defineAction(t)},e.applyQueue=function(t){e._lp.applyQueue(t)},e.on=function(t,n){e._lp.on(t,n)},e.off=function(t,n){e._lp.off(t,n)},e.getFileUrl=function(t){return e._lp.getFileUrl(t)},e.__destroy=function(){this._lp=new o.default(window)},e._lp=new o.default(window),e.VERSION=r.default.SDK_VERSION,e}();t.default=a},234:function(e,t,n){"use strict";var i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},i.apply(this,arguments)},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.LeanplumInboxMessage=void 0;var o=r(n(600)),a=r(n(749)),s=r(n(88)),u=function(e){return Object.keys(e).map((function(t){return e[t]}))},l=function(){function e(e,t){this.createRequest=e,this.onAction=t,this.messageMap={},this.changeHandlers=[],this.load()}return e.prototype.downloadMessages=function(){var e=this;this.createRequest("getNewsfeedMessages",void 0,{queued:!0,sendNow:!0,response:function(t){var n=null==t?void 0:t.response[0];n&&n.newsfeedMessages&&(e.messageMap=n.newsfeedMessages,e.triggerChangeHandlers())}})},e.prototype.markAsRead=function(e){var t=this.messageMap[e];if(t&&!t.isRead){t.isRead=!0,this.triggerChangeHandlers();var n=new o.default;n.add("newsfeedMessageId",e),this.createRequest("markNewsfeedMessageAsRead",n,{})}},e.prototype.read=function(e){this.markAsRead(e);var t=this.message(e),n=e.split("##")[0],i=(null==t?void 0:t.openAction())||null;this.onAction(n,i)},e.prototype.remove=function(e){if(this.messageMap[e]){delete this.messageMap[e],this.triggerChangeHandlers();var t=new o.default;t.add("newsfeedMessageId",e),this.createRequest("deleteNewsfeedMessage",t,{})}},e.prototype.onChanged=function(e){this.changeHandlers.push(e)},e.prototype.triggerChangeHandlers=function(){this.changeHandlers.forEach((function(e){return e()})),this.save()},e.prototype.save=function(){s.default.save(a.default.DEFAULT_KEYS.INBOX_MESSAGES,JSON.stringify(this.messageMap),"session")},e.prototype.load=function(){var e=s.default.get(a.default.DEFAULT_KEYS.INBOX_MESSAGES,"session");try{this.messageMap=JSON.parse(e)||{}}catch(e){this.messageMap={}}},e.prototype.count=function(){return u(this.messageMap).length},e.prototype.unreadCount=function(){return u(this.messageMap).filter((function(e){return!e.isRead})).length},e.prototype.messages=function(e){var t=[];for(var n in this.messageMap){var i=this.messageMap[n];e(i)&&t.push(c.create(n,i))}return t},e.prototype.allMessages=function(){return this.messages((function(){return!0}))},e.prototype.unreadMessages=function(){return this.messages((function(e){return!e.isRead}))},e.prototype.messageIds=function(){return Object.keys(this.messageMap)},e.prototype.message=function(e){var t=this.messageMap[e];return t?c.create(e,t):null},e}();t.default=l;var c=function(){function e(e,t,n,i,r,o,a,s){this._id=e,this._title=t,this._subtitle=n,this._data=i,this._timestamp=r,this._isRead=o,this._imageUrl=a,this._openAction=s}return e.create=function(t,n){var r,o,s,u,l,c,d,f,p,h,v,g=null===(r=n.messageData)||void 0===r?void 0:r.parentCampaignId,y=i(i({},null===(s=null===(o=n.messageData)||void 0===o?void 0:o.vars)||void 0===s?void 0:s[a.default.VALUES.DEFAULT_PUSH_ACTION]),{parentCampaignId:g});return new e(t,null===(l=null===(u=n.messageData)||void 0===u?void 0:u.vars)||void 0===l?void 0:l.Title,null===(d=null===(c=n.messageData)||void 0===c?void 0:c.vars)||void 0===d?void 0:d.Subtitle,null===(p=null===(f=n.messageData)||void 0===f?void 0:f.vars)||void 0===p?void 0:p.Data,n.deliveryTimestamp,n.isRead,null===(v=null===(h=n.messageData)||void 0===h?void 0:h.vars)||void 0===v?void 0:v.Image,y)},e.prototype.id=function(){return this._id},e.prototype.title=function(){return this._title},e.prototype.subtitle=function(){return this._subtitle},e.prototype.data=function(){return this._data},e.prototype.timestamp=function(){return this._timestamp},e.prototype.isRead=function(){return this._isRead},e.prototype.imageUrl=function(){return this._imageUrl},e.prototype.openAction=function(){return this._openAction},e}();t.LeanplumInboxMessage=c},642:function(e,t,n){"use strict";var i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},i.apply(this,arguments)},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(600)),a=r(n(266)),s=r(n(749)),u=r(n(157)),l=r(n(234)),c=r(n(343)),d=r(n(34)),f=r(n(88)),p=r(n(95)),h=r(n(14)),v=r(n(565)),g=r(n(316)),y=n(772),m=n(205),b=r(n(816)),S=s.default.DEFAULT_KEYS.SESSION,_=function(){function e(e){var t=this;this.wnd=e,this._migration=new g.default(this.createRequest.bind(this)),this._events=new v.default,this._internalState=new u.default,this._lpInbox=new l.default(this.createRequest.bind(this),this.onInboxAction.bind(this)),this._lpRequest=new c.default(this._events),this._varCache=new b.default(this.createRequest.bind(this)),this._lpSocket=new d.default(this._varCache,this.createRequest.bind(this),this._lpRequest.getLastResponse.bind(this._lpRequest),this._events),this._pushManager=new p.default(this._events,this.createRequest.bind(this)),this._messages=new h.default(this._events,this.createRequest.bind(this),this.getFileUrl.bind(this)),this._browserDetector=new a.default(e),this._events.on("navigationChange",(function(e){var n=!1;t._events.emit("openUrl",{preventDefault:function(){return n=!0},url:e}),n||t.wnd.location.assign(e)})),this._events.on("registerForPush",(function(){return t.registerForWebPush()})),this._events.on("updateDevServerHost",(function(e){return t.setSocketHost(e)})),this._events.on("migrateStateReceived",(function(e){return t._migration.verifyState(e)})),this._events.on("webPushSubscribed",(function(){var e,n=null===(e=t._webPushOptions)||void 0===e?void 0:e.serviceWorkerUrl,r=n?{serviceWorkerPath:n}:{};t._ct&&t._ct.notifications.push(i({titleText:"",bodyText:"",okButtonText:"",rejectButtonText:""},r))}))}return e.prototype.setApiPath=function(e){this._lpRequest.apiPath&&(this._lpRequest.apiPath=e)},e.prototype.setNetworkTimeout=function(e){this._lpRequest.setNetworkTimeout(e),this._lpSocket.setNetworkTimeout(e)},e.prototype.setAppIdForDevelopmentMode=function(e,t){this._lpRequest.appId=e,this._lpRequest.clientKey=t,this._internalState.devMode=!0},e.prototype.setAppIdForProductionMode=function(e,t){this._lpRequest.appId=e,this._lpRequest.clientKey=t,this._internalState.devMode=!1},e.prototype.setSocketHost=function(e){this._lpSocket.setSocketHost(e)},e.prototype.setDeviceId=function(e){this._lpRequest.deviceId=e},e.prototype.setLocale=function(e){this._locale=e},e.prototype.setAppVersion=function(e){this._lpRequest.versionName=e},e.prototype.setDeviceName=function(e){this._deviceName=e},e.prototype.setDeviceModel=function(e){this._deviceModel=e},e.prototype.setRequestBatching=function(e,t){this._lpRequest.batchEnabled=e,this._lpRequest.batchCooldown=t},e.prototype.setSystemName=function(e){this._systemName=e},e.prototype.setSystemVersion=function(e){this._systemVersion=e},e.prototype.setVariables=function(e){this._varCache.setVariables(e)},e.prototype.setVariantDebugInfoEnabled=function(e){this._internalState.variantDebugInfoEnabled=e},e.prototype.enableRichInAppMessages=function(e){this._messages.enableRichInAppMessages(e)},e.prototype.processMessageEvent=function(e,t){this._messages.processMessageEvent(e,t)},e.prototype.getVariantDebugInfo=function(){return this._varCache.getVariantDebugInfo()},e.prototype.getVariables=function(){return this._varCache.getVariables()},e.prototype.getVariable=function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return(e=this._varCache).getVariable.apply(e,t)},e.prototype.getVariants=function(){return this._varCache.variants||[]},e.prototype.inbox=function(){return this._lpInbox},e.prototype.on=function(e,t){this._events.on(e,t)},e.prototype.off=function(e,t){this._events.off(e,t)},e.prototype.onInboxAction=function(e,t){var n=this;this._messages.trackMessage(e,{event:"Open"},(function(){return t&&n._messages.onAction(t)}))},e.prototype.defineAction=function(e){this._varCache.registerActionDefinition(i({kind:y.MessageKind.Template},e))},e.prototype.addStartResponseHandler=function(e){this._internalState.addStartResponseHandler(e)},e.prototype.removeStartResponseHandler=function(e){this._internalState.removeStartResponseHandler(e)},e.prototype.addVariablesChangedHandler=function(e){this._varCache.addVariablesChangedHandler(e)},e.prototype.removeVariablesChangedHandler=function(e){this._varCache.removeVariablesChangedHandler(e)},e.prototype.getFileUrl=function(e){return this._lpRequest.getFileUrl(e)},e.prototype.forceContentUpdate=function(e){var t=this,n=(new o.default).add(s.default.PARAMS.INCLUDE_DEFAULTS,!1).add(s.default.PARAMS.INCLUDE_VARIANT_DEBUG_INFO,this._internalState.variantDebugInfoEnabled);this.createRequest(s.default.METHODS.GET_VARS,n,{queued:!1,sendNow:!0,response:function(n){var i=t._lpRequest.getLastResponse(n),r=t._lpRequest.isResponseSuccess(i);r&&(t._varCache.applyDiffs(i[s.default.KEYS.VARS],i[s.default.KEYS.VARIANTS],i[s.default.KEYS.ACTION_DEFINITIONS]),t._varCache.setVariantDebugInfo(i[s.default.KEYS.VARIANT_DEBUG_INFO]),t._events.emit("messagesReceived",i[s.default.KEYS.MESSAGES])),e&&e(r)}})},e.prototype.useSessionLength=function(e){this._sessionLength=e},e.prototype.start=function(e,t,n){var i=this;if("function"==typeof e?(n=e,t={},e=null):"object"==typeof e&&null!=e?(n=t,t=e,e=null):"function"==typeof t&&(n=t,t={}),this.hasActiveSession()&&!this._internalState.devMode)return this.startFromCache(e,t,n);this._migration.getState((function(r){r===m.MigrationState.DUPLICATE?(i._ct=i._migration.initCleverTap(),i.isWebPushSubscribed().then((function(e){e&&i._events.emit("webPushSubscribed")}))):r===m.MigrationState.CLEVERTAP&&(i._ct=i._migration.initCleverTap(),Object.values(s.default.DEFAULT_KEYS).filter((function(e){return![s.default.DEFAULT_KEYS.USER_ID,s.default.DEFAULT_KEYS.DEVICE_ID,s.default.DEFAULT_KEYS.TOKEN].includes(e)})).forEach((function(e){return f.default.remove(e)}))),i._lpRequest.userId=e,n&&i.addStartResponseHandler(n),i._varCache.onUpdate=function(){i._varCache.triggerVariablesChangedHandlers()};var a=(new o.default).add(s.default.PARAMS.USER_ATTRIBUTES,JSON.stringify(t)).add(s.default.PARAMS.COUNTRY,s.default.VALUES.DETECT).add(s.default.PARAMS.REGION,s.default.VALUES.DETECT).add(s.default.PARAMS.CITY,s.default.VALUES.DETECT).add(s.default.PARAMS.LOCATION,s.default.VALUES.DETECT).add(s.default.PARAMS.SYSTEM_NAME,i._systemName||i._browserDetector.OS).add(s.default.PARAMS.SYSTEM_VERSION,(i._systemVersion||"").toString()).add(s.default.PARAMS.BROWSER_NAME,i._browserDetector.browser).add(s.default.PARAMS.BROWSER_VERSION,i._browserDetector.version.toString()).add(s.default.PARAMS.LOCALE,i._locale||s.default.VALUES.DETECT).add(s.default.PARAMS.DEVICE_NAME,i._deviceName||"".concat(i._browserDetector.browser," ").concat(i._browserDetector.version)).add(s.default.PARAMS.DEVICE_MODEL,i._deviceModel||"Web Browser").add(s.default.PARAMS.NEWSFEED_MESSAGES,i._lpInbox.messageIds()).add(s.default.PARAMS.INCLUDE_DEFAULTS,!1).add(s.default.PARAMS.INCLUDE_VARIANT_DEBUG_INFO,i._internalState.variantDebugInfoEnabled);i.createRequest(s.default.METHODS.START,a,{queued:!0,sendNow:!0,response:function(e){i._internalState.hasStarted=!0;var t=i._lpRequest.getLastResponse(e),n=i._lpRequest.isResponseSuccess(t);if(i._internalState.startSuccessful=n,n){i.updateSession();var r=t[s.default.KEYS.MESSAGES];if(t.actionDefinitions&&(r.actionDefinitions=t.actionDefinitions),i._events.emit("messagesReceived",r),t[s.default.KEYS.SYNC_INBOX]&&i._lpInbox.downloadMessages(),i._internalState.devMode){var o=t[s.default.KEYS.LATEST_VERSION];o&&console.log("A newer version of the Leanplum SDK, ".concat(o,', is available.\n  Use "npm update leanplum-sdk" or go to https://docs.leanplum.com/reference#javascript-setup to download it.')),i.connectSocket()}i._varCache.applyDiffs(t[s.default.KEYS.VARS],t[s.default.KEYS.VARIANTS],t[s.default.KEYS.ACTION_DEFINITIONS]),i._varCache.setVariantDebugInfo(t[s.default.KEYS.VARIANT_DEBUG_INFO]),i._varCache.token=t[s.default.KEYS.TOKEN]}else i._varCache.loadDiffs();i._events.emit("start",{success:n}),i._internalState.triggerStartHandlers()}})}))},e.prototype.startFromCache=function(e,t,n){"function"==typeof e?(n=e,t={},e=null):"object"==typeof e&&null!=e?(n=t,t=e,e=null):"function"==typeof t&&(n=t,t={}),this.updateSession(),this._lpRequest.userId=e,n&&this.addStartResponseHandler(n),this._internalState.hasStarted=!0,this._internalState.startSuccessful=!0,this._internalState.devMode&&this.connectSocket(),this._varCache.loadDiffs(),this._events.emit("resume"),this._internalState.triggerStartHandlers()},e.prototype.stop=function(){this.createRequest(s.default.METHODS.STOP,void 0,{sendNow:!0,queued:!0,response:function(){f.default.remove(S)}})},e.prototype.pauseSession=function(){this.createRequest(s.default.METHODS.PAUSE_SESSION,void 0,{sendNow:!0,queued:!0})},e.prototype.resumeSession=function(){this._events.emit("resume"),this.createRequest(s.default.METHODS.RESUME_SESSION,void 0,{sendNow:!0,queued:!0})},e.prototype.pauseState=function(){this.createRequest(s.default.METHODS.PAUSE_STATE,void 0,{queued:!0})},e.prototype.resumeState=function(){this.createRequest(s.default.METHODS.RESUME_STATE,void 0,{queued:!0})},e.prototype.getUserId=function(){return this._lpRequest.userId},e.prototype.setUserId=function(e){this.setUserAttributes(e)},e.prototype.setUserAttributes=function(e,t){if(void 0===t)if("object"==typeof e)t=e,e=void 0;else if("string"!=typeof e)return void console.log("Leanplum: setUserAttributes expects a string or an object");var n=(new o.default).add(s.default.PARAMS.USER_ATTRIBUTES,t?JSON.stringify(t):void 0).add(s.default.PARAMS.NEW_USER_ID,e);this._events.emit("setUserAttribute",t),this.createRequest(s.default.METHODS.SET_USER_ATTRIBUTES,n,{queued:!0}),e&&(this._lpRequest.userId=e,f.default.save(s.default.DEFAULT_KEYS.USER_ID,this._lpRequest.userId))},e.prototype.track=function(e,t,n,i){var r=this;"object"==typeof t&&null!=t?(i=t,n=void 0,t=void 0):"string"==typeof t?(i=n,n=t,t=void 0):"object"==typeof n&&null!=n&&(i=n,n=void 0);var a=(new o.default).add(s.default.PARAMS.EVENT,e).add(s.default.PARAMS.VALUE,t||0).add(s.default.PARAMS.INFO,n).add(s.default.PARAMS.PARAMS,JSON.stringify(i));this._events.emit("track",{eventName:e,params:i}),this.createRequest(s.default.METHODS.TRACK,a,{queued:!0,response:function(){return r.updateSession()}})},e.prototype.trackPurchase=function(e,t,n,i){void 0===i&&(i="Purchase");var r=(new o.default).add(s.default.PARAMS.EVENT,i).add(s.default.PARAMS.VALUE,e||0).add(s.default.PARAMS.PARAMS,JSON.stringify(n));t&&r.add(s.default.PARAMS.CURRENCY_CODE,t),this._events.emit("track",{eventName:i}),this.createRequest(s.default.METHODS.TRACK,r,{queued:!0,isPurchase:!0})},e.prototype.advanceTo=function(e,t,n){"object"==typeof t&&null!=t&&(n=t,t=void 0);var i=(new o.default).add(s.default.PARAMS.STATE,e).add(s.default.PARAMS.INFO,t).add(s.default.PARAMS.PARAMS,JSON.stringify(n));this._events.emit("advanceState",{state:e,params:n}),this.createRequest(s.default.METHODS.ADVANCE,i,{queued:!0})},e.prototype.isWebPushSupported=function(){return this._pushManager.isWebPushSupported()},e.prototype.isWebPushSubscribed=function(){var e,t=(null===(e=this._webPushOptions)||void 0===e?void 0:e.clientUrl)||"";return this._pushManager.isWebPushSubscribed(t)},e.prototype.setWebPushOptions=function(e){this._webPushOptions=i({},e)},e.prototype.registerForWebPush=function(e){var t=this;if(this._pushManager.isWebPushSupported()){var n=this._webPushOptions||{},i=e||n.serviceWorkerUrl,r=n&&n.scope?{scope:n.scope}:null;return this._pushManager.register(i,r,(function(e){return e?Promise.resolve(!0):t._pushManager.subscribeUser()}))}return Promise.reject("Leanplum: WebPush is not supported.")},e.prototype.unregisterFromWebPush=function(){var e,t=(null===(e=this._webPushOptions)||void 0===e?void 0:e.clientUrl)||"";return this._pushManager.unsubscribeUser(t)},e.prototype.clearUserContent=function(){this._varCache.clearUserContent()},e.prototype.applyQueue=function(e){var t=this;e.forEach((function(e){return t[e.name].apply(t,e.args)}))},e.prototype.createRequest=function(e,t,n){void 0===n&&(n={}),this._migration.duplicateRequest(e,t,n)||this._lpRequest.request(e,t,i({devMode:this._internalState.devMode},n))},e.prototype.connectSocket=function(){this._lpSocket.connect({appId:this._lpRequest.appId,deviceId:this._lpRequest.deviceId})},e.prototype.hasActiveSession=function(){if(!this._sessionLength)return!1;var e=Date.now(),t=parseInt(f.default.get(S));return!isNaN(t)&&e-t<1e3*this._sessionLength},e.prototype.updateSession=function(){f.default.save(S,String(Date.now()))},e}();t.default=_},343:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=i(n(600)),o=i(n(749)),a=i(n(88)),s=i(n(967)),u=function(){function e(e,t){void 0===t&&(t=new s.default),this.events=e,this.network=t,this.cooldownTimeout=null,this.lastRequestTime=void 0,this.userIdValue=void 0,this.apiPath="https://api.leanplum.com/api",this.batchCooldown=5,this.batchEnabled=!0,this.loadHostConfig()}return Object.defineProperty(e.prototype,"userId",{get:function(){var e,t;return null!==(t=null!==(e=this.userIdValue)&&void 0!==e?e:this.loadLocal(o.default.DEFAULT_KEYS.USER_ID))&&void 0!==t?t:this.deviceId},set:function(e){this.userIdValue=e},enumerable:!1,configurable:!0}),e.prototype.request=function(e,t,n){var i=this;if(void 0===n&&(n={}),n=n||{},t=t||new r.default,this.deviceId||(this.deviceId=this.loadLocal(o.default.DEFAULT_KEYS.DEVICE_ID)),!this.deviceId){for(var a="",s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",u=0;u<16;u++)a+=s.charAt(Math.floor(Math.random()*s.length));this.deviceId=a,this.saveLocal(o.default.DEFAULT_KEYS.DEVICE_ID,a)}this.saveLocal(o.default.DEFAULT_KEYS.USER_ID,this.userId);var l=t.attachApiKeys(this.appId,this.clientKey).add(o.default.PARAMS.SDK_VERSION,o.default.SDK_VERSION).add(o.default.PARAMS.DEVICE_ID,this.deviceId).add(o.default.PARAMS.USER_ID,this.userId).add(o.default.PARAMS.ACTION,e).add(o.default.PARAMS.VERSION_NAME,this.versionName).add(o.default.PARAMS.DEV_MODE,n.devMode).add(o.default.PARAMS.TIME,((new Date).getTime()/1e3).toString()),c=n.success||n.response,d=n.error||n.response;if(!this.appId||!this.clientKey){var f="Leanplum App ID and client key are not set. Make sure you are calling setAppIdForDevelopmentMode or setAppIdForProductionMode before issuing API calls.";return console.error(f),void(d&&d(f))}if(t.body())this.sendRequest("?".concat(l.build()),t.body(),c,d,n.queued);else{var p=n.devMode||n.sendNow||!this.batchEnabled,h=function(){var e=i.popUnsentRequests();if(e.length>0){var t=JSON.stringify({data:e}),a=(new r.default).attachApiKeys(i.appId,i.clientKey).add(o.default.PARAMS.SDK_VERSION,o.default.SDK_VERSION).add(o.default.PARAMS.ACTION,o.default.METHODS.MULTI).add(o.default.PARAMS.TIME,((new Date).getTime()/1e3).toString().toString()).build();i.sendRequest("?".concat(a),t,c,d,n.queued)}};if(!p&&this.batchCooldown){var v=(new Date).getTime()/1e3;!this.lastRequestTime||v-this.lastRequestTime>=this.batchCooldown?(p=!0,this.lastRequestTime=v):this.cooldownTimeout||(this.cooldownTimeout=setTimeout((function(){i.cooldownTimeout=null,i.lastRequestTime=(new Date).getTime()/1e3,h()}),1e3*(this.batchCooldown-(v-this.lastRequestTime))))}this.saveRequestForLater(l.buildDict()),p&&h()}},e.prototype.getFileUrl=function(e){if(!e)return"";if(/^https?:/.test(e))return e;var t=(new r.default).attachApiKeys(this.appId,this.clientKey).add(o.default.PARAMS.SDK_VERSION,o.default.SDK_VERSION).add(o.default.PARAMS.ACTION,"downloadFile").add("filename",e);return"".concat(this.apiPath,"?").concat(t.build())},e.prototype.setNetworkTimeout=function(e){this.network.setNetworkTimeout(e)},e.prototype.getLastResponse=function(e){var t,n,i,r=null!==(n=null===(t=null==e?void 0:e.response)||void 0===t?void 0:t.length)&&void 0!==n?n:0;return r>0?null===(i=null==e?void 0:e.response)||void 0===i?void 0:i[r-1]:null},e.prototype.getFirstResponse=function(e){var t,n,i;return(null!==(n=null===(t=null==e?void 0:e.response)||void 0===t?void 0:t.length)&&void 0!==n?n:0)>0?null===(i=null==e?void 0:e.response)||void 0===i?void 0:i[0]:null},e.prototype.isResponseSuccess=function(e){return Boolean(null==e?void 0:e.success)},e.prototype.saveRequestForLater=function(e){var t=this.loadLocal(o.default.DEFAULT_KEYS.COUNT)||0,n=o.default.DEFAULT_KEYS.ITEM+t;this.saveLocal(n,JSON.stringify(e)),t++,this.saveLocal(o.default.DEFAULT_KEYS.COUNT,t)},e.prototype.sendRequest=function(e,t,n,i,r){var a=this;this.network.ajax("POST","".concat(this.apiPath).concat(e),t,(function(s){var u,l=a.getFirstResponse(s),c=(null===(u=s.migrateState)||void 0===u?void 0:u.sha256)||l.sha256;if(a.events.emit("migrateStateReceived",c),!l.success&&l.apiHost){var d=l.apiHost,f=l.apiPath,p=l.devServerHost;a.saveLocal(o.default.DEFAULT_KEYS.HOST_CONFIG,JSON.stringify({apiHost:d,apiPath:f,devServerHost:p})),a.apiPath="https://".concat(d,"/").concat(f),a.sendRequest(e,t,n,i,r),a.events.emit("updateDevServerHost",p)}else n&&n(s)}),i,r)},e.prototype.popUnsentRequests=function(){var e=[],t=this.loadLocal(o.default.DEFAULT_KEYS.COUNT)||0;this.removeLocal(o.default.DEFAULT_KEYS.COUNT);for(var n=0;n<t;n++){var i=o.default.DEFAULT_KEYS.ITEM+n;try{e.push(JSON.parse(this.loadLocal(i)))}catch(e){}this.removeLocal(i)}return e},e.prototype.loadHostConfig=function(){var e=JSON.parse(this.loadLocal(o.default.DEFAULT_KEYS.HOST_CONFIG)||"null");if(e){var t=e.apiHost,n=e.apiPath,i=e.devServerHost;this.apiPath="https://".concat(t,"/").concat(n),this.events.emit("updateDevServerHost",i)}},e.prototype.loadLocal=function(e){return a.default.get(e)},e.prototype.saveLocal=function(e,t){a.default.save(e,t)},e.prototype.removeLocal=function(e){a.default.remove(e)},e}();t.default=u},34:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=i(n(307)),o=i(n(600)),a=i(n(749)),s=i(n(897)),u=function(){function e(e,t,n,i){this.cache=e,this.createRequest=t,this.getLastResponse=n,this.events=i,this.networkTimeoutSeconds=10,this.socketClient=null,this.socketHost="dev.leanplum.com",this.auth=null}return e.prototype.connect=function(e){var t=this;if(WebSocket){this.auth=e;var n=!1;this.socketClient=new s.default,this.socketClient.setNetworkTimeout(this.networkTimeoutSeconds),this.socketClient.onopen=function(){var i;n||(console.log("Leanplum: Connected to development server."),t.socketClient.send("auth",((i={})[a.default.PARAMS.APP_ID]=e.appId,i[a.default.PARAMS.DEVICE_ID]=e.deviceId,i)),n=!0)},this.socketClient.onerror=function(e){console.log("Leanplum: Socket error",e)},this.socketClient.onmessage=this.onMessageReceived.bind(this),this.socketClient.onclose=function(){console.log("Leanplum: Disconnected from development server."),n=!1},this.socketClient.connect(this.socketHost),setInterval((function(){t.socketClient.connected||t.socketClient.connecting||t.socketClient.connect(t.socketHost)}),5e3)}else console.log("Your browser doesn't support WebSockets.")},e.prototype.setSocketHost=function(e){this.socketHost=e,this.socketClient.connected&&(this.socketClient.disconnect(),this.connect(this.auth))},e.prototype.setNetworkTimeout=function(e){var t;this.networkTimeoutSeconds=e,null===(t=this.socketClient)||void 0===t||t.setNetworkTimeout(e)},e.prototype.onMessageReceived=function(e,t){var n=this;if("updateVars"===e){var i=(new o.default).add(a.default.PARAMS.INCLUDE_DEFAULTS,!1);this.createRequest(a.default.METHODS.GET_VARS,i,{queued:!1,sendNow:!0,response:function(e){var t=n.getLastResponse(e),i=t[a.default.KEYS.VARS],o=t[a.default.KEYS.VARIANTS],s=t[a.default.KEYS.ACTION_DEFINITIONS];(0,r.default)(i,n.cache.diffs)||n.cache.applyDiffs(i,o,s)}})}else if("getVariables"===e)this.cache.sendVariables(),this.socketClient.send("getContentResponse",{updated:!0});else if("getActions"===e){var s=this.cache.sendActions();this.socketClient.send("getContentResponse",{updated:s})}else if("registerDevice"===e){var u=t[0];alert("Your device has been registered to ".concat(u.email,"."))}else"trigger"===e&&(u=t[0],this.events.emit("previewRequest",u))},e}();t.default=u},14:function(e,t,n){"use strict";var i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},i.apply(this,arguments)},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(749)),a=r(n(600)),s=r(n(967)),u=r(n(307)),l=r(n(88)),c=r(n(375)),d=function(){function e(){this.session={},this.triggers={},this.occurrences={}}return e.prototype.recordOccurrence=function(e){var t=(this.session[e]||0)+1;this.session[e]=t;var n=this.occurrences[e]||[];n.push(Date.now()),this.occurrences[e]=n,this.save()},e.prototype.recordTriggerOccurrence=function(e){var t=this.triggers[e]||[];return t.push(Date.now()),this.triggers[e]=t,this.save(),t.length},e.prototype.getSessionOccurranceCount=function(e){return this.session[e]||0},e.prototype.getOccurrences=function(e){return this.occurrences[e]||[]},e.prototype.clearSession=function(){this.session={}},e.prototype.load=function(){var e=l.default.get(o.default.DEFAULT_KEYS.MESSAGE_OCCURRENCES);if(e){var t=f(e);t&&(this.session=t.session,this.triggers=t.triggers,this.occurrences=t.occurrences)}},e.prototype.save=function(){var e=o.default.DEFAULT_KEYS.MESSAGE_OCCURRENCES;l.default.save(e,JSON.stringify({session:this.session,triggers:this.triggers,occurrences:this.occurrences}))},e}(),f=function(e){try{return JSON.parse(e)}catch(e){return}},p=function(){function e(e,t,n){var i=this;this.events=e,this.createRequest=t,this.getFileUrl=n,this._messageCache={},this.occurrenceTracker=new d,this._showRichIAM=!1,e.on("previewRequest",this.onMessagePreview.bind(this)),e.on("messagesReceived",this.onMessagesReceived.bind(this)),e.on("start",(function(){i.occurrenceTracker.load(),i.occurrenceTracker.clearSession(),i.onTrigger({trigger:"start"})})),e.on("resume",(function(){var e=o.default.DEFAULT_KEYS.MESSAGE_CACHE,t=f(l.default.get(e));i._messageCache=t||i._messageCache,i.occurrenceTracker.load(),i.onTrigger({trigger:"resume"})})),e.on("track",(function(e){i.onTrigger({trigger:"event",eventName:e.eventName,params:e.params||{}})})),e.on("advanceState",(function(e){return i.onTrigger({trigger:"state",state:e.state,params:e.params||{}})})),e.on("setUserAttribute",(function(e){return i.onTrigger({trigger:"userAttribute",attributes:e})}))}return e.prototype.enableRichInAppMessages=function(e){this._showRichIAM=e},e.prototype.onTrigger=function(e){var t=this,n=this.getMessages();Object.keys(n).filter((function(i){return t.shouldShowMessage(i,n[i],e)})).slice(0,1).forEach((function(e){return t.showMessage(e,n[e])}))},e.prototype.onMessagePreview=function(e){var t=e.action,n={track:function(t){var n=t?"event '".concat(t,"'"):"impression";console.log("Tracking ".concat(n," for ").concat(e.messageId))},runActionNamed:function(e){return console.log("Running untracked action '".concat(e,"'"))},runTrackedActionNamed:function(e){return console.log("Running tracked action '".concat(e,"'"))}};this.handleMessage({isPreview:!0,message:this.addDefaults(i({messageId:e.messageId},t)),context:n})},e.prototype.onMessagesReceived=function(e){var t=e||{};this._messageCache=t,l.default.save(o.default.DEFAULT_KEYS.MESSAGE_CACHE,JSON.stringify(t))},e.prototype.shouldShowMessage=function(e,t,n){var i=Date.now(),r=this.matchesTrigger(t.whenTriggers,n),o=this.matchesTrigger(t.unlessTriggers,n);if(!r||o)return!1;var a=this.occurrenceTracker.recordTriggerOccurrence(e);return!!this.matchesLimits(e,t.whenLimits,a)&&!(t.startTime&&t.endTime&&(i<t.startTime||t.endTime<i))},e.prototype.showMessage=function(e,t){var n=this,r=this.addDefaults(i({},t.vars)),o={track:function(t,i,r,o){n.occurrenceTracker.recordOccurrence(e),n.trackMessage(e,{event:t,value:i,info:r,params:o})},runActionNamed:function(t){return n.onAction(r[t],e)},runTrackedActionNamed:function(t){var i=t.replace(/ action$/,"");n.trackMessage(e,{event:i},(function(){return n.onAction(r[t],e)}))}};this.handleMessage({context:o,message:i({messageId:e},r)})},e.prototype.processMessageEvent=function(e,t){var n=document.getElementById("lp-message-".concat(e));if(n){var i=t.replace(/^http:\/\/leanplum\//,"").split("?"),r=i[0],o=i[1],a=(void 0===o?"":o).split("&").reduce((function(e,t){var n=t.split("="),i=n[0],r=n[1];return e[i]=decodeURIComponent(r),e}),{}),s=n.metadata,u=s.message,l=s.context;switch(r){case"loadFinished":if(n.style.visibility="visible",n.style.left="0",u["HTML Height"]>0){var c=u["HTML Width"];n.style.height="".concat(u["HTML Height"],"px"),n.style.width=c,n.style.left="calc((100% - ".concat(c,") / 2)");var d=u["HTML Align"].toLowerCase(),p="top"===d?"bottom":"top";n.style[d]="0",n.style[p]=""}else n.style.top="0";n.contentWindow.focus(),l.track();break;case"track":l.track(a.event,parseFloat(a.value),a.info,f(a.parameters));break;case"runAction":case"runTrackedAction":l["".concat(r,"Named")](a.action);case"close":n.metadata=null,n.parentNode.removeChild(n)}}else console.log("message closed, skipping event processing")},e.prototype.handleMessage=function(e){var t=this;if(this._showRichIAM&&"HTML"===e.message.__name__){this.resolveFiles(e.message);var n=e.message.Template||"";(new s.default).ajax("get",n.replace("-10.html","-11.html"),"",(function(n){return t.renderRichInAppMessage(n,e)}),(function(){}),!1,!0)}else this.events.emit("showMessage",this.resolveFields(e))},e.prototype.renderRichInAppMessage=function(e,t){var n=t.message.messageId,i=JSON.stringify(t.message),r=document.createElement("iframe");r.setAttribute("id","lp-message-".concat(n)),r.setAttribute("title","Popup"),r.setAttribute("aria-modal","true"),r.style.cssText=["border-width: 0","position: fixed","top: -100%","left: -100%","width: 100%","height: 100%","visibility: hidden","z-index: 100000"].join(";"),document.body.insertBefore(r,document.body.firstChild),r.metadata=t,r.contentWindow.messageId=n;var o=e.replace("##Vars##",i).replace("<body>","<body><script>window.messageId='".concat(n,"'<\/script>"));if("srcdoc"in r)r.srcdoc=o;else{var a=r.contentWindow.document;a.open(),a.write(o),a.close()}},e.prototype.trackMessage=function(e,t,n){void 0===t&&(t={event:null}),void 0===n&&(n=function(){});var i=(new a.default).add(o.default.PARAMS.MESSAGE_ID,e),r=function(e){return void 0!==e};t.event&&i.add(o.default.PARAMS.EVENT,t.event),r(t.value)&&i.add(o.default.PARAMS.VALUE,t.value||0),r(t.info)&&i.add(o.default.PARAMS.INFO,t.info),r(t.params)&&i.add(o.default.PARAMS.PARAMS,JSON.stringify(t.params)),this.createRequest(o.default.METHODS.TRACK,i,{queued:!0,sendNow:!0,response:n})},e.prototype.onAction=function(e,t){var n=this;if(void 0===t&&(t=""),e){var i=this._messageCache;if("Chain to Existing Message"!==e.__name__){var r=function(){var i=e.__name__;"Open URL"===e.__name__?n.events.emit("navigationChange",e.URL):"Register For Push"===e.__name__?n.events.emit("registerForPush"):i&&n.showMessage(t,{messageId:t,action:i,vars:e})},o=this.messageIdFromAction(e);o?this.trackMessage(o,{event:null},r):r()}else{var a=e["Chained message"],s=i[a];"Open URL"===s.action?this.trackMessage(a,{event:"View"},(function(){return n.onAction(s.vars,a)})):"Register For Push"===s.action?this.events.emit("registerForPush"):this.showMessage(a,s)}}},e.prototype.getMessages=function(){return this._messageCache||{}},e.prototype.addDefaults=function(e){var t=this,n=(this.getMessages().actionDefinitions||{})[e.__name__],r=null==n?void 0:n.kinds;if(!n)return e;var o=function(e,n,i){void 0===i&&(i="");for(var a=0,s=Object.keys(n);a<s.length;a++){var u=s[a],l=n[u];"object"==typeof l?e[u]=o(e[u]||{},l,"".concat(i).concat(u,".")):void 0===e[u]&&(e[u]=l),"FILE"===r["".concat(i).concat(u)]&&(e[u]=t.getFileUrl(e[u]))}return e};return o(i({},e),n.values)},e.prototype.resolveFiles=function(e){var t=/^__file__/;for(var n in e)t.test(n)?e[n.replace(t,"")]=this.getFileUrl(e[n]):"object"==typeof e[n]&&(e[n]=this.resolveFiles(e[n]));return e},e.prototype.resolveFields=function(e){var t=/\bcolor/i,n=/^__file__/;for(var i in e)n.test(i)?e[i.replace(n,"")+" URL"]=this.getFileUrl(e[i]):t.test(i)?e[i]=c.default.decodeColor(e[i]):"object"==typeof e[i]&&(e[i]=this.resolveFields(e[i]));return e},e.prototype.messageIdFromAction=function(e){var t=this._messageCache,n=i({},e);delete n.parentCampaignId;for(var r=0,o=Object.keys(t);r<o.length;r++){var a=o[r],s=t[a];if(s.parentCampaignId===e.parentCampaignId&&(0,u.default)(s.vars,n))return a}},e.prototype.matchesTrigger=function(e,t){if(!e)return!1;var n=function(e,t){return void 0===t&&(t=""),0===e.toString().localeCompare(t.toString(),void 0,{sensitivity:"accent"})},i=function(e,t,i){var r=e===i.noun;if("triggers"===i.verb)return r;if("triggersWithParameter"===i.verb){var o=i.objects,a=o[0],s=o[1],u=a in t&&n(s,t[a]);return r&&u}};return e.children.some((function(e){var r=e.subject;switch(t.trigger){case"start":return"start"===r||"resume"===r;case"resume":return"resume"===r;case"event":return"event"===r&&i(t.eventName,t.params,e);case"userAttribute":if("userAttribute"!==r)return!1;var o=e.noun in t.attributes;if("changes"===e.verb)return o;if("changesTo"===e.verb){if(!o)return!1;var a=t.attributes[e.noun];return e.objects.some((function(e){return null===e&&null===a||e&&a&&n(e,a)}))}break;case"state":return"state"===r&&i(t.state,t.params,e)}return!1}))},e.prototype.matchesLimits=function(e,t,n){var i=this;return!t||t.children.every((function(t){var r=t.subject,o=t.verb,a=parseInt(t.noun.toString());if("times"===r){if("limitSession"===o)return i.occurrenceTracker.getSessionOccurranceCount(e)+1===a;if("limitUser"===o)return(s=i.occurrenceTracker.getOccurrences(e).length)+1<=a;var s,u=parseInt(t.objects[0].toString())||1,l=function(e){switch(e){case"limitSecond":return 1e3;case"limitMinute":return 6e4;case"limitHour":return 36e5;case"limitDay":return 864e5}}(o)*u,c=(s=i.occurrenceTracker.getOccurrences(e)).length;return c<a||s.slice(c-a,c)[0]<Date.now()-l}return"onNthOccurrence"===r?n===a:"everyNthOccurrence"===r&&n%a==0}))},e}();t.default=p},316:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.IdentityManager=t.IdentityState=void 0;var r,o=i(n(739)),a=n(205),s=i(n(88)),u=i(n(749)),l=i(n(600)),c=function(){},d=function(e){switch(null==e?void 0:e.sdk){case"lp":return a.MigrationState.LEANPLUM;case"lp+ct":return a.MigrationState.DUPLICATE;case"ct":return a.MigrationState.CLEVERTAP;default:return a.MigrationState.UNKNOWN}},f=function(){function e(e){var t;this.createRequest=e,this.response=null;var n=s.default.get(u.default.DEFAULT_KEYS.MIGRATION_STATE),i=s.default.get(u.default.DEFAULT_KEYS.DEVICE_ID),r=null!==(t=s.default.get(u.default.DEFAULT_KEYS.USER_ID))&&void 0!==t?t:i;this.identity=new p(r,i),n&&(this.response=JSON.parse(n))}return e.prototype.getState=function(e){void 0===e&&(e=c);var t=this.response,n=d(this.response);t&&n!==a.MigrationState.UNKNOWN?e(n):this.getMigrationState(e)},e.prototype.verifyState=function(e){var t;(null===(t=this.response)||void 0===t?void 0:t.sha256)!==e&&this.getMigrationState(c)},e.prototype.initCleverTap=function(){var e,t=null===(e=this.response)||void 0===e?void 0:e.ct;if(t)return o.default.init(t.accountId,t.regionCode),o.default},e.prototype.duplicateRequest=function(e,t,n){var i=d(this.response);if(i===a.MigrationState.LEANPLUM)return!1;i===a.MigrationState.DUPLICATE&&t.add(u.default.PARAMS.CT,!0);var r=(null==t?void 0:t.buildDict())||{};switch(e){case u.default.METHODS.START:this.identity.isAnonymous||o.default.onUserLogin.push({Site:this.identity.profile});break;case u.default.METHODS.TRACK:this.eventPush(r,n);break;case u.default.METHODS.ADVANCE:r.event="state_".concat(r.state),this.eventPush(r,n);break;case u.default.METHODS.SET_USER_ATTRIBUTES:this.profilePush(r)}return i===a.MigrationState.CLEVERTAP},e.prototype.profilePush=function(e){var t=e[u.default.PARAMS.NEW_USER_ID],n=this.mapAttributes(this.convertArrays(JSON.parse(e.userAttributes||"{}")));t?(Object.assign(n,{Identity:t}),o.default.onUserLogin.push({Site:n})):o.default.profile.push(n)},e.prototype.eventPush=function(e,t){var n=e[u.default.PARAMS.MESSAGE_ID],i=t.isPurchase?"Charged":e.event;if(i&&!n){var r={};if(e.params){var a=this.convertArrays(JSON.parse(e.params));Object.assign(r,a)}e.value&&Object.assign(r,{value:e.value}),e.info&&Object.assign(r,{info:e.info}),t.isPurchase&&e.currencyCode&&Object.assign(r,{currencyCode:e.currencyCode}),o.default.event.push(i,r)}},e.prototype.convertArrays=function(e){return Object.keys(e).reduce((function(t,n){if(Array.isArray(e[n])){var i=e[n];t[n]="[".concat(i.join(","),"]")}else t[n]=e[n];return t}),{})},e.prototype.mapAttributes=function(e){var t,n,i=null===(n=null===(t=this.response)||void 0===t?void 0:t.ct)||void 0===n?void 0:n.attributeMappings;return i?Object.keys(e).reduce((function(t,n){return i[n]?t[i[n]]=e[n]:t[n]=e[n],t}),{}):e},e.prototype.getMigrationState=function(e){var t=this;this.createRequest("getMigrateState",new l.default,{sendNow:!0,response:function(n){var i,r=null===(i=null==n?void 0:n.response)||void 0===i?void 0:i[0],o=d(r);o&&o!==a.MigrationState.UNKNOWN&&(s.default.save(u.default.DEFAULT_KEYS.MIGRATION_STATE,JSON.stringify(r)),t.response=r),e(o)}})},e}();t.default=f,function(e){e.ANONYMOUS="anonymous",e.IDENTIFIED="identified"}(r=t.IdentityState||(t.IdentityState={}));var p=function(){function e(e,t){this.userId=e,this.deviceId=t,this.state=r.ANONYMOUS,this.identify()}return e.prototype.setUserId=function(e){this.state===r.ANONYMOUS&&(this.anonymousLoginUserId=e,this.state=r.IDENTIFIED),this.userId=e},e.prototype.identify=function(){this.isAnonymous?this.state=r.ANONYMOUS:this.identifyNonAnonymous()},e.prototype.identifyNonAnonymous=function(){this.state===r.ANONYMOUS&&(this.anonymousLoginUserId=this.userId),this.state=r.IDENTIFIED},Object.defineProperty(e.prototype,"cleverTapID",{get:function(){return this.userId===this.anonymousLoginUserId||this.isAnonymous?this.deviceId:"".concat(this.deviceId,"_").concat(this.userId)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"profile",{get:function(){return{Identity:this.userId}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isAnonymous",{get:function(){return this.userId===this.deviceId},enumerable:!1,configurable:!0}),e}();t.IdentityManager=p},967:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this.networkTimeoutSeconds=10,this.requestQueue=[],this.runningRequest=!1}return e.prototype.setNetworkTimeout=function(e){this.networkTimeoutSeconds=e},e.prototype.ajax=function(e,t,n,i,r,o,a){var s=this;if(o){if(this.runningRequest)return this.enqueueRequest(arguments);this.runningRequest=!0}if("undefined"!=typeof XDomainRequest)return"http:"===location.protocol&&0===t.indexOf("https:")&&(t="http:".concat(t.substring(6))),this.ajaxIE8(e,t,n,i,r,o,a);var u=!1,l=new XMLHttpRequest;l.onreadystatechange=function(){if(4===l.readyState){if(u)return;var e;u=!0;var t=!1;if(a)e=l.responseText;else try{e=JSON.parse(l.responseText)}catch(e){setTimeout((function(){r&&r(null,l)}),0),t=!0}t||(l.status>=200&&l.status<300?setTimeout((function(){i&&i(e,l)}),0):setTimeout((function(){r&&r(e,l)}),0)),o&&(s.runningRequest=!1,s.dequeueRequest())}},l.open(e,t,!0),l.setRequestHeader("Content-Type","text/plain"),l.send(n),setTimeout((function(){u||l.abort()}),1e3*this.networkTimeoutSeconds)},e.prototype.ajaxIE8=function(e,t,n,i,r,o,a){var s=this,u=new XDomainRequest;u.onload=function(){var e,t=!1;if(a)e=u.responseText;else try{e=JSON.parse(u.responseText)}catch(e){setTimeout((function(){r&&r(null,u)}),0),t=!0}t||setTimeout((function(){i&&i(e,u)}),0),o&&(s.runningRequest=!1,s.dequeueRequest())},u.onerror=u.ontimeout=function(){setTimeout((function(){r&&r(null,u)}),0),o&&(s.runningRequest=!1,s.dequeueRequest())},u.onprogress=function(){},u.open(e,t),u.timeout=1e3*this.networkTimeoutSeconds,u.send(n)},e.prototype.enqueueRequest=function(e){this.requestQueue.push(e)},e.prototype.dequeueRequest=function(){var e=this.requestQueue.shift();e&&this.ajax.apply(this,e)},e}();t.default=n},95:function(e,t,n){"use strict";var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(r,o){function a(e){try{u(i.next(e))}catch(e){o(e)}}function s(e){try{u(i.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}u((i=i.apply(e,t||[])).next())}))},r=this&&this.__generator||function(e,t){var n,i,r,o,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(u){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(n=1,i&&(r=2&s[0]?i.return:s[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,s[1])).done)return r;switch(i=0,r&&(s=[2&s[0],r.value]),s[0]){case 0:case 1:r=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,i=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((r=(r=a.trys).length>0&&r[r.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!r||s[1]>r[0]&&s[1]<r[3])){a.label=s[1];break}if(6===s[0]&&a.label<r[1]){a.label=r[1],r=s;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(s);break}r[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],i=0}finally{n=r=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,u])}}},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=o(n(600)),s=o(n(749)),u=o(n(88)),l=function(){function e(e,t){this.events=e,this.createRequest=t,this.serviceWorkerRegistration=null}return Object.defineProperty(e.prototype,"serviceWorker",{get:function(){return window.navigator.serviceWorker},enumerable:!1,configurable:!0}),e.prototype.isWebPushSupported=function(){return Boolean(void 0!==(null===window||void 0===window?void 0:window.navigator)&&"serviceWorker"in window.navigator&&"PushManager"in window)},e.prototype.isWebPushSubscribed=function(e){return void 0===e&&(e=""),i(this,void 0,Promise,(function(){var t,n,i;return r(this,(function(r){switch(r.label){case 0:return this.isWebPushSupported()?[4,this.getServiceWorkerRegistration(e)]:[2,!1];case 1:return(t=r.sent())?[4,t.pushManager.getSubscription()]:[2,!1];case 2:return n=r.sent(),(i=null!==n)&&this.updateNewSubscriptionOnServer(n),[2,i]}}))}))},e.prototype.register=function(e,t,n){return i(this,void 0,Promise,(function(){var i,o,a,s;return r(this,(function(r){switch(r.label){case 0:if(!this.isWebPushSupported())return console.log("Leanplum: Push messaging is not supported."),[2,n(!1)];r.label=1;case 1:return r.trys.push([1,4,,5]),i=this,[4,this.serviceWorker.register(e||"/sw.min.js",t)];case 2:return i.serviceWorkerRegistration=r.sent(),[4,this.serviceWorkerRegistration.pushManager.getSubscription()];case 3:return o=r.sent(),(a=null!==o)&&this.updateNewSubscriptionOnServer(o),[2,n(a)];case 4:return s=r.sent(),console.log("Leanplum: Service Worker Error: ",s),[2,n(!1)];case 5:return[2]}}))}))},e.prototype.subscribeUser=function(){return i(this,void 0,Promise,(function(){var e,t,n;return r(this,(function(i){switch(i.label){case 0:e=this.urlB64ToUint8Array("BInWPpWntfR39rgXSP04pqdmEdDGa50z6zqbMvxyxJCwzXIuSpSh8C888-CfJ82WELl7Xe8cjAnfCt-3vK0Ci68"),i.label=1;case 1:return i.trys.push([1,3,,4]),[4,this.serviceWorkerRegistration.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:e})];case 2:if(!(t=i.sent()))throw new Error;return this.updateNewSubscriptionOnServer(t),[3,4];case 3:throw n=i.sent(),new Error("Leanplum: Failed to subscribe the user: ".concat(n));case 4:return[2,!0]}}))}))},e.prototype.unsubscribeUser=function(e){return void 0===e&&(e=""),i(this,void 0,Promise,(function(){var t,n;return r(this,(function(i){switch(i.label){case 0:return[4,this.isWebPushSubscribed(e)];case 1:if(!i.sent())return[3,6];i.label=2;case 2:return i.trys.push([2,5,,6]),[4,this.serviceWorkerRegistration.pushManager.getSubscription()];case 3:if(!(t=i.sent()))throw new Error;return[4,t.unsubscribe()];case 4:return i.sent(),[3,6];case 5:throw n=i.sent(),new Error("Leanplum: Error unsubscribing: ".concat(n));case 6:return[2]}}))}))},e.prototype.getServiceWorkerRegistration=function(e){return void 0===e&&(e=""),i(this,void 0,Promise,(function(){var t;return r(this,(function(n){switch(n.label){case 0:return this.serviceWorkerRegistration?[3,2]:(t=this,[4,this.serviceWorker.getRegistration(e)]);case 1:t.serviceWorkerRegistration=n.sent(),n.label=2;case 2:return[2,this.serviceWorkerRegistration]}}))}))},e.prototype.urlB64ToUint8Array=function(e){for(var t=(e+"=".repeat((4-e.length%4)%4)).replace(/-/g,"+").replace(/_/g,"/"),n=this.decodeData(t),i=new Uint8Array(n.length),r=0;r<n.length;++r)i[r]=n.charCodeAt(r);return i},e.prototype.updateNewSubscriptionOnServer=function(e){if(e){var t=this.prepareSubscription(e),n=JSON.stringify(t);u.default.get(s.default.DEFAULT_KEYS.PUSH_SUBSCRIPTION)!==n&&(this.events.emit("webPushSubscribed"),u.default.save(s.default.DEFAULT_KEYS.PUSH_SUBSCRIPTION,n),this.setSubscription(n))}},e.prototype.prepareSubscription=function(e){var t="getKey"in e?e.getKey("p256dh"):[],n="getKey"in e?e.getKey("auth"):[],i=this.encodeData(String.fromCharCode.apply(null,new Uint8Array(t))),r=this.encodeData(String.fromCharCode.apply(null,new Uint8Array(n)));return{endpoint:e.endpoint,key:i,auth:r}},e.prototype.setSubscription=function(e){if(e){var t=(new a.default).add(s.default.PARAMS.WEB_PUSH_SUBSCRIPTION,e);this.createRequest(s.default.METHODS.SET_DEVICE_ATTRIBUTES,t,{queued:!1,sendNow:!0})}},e.prototype.encodeData=function(e){return window.btoa(e)},e.prototype.decodeData=function(e){return window.atob(e)},e}();t.default=l},897:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=i(n(967)),o=function(){function e(){this.network=new r.default,this.connected=!1,this.connecting=!1,this.connected=!1,this.connecting=!1}return e.prototype.connect=function(e){var t=this;this.connecting=!0,this.network.ajax("POST","https://".concat(e,"/socket.io/1"),"",(function(n){var i=n.split(":"),r=i[0],o=parseInt(i[1])/2*1e3;t.socket=new WebSocket("wss://".concat(e,"/socket.io/1/websocket/").concat(r));var a=null;t.socket.onopen=function(){t.connected=!0,t.connecting=!1,t.onopen&&t.onopen(),a=setInterval((function(){t.socket.send("2:::")}),o)},t.socket.onclose=function(){t.connected=!1,clearInterval(a),t.onclose&&t.onclose()},t.socket.onmessage=function(e){var n=e.data.split(":"),i=parseInt(n[0]);if(2===i)t.socket.send("2::");else if(5===i){var r=n[1],o=JSON.parse(n.slice(3).join(":")),a=o.name,s=o.args;r&&t.socket.send("6:::".concat(r)),t.onmessage&&t.onmessage(a,s)}else 7===i&&console.log("Socket error: ".concat(e.data))},t.socket.onerror=function(e){t.socket.close(),t.onerror&&t.onerror(e)}}),null,!1,!0)},e.prototype.disconnect=function(){this.socket.close(),this.connected=!1,this.connecting=!1},e.prototype.send=function(e,t){if(this.connected){var n=JSON.stringify({name:e,args:t});this.socket.send("5:::".concat(n))}else console.log("Leanplum: Socket is not connected.")},e.prototype.setNetworkTimeout=function(e){this.network.setNetworkTimeout(e)},e}();t.default=o},88:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={local:!0,session:!0},i={local:{},session:{}},r=function(){function e(){}return e.get=function(e,t){if(void 0===t&&(t="local"),!n[t])return i[t][e];try{return"local"===t?localStorage[e]:sessionStorage.getItem(e)}catch(r){return n[t]=!1,i[t][e]}},e.save=function(e,t,r){if(void 0===r&&(r="local"),n[r])try{"local"===r?localStorage[e]=t:sessionStorage.setItem(e,t)}catch(o){n[r]=!1,i[r][e]=t}else i[r][e]=t},e.remove=function(e,t){if(void 0===t&&(t="local"),n[t])try{"local"===t?localStorage.removeItem(e):sessionStorage.removeItem(e)}catch(r){n[t]=!1,delete i[t][e]}else delete i[t][e]},e}();t.default=r},375:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.decodeColor=function(e){var t=255&e,n=255&(e>>=8),i=255&(e>>=8),r=(255&(e>>=8))/255;return"rgba(".concat(i,",").concat(n,",").concat(t,",").concat(r,")")},e.encodeColor=function(e){if("number"==typeof e)return e;var t=/^rgba\((\d+),(\d+),(\d+),(\d+(\.\d+)?)\)$/.exec(e);if(t)return(255*parseInt(t[4],10)<<24)+((255&parseInt(t[1],10))<<16)+((255&parseInt(t[2],10))<<8)+(255&parseInt(t[3],10));var n=/^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(e);if(n)return(255<<24)+((255&parseInt(n[1],16))<<16)+((255&parseInt(n[2],16))<<8)+(255&parseInt(n[3],16));throw new Error('Could not parse color "'.concat(e,'"'))},e}();t.default=n},816:function(e,t,n){"use strict";var i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},i.apply(this,arguments)},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(600)),a=r(n(749)),s=r(n(88)),u=r(n(375)),l=function(){function e(e){this.createRequest=e,this.actionDefinitions={},this.hasReceivedDiffs=!1,this.merged=void 0,this.variables=null,this.variablesChangedHandlers=[],this.variantDebugInfo={},this.diffs=void 0,this.token="",this.variants=[]}return e.prototype.applyDiffs=function(e,t,n){var r;this.diffs=e,this.variants=t,this.actionDefinitions=i(i({},this.actionDefinitions),(r=n)?Object.keys(r).reduce((function(e,t){e[t]=i({},r[t]);var n=r[t].kinds;return n&&(e[t].kinds=Object.keys(n).reduce((function(i,r){var o=n[r].toLowerCase();return i[r]=o,"action"===o&&(e[t].values[r]=""),i}),{})),e}),{}):r),this.hasReceivedDiffs=!0,this.merged=f(this.variables,e),this.saveDiffs(),this.onUpdate&&this.onUpdate()},e.prototype.loadDiffs=function(){try{this.applyDiffs(JSON.parse(this.loadLocal(a.default.DEFAULT_KEYS.VARIABLES)||null),JSON.parse(this.loadLocal(a.default.DEFAULT_KEYS.VARIANTS)||null),JSON.parse(this.loadLocal(a.default.DEFAULT_KEYS.ACTION_DEFINITIONS)||null)),this.token=this.loadLocal(a.default.DEFAULT_KEYS.TOKEN),this.variantDebugInfo=this.loadLocal(a.default.DEFAULT_KEYS.VARIANT_DEBUG_INFO)}catch(e){console.log("Leanplum: Invalid diffs: ".concat(e))}},e.prototype.saveDiffs=function(){this.saveLocal(a.default.DEFAULT_KEYS.VARIABLES,JSON.stringify(this.diffs||{})),this.saveLocal(a.default.DEFAULT_KEYS.VARIANTS,JSON.stringify(this.variants||[])),this.saveLocal(a.default.DEFAULT_KEYS.ACTION_DEFINITIONS,JSON.stringify(this.actionDefinitions||{})),this.saveLocal(a.default.DEFAULT_KEYS.VARIANT_DEBUG_INFO,JSON.stringify(this.variantDebugInfo||{})),this.saveLocal(a.default.DEFAULT_KEYS.TOKEN,this.token)},e.prototype.getVariable=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this.getVariables();if(n)for(var i=0;i<e.length;i++)n=n[e[i]];return n},e.prototype.getVariables=function(){return void 0!==this.merged?this.merged:this.variables},e.prototype.setVariables=function(e){this.variables=e},e.prototype.addVariablesChangedHandler=function(e){this.variablesChangedHandlers.push(e),this.hasReceivedDiffs&&e()},e.prototype.removeVariablesChangedHandler=function(e){var t=this.variablesChangedHandlers.indexOf(e);t>=0&&this.variablesChangedHandlers.splice(t,1)},e.prototype.triggerVariablesChangedHandlers=function(){for(var e=0;e<this.variablesChangedHandlers.length;e++)this.variablesChangedHandlers[e]()},e.prototype.getVariantDebugInfo=function(){return this.variantDebugInfo},e.prototype.setVariantDebugInfo=function(e){this.variantDebugInfo=e},e.prototype.sendActions=function(){var e;return!!Object.keys(this.actionDefinitions).length&&(this.setVars(((e={})[a.default.PARAMS.ACTION_DEFINITIONS]=this.actionDefinitions,e)),!0)},e.prototype.sendVariables=function(){var e;this.setVars(((e={})[a.default.PARAMS.VARIABLES]=this.variables,e))},e.prototype.setVars=function(e){var t=(new o.default).body(JSON.stringify(e));this.createRequest(a.default.METHODS.SET_VARS,t,{sendNow:!0})},e.prototype.clearUserContent=function(){this.diffs=void 0,this.variables=null,this.variants=[],this.variantDebugInfo={},this.merged=void 0},e.prototype.registerActionDefinition=function(e){this.actionDefinitions[e.name]=function(e){return{kind:e.kind||3,options:null,values:c(e.args),kinds:d(e.args)}}(e)},e.prototype.loadLocal=function(e){return s.default.get(e)},e.prototype.saveLocal=function(e,t){s.default.save(e,t)},e}();function c(e){return e.reduce((function(e,t){return t.value instanceof Array?e[t.name]=c(t.value):"action"===t.type?e[t.name]="":"color"===t.type?e[t.name]=u.default.encodeColor(t.value):e[t.name]=t.value,e}),{})}function d(e,t){return void 0===t&&(t=""),e.reduce((function(e,n){var r,o="".concat(t).concat(n.name);return n.value instanceof Array?e=i(((r={})[o]="group",r),d(n.value,"".concat(o,"."))):e[o]=n.type.toLowerCase(),e}),{})}function f(e,t){if("number"==typeof t||"boolean"==typeof t||"string"==typeof t)return t;if(null==t)return e;var n=function(e){return function(t){if(e instanceof Array)for(var n=0;n<e.length;n++)t(e[n]);else for(var i in e)({}).hasOwnProperty.call(e,i)&&t(i)}},i=n(e),r=n(t),o=!1;if(null===e&&!(t instanceof Array))for(var a in o=null,t)if(t.hasOwnProperty(a)){if(null===o&&(o=!0),"string"!=typeof a){o=!1;break}if(a.length<3||"["!==a.charAt(0)||"]"!==a.charAt(a.length-1)){o=!1;break}}if(e instanceof Array||o){var s=[];return i((function(e){s.push(e)})),r((function(e){for(var n=parseInt(e.substring(1,e.length-1)),i=t[e];n>=s.length;)s.push(null);s[n]=f(s[n],i)})),s}var u={};return i((function(n){null!==t[n]&&void 0!==t[n]||(u[n]=e[n])})),r((function(n){u[n]=f(null===e?null:e[n]||{},t[n])})),u}t.default=l},804:(e,t,n)=>{var i=n(876);e.exports=i.default},205:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.MigrationState=void 0,(n=t.MigrationState||(t.MigrationState={})).UNKNOWN="unknown",n.LEANPLUM="lp",n.DUPLICATE="lp+ct",n.CLEVERTAP="ct"},772:(e,t)=>{"use strict";var n,i;Object.defineProperty(t,"__esModule",{value:!0}),t.MessageKind=t.ActionParameterType=void 0,(i=t.ActionParameterType||(t.ActionParameterType={})).Integer="integer",i.Color="color",i.Float="float",i.Decimal="decimal",i.Number="number",i.Boolean="bool",i.String="string",i.Text="text",i.HTML="html",i.File="file",i.List="list",i.Group="group",i.Action="action",i.Unknown="",(n=t.MessageKind||(t.MessageKind={}))[n.Action=2]="Action",n[n.Template=3]="Template"}},t={};function n(i){var r=t[i];if(void 0!==r)return r.exports;var o=t[i]={id:i,loaded:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}return n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),n(804)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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YWNrOi8vTGVhbnBsdW0vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL0xlYW5wbHVtLy4vbm9kZV9tb2R1bGVzL2NsZXZlcnRhcC13ZWItc2RrL2NsZXZlcnRhcC5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL25vZGVfbW9kdWxlcy9sb2Rhc2guaXNlcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL3NyYy9BcmdzQnVpbGRlci50cyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL3NyYy9Ccm93c2VyRGV0ZWN0b3IudHMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9zcmMvQ29uc3RhbnRzLnRzIiwid2VicGFjazovL0xlYW5wbHVtLy4vc3JjL0V2ZW50RW1pdHRlci50cyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL3NyYy9JbnRlcm5hbFN0YXRlLnRzIiwid2VicGFjazovL0xlYW5wbHVtLy4vc3JjL0xlYW5wbHVtLnRzIiwid2VicGFjazovL0xlYW5wbHVtLy4vc3JjL0xlYW5wbHVtSW5ib3gudHMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9zcmMvTGVhbnBsdW1JbnRlcm5hbC50cyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL3NyYy9MZWFucGx1bVJlcXVlc3QudHMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9zcmMvTGVhbnBsdW1Tb2NrZXQudHMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9zcmMvTWVzc2FnZXMudHMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9zcmMvTWlncmF0aW9uTWFuYWdlci50cyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL3NyYy9OZXR3b3JrLnRzIiwid2VicGFjazovL0xlYW5wbHVtLy4vc3JjL1B1c2hNYW5hZ2VyLnRzIiwid2VicGFjazovL0xlYW5wbHVtLy4vc3JjL1NvY2tldElvQ2xpZW50LnRzIiwid2VicGFjazovL0xlYW5wbHVtLy4vc3JjL1N0b3JhZ2VNYW5hZ2VyLnRzIiwid2VicGFjazovL0xlYW5wbHVtLy4vc3JjL1ZhbHVlVHJhbnNmb3Jtcy50cyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL3NyYy9WYXJDYWNoZS50cyIsIndlYnBhY2s6Ly9MZWFucGx1bS8uL3NyYy9idW5kbGVzL2xlYW5wbHVtLmZ1bGwudHMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9zcmMvdHlwZXMvaW50ZXJuYWwudHMiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vLi9zcmMvdHlwZXMvcHVibGljLnRzIiwid2VicGFjazovL0xlYW5wbHVtL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0xlYW5wbHVtL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vTGVhbnBsdW0vd2VicGFjay9ydW50aW1lL25vZGUgbW9kdWxlIGRlY29yYXRvciIsIndlYnBhY2s6Ly9MZWFucGx1bS93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiTGVhbnBsdW1cIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiTGVhbnBsdW1cIl0gPSBmYWN0b3J5KCk7XG59KShzZWxmLCAoKSA9PiB7XG5yZXR1cm4gIiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAoZ2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IGdsb2JhbCB8fCBzZWxmLCBnbG9iYWwuY2xldmVydGFwID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gIGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG4gICAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3R5cGVvZihvYmopO1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5IGluIG9iaikge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIGZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICAgIGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgICB9KTtcbiAgICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgICB9XG5cbiAgICByZXR1cm4ga2V5cztcbiAgfVxuXG4gIGZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgICAgaWYgKGkgJSAyKSB7XG4gICAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG4gIH1cblxuICBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICAgIH07XG4gICAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgICByZXR1cm4gbztcbiAgICB9O1xuXG4gICAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTtcblxuICAgIHRyeSB7XG4gICAgICBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICAgIGlmIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkpIHtcbiAgICAgIF9jb25zdHJ1Y3QgPSBSZWZsZWN0LmNvbnN0cnVjdDtcbiAgICB9IGVsc2Uge1xuICAgICAgX2NvbnN0cnVjdCA9IGZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICAgICAgICB2YXIgYSA9IFtudWxsXTtcbiAgICAgICAgYS5wdXNoLmFwcGx5KGEsIGFyZ3MpO1xuICAgICAgICB2YXIgQ29uc3RydWN0b3IgPSBGdW5jdGlvbi5iaW5kLmFwcGx5KFBhcmVudCwgYSk7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgICAgICBpZiAoQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihpbnN0YW5jZSwgQ2xhc3MucHJvdG90eXBlKTtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2NvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gX2lzTmF0aXZlRnVuY3Rpb24oZm4pIHtcbiAgICByZXR1cm4gRnVuY3Rpb24udG9TdHJpbmcuY2FsbChmbikuaW5kZXhPZihcIltuYXRpdmUgY29kZV1cIikgIT09IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICAgIHZhciBfY2FjaGUgPSB0eXBlb2YgTWFwID09PSBcImZ1bmN0aW9uXCIgPyBuZXcgTWFwKCkgOiB1bmRlZmluZWQ7XG5cbiAgICBfd3JhcE5hdGl2ZVN1cGVyID0gZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICAgICAgaWYgKENsYXNzID09PSBudWxsIHx8ICFfaXNOYXRpdmVGdW5jdGlvbihDbGFzcykpIHJldHVybiBDbGFzcztcblxuICAgICAgaWYgKHR5cGVvZiBDbGFzcyAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBfY2FjaGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKF9jYWNoZS5oYXMoQ2xhc3MpKSByZXR1cm4gX2NhY2hlLmdldChDbGFzcyk7XG5cbiAgICAgICAgX2NhY2hlLnNldChDbGFzcywgV3JhcHBlcik7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIFdyYXBwZXIoKSB7XG4gICAgICAgIHJldHVybiBfY29uc3RydWN0KENsYXNzLCBhcmd1bWVudHMsIF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvcik7XG4gICAgICB9XG5cbiAgICAgIFdyYXBwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgICB2YWx1ZTogV3JhcHBlcixcbiAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gX3NldFByb3RvdHlwZU9mKFdyYXBwZXIsIENsYXNzKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpO1xuICB9XG5cbiAgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gICAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmIChjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgICAgcmV0dXJuIGNhbGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG4gIH1cblxuICBmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkge1xuICAgIHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkge1xuICAgICAgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLFxuICAgICAgICAgIHJlc3VsdDtcblxuICAgICAgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHtcbiAgICAgICAgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjtcblxuICAgICAgICByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgICBpZiAoIW8pIHJldHVybjtcbiAgICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICAgIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICAgIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gICAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIGFycjJbaV0gPSBhcnJbaV07XG5cbiAgICByZXR1cm4gYXJyMjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG8sIGFsbG93QXJyYXlMaWtlKSB7XG4gICAgdmFyIGl0O1xuXG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwidW5kZWZpbmVkXCIgfHwgb1tTeW1ib2wuaXRlcmF0b3JdID09IG51bGwpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgaWYgKGl0KSBvID0gaXQ7XG4gICAgICAgIHZhciBpID0gMDtcblxuICAgICAgICB2YXIgRiA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgczogRixcbiAgICAgICAgICBuOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHtcbiAgICAgICAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgICAgICAgICB2YWx1ZTogb1tpKytdXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBmOiBGXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbiAgICB9XG5cbiAgICB2YXIgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsXG4gICAgICAgIGRpZEVyciA9IGZhbHNlLFxuICAgICAgICBlcnI7XG4gICAgcmV0dXJuIHtcbiAgICAgIHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXQgPSBvW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICAgIH0sXG4gICAgICBuOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdGVwID0gaXQubmV4dCgpO1xuICAgICAgICBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lO1xuICAgICAgICByZXR1cm4gc3RlcDtcbiAgICAgIH0sXG4gICAgICBlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICBkaWRFcnIgPSB0cnVlO1xuICAgICAgICBlcnIgPSBlO1xuICAgICAgfSxcbiAgICAgIGY6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXQucmV0dXJuICE9IG51bGwpIGl0LnJldHVybigpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGlmIChkaWRFcnIpIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICB2YXIgaWQgPSAwO1xuXG4gIGZ1bmN0aW9uIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KG5hbWUpIHtcbiAgICByZXR1cm4gXCJfX3ByaXZhdGVfXCIgKyBpZCsrICsgXCJfXCIgKyBuYW1lO1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHJlY2VpdmVyLCBwcml2YXRlS2V5KSB7XG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocmVjZWl2ZXIsIHByaXZhdGVLZXkpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIHVzZSBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVjZWl2ZXI7XG4gIH1cblxuICB2YXIgVEFSR0VUX0RPTUFJTiA9ICdjbGV2ZXJ0YXAtcHJvZC5jb20nO1xuICB2YXIgVEFSR0VUX1BST1RPQ09MID0gJ2h0dHBzOic7XG4gIHZhciBERUZBVUxUX1JFR0lPTiA9ICdldTEnO1xuXG4gIHZhciBfYWNjb3VudElkID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJhY2NvdW50SWRcIik7XG5cbiAgdmFyIF9yZWdpb24gPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInJlZ2lvblwiKTtcblxuICB2YXIgX3RhcmdldERvbWFpbiA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwidGFyZ2V0RG9tYWluXCIpO1xuXG4gIHZhciBfZGNTZGt2ZXJzaW9uID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJkY1Nka3ZlcnNpb25cIik7XG5cbiAgdmFyIEFjY291bnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFjY291bnQoKSB7XG4gICAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICAgICAgaWQgPSBfcmVmLmlkO1xuXG4gICAgICB2YXIgcmVnaW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnJztcbiAgICAgIHZhciB0YXJnZXREb21haW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IFRBUkdFVF9ET01BSU47XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBY2NvdW50KTtcblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9hY2NvdW50SWQsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9yZWdpb24sIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAnJ1xuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX3RhcmdldERvbWFpbiwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IFRBUkdFVF9ET01BSU5cbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9kY1Nka3ZlcnNpb24sIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAnJ1xuICAgICAgfSk7XG4gICAgICB0aGlzLmlkID0gaWQ7XG5cbiAgICAgIGlmIChyZWdpb24pIHtcbiAgICAgICAgdGhpcy5yZWdpb24gPSByZWdpb247XG4gICAgICB9XG5cbiAgICAgIGlmICh0YXJnZXREb21haW4pIHtcbiAgICAgICAgdGhpcy50YXJnZXREb21haW4gPSB0YXJnZXREb21haW47XG4gICAgICB9XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKEFjY291bnQsIFt7XG4gICAgICBrZXk6IFwiaWRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9hY2NvdW50SWQpW19hY2NvdW50SWRdO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KGFjY291bnRJZCkge1xuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2FjY291bnRJZClbX2FjY291bnRJZF0gPSBhY2NvdW50SWQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInJlZ2lvblwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlZ2lvbilbX3JlZ2lvbl07XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQocmVnaW9uKSB7XG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVnaW9uKVtfcmVnaW9uXSA9IHJlZ2lvbjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZGNTREtWZXJzaW9uXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfZGNTZGt2ZXJzaW9uKVtfZGNTZGt2ZXJzaW9uXTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldChkY1NES1ZlcnNpb24pIHtcbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9kY1Nka3ZlcnNpb24pW19kY1Nka3ZlcnNpb25dID0gZGNTREtWZXJzaW9uO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ0YXJnZXREb21haW5cIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF90YXJnZXREb21haW4pW190YXJnZXREb21haW5dO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHRhcmdldERvbWFpbikge1xuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3RhcmdldERvbWFpbilbX3RhcmdldERvbWFpbl0gPSB0YXJnZXREb21haW47XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImZpbmFsVGFyZ2V0RG9tYWluXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVnaW9uKSB7XG4gICAgICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHRoaXMucmVnaW9uLCBcIi5cIikuY29uY2F0KHRoaXMudGFyZ2V0RG9tYWluKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodGhpcy50YXJnZXREb21haW4gPT09IFRBUkdFVF9ET01BSU4pIHtcbiAgICAgICAgICAgIHJldHVybiBcIlwiLmNvbmNhdChERUZBVUxUX1JFR0lPTiwgXCIuXCIpLmNvbmNhdCh0aGlzLnRhcmdldERvbWFpbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0RG9tYWluO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRhdGFQb3N0VVJMXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KFRBUkdFVF9QUk9UT0NPTCwgXCIvL1wiKS5jb25jYXQodGhpcy5maW5hbFRhcmdldERvbWFpbiwgXCIvYT90PTk2XCIpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJyZWNvcmRlclVSTFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBcIlwiLmNvbmNhdChUQVJHRVRfUFJPVE9DT0wsIFwiLy9cIikuY29uY2F0KHRoaXMuZmluYWxUYXJnZXREb21haW4sIFwiL3I/cj0xXCIpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJlbWFpbFVSTFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBcIlwiLmNvbmNhdChUQVJHRVRfUFJPVE9DT0wsIFwiLy9cIikuY29uY2F0KHRoaXMuZmluYWxUYXJnZXREb21haW4sIFwiL2U/cj0xXCIpO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBBY2NvdW50O1xuICB9KCk7XG5cbiAgdmFyIHVuc3VwcG9ydGVkS2V5Q2hhclJlZ2V4ID0gbmV3IFJlZ0V4cCgnXlxcXFxzK3xcXFxcXFwufFxcOnxcXFxcXFwkfFxcJ3xcXFwifFxcXFxcXFxcfFxcXFxzKyQnLCAnZycpO1xuICB2YXIgdW5zdXBwb3J0ZWRWYWx1ZUNoYXJSZWdleCA9IG5ldyBSZWdFeHAoXCJeXFxcXHMrfFxcJ3xcXFwifFxcXFxcXFxcfFxcXFxzKyRcIiwgJ2cnKTtcbiAgdmFyIHNpbmdsZVF1b3RlUmVnZXggPSBuZXcgUmVnRXhwKCdcXCcnLCAnZycpO1xuICB2YXIgQ0xFQVIgPSAnY2xlYXInO1xuICB2YXIgQ0hBUkdFRF9JRCA9ICdDaGFyZ2VkIElEJztcbiAgdmFyIENIQVJHRURJRF9DT09LSUVfTkFNRSA9ICdXWlJLX0NIQVJHRURfSUQnO1xuICB2YXIgR0NPT0tJRV9OQU1FID0gJ1daUktfRyc7XG4gIHZhciBLQ09PS0lFX05BTUUgPSAnV1pSS19LJztcbiAgdmFyIENBTVBfQ09PS0lFX05BTUUgPSAnV1pSS19DQU1QJztcbiAgdmFyIFNDT09LSUVfUFJFRklYID0gJ1daUktfUyc7XG4gIHZhciBTQ09PS0lFX0VYUF9USU1FX0lOX1NFQ1MgPSA2MCAqIDIwOyAvLyAyMCBtaW5zXG5cbiAgdmFyIEVWX0NPT0tJRSA9ICdXWlJLX0VWJztcbiAgdmFyIE1FVEFfQ09PS0lFID0gJ1daUktfTUVUQSc7XG4gIHZhciBQUl9DT09LSUUgPSAnV1pSS19QUic7XG4gIHZhciBBUlBfQ09PS0lFID0gJ1daUktfQVJQJztcbiAgdmFyIExDT09LSUVfTkFNRSA9ICdXWlJLX0wnO1xuICB2YXIgR0xPQkFMID0gJ2dsb2JhbCc7XG4gIHZhciBESVNQTEFZID0gJ2Rpc3BsYXknO1xuICB2YXIgV0VCUFVTSF9MU19LRVkgPSAnV1pSS19XUFInO1xuICB2YXIgT1BUT1VUX0tFWSA9ICdvcHRPdXQnO1xuICB2YXIgQ1RfT1BUT1VUX0tFWSA9ICdjdF9vcHRvdXQnO1xuICB2YXIgT1BUT1VUX0NPT0tJRV9FTkRTV0lUSCA9ICc6T08nO1xuICB2YXIgVVNFSVBfS0VZID0gJ3VzZUlQJztcbiAgdmFyIExSVV9DQUNIRSA9ICdXWlJLX1gnO1xuICB2YXIgTFJVX0NBQ0hFX1NJWkUgPSAxMDA7XG4gIHZhciBJU19PVUwgPSAnaXNPVUwnO1xuICB2YXIgRVZUX1BVU0ggPSAncHVzaCc7XG4gIHZhciBFVlRfUElORyA9ICdwaW5nJztcbiAgdmFyIENPT0tJRV9FWFBJUlkgPSA4NjQwMCAqIDM2NSAqIDEwOyAvLyAxMCBZZWFycyBpbiBzZWNvbmRzXG5cbiAgdmFyIE1BWF9UUklFUyA9IDIwMDsgLy8gQVBJIHRyaWVzXG5cbiAgdmFyIEZJUlNUX1BJTkdfRlJFUV9JTl9NSUxMSVMgPSAyICogNjAgKiAxMDAwOyAvLyAyIG1pbnNcblxuICB2YXIgQ09OVElOVU9VU19QSU5HX0ZSRVFfSU5fTUlMTElTID0gNSAqIDYwICogMTAwMDsgLy8gNSBtaW5zXG5cbiAgdmFyIEdST1VQX1NVQlNDUklQVElPTl9SRVFVRVNUX0lEID0gJzInO1xuICB2YXIgY2F0ZWdvcnlMb25nS2V5ID0gJ2NVc1knO1xuICB2YXIgV1pSS19QUkVGSVggPSAnd3pya18nO1xuICB2YXIgV1pSS19JRCA9ICd3enJrX2lkJztcbiAgdmFyIE5PVElGSUNBVElPTl9WSUVXRUQgPSAnTm90aWZpY2F0aW9uIFZpZXdlZCc7XG4gIHZhciBOT1RJRklDQVRJT05fQ0xJQ0tFRCA9ICdOb3RpZmljYXRpb24gQ2xpY2tlZCc7XG4gIHZhciBGSVJFX1BVU0hfVU5SRUdJU1RFUkVEID0gJ1daUktfRlBVJztcbiAgdmFyIFBVU0hfU1VCU0NSSVBUSU9OX0RBVEEgPSAnV1pSS19QU0QnOyAvLyBQVVNIIFNVQlNDUklQVElPTiBEQVRBIEZPUiBSRUdJU1RFUi9VTlJFR0lTVEVSIFRPS0VOXG5cbiAgdmFyIENPTU1BTkRfSU5DUkVNRU5UID0gJyRpbmNyJztcbiAgdmFyIENPTU1BTkRfREVDUkVNRU5UID0gJyRkZWNyJztcbiAgdmFyIENPTU1BTkRfU0VUID0gJyRzZXQnO1xuICB2YXIgQ09NTUFORF9BREQgPSAnJGFkZCc7XG4gIHZhciBDT01NQU5EX1JFTU9WRSA9ICckcmVtb3ZlJztcbiAgdmFyIENPTU1BTkRfREVMRVRFID0gJyRkZWxldGUnO1xuICB2YXIgU1lTVEVNX0VWRU5UUyA9IFsnU3RheWVkJywgJ1VUTSBWaXNpdGVkJywgJ0FwcCBMYXVuY2hlZCcsICdOb3RpZmljYXRpb24gU2VudCcsIE5PVElGSUNBVElPTl9WSUVXRUQsIE5PVElGSUNBVElPTl9DTElDS0VEXTtcblxuICB2YXIgaXNTdHJpbmcgPSBmdW5jdGlvbiBpc1N0cmluZyhpbnB1dCkge1xuICAgIHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnIHx8IGlucHV0IGluc3RhbmNlb2YgU3RyaW5nO1xuICB9O1xuICB2YXIgaXNPYmplY3QgPSBmdW5jdGlvbiBpc09iamVjdChpbnB1dCkge1xuICAgIC8vIFRPRE86IHJlZmluZVxuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBPYmplY3RdJztcbiAgfTtcbiAgdmFyIGlzRGF0ZU9iamVjdCA9IGZ1bmN0aW9uIGlzRGF0ZU9iamVjdChpbnB1dCkge1xuICAgIHJldHVybiBfdHlwZW9mKGlucHV0KSA9PT0gJ29iamVjdCcgJiYgaW5wdXQgaW5zdGFuY2VvZiBEYXRlO1xuICB9O1xuICB2YXIgaXNPYmplY3RFbXB0eSA9IGZ1bmN0aW9uIGlzT2JqZWN0RW1wdHkob2JqKSB7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBvYmopIHtcbiAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuICB2YXIgaXNDb252ZXJ0aWJsZVRvTnVtYmVyID0gZnVuY3Rpb24gaXNDb252ZXJ0aWJsZVRvTnVtYmVyKG4pIHtcbiAgICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pO1xuICB9O1xuICB2YXIgaXNOdW1iZXIgPSBmdW5jdGlvbiBpc051bWJlcihuKSB7XG4gICAgcmV0dXJuIC9eLT9bXFxkLl0rKD86ZS0/XFxkKyk/JC8udGVzdChuKSAmJiB0eXBlb2YgbiA9PT0gJ251bWJlcic7XG4gIH07XG4gIHZhciBpc1ZhbHVlVmFsaWQgPSBmdW5jdGlvbiBpc1ZhbHVlVmFsaWQodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcbiAgdmFyIHJlbW92ZVVuc3VwcG9ydGVkQ2hhcnMgPSBmdW5jdGlvbiByZW1vdmVVbnN1cHBvcnRlZENoYXJzKG8sIGxvZ2dlcikge1xuICAgIC8vIGtleXMgY2FuJ3QgYmUgZ3JlYXRlciB0aGFuIDEwMjQgY2hhcnMsIHZhbHVlcyBjYW4ndCBiZSBncmVhdGVyIHRoYW4gMTAyNCBjaGFyc1xuICAgIGlmIChfdHlwZW9mKG8pID09PSAnb2JqZWN0Jykge1xuICAgICAgZm9yICh2YXIga2V5IGluIG8pIHtcbiAgICAgICAgaWYgKG8uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIHZhciBzYW5pdGl6ZWRWYWwgPSByZW1vdmVVbnN1cHBvcnRlZENoYXJzKG9ba2V5XSwgbG9nZ2VyKTtcbiAgICAgICAgICB2YXIgc2FuaXRpemVkS2V5ID0gdm9pZCAwO1xuICAgICAgICAgIHNhbml0aXplZEtleSA9IHNhbml0aXplKGtleSwgdW5zdXBwb3J0ZWRLZXlDaGFyUmVnZXgpO1xuXG4gICAgICAgICAgaWYgKHNhbml0aXplZEtleS5sZW5ndGggPiAxMDI0KSB7XG4gICAgICAgICAgICBzYW5pdGl6ZWRLZXkgPSBzYW5pdGl6ZWRLZXkuc3Vic3RyaW5nKDAsIDEwMjQpO1xuICAgICAgICAgICAgbG9nZ2VyLnJlcG9ydEVycm9yKDUyMCwgc2FuaXRpemVkS2V5ICsgJy4uLiBsZW5ndGggZXhjZWVkZWQgMTAyNCBjaGFycy4gVHJpbW1lZC4nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkZWxldGUgb1trZXldO1xuICAgICAgICAgIG9bc2FuaXRpemVkS2V5XSA9IHNhbml0aXplZFZhbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdmFsO1xuXG4gICAgICBpZiAoaXNTdHJpbmcobykpIHtcbiAgICAgICAgdmFsID0gc2FuaXRpemUobywgdW5zdXBwb3J0ZWRWYWx1ZUNoYXJSZWdleCk7XG5cbiAgICAgICAgaWYgKHZhbC5sZW5ndGggPiAxMDI0KSB7XG4gICAgICAgICAgdmFsID0gdmFsLnN1YnN0cmluZygwLCAxMDI0KTtcbiAgICAgICAgICBsb2dnZXIucmVwb3J0RXJyb3IoNTIxLCB2YWwgKyAnLi4uIGxlbmd0aCBleGNlZWRlZCAxMDI0IGNoYXJzLiBUcmltbWVkLicpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBvO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cblxuICAgIHJldHVybiBvO1xuICB9O1xuICB2YXIgc2FuaXRpemUgPSBmdW5jdGlvbiBzYW5pdGl6ZShpbnB1dCwgcmVnZXgpIHtcbiAgICByZXR1cm4gaW5wdXQucmVwbGFjZShyZWdleCwgJycpO1xuICB9O1xuXG4gIHZhciBnZXRUb2RheSA9IGZ1bmN0aW9uIGdldFRvZGF5KCkge1xuICAgIHZhciB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgcmV0dXJuIHRvZGF5LmdldEZ1bGxZZWFyKCkgKyAnJyArIHRvZGF5LmdldE1vbnRoKCkgKyAnJyArIHRvZGF5LmdldERheSgpO1xuICB9O1xuICB2YXIgZ2V0Tm93ID0gZnVuY3Rpb24gZ2V0Tm93KCkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMCk7XG4gIH07XG4gIHZhciBjb252ZXJ0VG9XWlJLRGF0ZSA9IGZ1bmN0aW9uIGNvbnZlcnRUb1daUktEYXRlKGRhdGVPYmopIHtcbiAgICByZXR1cm4gJyREXycgKyBNYXRoLnJvdW5kKGRhdGVPYmouZ2V0VGltZSgpIC8gMTAwMCk7XG4gIH07XG4gIHZhciBzZXREYXRlID0gZnVuY3Rpb24gc2V0RGF0ZShkdCkge1xuICAgIC8vIGV4cGVjdGluZyAgeXl5eW1tZGQgZm9ybWF0IGVpdGhlciBhcyBhIG51bWJlciBvciBhIHN0cmluZ1xuICAgIGlmIChpc0RhdGVWYWxpZChkdCkpIHtcbiAgICAgIHJldHVybiAnJERfJyArIGR0O1xuICAgIH1cbiAgfTtcbiAgdmFyIGlzRGF0ZVZhbGlkID0gZnVuY3Rpb24gaXNEYXRlVmFsaWQoZGF0ZSkge1xuICAgIHZhciBtYXRjaGVzID0gL14oXFxkezR9KShcXGR7Mn0pKFxcZHsyfSkkLy5leGVjKGRhdGUpO1xuICAgIGlmIChtYXRjaGVzID09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgICB2YXIgZCA9IG1hdGNoZXNbM107XG4gICAgdmFyIG0gPSBtYXRjaGVzWzJdIC0gMTtcbiAgICB2YXIgeSA9IG1hdGNoZXNbMV07XG4gICAgdmFyIGNvbXBvc2VkRGF0ZSA9IG5ldyBEYXRlKHksIG0sIGQpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cbiAgICByZXR1cm4gY29tcG9zZWREYXRlLmdldERhdGUoKSA9PSBkICYmIGNvbXBvc2VkRGF0ZS5nZXRNb250aCgpID09IG0gJiYgY29tcG9zZWREYXRlLmdldEZ1bGxZZWFyKCkgPT0geTtcbiAgfTtcblxuICB2YXIgU3RvcmFnZU1hbmFnZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN0b3JhZ2VNYW5hZ2VyKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0b3JhZ2VNYW5hZ2VyKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoU3RvcmFnZU1hbmFnZXIsIG51bGwsIFt7XG4gICAgICBrZXk6IFwic2F2ZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNhdmUoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoIWtleSB8fCAhdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5faXNMb2NhbFN0b3JhZ2VTdXBwb3J0ZWQoKSkge1xuICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHZhbHVlIDogSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJyZWFkXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZChrZXkpIHtcbiAgICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGF0YSA9IG51bGw7XG5cbiAgICAgICAgaWYgKHRoaXMuX2lzTG9jYWxTdG9yYWdlU3VwcG9ydGVkKCkpIHtcbiAgICAgICAgICBkYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkYXRhICE9IG51bGwpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJyZW1vdmVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmUoa2V5KSB7XG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2lzTG9jYWxTdG9yYWdlU3VwcG9ydGVkKCkpIHtcbiAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInJlbW92ZUNvb2tpZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUNvb2tpZShuYW1lLCBkb21haW4pIHtcbiAgICAgICAgdmFyIGNvb2tpZVN0ciA9IG5hbWUgKyAnPTsgZXhwaXJlcz1UaHUsIDAxIEphbiAxOTcwIDAwOjAwOjAxIEdNVDsnO1xuXG4gICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICBjb29raWVTdHIgPSBjb29raWVTdHIgKyAnIGRvbWFpbj0nICsgZG9tYWluICsgJzsgcGF0aD0vJztcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZVN0cjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY3JlYXRlQ29va2llXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlQ29va2llKG5hbWUsIHZhbHVlLCBzZWNvbmRzLCBkb21haW4pIHtcbiAgICAgICAgdmFyIGV4cGlyZXMgPSAnJztcbiAgICAgICAgdmFyIGRvbWFpblN0ciA9ICcnO1xuXG4gICAgICAgIGlmIChzZWNvbmRzKSB7XG4gICAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgIGRhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSArIHNlY29uZHMgKiAxMDAwKTtcbiAgICAgICAgICBleHBpcmVzID0gJzsgZXhwaXJlcz0nICsgZGF0ZS50b0dNVFN0cmluZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgIGRvbWFpblN0ciA9ICc7IGRvbWFpbj0nICsgZG9tYWluO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFsdWUgPSBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBuYW1lICsgJz0nICsgdmFsdWUgKyBleHBpcmVzICsgZG9tYWluU3RyICsgJzsgcGF0aD0vJztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmVhZENvb2tpZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlYWRDb29raWUobmFtZSkge1xuICAgICAgICB2YXIgbmFtZUVRID0gbmFtZSArICc9JztcbiAgICAgICAgdmFyIGNhID0gZG9jdW1lbnQuY29va2llLnNwbGl0KCc7Jyk7XG5cbiAgICAgICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgY2EubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgIHZhciBjID0gY2FbaWR4XTtcblxuICAgICAgICAgIHdoaWxlIChjLmNoYXJBdCgwKSA9PT0gJyAnKSB7XG4gICAgICAgICAgICBjID0gYy5zdWJzdHJpbmcoMSwgYy5sZW5ndGgpO1xuICAgICAgICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXG5cbiAgICAgICAgICBpZiAoYy5pbmRleE9mKG5hbWVFUSkgPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChjLnN1YnN0cmluZyhuYW1lRVEubGVuZ3RoLCBjLmxlbmd0aCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfaXNMb2NhbFN0b3JhZ2VTdXBwb3J0ZWRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaXNMb2NhbFN0b3JhZ2VTdXBwb3J0ZWQoKSB7XG4gICAgICAgIHJldHVybiAnbG9jYWxTdG9yYWdlJyBpbiB3aW5kb3cgJiYgd2luZG93LmxvY2FsU3RvcmFnZSAhPT0gbnVsbCAmJiB0eXBlb2Ygd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtID09PSAnZnVuY3Rpb24nO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzYXZlVG9MU29yQ29va2llXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2F2ZVRvTFNvckNvb2tpZShwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICh0aGlzLl9pc0xvY2FsU3RvcmFnZVN1cHBvcnRlZCgpKSB7XG4gICAgICAgICAgICB0aGlzLnNhdmUocHJvcGVydHksIGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeSh2YWx1ZSkpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHByb3BlcnR5ID09PSBHQ09PS0lFX05BTUUpIHtcbiAgICAgICAgICAgICAgdGhpcy5jcmVhdGVDb29raWUocHJvcGVydHksIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSksIDAsIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLmNyZWF0ZUNvb2tpZShwcm9wZXJ0eSwgZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHZhbHVlKSksIDAsIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgJGN0Lmdsb2JhbENhY2hlW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJyZWFkRnJvbUxTb3JDb29raWVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkRnJvbUxTb3JDb29raWUocHJvcGVydHkpIHtcbiAgICAgICAgdmFyIGRhdGE7XG5cbiAgICAgICAgaWYgKCRjdC5nbG9iYWxDYWNoZS5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICAgICAgICByZXR1cm4gJGN0Lmdsb2JhbENhY2hlW3Byb3BlcnR5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9pc0xvY2FsU3RvcmFnZVN1cHBvcnRlZCgpKSB7XG4gICAgICAgICAgZGF0YSA9IHRoaXMucmVhZChwcm9wZXJ0eSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGF0YSA9IHRoaXMucmVhZENvb2tpZShwcm9wZXJ0eSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGF0YSAhPT0gbnVsbCAmJiBkYXRhICE9PSB1bmRlZmluZWQgJiYgISh0eXBlb2YgZGF0YS50cmltID09PSAnZnVuY3Rpb24nICYmIGRhdGEudHJpbSgpID09PSAnJykpIHtcbiAgICAgICAgICB2YXIgdmFsdWU7XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFsdWUgPSBKU09OLnBhcnNlKGRlY29kZVVSSUNvbXBvbmVudChkYXRhKSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudChkYXRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAkY3QuZ2xvYmFsQ2FjaGVbcHJvcGVydHldID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImNyZWF0ZUJyb2FkQ29va2llXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlQnJvYWRDb29raWUobmFtZSwgdmFsdWUsIHNlY29uZHMsIGRvbWFpbikge1xuICAgICAgICAvLyBzZXRzIGNvb2tpZSBvbiB0aGUgYmFzZSBkb21haW4uIGUuZy4gaWYgZG9tYWluIGlzIGJhei5mb28uYmFyLmNvbSwgc2V0IGNvb2tpZSBvbiBcIi5iYXIuY29tXCJcbiAgICAgICAgLy8gVG8gdXBkYXRlIGFuIGV4aXN0aW5nIFwiYnJvYWQgZG9tYWluXCIgY29va2llLCB3ZSBuZWVkIHRvIGtub3cgd2hhdCBkb21haW4gaXQgd2FzIGFjdHVhbGx5IHNldCBvbi5cbiAgICAgICAgLy8gc2luY2UgYSByZXRyaWV2ZWQgY29va2llIG5ldmVyIHRlbGxzIHdoaWNoIGRvbWFpbiBpdCB3YXMgc2V0IG9uLCB3ZSBuZWVkIHRvIHNldCBhbm90aGVyIHRlc3QgY29va2llXG4gICAgICAgIC8vIHRvIGZpbmQgb3V0IHdoaWNoIFwiYnJvYWRlc3RcIiBkb21haW4gdGhlIGNvb2tpZSB3YXMgc2V0IG9uLiBUaGVuIGRlbGV0ZSB0aGUgdGVzdCBjb29raWUsIGFuZCB1c2UgdGhhdCBkb21haW5cbiAgICAgICAgLy8gZm9yIHVwZGF0aW5nIHRoZSBhY3R1YWwgY29va2llLlxuICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgdmFyIGJyb2FkRG9tYWluID0gJGN0LmJyb2FkRG9tYWluO1xuXG4gICAgICAgICAgaWYgKGJyb2FkRG9tYWluID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIGlmIHdlIGRvbid0IGtub3cgdGhlIGJyb2FkRG9tYWluIHlldCwgdGhlbiBmaW5kIG91dFxuICAgICAgICAgICAgdmFyIGRvbWFpblBhcnRzID0gZG9tYWluLnNwbGl0KCcuJyk7XG4gICAgICAgICAgICB2YXIgdGVzdEJyb2FkRG9tYWluID0gJyc7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGlkeCA9IGRvbWFpblBhcnRzLmxlbmd0aCAtIDE7IGlkeCA+PSAwOyBpZHgtLSkge1xuICAgICAgICAgICAgICBpZiAoaWR4ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGVzdEJyb2FkRG9tYWluID0gZG9tYWluUGFydHNbaWR4XSArIHRlc3RCcm9hZERvbWFpbjtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0ZXN0QnJvYWREb21haW4gPSAnLicgKyBkb21haW5QYXJ0c1tpZHhdICsgdGVzdEJyb2FkRG9tYWluO1xuICAgICAgICAgICAgICB9IC8vIG9ubHkgbmVlZGVkIGlmIHRoZSBjb29raWUgYWxyZWFkeSBleGlzdHMgYW5kIG5lZWRzIHRvIGJlIHVwZGF0ZWQuIFNlZSBub3RlIGFib3ZlLlxuXG5cbiAgICAgICAgICAgICAgaWYgKHRoaXMucmVhZENvb2tpZShuYW1lKSkge1xuICAgICAgICAgICAgICAgIC8vIG5vIGd1YXJhbnRlZSB0aGF0IGJyb3dzZXIgd2lsbCBkZWxldGUgY29va2llLCBoZW5jZSBjcmVhdGUgc2hvcnQgbGl2ZWQgY29va2llc1xuICAgICAgICAgICAgICAgIHZhciB0ZXN0Q29va2llTmFtZSA9ICd0ZXN0XycgKyBuYW1lICsgaWR4O1xuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29va2llKHRlc3RDb29raWVOYW1lLCB2YWx1ZSwgMTAsIHRlc3RCcm9hZERvbWFpbik7IC8vIHNlbGYtZGVzdHJ1Y3QgYWZ0ZXIgMTAgc2Vjb25kc1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnJlYWRDb29raWUodGVzdENvb2tpZU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAvLyBpZiB0ZXN0IGNvb2tpZSBub3Qgc2V0LCB0aGVuIHRoZSBhY3R1YWwgY29va2llIHdvdWxkbid0IGhhdmUgYmVlbiBzZXQgb24gdGhpcyBkb21haW4gZWl0aGVyLlxuICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIC8vIGVsc2UgaWYgY29va2llIHNldCwgdGhlbiBkZWxldGUgdGhlIHRlc3QgYW5kIHRoZSBvcmlnaW5hbCBjb29raWVcbiAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQ29va2llKHRlc3RDb29raWVOYW1lLCB0ZXN0QnJvYWREb21haW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29va2llKG5hbWUsIHZhbHVlLCBzZWNvbmRzLCB0ZXN0QnJvYWREb21haW4pO1xuICAgICAgICAgICAgICB2YXIgdGVtcENvb2tpZSA9IHRoaXMucmVhZENvb2tpZShuYW1lKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXG4gICAgICAgICAgICAgIGlmICh0ZW1wQ29va2llID09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgYnJvYWREb21haW4gPSB0ZXN0QnJvYWREb21haW47XG4gICAgICAgICAgICAgICAgJGN0LmJyb2FkRG9tYWluID0gYnJvYWREb21haW47XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb29raWUobmFtZSwgdmFsdWUsIHNlY29uZHMsIGJyb2FkRG9tYWluKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5jcmVhdGVDb29raWUobmFtZSwgdmFsdWUsIHNlY29uZHMsIGRvbWFpbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0TWV0YVByb3BcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNZXRhUHJvcChwcm9wZXJ0eSkge1xuICAgICAgICB2YXIgbWV0YU9iaiA9IHRoaXMucmVhZEZyb21MU29yQ29va2llKE1FVEFfQ09PS0lFKTtcblxuICAgICAgICBpZiAobWV0YU9iaiAhPSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIG1ldGFPYmpbcHJvcGVydHldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldE1ldGFQcm9wXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TWV0YVByb3AocHJvcGVydHksIHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc0xvY2FsU3RvcmFnZVN1cHBvcnRlZCgpKSB7XG4gICAgICAgICAgdmFyIHd6cmtNZXRhT2JqID0gdGhpcy5yZWFkRnJvbUxTb3JDb29raWUoTUVUQV9DT09LSUUpO1xuXG4gICAgICAgICAgaWYgKHd6cmtNZXRhT2JqID09IG51bGwpIHtcbiAgICAgICAgICAgIHd6cmtNZXRhT2JqID0ge307XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB3enJrTWV0YU9ialtwcm9wZXJ0eV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHd6cmtNZXRhT2JqW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuc2F2ZVRvTFNvckNvb2tpZShNRVRBX0NPT0tJRSwgd3pya01ldGFPYmopO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldEFuZENsZWFyTWV0YVByb3BcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBbmRDbGVhck1ldGFQcm9wKHByb3BlcnR5KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0TWV0YVByb3AocHJvcGVydHkpO1xuICAgICAgICB0aGlzLnNldE1ldGFQcm9wKHByb3BlcnR5LCB1bmRlZmluZWQpO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldEluc3RhbnREZWxldGVGbGFnSW5LXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0SW5zdGFudERlbGV0ZUZsYWdJbksoKSB7XG4gICAgICAgIHZhciBrID0gdGhpcy5yZWFkRnJvbUxTb3JDb29raWUoS0NPT0tJRV9OQU1FKTtcblxuICAgICAgICBpZiAoayA9PSBudWxsKSB7XG4gICAgICAgICAgayA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgay5mbGFnID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zYXZlVG9MU29yQ29va2llKEtDT09LSUVfTkFNRSwgayk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImJhY2t1cEV2ZW50XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYmFja3VwRXZlbnQoZGF0YSwgcmVxTm8sIGxvZ2dlcikge1xuICAgICAgICB2YXIgYmFja3VwQXJyID0gdGhpcy5yZWFkRnJvbUxTb3JDb29raWUoTENPT0tJRV9OQU1FKTtcblxuICAgICAgICBpZiAodHlwZW9mIGJhY2t1cEFyciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBiYWNrdXBBcnIgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJhY2t1cEFycltyZXFOb10gPSB7XG4gICAgICAgICAgcTogZGF0YVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNhdmVUb0xTb3JDb29raWUoTENPT0tJRV9OQU1FLCBiYWNrdXBBcnIpO1xuICAgICAgICBsb2dnZXIuZGVidWcoXCJzdG9yZWQgaW4gXCIuY29uY2F0KExDT09LSUVfTkFNRSwgXCIgcmVxTm8gOiBcIikuY29uY2F0KHJlcU5vLCBcIiAtPiBcIikuY29uY2F0KGRhdGEpKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmVtb3ZlQmFja3VwXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlQmFja3VwKHJlc3BObywgbG9nZ2VyKSB7XG4gICAgICAgIHZhciBiYWNrdXBNYXAgPSB0aGlzLnJlYWRGcm9tTFNvckNvb2tpZShMQ09PS0lFX05BTUUpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgYmFja3VwTWFwICE9PSAndW5kZWZpbmVkJyAmJiBiYWNrdXBNYXAgIT09IG51bGwgJiYgdHlwZW9mIGJhY2t1cE1hcFtyZXNwTm9dICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhcImRlbCBldmVudDogXCIuY29uY2F0KHJlc3BObywgXCIgZGF0YS0+IFwiKS5jb25jYXQoYmFja3VwTWFwW3Jlc3BOb10ucSkpO1xuICAgICAgICAgIGRlbGV0ZSBiYWNrdXBNYXBbcmVzcE5vXTtcbiAgICAgICAgICB0aGlzLnNhdmVUb0xTb3JDb29raWUoTENPT0tJRV9OQU1FLCBiYWNrdXBNYXApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFN0b3JhZ2VNYW5hZ2VyO1xuICB9KCk7XG4gIHZhciAkY3QgPSB7XG4gICAgZ2xvYmFsQ2FjaGU6IHtcbiAgICAgIGdjb29raWU6IG51bGwsXG4gICAgICBSRVFfTjogMCxcbiAgICAgIFJFU1BfTjogMFxuICAgIH0sXG4gICAgTFJVX0NBQ0hFOiBudWxsLFxuICAgIGdsb2JhbFByb2ZpbGVNYXA6IHVuZGVmaW5lZCxcbiAgICBnbG9iYWxFdmVudHNNYXA6IHVuZGVmaW5lZCxcbiAgICBibG9ja1JlcXVlc3Q6IGZhbHNlLFxuICAgIGlzT3B0SW5SZXF1ZXN0OiBmYWxzZSxcbiAgICBicm9hZERvbWFpbjogbnVsbCxcbiAgICB3ZWJQdXNoRW5hYmxlZDogbnVsbCxcbiAgICBjYW1wYWlnbkRpdk1hcDoge30sXG4gICAgY3VycmVudFNlc3Npb25JZDogbnVsbCxcbiAgICB3aXpfY291bnRlcjogMCxcbiAgICAvLyB0byBrZWVwIHRyYWNrIG9mIG51bWJlciBvZiB0aW1lcyB3ZSBsb2FkIHRoZSBib2R5XG4gICAgbm90aWZBcGk6IHtcbiAgICAgIG5vdGlmRW5hYmxlZEZyb21BcGk6IGZhbHNlXG4gICAgfSxcbiAgICAvLyBoZWxwZXIgdmFyaWFibGUgdG8gaGFuZGxlIHJhY2UgY29uZGl0aW9uIGFuZCBjaGVjayB3aGVuIG5vdGlmaWNhdGlvbnMgd2VyZSBjYWxsZWRcbiAgICB1bnN1Ykdyb3VwczogW10sXG4gICAgdXBkYXRlZENhdGVnb3J5TG9uZzogbnVsbCxcbiAgICBpc1ByaXZhY3lBcnJQdXNoZWQ6IGZhbHNlLFxuICAgIHByaXZhY3lBcnJheTogW10gLy8gZG9tYWluOiB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUsIHVybCAtPiBnZXRIb3N0TmFtZSgpXG4gICAgLy8gZ2Nvb2tpZTogLT4gZGV2aWNlXG5cbiAgfTtcblxuICB2YXIgX2tleU9yZGVyID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJrZXlPcmRlclwiKTtcblxuICB2YXIgX2RlbGV0ZUZyb21PYmplY3QgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImRlbGV0ZUZyb21PYmplY3RcIik7XG5cbiAgdmFyIExSVUNhY2hlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMUlVDYWNoZShtYXgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMUlVDYWNoZSk7XG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfZGVsZXRlRnJvbU9iamVjdCwge1xuICAgICAgICB2YWx1ZTogX2RlbGV0ZUZyb21PYmplY3QyXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfa2V5T3JkZXIsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgdGhpcy5tYXggPSBtYXg7XG4gICAgICB2YXIgbHJ1Q2FjaGUgPSBTdG9yYWdlTWFuYWdlci5yZWFkRnJvbUxTb3JDb29raWUoTFJVX0NBQ0hFKTtcblxuICAgICAgaWYgKGxydUNhY2hlKSB7XG4gICAgICAgIHZhciB0ZW1wTHJ1Q2FjaGUgPSB7fTtcbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9rZXlPcmRlcilbX2tleU9yZGVyXSA9IFtdO1xuICAgICAgICBscnVDYWNoZSA9IGxydUNhY2hlLmNhY2hlO1xuXG4gICAgICAgIGZvciAodmFyIGVudHJ5IGluIGxydUNhY2hlKSB7XG4gICAgICAgICAgaWYgKGxydUNhY2hlLmhhc093blByb3BlcnR5KGVudHJ5KSkge1xuICAgICAgICAgICAgdGVtcExydUNhY2hlW2xydUNhY2hlW2VudHJ5XVswXV0gPSBscnVDYWNoZVtlbnRyeV1bMV07XG5cbiAgICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfa2V5T3JkZXIpW19rZXlPcmRlcl0ucHVzaChscnVDYWNoZVtlbnRyeV1bMF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FjaGUgPSB0ZW1wTHJ1Q2FjaGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNhY2hlID0ge307XG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfa2V5T3JkZXIpW19rZXlPcmRlcl0gPSBbXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTFJVQ2FjaGUsIFt7XG4gICAgICBrZXk6IFwiZ2V0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgICAgICB2YXIgaXRlbSA9IHRoaXMuY2FjaGVba2V5XTtcblxuICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgIHRoaXMuY2FjaGUgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2RlbGV0ZUZyb21PYmplY3QpW19kZWxldGVGcm9tT2JqZWN0XShrZXksIHRoaXMuY2FjaGUpO1xuICAgICAgICAgIHRoaXMuY2FjaGVba2V5XSA9IGl0ZW07XG5cbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2tleU9yZGVyKVtfa2V5T3JkZXJdLnB1c2goa2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2F2ZUNhY2hlVG9MUyh0aGlzLmNhY2hlKTtcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHZhciBpdGVtID0gdGhpcy5jYWNoZVtrZXldO1xuXG4gICAgICAgIHZhciBhbGxLZXlzID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9rZXlPcmRlcilbX2tleU9yZGVyXTtcblxuICAgICAgICBpZiAoaXRlbSAhPSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5jYWNoZSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfZGVsZXRlRnJvbU9iamVjdClbX2RlbGV0ZUZyb21PYmplY3RdKGtleSwgdGhpcy5jYWNoZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoYWxsS2V5cy5sZW5ndGggPT09IHRoaXMubWF4KSB7XG4gICAgICAgICAgdGhpcy5jYWNoZSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfZGVsZXRlRnJvbU9iamVjdClbX2RlbGV0ZUZyb21PYmplY3RdKGFsbEtleXNbMF0sIHRoaXMuY2FjaGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYWNoZVtrZXldID0gdmFsdWU7XG5cbiAgICAgICAgaWYgKF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfa2V5T3JkZXIpW19rZXlPcmRlcl1bX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9rZXlPcmRlcilbX2tleU9yZGVyXSAtIDFdICE9PSBrZXkpIHtcbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2tleU9yZGVyKVtfa2V5T3JkZXJdLnB1c2goa2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2F2ZUNhY2hlVG9MUyh0aGlzLmNhY2hlKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2F2ZUNhY2hlVG9MU1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNhdmVDYWNoZVRvTFMoY2FjaGUpIHtcbiAgICAgICAgdmFyIG9ialRvQXJyYXkgPSBbXTtcblxuICAgICAgICB2YXIgYWxsS2V5cyA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfa2V5T3JkZXIpW19rZXlPcmRlcl07XG5cbiAgICAgICAgZm9yICh2YXIgaW5kZXggaW4gYWxsS2V5cykge1xuICAgICAgICAgIGlmIChhbGxLZXlzLmhhc093blByb3BlcnR5KGluZGV4KSkge1xuICAgICAgICAgICAgdmFyIHRlbXAgPSBbXTtcbiAgICAgICAgICAgIHRlbXAucHVzaChhbGxLZXlzW2luZGV4XSk7XG4gICAgICAgICAgICB0ZW1wLnB1c2goY2FjaGVbYWxsS2V5c1tpbmRleF1dKTtcbiAgICAgICAgICAgIG9ialRvQXJyYXkucHVzaCh0ZW1wKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBTdG9yYWdlTWFuYWdlci5zYXZlVG9MU29yQ29va2llKExSVV9DQUNIRSwge1xuICAgICAgICAgIGNhY2hlOiBvYmpUb0FycmF5XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRLZXlcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRLZXkodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYWxsS2V5cyA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfa2V5T3JkZXIpW19rZXlPcmRlcl07XG5cbiAgICAgICAgZm9yICh2YXIgaW5kZXggaW4gYWxsS2V5cykge1xuICAgICAgICAgIGlmIChhbGxLZXlzLmhhc093blByb3BlcnR5KGluZGV4KSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2FjaGVbYWxsS2V5c1tpbmRleF1dID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICByZXR1cm4gYWxsS2V5c1tpbmRleF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldFNlY29uZExhc3RLZXlcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTZWNvbmRMYXN0S2V5KCkge1xuICAgICAgICB2YXIga2V5c0FyciA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfa2V5T3JkZXIpW19rZXlPcmRlcl07XG5cbiAgICAgICAgaWYgKGtleXNBcnIgIT0gbnVsbCAmJiBrZXlzQXJyLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICByZXR1cm4ga2V5c0FycltrZXlzQXJyLmxlbmd0aCAtIDJdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRMYXN0S2V5XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TGFzdEtleSgpIHtcbiAgICAgICAgdmFyIGtleXNMZW5ndGggPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2tleU9yZGVyKVtfa2V5T3JkZXJdLmxlbmd0aDtcblxuICAgICAgICBpZiAoa2V5c0xlbmd0aCkge1xuICAgICAgICAgIHJldHVybiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2tleU9yZGVyKVtfa2V5T3JkZXJdW2tleXNMZW5ndGggLSAxXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMUlVDYWNoZTtcbiAgfSgpO1xuXG4gIHZhciBfZGVsZXRlRnJvbU9iamVjdDIgPSBmdW5jdGlvbiBfZGVsZXRlRnJvbU9iamVjdDIoa2V5LCBvYmopIHtcbiAgICB2YXIgYWxsS2V5cyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9rZXlPcmRlcilbX2tleU9yZGVyXSkpO1xuICAgIHZhciBuZXdDYWNoZSA9IHt9O1xuICAgIHZhciBpbmRleFRvRGVsZXRlO1xuXG4gICAgZm9yICh2YXIgaW5kZXggaW4gYWxsS2V5cykge1xuICAgICAgaWYgKGFsbEtleXMuaGFzT3duUHJvcGVydHkoaW5kZXgpKSB7XG4gICAgICAgIGlmIChhbGxLZXlzW2luZGV4XSAhPT0ga2V5KSB7XG4gICAgICAgICAgbmV3Q2FjaGVbYWxsS2V5c1tpbmRleF1dID0gb2JqW2FsbEtleXNbaW5kZXhdXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbmRleFRvRGVsZXRlID0gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBhbGxLZXlzLnNwbGljZShpbmRleFRvRGVsZXRlLCAxKTtcbiAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2tleU9yZGVyKVtfa2V5T3JkZXJdID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShhbGxLZXlzKSk7XG4gICAgcmV0dXJuIG5ld0NhY2hlO1xuICB9O1xuXG4gIHZhciBfbG9nZ2VyID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJsb2dnZXJcIik7XG5cbiAgdmFyIF9yZXF1ZXN0ID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJyZXF1ZXN0XCIpO1xuXG4gIHZhciBfZGV2aWNlID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJkZXZpY2VcIik7XG5cbiAgdmFyIF9zZXNzaW9uID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJzZXNzaW9uXCIpO1xuXG4gIHZhciBDbGV2ZXJUYXBBUEkgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENsZXZlclRhcEFQSShfcmVmKSB7XG4gICAgICB2YXIgbG9nZ2VyID0gX3JlZi5sb2dnZXIsXG4gICAgICAgICAgcmVxdWVzdCA9IF9yZWYucmVxdWVzdCxcbiAgICAgICAgICBkZXZpY2UgPSBfcmVmLmRldmljZSxcbiAgICAgICAgICBzZXNzaW9uID0gX3JlZi5zZXNzaW9uO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2xldmVyVGFwQVBJKTtcblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9sb2dnZXIsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9yZXF1ZXN0LCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfZGV2aWNlLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfc2Vzc2lvbiwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlcilbX2xvZ2dlcl0gPSBsb2dnZXI7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlcXVlc3QpW19yZXF1ZXN0XSA9IHJlcXVlc3Q7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2RldmljZSlbX2RldmljZV0gPSBkZXZpY2U7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3Nlc3Npb24pW19zZXNzaW9uXSA9IHNlc3Npb247XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGdsb2JhbCBnY29va2llXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNlc3Npb25cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlc3VtZSB0cnVlIGluIGNhc2Ugb2YgT1VMIChvbiB1c2VyIGxvZ2luKSwgZmFsc2UgaW4gYWxsIG90aGVyIGNhc2VzXG4gICAgICogdHJ1ZSBzaWduaWZpZXMgdGhhdCB0aGUgcmVzcG9uc2UgaW4gT1VMIHJlc3BvbnNlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJlc3BOdW1iZXIgdGhlIGluZGV4IG9mIHRoZSByZXF1ZXN0IGluIGJhY2t1cG1hbmFnZXJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9wdE91dFJlc3BvbnNlXG4gICAgICogQHJldHVybnNcbiAgICAgKi9cblxuXG4gICAgX2NyZWF0ZUNsYXNzKENsZXZlclRhcEFQSSwgW3tcbiAgICAgIGtleTogXCJzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcyhnbG9iYWwsIHNlc3Npb24sIHJlc3VtZSwgcmVzcE51bWJlciwgb3B0T3V0UmVzcG9uc2UpIHtcbiAgICAgICAgLy8gY2FsbCBiYWNrIGZ1bmN0aW9uIHVzZWQgdG8gc3RvcmUgZ2xvYmFsIGFuZCBzZXNzaW9uIGlkcyBmb3IgdGhlIHVzZXJcbiAgICAgICAgaWYgKHR5cGVvZiByZXNwTnVtYmVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHJlc3BOdW1iZXIgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgU3RvcmFnZU1hbmFnZXIucmVtb3ZlQmFja3VwKHJlc3BOdW1iZXIsIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyKVtfbG9nZ2VyXSk7XG5cbiAgICAgICAgaWYgKHJlc3BOdW1iZXIgPiAkY3QuZ2xvYmFsQ2FjaGUuUkVRX04pIHtcbiAgICAgICAgICAvLyByZXF1ZXN0IGZvciBzb21lIG90aGVyIHVzZXIgc28gaWdub3JlXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIGZvciBhIGNvbmRpdGlvbiB3aGVuIGEgcmVxdWVzdCdzIHJlc3BvbnNlIGlzIHJlY2VpdmVkXG4gICAgICAgIC8vIHdoaWxlIGFuIE9VTCByZXF1ZXN0IGlzIGFscmVhZHkgaW4gcHJvZ3Jlc3NcbiAgICAgICAgLy8gcmVtb3ZlIHRoZSByZXF1ZXN0IGZyb20gYmFja3VwIGNhY2hlIGFuZCByZXR1cm5cblxuXG4gICAgICAgIGlmICh3aW5kb3cuaXNPVUxJblByb2dyZXNzICYmICFyZXN1bWUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gc2V0IGlzT1VMSW5Qcm9ncmVzcyB0byBmYWxzZSwgaWYgcmVzdW1lIGlzIHRydWVcblxuXG4gICAgICAgIGlmIChyZXN1bWUpIHtcbiAgICAgICAgICB3aW5kb3cuaXNPVUxJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgIH0gLy8gb3B0b3V0XG5cblxuICAgICAgICBpZiAoIWlzVmFsdWVWYWxpZChfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2RldmljZSlbX2RldmljZV0uZ2Nvb2tpZSkgfHwgcmVzdW1lIHx8IHR5cGVvZiBvcHRPdXRSZXNwb25zZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIpW19sb2dnZXJdLmRlYnVnKFwiQ29va2llIHdhcyBcIi5jb25jYXQoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9kZXZpY2UpW19kZXZpY2VdLmdjb29raWUsIFwiIHNldCB0byBcIikuY29uY2F0KGdsb2JhbCkpO1xuXG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9kZXZpY2UpW19kZXZpY2VdLmdjb29raWUgPSBnbG9iYWw7XG5cbiAgICAgICAgICBpZiAoIWlzVmFsdWVWYWxpZChfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2RldmljZSlbX2RldmljZV0uZ2Nvb2tpZSkpIHtcbiAgICAgICAgICAgIC8vIGNsZWFyIHVzZUlQIG1ldGEgcHJvcFxuICAgICAgICAgICAgU3RvcmFnZU1hbmFnZXIuZ2V0QW5kQ2xlYXJNZXRhUHJvcChVU0VJUF9LRVkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChnbG9iYWwgJiYgU3RvcmFnZU1hbmFnZXIuX2lzTG9jYWxTdG9yYWdlU3VwcG9ydGVkKCkpIHtcbiAgICAgICAgICAgIGlmICgkY3QuTFJVX0NBQ0hFID09IG51bGwpIHtcbiAgICAgICAgICAgICAgJGN0LkxSVV9DQUNIRSA9IG5ldyBMUlVDYWNoZShMUlVfQ0FDSEVfU0laRSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBrSWRGcm9tTFMgPSBTdG9yYWdlTWFuYWdlci5yZWFkRnJvbUxTb3JDb29raWUoS0NPT0tJRV9OQU1FKTtcblxuICAgICAgICAgICAgaWYgKGtJZEZyb21MUyAhPSBudWxsICYmIGtJZEZyb21MUy5pZCAmJiByZXN1bWUpIHtcbiAgICAgICAgICAgICAgdmFyIGd1aWRGcm9tTFJVQ2FjaGUgPSAkY3QuTFJVX0NBQ0hFLmNhY2hlW2tJZEZyb21MUy5pZF07XG5cbiAgICAgICAgICAgICAgaWYgKCFndWlkRnJvbUxSVUNhY2hlKSB7XG4gICAgICAgICAgICAgICAgU3RvcmFnZU1hbmFnZXIuc2F2ZVRvTFNvckNvb2tpZShGSVJFX1BVU0hfVU5SRUdJU1RFUkVELCB0cnVlKTsgLy8gcmVwbGFjZSBsb2dpbiBpZGVudGl0eSBpbiBPVUwgcmVxdWVzdFxuICAgICAgICAgICAgICAgIC8vIHdpdGggdGhlIGdjb29raWUgcmV0dXJuZWQgaW4gZXhjaGFuZ2VcblxuICAgICAgICAgICAgICAgICRjdC5MUlVfQ0FDSEUuc2V0KGtJZEZyb21MUy5pZCwgZ2xvYmFsKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBTdG9yYWdlTWFuYWdlci5zYXZlVG9MU29yQ29va2llKEdDT09LSUVfTkFNRSwgZ2xvYmFsKTtcbiAgICAgICAgICAgIHZhciBsYXN0SyA9ICRjdC5MUlVfQ0FDSEUuZ2V0U2Vjb25kTGFzdEtleSgpO1xuXG4gICAgICAgICAgICBpZiAoU3RvcmFnZU1hbmFnZXIucmVhZEZyb21MU29yQ29va2llKEZJUkVfUFVTSF9VTlJFR0lTVEVSRUQpICYmIGxhc3RLICE9PSAtMSkge1xuICAgICAgICAgICAgICB2YXIgbGFzdEdVSUQgPSAkY3QuTFJVX0NBQ0hFLmNhY2hlW2xhc3RLXTtcblxuICAgICAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlcXVlc3QpW19yZXF1ZXN0XS51bnJlZ2lzdGVyVG9rZW5Gb3JHdWlkKGxhc3RHVUlEKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBTdG9yYWdlTWFuYWdlci5jcmVhdGVCcm9hZENvb2tpZShHQ09PS0lFX05BTUUsIGdsb2JhbCwgQ09PS0lFX0VYUElSWSwgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lKTtcbiAgICAgICAgU3RvcmFnZU1hbmFnZXIuc2F2ZVRvTFNvckNvb2tpZShHQ09PS0lFX05BTUUsIGdsb2JhbCk7XG5cbiAgICAgICAgaWYgKFN0b3JhZ2VNYW5hZ2VyLl9pc0xvY2FsU3RvcmFnZVN1cHBvcnRlZCgpKSB7XG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXNzaW9uKVtfc2Vzc2lvbl0ubWFuYWdlU2Vzc2lvbihzZXNzaW9uKTtcbiAgICAgICAgfSAvLyBzZXNzaW9uIGNvb2tpZVxuXG5cbiAgICAgICAgdmFyIG9iaiA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfc2Vzc2lvbilbX3Nlc3Npb25dLmdldFNlc3Npb25Db29raWVPYmplY3QoKTsgLy8gZm9yIHRoZSByYWNlLWNvbmRpdGlvbiB3aGVyZSB0d28gcmVzcG9uc2VzIGNvbWUgYmFjayB3aXRoIGRpZmZlcmVudCBzZXNzaW9uIGlkcy4gZG9uJ3Qgd3JpdGUgdGhlIG9sZGVyIHNlc3Npb24gaWQuXG5cblxuICAgICAgICBpZiAodHlwZW9mIG9iai5zID09PSAndW5kZWZpbmVkJyB8fCBvYmoucyA8PSBzZXNzaW9uKSB7XG4gICAgICAgICAgb2JqLnMgPSBzZXNzaW9uO1xuICAgICAgICAgIG9iai50ID0gZ2V0Tm93KCk7IC8vIHRpbWUgb2YgbGFzdCByZXNwb25zZSBmcm9tIHNlcnZlclxuXG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXNzaW9uKVtfc2Vzc2lvbl0uc2V0U2Vzc2lvbkNvb2tpZU9iamVjdChvYmopO1xuICAgICAgICB9IC8vIHNldCBibG9ja1JlcXVlc3QgdG8gZmFsc2Ugb25seSBpZiB0aGUgZGV2aWNlIGhhcyBhIHZhbGlkIGdjb29raWVcblxuXG4gICAgICAgIGlmIChpc1ZhbHVlVmFsaWQoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9kZXZpY2UpW19kZXZpY2VdLmdjb29raWUpKSB7XG4gICAgICAgICAgJGN0LmJsb2NrUmVxdWVzdCA9IGZhbHNlO1xuICAgICAgICB9IC8vIGlmIHJlcXVlc3QgYXJlIG5vdCBibG9ja2VkIGFuZCBvdGhlciBuZXR3b3JrIHJlcXVlc3QocykgYXJlIG5vdCBiZWluZyBwcm9jZXNzZWRcbiAgICAgICAgLy8gcHJvY2VzcyByZXF1ZXN0KHMpIGZyb20gYmFja3VwIGZyb20gbG9jYWwgc3RvcmFnZSBvciBjb29raWVcblxuXG4gICAgICAgIGlmICghJGN0LmJsb2NrUmVxdWVzdCAmJiAhX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0KVtfcmVxdWVzdF0ucHJvY2Vzc2luZ0JhY2t1cCkge1xuICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdClbX3JlcXVlc3RdLnByb2Nlc3NCYWNrdXBFdmVudHMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgICRjdC5nbG9iYWxDYWNoZS5SRVNQX04gPSByZXNwTnVtYmVyO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBDbGV2ZXJUYXBBUEk7XG4gIH0oKTtcblxuICB2YXIgX2xvZ2dlciQxID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJsb2dnZXJcIik7XG5cbiAgdmFyIERldmljZU1hbmFnZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERldmljZU1hbmFnZXIoX3JlZikge1xuICAgICAgdmFyIGxvZ2dlciA9IF9yZWYubG9nZ2VyO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGV2aWNlTWFuYWdlcik7XG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfbG9nZ2VyJDEsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgdGhpcy5nY29va2llID0gdm9pZCAwO1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkMSlbX2xvZ2dlciQxXSA9IGxvZ2dlcjtcbiAgICAgIHRoaXMuZ2Nvb2tpZSA9IHRoaXMuZ2V0R3VpZCgpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhEZXZpY2VNYW5hZ2VyLCBbe1xuICAgICAga2V5OiBcImdldEd1aWRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRHdWlkKCkge1xuICAgICAgICB2YXIgZ3VpZCA9IG51bGw7XG5cbiAgICAgICAgaWYgKGlzVmFsdWVWYWxpZCh0aGlzLmdjb29raWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2Nvb2tpZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChTdG9yYWdlTWFuYWdlci5faXNMb2NhbFN0b3JhZ2VTdXBwb3J0ZWQoKSkge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IFN0b3JhZ2VNYW5hZ2VyLnJlYWQoR0NPT0tJRV9OQU1FKTtcblxuICAgICAgICAgIGlmIChpc1ZhbHVlVmFsaWQodmFsdWUpKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBndWlkID0gSlNPTi5wYXJzZShkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkMSlbX2xvZ2dlciQxXS5kZWJ1ZygnQ2Fubm90IHBhcnNlIEdjb29raWUgZnJvbSBsb2NhbHN0b3JhZ2UgLSBtdXN0IGJlIGVuY29kZWQgJyArIHZhbHVlKTsgLy8gYXNzdW1taW5nIGd1aWRzIGFyZSBvZiBzaXplIDMyLiBzdXBwb3J0aW5nIGJvdGggZm9ybWF0cy5cbiAgICAgICAgICAgICAgLy8gZ3VpZCBjYW4gaGF2ZSBlbmNvZGVkVVJJQ29tcG9uZW50IG9yIGJlIHdpdGhvdXQgaXQuXG4gICAgICAgICAgICAgIC8vIDEuNTZlNDA3OGVkMTU3NDk5MjhjMDQyNDc5ZWMyYjRkNDcgLSBicmVha3Mgb24gSlNPTi5wYXJzZShkZWNvZGVVUklDb21wb25lbnQoKSlcbiAgICAgICAgICAgICAgLy8gMi4lMjI1NmU0MDc4ZWQxNTc0OTkyOGMwNDI0NzllYzJiNGQ0NyUyMlxuXG5cbiAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMzIpIHtcbiAgICAgICAgICAgICAgICBndWlkID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgU3RvcmFnZU1hbmFnZXIuc2F2ZVRvTFNvckNvb2tpZShHQ09PS0lFX05BTUUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQxKVtfbG9nZ2VyJDFdLmVycm9yKCdJbGxlZ2FsIGd1aWQgJyArIHZhbHVlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSAvLyBQZXJzaXN0IHRvIGNvb2tpZSBzdG9yYWdlIGlmIG5vdCBwcmVzZW50IHRoZXJlLlxuXG5cbiAgICAgICAgICAgIGlmIChpc1ZhbHVlVmFsaWQoZ3VpZCkpIHtcbiAgICAgICAgICAgICAgU3RvcmFnZU1hbmFnZXIuY3JlYXRlQnJvYWRDb29raWUoR0NPT0tJRV9OQU1FLCBndWlkLCBDT09LSUVfRVhQSVJZLCB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNWYWx1ZVZhbGlkKGd1aWQpKSB7XG4gICAgICAgICAgZ3VpZCA9IFN0b3JhZ2VNYW5hZ2VyLnJlYWRDb29raWUoR0NPT0tJRV9OQU1FKTtcblxuICAgICAgICAgIGlmIChpc1ZhbHVlVmFsaWQoZ3VpZCkgJiYgKGd1aWQuaW5kZXhPZignJScpID09PSAwIHx8IGd1aWQuaW5kZXhPZignXFwnJykgPT09IDAgfHwgZ3VpZC5pbmRleE9mKCdcIicpID09PSAwKSkge1xuICAgICAgICAgICAgZ3VpZCA9IG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGlzVmFsdWVWYWxpZChndWlkKSkge1xuICAgICAgICAgICAgU3RvcmFnZU1hbmFnZXIuc2F2ZVRvTFNvckNvb2tpZShHQ09PS0lFX05BTUUsIGd1aWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBndWlkO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBEZXZpY2VNYW5hZ2VyO1xuICB9KCk7XG5cbiAgdmFyIERBVEFfTk9UX1NFTlRfVEVYVCA9ICdUaGlzIHByb3BlcnR5IGhhcyBiZWVuIGlnbm9yZWQuJztcbiAgdmFyIENMRVZFUlRBUF9FUlJPUl9QUkVGSVggPSAnQ2xldmVyVGFwIGVycm9yOic7IC8vIEZvcm1lcmx5IHd6cmtfZXJyb3JfdHh0XG5cbiAgdmFyIEVNQkVEX0VSUk9SID0gXCJcIi5jb25jYXQoQ0xFVkVSVEFQX0VSUk9SX1BSRUZJWCwgXCIgSW5jb3JyZWN0IGVtYmVkIHNjcmlwdC5cIik7XG4gIHZhciBFVkVOVF9FUlJPUiA9IFwiXCIuY29uY2F0KENMRVZFUlRBUF9FUlJPUl9QUkVGSVgsIFwiIEV2ZW50IHN0cnVjdHVyZSBub3QgdmFsaWQuIFwiKS5jb25jYXQoREFUQV9OT1RfU0VOVF9URVhUKTtcbiAgdmFyIEdFTkRFUl9FUlJPUiA9IFwiXCIuY29uY2F0KENMRVZFUlRBUF9FUlJPUl9QUkVGSVgsIFwiIEdlbmRlciB2YWx1ZSBzaG91bGQgYmUgZWl0aGVyIE0gb3IgRi4gXCIpLmNvbmNhdChEQVRBX05PVF9TRU5UX1RFWFQpO1xuICB2YXIgRU1QTE9ZRURfRVJST1IgPSBcIlwiLmNvbmNhdChDTEVWRVJUQVBfRVJST1JfUFJFRklYLCBcIiBFbXBsb3llZCB2YWx1ZSBzaG91bGQgYmUgZWl0aGVyIFkgb3IgTi4gXCIpLmNvbmNhdChEQVRBX05PVF9TRU5UX1RFWFQpO1xuICB2YXIgTUFSUklFRF9FUlJPUiA9IFwiXCIuY29uY2F0KENMRVZFUlRBUF9FUlJPUl9QUkVGSVgsIFwiIE1hcnJpZWQgdmFsdWUgc2hvdWxkIGJlIGVpdGhlciBZIG9yIE4uIFwiKS5jb25jYXQoREFUQV9OT1RfU0VOVF9URVhUKTtcbiAgdmFyIEVEVUNBVElPTl9FUlJPUiA9IFwiXCIuY29uY2F0KENMRVZFUlRBUF9FUlJPUl9QUkVGSVgsIFwiIEVkdWNhdGlvbiB2YWx1ZSBzaG91bGQgYmUgZWl0aGVyIFNjaG9vbCwgQ29sbGVnZSBvciBHcmFkdWF0ZS4gXCIpLmNvbmNhdChEQVRBX05PVF9TRU5UX1RFWFQpO1xuICB2YXIgQUdFX0VSUk9SID0gXCJcIi5jb25jYXQoQ0xFVkVSVEFQX0VSUk9SX1BSRUZJWCwgXCIgQWdlIHZhbHVlIHNob3VsZCBiZSBhIG51bWJlci4gXCIpLmNvbmNhdChEQVRBX05PVF9TRU5UX1RFWFQpO1xuICB2YXIgRE9CX0VSUk9SID0gXCJcIi5jb25jYXQoQ0xFVkVSVEFQX0VSUk9SX1BSRUZJWCwgXCIgRE9CIHZhbHVlIHNob3VsZCBiZSBhIERhdGUgT2JqZWN0XCIpO1xuICB2YXIgRU5VTV9GT1JNQVRfRVJST1IgPSBcIlwiLmNvbmNhdChDTEVWRVJUQVBfRVJST1JfUFJFRklYLCBcIiBzZXRFbnVtKHZhbHVlKS4gdmFsdWUgc2hvdWxkIGJlIGEgc3RyaW5nIG9yIGEgbnVtYmVyXCIpO1xuICB2YXIgUEhPTkVfRk9STUFUX0VSUk9SID0gXCJcIi5jb25jYXQoQ0xFVkVSVEFQX0VSUk9SX1BSRUZJWCwgXCIgUGhvbmUgbnVtYmVyIHNob3VsZCBiZSBmb3JtYXR0ZWQgYXMgK1tjb3VudHJ5IGNvZGVdW251bWJlcl1cIik7XG5cbiAgdmFyIF9nbG9iYWxDaGFyZ2VkSWQ7XG5cbiAgdmFyIGlzRXZlbnRTdHJ1Y3R1cmVGbGF0ID0gZnVuY3Rpb24gaXNFdmVudFN0cnVjdHVyZUZsYXQoZXZlbnRPYmopIHtcbiAgICAvLyBFdmVudHMgY2Fubm90IGhhdmUgbmVzdGVkIHN0cnVjdHVyZSBvciBBcnJheXNcbiAgICBpZiAoaXNPYmplY3QoZXZlbnRPYmopKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gZXZlbnRPYmopIHtcbiAgICAgICAgaWYgKGV2ZW50T2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBpZiAoaXNPYmplY3QoZXZlbnRPYmpba2V5XSkgfHwgQXJyYXkuaXNBcnJheShldmVudE9ialtrZXldKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNEYXRlT2JqZWN0KGV2ZW50T2JqW2tleV0pKSB7XG4gICAgICAgICAgICBldmVudE9ialtrZXldID0gY29udmVydFRvV1pSS0RhdGUoZXZlbnRPYmpba2V5XSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcbiAgdmFyIGlzQ2hhcmdlZEV2ZW50U3RydWN0dXJlVmFsaWQgPSBmdW5jdGlvbiBpc0NoYXJnZWRFdmVudFN0cnVjdHVyZVZhbGlkKGNoYXJnZWRPYmosIGxvZ2dlcikge1xuICAgIGlmIChpc09iamVjdChjaGFyZ2VkT2JqKSkge1xuICAgICAgZm9yICh2YXIga2V5IGluIGNoYXJnZWRPYmopIHtcbiAgICAgICAgaWYgKGNoYXJnZWRPYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIGlmIChrZXkgPT09ICdJdGVtcycpIHtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShjaGFyZ2VkT2JqW2tleV0pKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNoYXJnZWRPYmpba2V5XS5sZW5ndGggPiAxNikge1xuICAgICAgICAgICAgICBsb2dnZXIucmVwb3J0RXJyb3IoNTIyLCAnQ2hhcmdlZCBJdGVtcyBleGNlZWQgMTYgbGltaXQuIEFjdHVhbCBjb3VudDogJyArIGNoYXJnZWRPYmpba2V5XS5sZW5ndGggKyAnLiBBZGRpdGlvbmFsIGl0ZW1zIHdpbGwgYmUgZHJvcHBlZC4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yICh2YXIgaXRlbUtleSBpbiBjaGFyZ2VkT2JqW2tleV0pIHtcbiAgICAgICAgICAgICAgaWYgKGNoYXJnZWRPYmpba2V5XS5oYXNPd25Qcm9wZXJ0eShpdGVtS2V5KSkge1xuICAgICAgICAgICAgICAgIC8vIHNpbmNlIGRlZmF1bHQgYXJyYXkgaW1wbGVtZW50YXRpb24gY291bGQgYmUgb3ZlcnJpZGRlbiAtIGUuZy4gVGVhYm94IHNpdGVcbiAgICAgICAgICAgICAgICBpZiAoIWlzT2JqZWN0KGNoYXJnZWRPYmpba2V5XVtpdGVtS2V5XSkgfHwgIWlzRXZlbnRTdHJ1Y3R1cmVGbGF0KGNoYXJnZWRPYmpba2V5XVtpdGVtS2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGNoYXJnZWRPYmpba2V5XSkgfHwgQXJyYXkuaXNBcnJheShjaGFyZ2VkT2JqW2tleV0pKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNEYXRlT2JqZWN0KGNoYXJnZWRPYmpba2V5XSkpIHtcbiAgICAgICAgICAgICAgY2hhcmdlZE9ialtrZXldID0gY29udmVydFRvV1pSS0RhdGUoY2hhcmdlZE9ialtrZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzU3RyaW5nKGNoYXJnZWRPYmpbQ0hBUkdFRF9JRF0pIHx8IGlzTnVtYmVyKGNoYXJnZWRPYmpbQ0hBUkdFRF9JRF0pKSB7XG4gICAgICAgIC8vIHNhdmUgY2hhcmdlZCBJZFxuICAgICAgICB2YXIgY2hhcmdlZElkID0gY2hhcmdlZE9ialtDSEFSR0VEX0lEXSArICcnOyAvLyBjYXN0aW5nIGNoYXJnZWRJZCB0byBzdHJpbmdcblxuICAgICAgICBpZiAodHlwZW9mIF9nbG9iYWxDaGFyZ2VkSWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgX2dsb2JhbENoYXJnZWRJZCA9IFN0b3JhZ2VNYW5hZ2VyLnJlYWRGcm9tTFNvckNvb2tpZShDSEFSR0VESURfQ09PS0lFX05BTUUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBfZ2xvYmFsQ2hhcmdlZElkICE9PSAndW5kZWZpbmVkJyAmJiBfZ2xvYmFsQ2hhcmdlZElkLnRyaW0oKSA9PT0gY2hhcmdlZElkLnRyaW0oKSkge1xuICAgICAgICAgIC8vIGRyb3AgZXZlbnQtIGR1cGxpY2F0ZSBjaGFyZ2VkIGlkXG4gICAgICAgICAgbG9nZ2VyLmVycm9yKCdEdXBsaWNhdGUgY2hhcmdlZCBJZCAtIERyb3BwZWQnICsgY2hhcmdlZE9iaik7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgX2dsb2JhbENoYXJnZWRJZCA9IGNoYXJnZWRJZDtcbiAgICAgICAgU3RvcmFnZU1hbmFnZXIuc2F2ZVRvTFNvckNvb2tpZShDSEFSR0VESURfQ09PS0lFX05BTUUsIGNoYXJnZWRJZCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gLy8gaWYgb2JqZWN0IChjaGFyZ2VkT2JqZWN0KVxuXG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgdmFyIF9sb2dnZXIkMiA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwibG9nZ2VyXCIpO1xuXG4gIHZhciBfb2xkVmFsdWVzID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJvbGRWYWx1ZXNcIik7XG5cbiAgdmFyIF9yZXF1ZXN0JDEgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInJlcXVlc3RcIik7XG5cbiAgdmFyIF9pc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiaXNQZXJzb25hbGlzYXRpb25BY3RpdmVcIik7XG5cbiAgdmFyIF9wcm9jZXNzRXZlbnRBcnJheSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwicHJvY2Vzc0V2ZW50QXJyYXlcIik7XG5cbiAgdmFyIEV2ZW50SGFuZGxlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0FycmF5KSB7XG4gICAgX2luaGVyaXRzKEV2ZW50SGFuZGxlciwgX0FycmF5KTtcblxuICAgIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoRXZlbnRIYW5kbGVyKTtcblxuICAgIGZ1bmN0aW9uIEV2ZW50SGFuZGxlcihfcmVmLCB2YWx1ZXMpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgdmFyIGxvZ2dlciA9IF9yZWYubG9nZ2VyLFxuICAgICAgICAgIHJlcXVlc3QgPSBfcmVmLnJlcXVlc3QsXG4gICAgICAgICAgaXNQZXJzb25hbGlzYXRpb25BY3RpdmUgPSBfcmVmLmlzUGVyc29uYWxpc2F0aW9uQWN0aXZlO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRXZlbnRIYW5kbGVyKTtcblxuICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX3Byb2Nlc3NFdmVudEFycmF5LCB7XG4gICAgICAgIHZhbHVlOiBfcHJvY2Vzc0V2ZW50QXJyYXkyXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX2xvZ2dlciQyLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX29sZFZhbHVlcywge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF9yZXF1ZXN0JDEsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfaXNQZXJzb25hbGlzYXRpb25BY3RpdmUsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfbG9nZ2VyJDIpW19sb2dnZXIkMl0gPSBsb2dnZXI7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF9vbGRWYWx1ZXMpW19vbGRWYWx1ZXNdID0gdmFsdWVzO1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfcmVxdWVzdCQxKVtfcmVxdWVzdCQxXSA9IHJlcXVlc3Q7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF9pc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZSlbX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlXSA9IGlzUGVyc29uYWxpc2F0aW9uQWN0aXZlO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhFdmVudEhhbmRsZXIsIFt7XG4gICAgICBrZXk6IFwicHVzaFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHB1c2goKSB7XG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBldmVudHNBcnIgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgZXZlbnRzQXJyW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9wcm9jZXNzRXZlbnRBcnJheSlbX3Byb2Nlc3NFdmVudEFycmF5XShldmVudHNBcnIpO1xuXG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfcHJvY2Vzc09sZFZhbHVlc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9wcm9jZXNzT2xkVmFsdWVzKCkge1xuICAgICAgICBpZiAoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9vbGRWYWx1ZXMpW19vbGRWYWx1ZXNdKSB7XG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9wcm9jZXNzRXZlbnRBcnJheSlbX3Byb2Nlc3NFdmVudEFycmF5XShfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX29sZFZhbHVlcylbX29sZFZhbHVlc10pO1xuICAgICAgICB9XG5cbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9vbGRWYWx1ZXMpW19vbGRWYWx1ZXNdID0gbnVsbDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0RGV0YWlsc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldERldGFpbHMoZXZ0TmFtZSkge1xuICAgICAgICBpZiAoIV9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfaXNQZXJzb25hbGlzYXRpb25BY3RpdmUpW19pc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZV0oKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgJGN0Lmdsb2JhbEV2ZW50c01hcCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAkY3QuZ2xvYmFsRXZlbnRzTWFwID0gU3RvcmFnZU1hbmFnZXIucmVhZEZyb21MU29yQ29va2llKEVWX0NPT0tJRSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mICRjdC5nbG9iYWxFdmVudHNNYXAgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGV2dE9iaiA9ICRjdC5nbG9iYWxFdmVudHNNYXBbZXZ0TmFtZV07XG4gICAgICAgIHZhciByZXNwT2JqID0ge307XG5cbiAgICAgICAgaWYgKHR5cGVvZiBldnRPYmogIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgcmVzcE9iai5maXJzdFRpbWUgPSBuZXcgRGF0ZShldnRPYmpbMV0gKiAxMDAwKTtcbiAgICAgICAgICByZXNwT2JqLmxhc3RUaW1lID0gbmV3IERhdGUoZXZ0T2JqWzJdICogMTAwMCk7XG4gICAgICAgICAgcmVzcE9iai5jb3VudCA9IGV2dE9ialswXTtcbiAgICAgICAgICByZXR1cm4gcmVzcE9iajtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBFdmVudEhhbmRsZXI7XG4gIH0oIC8qI19fUFVSRV9fKi9fd3JhcE5hdGl2ZVN1cGVyKEFycmF5KSk7XG5cbiAgdmFyIF9wcm9jZXNzRXZlbnRBcnJheTIgPSBmdW5jdGlvbiBfcHJvY2Vzc0V2ZW50QXJyYXkyKGV2ZW50c0Fycikge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50c0FycikpIHtcbiAgICAgIHdoaWxlIChldmVudHNBcnIubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgZXZlbnROYW1lID0gZXZlbnRzQXJyLnNoaWZ0KCk7XG5cbiAgICAgICAgaWYgKCFpc1N0cmluZyhldmVudE5hbWUpKSB7XG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkMilbX2xvZ2dlciQyXS5lcnJvcihFVkVOVF9FUlJPUik7XG5cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudE5hbWUubGVuZ3RoID4gMTAyNCkge1xuICAgICAgICAgIGV2ZW50TmFtZSA9IGV2ZW50TmFtZS5zdWJzdHJpbmcoMCwgMTAyNCk7XG5cbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQyKVtfbG9nZ2VyJDJdLnJlcG9ydEVycm9yKDUxMCwgZXZlbnROYW1lICsgJy4uLiBsZW5ndGggZXhjZWVkZWQgMTAyNCBjaGFycy4gVHJpbW1lZC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChTWVNURU1fRVZFTlRTLmluY2x1ZGVzKGV2ZW50TmFtZSkpIHtcbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQyKVtfbG9nZ2VyJDJdLnJlcG9ydEVycm9yKDUxMywgZXZlbnROYW1lICsgJyBpcyBhIHJlc3RyaWN0ZWQgc3lzdGVtIGV2ZW50LiBJdCBjYW5ub3QgYmUgdXNlZCBhcyBhbiBldmVudCBuYW1lLicpO1xuXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGF0YSA9IHt9O1xuICAgICAgICBkYXRhLnR5cGUgPSAnZXZlbnQnO1xuICAgICAgICBkYXRhLmV2dE5hbWUgPSBzYW5pdGl6ZShldmVudE5hbWUsIHVuc3VwcG9ydGVkS2V5Q2hhclJlZ2V4KTtcblxuICAgICAgICBpZiAoZXZlbnRzQXJyLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgIHZhciBldmVudE9iaiA9IGV2ZW50c0Fyci5zaGlmdCgpO1xuXG4gICAgICAgICAgaWYgKCFpc09iamVjdChldmVudE9iaikpIHtcbiAgICAgICAgICAgIC8vIHB1dCBpdCBiYWNrIGlmIGl0IGlzIG5vdCBhbiBvYmplY3RcbiAgICAgICAgICAgIGV2ZW50c0Fyci51bnNoaWZ0KGV2ZW50T2JqKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gY2hlY2sgQ2hhcmdlZCBFdmVudCB2cy4gb3RoZXIgZXZlbnRzLlxuICAgICAgICAgICAgaWYgKGV2ZW50TmFtZSA9PT0gJ0NoYXJnZWQnKSB7XG4gICAgICAgICAgICAgIGlmICghaXNDaGFyZ2VkRXZlbnRTdHJ1Y3R1cmVWYWxpZChldmVudE9iaiwgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkMilbX2xvZ2dlciQyXSkpIHtcbiAgICAgICAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQyKVtfbG9nZ2VyJDJdLnJlcG9ydEVycm9yKDUxMSwgJ0NoYXJnZWQgZXZlbnQgc3RydWN0dXJlIGludmFsaWQuIE5vdCBzZW50LicpO1xuXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmICghaXNFdmVudFN0cnVjdHVyZUZsYXQoZXZlbnRPYmopKSB7XG4gICAgICAgICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkMilbX2xvZ2dlciQyXS5yZXBvcnRFcnJvcig1MTIsIGV2ZW50TmFtZSArICcgZXZlbnQgc3RydWN0dXJlIGludmFsaWQuIE5vdCBzZW50LicpO1xuXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGF0YS5ldnREYXRhID0gZXZlbnRPYmo7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0JDEpW19yZXF1ZXN0JDFdLnByb2Nlc3NFdmVudChkYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIGdldFVSTFBhcmFtcyA9IGZ1bmN0aW9uIGdldFVSTFBhcmFtcyh1cmwpIHtcbiAgICB2YXIgdXJsUGFyYW1zID0ge307XG4gICAgdmFyIGlkeCA9IHVybC5pbmRleE9mKCc/Jyk7XG5cbiAgICBpZiAoaWR4ID4gMSkge1xuICAgICAgdmFyIHVyaSA9IHVybC5zdWJzdHJpbmcoaWR4ICsgMSk7XG4gICAgICB2YXIgbWF0Y2g7XG4gICAgICB2YXIgcGwgPSAvXFwrL2c7IC8vIFJlZ2V4IGZvciByZXBsYWNpbmcgYWRkaXRpb24gc3ltYm9sIHdpdGggYSBzcGFjZVxuXG4gICAgICB2YXIgc2VhcmNoID0gLyhbXiY9XSspPT8oW14mXSopL2c7XG5cbiAgICAgIHZhciBkZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUocykge1xuICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSBzLnJlcGxhY2UocGwsICcgJyk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXBsYWNlbWVudCA9IGRlY29kZVVSSUNvbXBvbmVudChyZXBsYWNlbWVudCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsvLyBlYXRcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXBsYWNlbWVudDtcbiAgICAgIH07XG5cbiAgICAgIG1hdGNoID0gc2VhcmNoLmV4ZWModXJpKTtcblxuICAgICAgd2hpbGUgKG1hdGNoKSB7XG4gICAgICAgIHVybFBhcmFtc1tkZWNvZGUobWF0Y2hbMV0pXSA9IGRlY29kZShtYXRjaFsyXSk7XG4gICAgICAgIG1hdGNoID0gc2VhcmNoLmV4ZWModXJpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdXJsUGFyYW1zO1xuICB9O1xuICB2YXIgZ2V0RG9tYWluID0gZnVuY3Rpb24gZ2V0RG9tYWluKHVybCkge1xuICAgIGlmICh1cmwgPT09ICcnKSByZXR1cm4gJyc7XG4gICAgdmFyIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgYS5ocmVmID0gdXJsO1xuICAgIHJldHVybiBhLmhvc3RuYW1lO1xuICB9O1xuICB2YXIgYWRkVG9VUkwgPSBmdW5jdGlvbiBhZGRUb1VSTCh1cmwsIGssIHYpIHtcbiAgICByZXR1cm4gdXJsICsgJyYnICsgayArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2KTtcbiAgfTtcbiAgdmFyIGdldEhvc3ROYW1lID0gZnVuY3Rpb24gZ2V0SG9zdE5hbWUoKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZTtcbiAgfTtcblxuICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICB2YXIgdXJsQmFzZTY0VG9VaW50OEFycmF5ID0gZnVuY3Rpb24gdXJsQmFzZTY0VG9VaW50OEFycmF5KGJhc2U2NFN0cmluZykge1xuICAgIHZhciBwYWRkaW5nID0gJz0nLnJlcGVhdCgoNCAtIGJhc2U2NFN0cmluZy5sZW5ndGggJSA0KSAlIDQpO1xuICAgIHZhciBiYXNlNjQgPSAoYmFzZTY0U3RyaW5nICsgcGFkZGluZykucmVwbGFjZSgvXFwtL2csICcrJykucmVwbGFjZSgvXy9nLCAnLycpO1xuICAgIHZhciByYXdEYXRhID0gd2luZG93LmF0b2IoYmFzZTY0KTtcbiAgICB2YXIgcHJvY2Vzc2VkRGF0YSA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXdEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBwcm9jZXNzZWREYXRhLnB1c2gocmF3RGF0YS5jaGFyQ29kZUF0KGkpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkocHJvY2Vzc2VkRGF0YSk7XG4gIH07XG4gIHZhciBjb21wcmVzc0RhdGEgPSBmdW5jdGlvbiBjb21wcmVzc0RhdGEoZGF0YU9iamVjdCwgbG9nZ2VyKSB7XG4gICAgbG9nZ2VyICYmIHR5cGVvZiBsb2dnZXIuZGVidWcgPT09ICdmdW5jdGlvbicgJiYgbG9nZ2VyLmRlYnVnKCdkb2JqOicgKyBkYXRhT2JqZWN0KTtcbiAgICByZXR1cm4gY29tcHJlc3NUb0Jhc2U2NChkYXRhT2JqZWN0KTtcbiAgfTtcbiAgdmFyIGNvbXByZXNzID0gZnVuY3Rpb24gY29tcHJlc3ModW5jb21wcmVzc2VkKSB7XG4gICAgaWYgKHVuY29tcHJlc3NlZCA9PSBudWxsKSByZXR1cm4gJyc7XG4gICAgdmFyIGksXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBjb250ZXh0X2RpY3Rpb25hcnkgPSB7fSxcbiAgICAgICAgY29udGV4dF9kaWN0aW9uYXJ5VG9DcmVhdGUgPSB7fSxcbiAgICAgICAgY29udGV4dF9jID0gJycsXG4gICAgICAgIGNvbnRleHRfd2MgPSAnJyxcbiAgICAgICAgY29udGV4dF93ID0gJycsXG4gICAgICAgIGNvbnRleHRfZW5sYXJnZUluID0gMixcbiAgICAgICAgLy8gQ29tcGVuc2F0ZSBmb3IgdGhlIGZpcnN0IGVudHJ5IHdoaWNoIHNob3VsZCBub3QgY291bnRcbiAgICBjb250ZXh0X2RpY3RTaXplID0gMyxcbiAgICAgICAgY29udGV4dF9udW1CaXRzID0gMixcbiAgICAgICAgY29udGV4dF9kYXRhX3N0cmluZyA9ICcnLFxuICAgICAgICBjb250ZXh0X2RhdGFfdmFsID0gMCxcbiAgICAgICAgY29udGV4dF9kYXRhX3Bvc2l0aW9uID0gMCxcbiAgICAgICAgaWksXG4gICAgICAgIGYgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG4gICAgZm9yIChpaSA9IDA7IGlpIDwgdW5jb21wcmVzc2VkLmxlbmd0aDsgaWkgKz0gMSkge1xuICAgICAgY29udGV4dF9jID0gdW5jb21wcmVzc2VkLmNoYXJBdChpaSk7XG5cbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbnRleHRfZGljdGlvbmFyeSwgY29udGV4dF9jKSkge1xuICAgICAgICBjb250ZXh0X2RpY3Rpb25hcnlbY29udGV4dF9jXSA9IGNvbnRleHRfZGljdFNpemUrKztcbiAgICAgICAgY29udGV4dF9kaWN0aW9uYXJ5VG9DcmVhdGVbY29udGV4dF9jXSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHRfd2MgPSBjb250ZXh0X3cgKyBjb250ZXh0X2M7XG5cbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoY29udGV4dF9kaWN0aW9uYXJ5LCBjb250ZXh0X3djKSkge1xuICAgICAgICBjb250ZXh0X3cgPSBjb250ZXh0X3djO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjb250ZXh0X2RpY3Rpb25hcnlUb0NyZWF0ZSwgY29udGV4dF93KSkge1xuICAgICAgICAgIGlmIChjb250ZXh0X3cuY2hhckNvZGVBdCgwKSA8IDI1Nikge1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbnRleHRfbnVtQml0czsgaSsrKSB7XG4gICAgICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSBjb250ZXh0X2RhdGFfdmFsIDw8IDE7XG5cbiAgICAgICAgICAgICAgaWYgKGNvbnRleHRfZGF0YV9wb3NpdGlvbiA9PSAxNSkge1xuICAgICAgICAgICAgICAgIGNvbnRleHRfZGF0YV9wb3NpdGlvbiA9IDA7XG4gICAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3N0cmluZyArPSBmKGNvbnRleHRfZGF0YV92YWwpO1xuICAgICAgICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSAwO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRleHRfZGF0YV9wb3NpdGlvbisrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhbHVlID0gY29udGV4dF93LmNoYXJDb2RlQXQoMCk7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCA4OyBpKyspIHtcbiAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3ZhbCA9IGNvbnRleHRfZGF0YV92YWwgPDwgMSB8IHZhbHVlICYgMTtcblxuICAgICAgICAgICAgICBpZiAoY29udGV4dF9kYXRhX3Bvc2l0aW9uID09IDE1KSB7XG4gICAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3Bvc2l0aW9uID0gMDtcbiAgICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfc3RyaW5nICs9IGYoY29udGV4dF9kYXRhX3ZhbCk7XG4gICAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3ZhbCA9IDA7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3Bvc2l0aW9uKys7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlID4+IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gMTtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbnRleHRfbnVtQml0czsgaSsrKSB7XG4gICAgICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSBjb250ZXh0X2RhdGFfdmFsIDw8IDEgfCB2YWx1ZTtcblxuICAgICAgICAgICAgICBpZiAoY29udGV4dF9kYXRhX3Bvc2l0aW9uID09IDE1KSB7XG4gICAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3Bvc2l0aW9uID0gMDtcbiAgICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfc3RyaW5nICs9IGYoY29udGV4dF9kYXRhX3ZhbCk7XG4gICAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3ZhbCA9IDA7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3Bvc2l0aW9uKys7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB2YWx1ZSA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhbHVlID0gY29udGV4dF93LmNoYXJDb2RlQXQoMCk7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSBjb250ZXh0X2RhdGFfdmFsIDw8IDEgfCB2YWx1ZSAmIDE7XG5cbiAgICAgICAgICAgICAgaWYgKGNvbnRleHRfZGF0YV9wb3NpdGlvbiA9PSAxNSkge1xuICAgICAgICAgICAgICAgIGNvbnRleHRfZGF0YV9wb3NpdGlvbiA9IDA7XG4gICAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3N0cmluZyArPSBmKGNvbnRleHRfZGF0YV92YWwpO1xuICAgICAgICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSAwO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRleHRfZGF0YV9wb3NpdGlvbisrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSA+PiAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHRfZW5sYXJnZUluLS07XG5cbiAgICAgICAgICBpZiAoY29udGV4dF9lbmxhcmdlSW4gPT0gMCkge1xuICAgICAgICAgICAgY29udGV4dF9lbmxhcmdlSW4gPSBNYXRoLnBvdygyLCBjb250ZXh0X251bUJpdHMpO1xuICAgICAgICAgICAgY29udGV4dF9udW1CaXRzKys7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGVsZXRlIGNvbnRleHRfZGljdGlvbmFyeVRvQ3JlYXRlW2NvbnRleHRfd107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSBjb250ZXh0X2RpY3Rpb25hcnlbY29udGV4dF93XTtcblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb250ZXh0X251bUJpdHM7IGkrKykge1xuICAgICAgICAgICAgY29udGV4dF9kYXRhX3ZhbCA9IGNvbnRleHRfZGF0YV92YWwgPDwgMSB8IHZhbHVlICYgMTtcblxuICAgICAgICAgICAgaWYgKGNvbnRleHRfZGF0YV9wb3NpdGlvbiA9PSAxNSkge1xuICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfcG9zaXRpb24gPSAwO1xuICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfc3RyaW5nICs9IGYoY29udGV4dF9kYXRhX3ZhbCk7XG4gICAgICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSAwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3Bvc2l0aW9uKys7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgPj4gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0X2VubGFyZ2VJbi0tO1xuXG4gICAgICAgIGlmIChjb250ZXh0X2VubGFyZ2VJbiA9PSAwKSB7XG4gICAgICAgICAgY29udGV4dF9lbmxhcmdlSW4gPSBNYXRoLnBvdygyLCBjb250ZXh0X251bUJpdHMpO1xuICAgICAgICAgIGNvbnRleHRfbnVtQml0cysrO1xuICAgICAgICB9IC8vIEFkZCB3YyB0byB0aGUgZGljdGlvbmFyeS5cblxuXG4gICAgICAgIGNvbnRleHRfZGljdGlvbmFyeVtjb250ZXh0X3djXSA9IGNvbnRleHRfZGljdFNpemUrKztcbiAgICAgICAgY29udGV4dF93ID0gU3RyaW5nKGNvbnRleHRfYyk7XG4gICAgICB9XG4gICAgfSAvLyBPdXRwdXQgdGhlIGNvZGUgZm9yIHcuXG5cblxuICAgIGlmIChjb250ZXh0X3cgIT09ICcnKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbnRleHRfZGljdGlvbmFyeVRvQ3JlYXRlLCBjb250ZXh0X3cpKSB7XG4gICAgICAgIGlmIChjb250ZXh0X3cuY2hhckNvZGVBdCgwKSA8IDI1Nikge1xuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb250ZXh0X251bUJpdHM7IGkrKykge1xuICAgICAgICAgICAgY29udGV4dF9kYXRhX3ZhbCA9IGNvbnRleHRfZGF0YV92YWwgPDwgMTtcblxuICAgICAgICAgICAgaWYgKGNvbnRleHRfZGF0YV9wb3NpdGlvbiA9PSAxNSkge1xuICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfcG9zaXRpb24gPSAwO1xuICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfc3RyaW5nICs9IGYoY29udGV4dF9kYXRhX3ZhbCk7XG4gICAgICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSAwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3Bvc2l0aW9uKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFsdWUgPSBjb250ZXh0X3cuY2hhckNvZGVBdCgwKTtcblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCA4OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSBjb250ZXh0X2RhdGFfdmFsIDw8IDEgfCB2YWx1ZSAmIDE7XG5cbiAgICAgICAgICAgIGlmIChjb250ZXh0X2RhdGFfcG9zaXRpb24gPT0gMTUpIHtcbiAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3Bvc2l0aW9uID0gMDtcbiAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3N0cmluZyArPSBmKGNvbnRleHRfZGF0YV92YWwpO1xuICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfdmFsID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnRleHRfZGF0YV9wb3NpdGlvbisrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlID4+IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0gMTtcblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb250ZXh0X251bUJpdHM7IGkrKykge1xuICAgICAgICAgICAgY29udGV4dF9kYXRhX3ZhbCA9IGNvbnRleHRfZGF0YV92YWwgPDwgMSB8IHZhbHVlO1xuXG4gICAgICAgICAgICBpZiAoY29udGV4dF9kYXRhX3Bvc2l0aW9uID09IDE1KSB7XG4gICAgICAgICAgICAgIGNvbnRleHRfZGF0YV9wb3NpdGlvbiA9IDA7XG4gICAgICAgICAgICAgIGNvbnRleHRfZGF0YV9zdHJpbmcgKz0gZihjb250ZXh0X2RhdGFfdmFsKTtcbiAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3ZhbCA9IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfcG9zaXRpb24rKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFsdWUgPSAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhbHVlID0gY29udGV4dF93LmNoYXJDb2RlQXQoMCk7XG5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgICAgICAgY29udGV4dF9kYXRhX3ZhbCA9IGNvbnRleHRfZGF0YV92YWwgPDwgMSB8IHZhbHVlICYgMTtcblxuICAgICAgICAgICAgaWYgKGNvbnRleHRfZGF0YV9wb3NpdGlvbiA9PSAxNSkge1xuICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfcG9zaXRpb24gPSAwO1xuICAgICAgICAgICAgICBjb250ZXh0X2RhdGFfc3RyaW5nICs9IGYoY29udGV4dF9kYXRhX3ZhbCk7XG4gICAgICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSAwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29udGV4dF9kYXRhX3Bvc2l0aW9uKys7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgPj4gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0X2VubGFyZ2VJbi0tO1xuXG4gICAgICAgIGlmIChjb250ZXh0X2VubGFyZ2VJbiA9PSAwKSB7XG4gICAgICAgICAgY29udGV4dF9lbmxhcmdlSW4gPSBNYXRoLnBvdygyLCBjb250ZXh0X251bUJpdHMpO1xuICAgICAgICAgIGNvbnRleHRfbnVtQml0cysrO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVsZXRlIGNvbnRleHRfZGljdGlvbmFyeVRvQ3JlYXRlW2NvbnRleHRfd107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IGNvbnRleHRfZGljdGlvbmFyeVtjb250ZXh0X3ddO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb250ZXh0X251bUJpdHM7IGkrKykge1xuICAgICAgICAgIGNvbnRleHRfZGF0YV92YWwgPSBjb250ZXh0X2RhdGFfdmFsIDw8IDEgfCB2YWx1ZSAmIDE7XG5cbiAgICAgICAgICBpZiAoY29udGV4dF9kYXRhX3Bvc2l0aW9uID09IDE1KSB7XG4gICAgICAgICAgICBjb250ZXh0X2RhdGFfcG9zaXRpb24gPSAwO1xuICAgICAgICAgICAgY29udGV4dF9kYXRhX3N0cmluZyArPSBmKGNvbnRleHRfZGF0YV92YWwpO1xuICAgICAgICAgICAgY29udGV4dF9kYXRhX3ZhbCA9IDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRleHRfZGF0YV9wb3NpdGlvbisrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhbHVlID0gdmFsdWUgPj4gMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb250ZXh0X2VubGFyZ2VJbi0tO1xuXG4gICAgICBpZiAoY29udGV4dF9lbmxhcmdlSW4gPT0gMCkge1xuICAgICAgICBjb250ZXh0X2VubGFyZ2VJbiA9IE1hdGgucG93KDIsIGNvbnRleHRfbnVtQml0cyk7XG4gICAgICAgIGNvbnRleHRfbnVtQml0cysrO1xuICAgICAgfVxuICAgIH0gLy8gTWFyayB0aGUgZW5kIG9mIHRoZSBzdHJlYW1cblxuXG4gICAgdmFsdWUgPSAyO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGNvbnRleHRfbnVtQml0czsgaSsrKSB7XG4gICAgICBjb250ZXh0X2RhdGFfdmFsID0gY29udGV4dF9kYXRhX3ZhbCA8PCAxIHwgdmFsdWUgJiAxO1xuXG4gICAgICBpZiAoY29udGV4dF9kYXRhX3Bvc2l0aW9uID09IDE1KSB7XG4gICAgICAgIGNvbnRleHRfZGF0YV9wb3NpdGlvbiA9IDA7XG4gICAgICAgIGNvbnRleHRfZGF0YV9zdHJpbmcgKz0gZihjb250ZXh0X2RhdGFfdmFsKTtcbiAgICAgICAgY29udGV4dF9kYXRhX3ZhbCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250ZXh0X2RhdGFfcG9zaXRpb24rKztcbiAgICAgIH1cblxuICAgICAgdmFsdWUgPSB2YWx1ZSA+PiAxO1xuICAgIH0gLy8gRmx1c2ggdGhlIGxhc3QgY2hhclxuXG5cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgY29udGV4dF9kYXRhX3ZhbCA9IGNvbnRleHRfZGF0YV92YWwgPDwgMTtcblxuICAgICAgaWYgKGNvbnRleHRfZGF0YV9wb3NpdGlvbiA9PSAxNSkge1xuICAgICAgICBjb250ZXh0X2RhdGFfc3RyaW5nICs9IGYoY29udGV4dF9kYXRhX3ZhbCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfSBlbHNlIGNvbnRleHRfZGF0YV9wb3NpdGlvbisrO1xuICAgIH1cblxuICAgIHJldHVybiBjb250ZXh0X2RhdGFfc3RyaW5nO1xuICB9O1xuICB2YXIgZ2V0S2V5U3RyID0gZnVuY3Rpb24gZ2V0S2V5U3RyKCkge1xuICAgIHZhciBrZXkgPSAnJztcbiAgICB2YXIgaSA9IDA7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDw9IDI1OyBpKyspIHtcbiAgICAgIGtleSA9IGtleSArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSArIDY1KTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDw9IDI1OyBpKyspIHtcbiAgICAgIGtleSA9IGtleSArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSArIDk3KTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgICAga2V5ID0ga2V5ICsgaTtcbiAgICB9XG5cbiAgICByZXR1cm4ga2V5ICsgJysvPSc7XG4gIH07XG5cbiAgdmFyIF9rZXlTdHIgPSBnZXRLZXlTdHIoKTtcbiAgdmFyIGNvbXByZXNzVG9CYXNlNjQgPSBmdW5jdGlvbiBjb21wcmVzc1RvQmFzZTY0KGlucHV0KSB7XG4gICAgaWYgKGlucHV0ID09IG51bGwpIHJldHVybiAnJztcbiAgICB2YXIgb3V0cHV0ID0gJyc7XG4gICAgdmFyIGNocjEsIGNocjIsIGNocjMsIGVuYzEsIGVuYzIsIGVuYzMsIGVuYzQ7XG4gICAgdmFyIGkgPSAwO1xuICAgIGlucHV0ID0gY29tcHJlc3MoaW5wdXQpO1xuXG4gICAgd2hpbGUgKGkgPCBpbnB1dC5sZW5ndGggKiAyKSB7XG4gICAgICBpZiAoaSAlIDIgPT0gMCkge1xuICAgICAgICBjaHIxID0gaW5wdXQuY2hhckNvZGVBdChpIC8gMikgPj4gODtcbiAgICAgICAgY2hyMiA9IGlucHV0LmNoYXJDb2RlQXQoaSAvIDIpICYgMjU1O1xuICAgICAgICBpZiAoaSAvIDIgKyAxIDwgaW5wdXQubGVuZ3RoKSBjaHIzID0gaW5wdXQuY2hhckNvZGVBdChpIC8gMiArIDEpID4+IDg7ZWxzZSBjaHIzID0gTmFOO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hyMSA9IGlucHV0LmNoYXJDb2RlQXQoKGkgLSAxKSAvIDIpICYgMjU1O1xuXG4gICAgICAgIGlmICgoaSArIDEpIC8gMiA8IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICAgIGNocjIgPSBpbnB1dC5jaGFyQ29kZUF0KChpICsgMSkgLyAyKSA+PiA4O1xuICAgICAgICAgIGNocjMgPSBpbnB1dC5jaGFyQ29kZUF0KChpICsgMSkgLyAyKSAmIDI1NTtcbiAgICAgICAgfSBlbHNlIGNocjIgPSBjaHIzID0gTmFOO1xuICAgICAgfVxuXG4gICAgICBpICs9IDM7XG4gICAgICBlbmMxID0gY2hyMSA+PiAyO1xuICAgICAgZW5jMiA9IChjaHIxICYgMykgPDwgNCB8IGNocjIgPj4gNDtcbiAgICAgIGVuYzMgPSAoY2hyMiAmIDE1KSA8PCAyIHwgY2hyMyA+PiA2O1xuICAgICAgZW5jNCA9IGNocjMgJiA2MztcblxuICAgICAgaWYgKGlzTmFOKGNocjIpKSB7XG4gICAgICAgIGVuYzMgPSBlbmM0ID0gNjQ7XG4gICAgICB9IGVsc2UgaWYgKGlzTmFOKGNocjMpKSB7XG4gICAgICAgIGVuYzQgPSA2NDtcbiAgICAgIH1cblxuICAgICAgb3V0cHV0ID0gb3V0cHV0ICsgX2tleVN0ci5jaGFyQXQoZW5jMSkgKyBfa2V5U3RyLmNoYXJBdChlbmMyKSArIF9rZXlTdHIuY2hhckF0KGVuYzMpICsgX2tleVN0ci5jaGFyQXQoZW5jNCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfTtcblxuICB2YXIgX2ZpcmVSZXF1ZXN0ID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJmaXJlUmVxdWVzdFwiKTtcblxuICB2YXIgX2Ryb3BSZXF1ZXN0RHVlVG9PcHRPdXQgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImRyb3BSZXF1ZXN0RHVlVG9PcHRPdXRcIik7XG5cbiAgdmFyIF9hZGRVc2VJUFRvUmVxdWVzdCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiYWRkVXNlSVBUb1JlcXVlc3RcIik7XG5cbiAgdmFyIF9hZGRBUlBUb1JlcXVlc3QgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImFkZEFSUFRvUmVxdWVzdFwiKTtcblxuICB2YXIgUmVxdWVzdERpc3BhdGNoZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlcXVlc3REaXNwYXRjaGVyKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlcXVlc3REaXNwYXRjaGVyKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoUmVxdWVzdERpc3BhdGNoZXIsIG51bGwsIFt7XG4gICAgICBrZXk6IFwiZmlyZVJlcXVlc3RcIixcbiAgICAgIC8vIEFOQ0hPUiAtIFJlcXVlc3RzIGdldCBmaXJlZCBmcm9tIGhlcmVcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBmaXJlUmVxdWVzdCh1cmwsIHNraXBBUlAsIHNlbmRPVUxGbGFnKSB7XG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfZmlyZVJlcXVlc3QpW19maXJlUmVxdWVzdF0odXJsLCAxLCBza2lwQVJQLCBzZW5kT1VMRmxhZyk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFJlcXVlc3REaXNwYXRjaGVyO1xuICB9KCk7XG5cbiAgdmFyIF9hZGRBUlBUb1JlcXVlc3QyID0gZnVuY3Rpb24gX2FkZEFSUFRvUmVxdWVzdDIodXJsLCBza2lwUmVzQVJQKSB7XG4gICAgaWYgKHNraXBSZXNBUlAgPT09IHRydWUpIHtcbiAgICAgIHZhciBfYXJwID0ge307XG4gICAgICBfYXJwLnNraXBSZXNBUlAgPSB0cnVlO1xuICAgICAgcmV0dXJuIGFkZFRvVVJMKHVybCwgJ2FycCcsIGNvbXByZXNzRGF0YShKU09OLnN0cmluZ2lmeShfYXJwKSwgdGhpcy5sb2dnZXIpKTtcbiAgICB9XG5cbiAgICBpZiAoU3RvcmFnZU1hbmFnZXIuX2lzTG9jYWxTdG9yYWdlU3VwcG9ydGVkKCkgJiYgdHlwZW9mIGxvY2FsU3RvcmFnZS5nZXRJdGVtKEFSUF9DT09LSUUpICE9PSAndW5kZWZpbmVkJyAmJiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShBUlBfQ09PS0lFKSAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGFkZFRvVVJMKHVybCwgJ2FycCcsIGNvbXByZXNzRGF0YShKU09OLnN0cmluZ2lmeShTdG9yYWdlTWFuYWdlci5yZWFkRnJvbUxTb3JDb29raWUoQVJQX0NPT0tJRSkpLCB0aGlzLmxvZ2dlcikpO1xuICAgIH1cblxuICAgIHJldHVybiB1cmw7XG4gIH07XG5cbiAgdmFyIF9hZGRVc2VJUFRvUmVxdWVzdDIgPSBmdW5jdGlvbiBfYWRkVXNlSVBUb1JlcXVlc3QyKHBhZ2VMb2FkVXJsKSB7XG4gICAgdmFyIHVzZUlQID0gU3RvcmFnZU1hbmFnZXIuZ2V0TWV0YVByb3AoVVNFSVBfS0VZKTtcblxuICAgIGlmICh0eXBlb2YgdXNlSVAgIT09ICdib29sZWFuJykge1xuICAgICAgdXNlSVAgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkVG9VUkwocGFnZUxvYWRVcmwsIFVTRUlQX0tFWSwgdXNlSVAgPyAndHJ1ZScgOiAnZmFsc2UnKTtcbiAgfTtcblxuICB2YXIgX2Ryb3BSZXF1ZXN0RHVlVG9PcHRPdXQyID0gZnVuY3Rpb24gX2Ryb3BSZXF1ZXN0RHVlVG9PcHRPdXQyKCkge1xuICAgIGlmICgkY3QuaXNPcHRJblJlcXVlc3QgfHwgIWlzVmFsdWVWYWxpZCh0aGlzLmRldmljZS5nY29va2llKSB8fCAhaXNTdHJpbmcodGhpcy5kZXZpY2UuZ2Nvb2tpZSkpIHtcbiAgICAgICRjdC5pc09wdEluUmVxdWVzdCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmRldmljZS5nY29va2llLnNsaWNlKC0zKSA9PT0gT1BUT1VUX0NPT0tJRV9FTkRTV0lUSDtcbiAgfTtcblxuICB2YXIgX2ZpcmVSZXF1ZXN0MiA9IGZ1bmN0aW9uIF9maXJlUmVxdWVzdDIodXJsLCB0cmllcywgc2tpcEFSUCwgc2VuZE9VTEZsYWcpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBfd2luZG93JGNsZXZlcnRhcCxcbiAgICAgICAgX3dpbmRvdyR3aXpyb2NrZXQ7XG5cbiAgICBpZiAoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9kcm9wUmVxdWVzdER1ZVRvT3B0T3V0KVtfZHJvcFJlcXVlc3REdWVUb09wdE91dF0oKSkge1xuICAgICAgdGhpcy5sb2dnZXIuZGVidWcoJ3JlcSBkcm9wcGVkIGR1ZSB0byBvcHRvdXQgY29va2llOiAnICsgdGhpcy5kZXZpY2UuZ2Nvb2tpZSk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBzZXQgYSByZXF1ZXN0IGluIHByb2dyZXNzXG4gICAgLy8gc28gdGhhdCBpZiBnY29va2llIGlzIG5vdCBwcmVzZW50LCBubyBvdGhlciByZXF1ZXN0IGNhbiBiZSBtYWRlIGFzeW5jaHJvbnVzbHlcblxuXG4gICAgaWYgKCFpc1ZhbHVlVmFsaWQodGhpcy5kZXZpY2UuZ2Nvb2tpZSkpIHtcbiAgICAgICRjdC5ibG9ja1JlcXVlc3QgPSB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBpZiB0aGUgZ2Nvb2tpZSBpcyBudWxsXG4gICAgICogYW5kIHRoZSByZXF1ZXN0IGlzIG5vdCB0aGUgZmlyc3QgcmVxdWVzdFxuICAgICAqIGFuZCB0aGUgdHJpZXMgYXJlIGxlc3MgdGhhbiBtYXggdHJpZXNcbiAgICAgKiBrZWVwIHJldHJ5aW5nXG4gICAgICovXG5cblxuICAgIGlmICghaXNWYWx1ZVZhbGlkKHRoaXMuZGV2aWNlLmdjb29raWUpICYmICRjdC5nbG9iYWxDYWNoZS5SRVNQX04gPCAkY3QuZ2xvYmFsQ2FjaGUuUkVRX04gLSAxICYmIHRyaWVzIDwgTUFYX1RSSUVTKSB7XG4gICAgICAvLyBpZiBvbmdvaW5nIEZpcnN0IFJlcXVlc3QgaXMgaW4gcHJvZ3Jlc3MsIGluaXRpYXRlIHJldHJ5XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMubG9nZ2VyLmRlYnVnKFwicmV0cnlpbmcgZmlyZSByZXF1ZXN0IGZvciB1cmw6IFwiLmNvbmNhdCh1cmwsIFwiLCB0cmllczogXCIpLmNvbmNhdCh0cmllcykpO1xuXG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZShfdGhpcywgX2ZpcmVSZXF1ZXN0KVtfZmlyZVJlcXVlc3RdKHVybCwgdHJpZXMgKyAxLCBza2lwQVJQLCBzZW5kT1VMRmxhZyk7XG4gICAgICB9LCA1MCk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBzZXQgaXNPVUxJblByb2dyZXNzIHRvIHRydWVcbiAgICAvLyB3aGVuIHNlbmRPVUxGbGFnIGlzIHNldCB0byB0cnVlXG5cblxuICAgIGlmICghc2VuZE9VTEZsYWcpIHtcbiAgICAgIGlmIChpc1ZhbHVlVmFsaWQodGhpcy5kZXZpY2UuZ2Nvb2tpZSkpIHtcbiAgICAgICAgLy8gYWRkIGdjb29raWUgdG8gdXJsXG4gICAgICAgIHVybCA9IGFkZFRvVVJMKHVybCwgJ2djJywgdGhpcy5kZXZpY2UuZ2Nvb2tpZSk7XG4gICAgICB9XG5cbiAgICAgIHVybCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWRkQVJQVG9SZXF1ZXN0KVtfYWRkQVJQVG9SZXF1ZXN0XSh1cmwsIHNraXBBUlApO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aW5kb3cuaXNPVUxJblByb2dyZXNzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB1cmwgPSBhZGRUb1VSTCh1cmwsICd0cmllcycsIHRyaWVzKTsgLy8gQWRkIHRyaWVzIHRvIFVSTFxuXG4gICAgdXJsID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9hZGRVc2VJUFRvUmVxdWVzdClbX2FkZFVzZUlQVG9SZXF1ZXN0XSh1cmwpO1xuICAgIHVybCA9IGFkZFRvVVJMKHVybCwgJ3InLCBuZXcgRGF0ZSgpLmdldFRpbWUoKSk7IC8vIGFkZCBlcG9jaCB0byBiZWF0IGNhY2hpbmcgb2YgdGhlIFVSTFxuICAgIC8vIFRPRE86IEZpZ3VyZSBvdXQgYSBiZXR0ZXIgd2F5IHRvIGhhbmRsZSBwbHVnaW4gY2hlY2tcblxuICAgIGlmICgoKF93aW5kb3ckY2xldmVydGFwID0gd2luZG93LmNsZXZlcnRhcCkgPT09IG51bGwgfHwgX3dpbmRvdyRjbGV2ZXJ0YXAgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF93aW5kb3ckY2xldmVydGFwLmhhc093blByb3BlcnR5KCdwbHVnaW4nKSkgfHwgKChfd2luZG93JHdpenJvY2tldCA9IHdpbmRvdy53aXpyb2NrZXQpID09PSBudWxsIHx8IF93aW5kb3ckd2l6cm9ja2V0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfd2luZG93JHdpenJvY2tldC5oYXNPd25Qcm9wZXJ0eSgncGx1Z2luJykpKSB7XG4gICAgICAvLyB1c2VkIHRvIGFkZCBwbHVnaW4gbmFtZSBpbiByZXF1ZXN0IHBhcmFtZXRlclxuICAgICAgdmFyIHBsdWdpbiA9IHdpbmRvdy5jbGV2ZXJ0YXAucGx1Z2luIHx8IHdpbmRvdy53aXpyb2NrZXQucGx1Z2luO1xuICAgICAgdXJsID0gYWRkVG9VUkwodXJsLCAnY3RfcGwnLCBwbHVnaW4pO1xuICAgIH1cblxuICAgIGlmICh1cmwuaW5kZXhPZignY2hyb21lLWV4dGVuc2lvbjonKSAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5yZXBsYWNlKCdjaHJvbWUtZXh0ZW5zaW9uOicsICdodHRwczonKTtcbiAgICB9IC8vIFRPRE86IFRyeSB1c2luZyBGdW5jdGlvbiBjb25zdHJ1Y3RvciBpbnN0ZWFkIG9mIGFwcGVuZGluZyBzY3JpcHQuXG5cblxuICAgIHZhciBjdENiU2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2N0LWpwLWNiJyk7XG5cbiAgICB3aGlsZSAoY3RDYlNjcmlwdHNbMF0pIHtcbiAgICAgIGN0Q2JTY3JpcHRzWzBdLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY3RDYlNjcmlwdHNbMF0pO1xuICAgIH1cblxuICAgIHZhciBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgcy5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dC9qYXZhc2NyaXB0Jyk7XG4gICAgcy5zZXRBdHRyaWJ1dGUoJ3NyYycsIHVybCk7XG4gICAgcy5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2N0LWpwLWNiJyk7XG4gICAgcy5zZXRBdHRyaWJ1dGUoJ3JlbCcsICdub2ZvbGxvdycpO1xuICAgIHMuYXN5bmMgPSB0cnVlO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQocyk7XG4gICAgdGhpcy5sb2dnZXIuZGVidWcoJ3JlcSBzbnQgLT4gdXJsOiAnICsgdXJsKTtcbiAgfTtcblxuICBSZXF1ZXN0RGlzcGF0Y2hlci5sb2dnZXIgPSB2b2lkIDA7XG4gIFJlcXVlc3REaXNwYXRjaGVyLmRldmljZSA9IHZvaWQgMDtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlcXVlc3REaXNwYXRjaGVyLCBfZmlyZVJlcXVlc3QsIHtcbiAgICB2YWx1ZTogX2ZpcmVSZXF1ZXN0MlxuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlcXVlc3REaXNwYXRjaGVyLCBfZHJvcFJlcXVlc3REdWVUb09wdE91dCwge1xuICAgIHZhbHVlOiBfZHJvcFJlcXVlc3REdWVUb09wdE91dDJcbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZXF1ZXN0RGlzcGF0Y2hlciwgX2FkZFVzZUlQVG9SZXF1ZXN0LCB7XG4gICAgdmFsdWU6IF9hZGRVc2VJUFRvUmVxdWVzdDJcbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZXF1ZXN0RGlzcGF0Y2hlciwgX2FkZEFSUFRvUmVxdWVzdCwge1xuICAgIHZhbHVlOiBfYWRkQVJQVG9SZXF1ZXN0MlxuICB9KTtcblxuICAvLyBDbGV2ZXJUYXAgc3BlY2lmaWMgdXRpbGl0aWVzXG4gIHZhciBnZXRDYW1wYWlnbk9iamVjdCA9IGZ1bmN0aW9uIGdldENhbXBhaWduT2JqZWN0KCkge1xuICAgIHZhciBjYW1wT2JqID0ge307XG5cbiAgICBpZiAoU3RvcmFnZU1hbmFnZXIuX2lzTG9jYWxTdG9yYWdlU3VwcG9ydGVkKCkpIHtcbiAgICAgIGNhbXBPYmogPSBTdG9yYWdlTWFuYWdlci5yZWFkKENBTVBfQ09PS0lFX05BTUUpO1xuXG4gICAgICBpZiAoY2FtcE9iaiAhPSBudWxsKSB7XG4gICAgICAgIGNhbXBPYmogPSBKU09OLnBhcnNlKGRlY29kZVVSSUNvbXBvbmVudChjYW1wT2JqKS5yZXBsYWNlKHNpbmdsZVF1b3RlUmVnZXgsICdcXFwiJykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FtcE9iaiA9IHt9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjYW1wT2JqO1xuICB9O1xuICB2YXIgc2F2ZUNhbXBhaWduT2JqZWN0ID0gZnVuY3Rpb24gc2F2ZUNhbXBhaWduT2JqZWN0KGNhbXBhaWduT2JqKSB7XG4gICAgaWYgKFN0b3JhZ2VNYW5hZ2VyLl9pc0xvY2FsU3RvcmFnZVN1cHBvcnRlZCgpKSB7XG4gICAgICB2YXIgY2FtcE9iaiA9IEpTT04uc3RyaW5naWZ5KGNhbXBhaWduT2JqKTtcbiAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNhdmUoQ0FNUF9DT09LSUVfTkFNRSwgZW5jb2RlVVJJQ29tcG9uZW50KGNhbXBPYmopKTtcbiAgICB9XG4gIH07XG4gIHZhciBnZXRDYW1wYWlnbk9iakZvckxjID0gZnVuY3Rpb24gZ2V0Q2FtcGFpZ25PYmpGb3JMYygpIHtcbiAgICB2YXIgY2FtcE9iaiA9IHt9O1xuXG4gICAgaWYgKFN0b3JhZ2VNYW5hZ2VyLl9pc0xvY2FsU3RvcmFnZVN1cHBvcnRlZCgpKSB7XG4gICAgICBjYW1wT2JqID0gZ2V0Q2FtcGFpZ25PYmplY3QoKTtcbiAgICAgIHZhciByZXN1bHRPYmogPSBbXTtcbiAgICAgIHZhciBnbG9iYWxPYmogPSBjYW1wT2JqLmdsb2JhbDtcbiAgICAgIHZhciB0b2RheSA9IGdldFRvZGF5KCk7XG4gICAgICB2YXIgZGFpbHlPYmogPSBjYW1wT2JqW3RvZGF5XTtcblxuICAgICAgaWYgKHR5cGVvZiBnbG9iYWxPYmogIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBjYW1wYWlnbklkQXJyYXkgPSBPYmplY3Qua2V5cyhnbG9iYWxPYmopO1xuXG4gICAgICAgIGZvciAodmFyIGluZGV4IGluIGNhbXBhaWduSWRBcnJheSkge1xuICAgICAgICAgIGlmIChjYW1wYWlnbklkQXJyYXkuaGFzT3duUHJvcGVydHkoaW5kZXgpKSB7XG4gICAgICAgICAgICB2YXIgZGFpbHlDID0gMDtcbiAgICAgICAgICAgIHZhciB0b3RhbEMgPSAwO1xuICAgICAgICAgICAgdmFyIGNhbXBhaWduSWQgPSBjYW1wYWlnbklkQXJyYXlbaW5kZXhdO1xuXG4gICAgICAgICAgICBpZiAoY2FtcGFpZ25JZCA9PT0gJ3RjJykge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYWlseU9iaiAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRhaWx5T2JqW2NhbXBhaWduSWRdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICBkYWlseUMgPSBkYWlseU9ialtjYW1wYWlnbklkXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBnbG9iYWxPYmogIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBnbG9iYWxPYmpbY2FtcGFpZ25JZF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHRvdGFsQyA9IGdsb2JhbE9ialtjYW1wYWlnbklkXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBbY2FtcGFpZ25JZCwgZGFpbHlDLCB0b3RhbENdO1xuICAgICAgICAgICAgcmVzdWx0T2JqLnB1c2goZWxlbWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciB0b2RheUMgPSAwO1xuXG4gICAgICBpZiAodHlwZW9mIGRhaWx5T2JqICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZGFpbHlPYmoudGMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRvZGF5QyA9IGRhaWx5T2JqLnRjO1xuICAgICAgfVxuXG4gICAgICByZXN1bHRPYmogPSB7XG4gICAgICAgIHdtcDogdG9kYXlDLFxuICAgICAgICB0bGM6IHJlc3VsdE9ialxuICAgICAgfTtcbiAgICAgIHJldHVybiByZXN1bHRPYmo7XG4gICAgfVxuICB9O1xuICB2YXIgaXNQcm9maWxlVmFsaWQgPSBmdW5jdGlvbiBpc1Byb2ZpbGVWYWxpZChwcm9maWxlT2JqLCBfcmVmKSB7XG4gICAgdmFyIGxvZ2dlciA9IF9yZWYubG9nZ2VyO1xuICAgIHZhciB2YWxpZCA9IGZhbHNlO1xuXG4gICAgaWYgKGlzT2JqZWN0KHByb2ZpbGVPYmopKSB7XG4gICAgICBmb3IgKHZhciBwcm9maWxlS2V5IGluIHByb2ZpbGVPYmopIHtcbiAgICAgICAgaWYgKHByb2ZpbGVPYmouaGFzT3duUHJvcGVydHkocHJvZmlsZUtleSkpIHtcbiAgICAgICAgICB2YWxpZCA9IHRydWU7XG4gICAgICAgICAgdmFyIHByb2ZpbGVWYWwgPSBwcm9maWxlT2JqW3Byb2ZpbGVLZXldO1xuXG4gICAgICAgICAgaWYgKHByb2ZpbGVWYWwgPT0gbnVsbCkge1xuICAgICAgICAgICAgZGVsZXRlIHByb2ZpbGVPYmpbcHJvZmlsZUtleV07XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocHJvZmlsZUtleSA9PT0gJ0dlbmRlcicgJiYgIXByb2ZpbGVWYWwubWF0Y2goL15NJHxeRiQvKSkge1xuICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihHRU5ERVJfRVJST1IpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwcm9maWxlS2V5ID09PSAnRW1wbG95ZWQnICYmICFwcm9maWxlVmFsLm1hdGNoKC9eWSR8Xk4kLykpIHtcbiAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoRU1QTE9ZRURfRVJST1IpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwcm9maWxlS2V5ID09PSAnTWFycmllZCcgJiYgIXByb2ZpbGVWYWwubWF0Y2goL15ZJHxeTiQvKSkge1xuICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihNQVJSSUVEX0VSUk9SKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocHJvZmlsZUtleSA9PT0gJ0VkdWNhdGlvbicgJiYgIXByb2ZpbGVWYWwubWF0Y2goL15TY2hvb2wkfF5Db2xsZWdlJHxeR3JhZHVhdGUkLykpIHtcbiAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoRURVQ0FUSU9OX0VSUk9SKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocHJvZmlsZUtleSA9PT0gJ0FnZScgJiYgcHJvZmlsZVZhbCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoaXNDb252ZXJ0aWJsZVRvTnVtYmVyKHByb2ZpbGVWYWwpKSB7XG4gICAgICAgICAgICAgIHByb2ZpbGVPYmouQWdlID0gK3Byb2ZpbGVWYWw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoQUdFX0VSUk9SKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IC8vIGRvYiB3aWxsIGNvbWUgaW4gbGlrZSB0aGlzIC0gJGR0XzE5NDcwODE1IG9yIGRhdGVPYmplY3RcblxuXG4gICAgICAgICAgaWYgKHByb2ZpbGVLZXkgPT09ICdET0InKSB7XG4gICAgICAgICAgICBpZiAoKCEvXlxcJERfLy50ZXN0KHByb2ZpbGVWYWwpIHx8IChwcm9maWxlVmFsICsgJycpLmxlbmd0aCAhPT0gMTEpICYmICFpc0RhdGVPYmplY3QocHJvZmlsZVZhbCkpIHtcbiAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKERPQl9FUlJPUik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpc0RhdGVPYmplY3QocHJvZmlsZVZhbCkpIHtcbiAgICAgICAgICAgICAgcHJvZmlsZU9ialtwcm9maWxlS2V5XSA9IGNvbnZlcnRUb1daUktEYXRlKHByb2ZpbGVWYWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNEYXRlT2JqZWN0KHByb2ZpbGVWYWwpKSB7XG4gICAgICAgICAgICBwcm9maWxlT2JqW3Byb2ZpbGVLZXldID0gY29udmVydFRvV1pSS0RhdGUocHJvZmlsZVZhbCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHByb2ZpbGVLZXkgPT09ICdQaG9uZScgJiYgIWlzT2JqZWN0RW1wdHkocHJvZmlsZVZhbCkpIHtcbiAgICAgICAgICAgIGlmIChwcm9maWxlVmFsLmxlbmd0aCA+IDggJiYgcHJvZmlsZVZhbC5jaGFyQXQoMCkgPT09ICcrJykge1xuICAgICAgICAgICAgICAvLyB2YWxpZCBwaG9uZSBudW1iZXJcbiAgICAgICAgICAgICAgcHJvZmlsZVZhbCA9IHByb2ZpbGVWYWwuc3Vic3RyaW5nKDEsIHByb2ZpbGVWYWwubGVuZ3RoKTtcblxuICAgICAgICAgICAgICBpZiAoaXNDb252ZXJ0aWJsZVRvTnVtYmVyKHByb2ZpbGVWYWwpKSB7XG4gICAgICAgICAgICAgICAgcHJvZmlsZU9iai5QaG9uZSA9ICtwcm9maWxlVmFsO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKFBIT05FX0ZPUk1BVF9FUlJPUiArICcuIFJlbW92ZWQuJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihQSE9ORV9GT1JNQVRfRVJST1IgKyAnLiBSZW1vdmVkLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghdmFsaWQpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBwcm9maWxlT2JqW3Byb2ZpbGVLZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2YWxpZDtcbiAgfTtcbiAgdmFyIHByb2Nlc3NGQlVzZXJPYmogPSBmdW5jdGlvbiBwcm9jZXNzRkJVc2VyT2JqKHVzZXIpIHtcbiAgICB2YXIgcHJvZmlsZURhdGEgPSB7fTtcbiAgICBwcm9maWxlRGF0YS5OYW1lID0gdXNlci5uYW1lO1xuXG4gICAgaWYgKHVzZXIuaWQgIT0gbnVsbCkge1xuICAgICAgcHJvZmlsZURhdGEuRkJJRCA9IHVzZXIuaWQgKyAnJztcbiAgICB9IC8vIEZlYiAyMDE0IC0gRkIgYW5ub3VuY2VkIG92ZXIgNTggZ2VuZGVyIG9wdGlvbnMsIGhlbmNlIHdlIHNwZWNpZmljYWxseSBsb29rIGZvciBtYWxlIG9yIGZlbWFsZS4gUmVzdCB3ZSBkb24ndCBjYXJlLlxuXG5cbiAgICBpZiAodXNlci5nZW5kZXIgPT09ICdtYWxlJykge1xuICAgICAgcHJvZmlsZURhdGEuR2VuZGVyID0gJ00nO1xuICAgIH0gZWxzZSBpZiAodXNlci5nZW5kZXIgPT09ICdmZW1hbGUnKSB7XG4gICAgICBwcm9maWxlRGF0YS5HZW5kZXIgPSAnRic7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2ZpbGVEYXRhLkdlbmRlciA9ICdPJztcbiAgICB9XG5cbiAgICB2YXIgZ2V0SGlnaGVzdEVkdWNhdGlvbiA9IGZ1bmN0aW9uIGdldEhpZ2hlc3RFZHVjYXRpb24oZWR1QXJyKSB7XG4gICAgICBpZiAoZWR1QXJyICE9IG51bGwpIHtcbiAgICAgICAgdmFyIGNvbGxlZ2UgPSAnJztcbiAgICAgICAgdmFyIGhpZ2hzY2hvb2wgPSAnJztcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVkdUFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBfZWR1ID0gZWR1QXJyW2ldO1xuXG4gICAgICAgICAgaWYgKF9lZHUudHlwZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IF9lZHUudHlwZTtcblxuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdHcmFkdWF0ZSBTY2hvb2wnKSB7XG4gICAgICAgICAgICAgIHJldHVybiAnR3JhZHVhdGUnO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnQ29sbGVnZScpIHtcbiAgICAgICAgICAgICAgY29sbGVnZSA9ICcxJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ0hpZ2ggU2Nob29sJykge1xuICAgICAgICAgICAgICBoaWdoc2Nob29sID0gJzEnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb2xsZWdlID09PSAnMScpIHtcbiAgICAgICAgICByZXR1cm4gJ0NvbGxlZ2UnO1xuICAgICAgICB9IGVsc2UgaWYgKGhpZ2hzY2hvb2wgPT09ICcxJykge1xuICAgICAgICAgIHJldHVybiAnU2Nob29sJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAodXNlci5yZWxhdGlvbnNoaXBfc3RhdHVzICE9IG51bGwpIHtcbiAgICAgIHByb2ZpbGVEYXRhLk1hcnJpZWQgPSAnTic7XG5cbiAgICAgIGlmICh1c2VyLnJlbGF0aW9uc2hpcF9zdGF0dXMgPT09ICdNYXJyaWVkJykge1xuICAgICAgICBwcm9maWxlRGF0YS5NYXJyaWVkID0gJ1knO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBlZHUgPSBnZXRIaWdoZXN0RWR1Y2F0aW9uKHVzZXIuZWR1Y2F0aW9uKTtcblxuICAgIGlmIChlZHUgIT0gbnVsbCkge1xuICAgICAgcHJvZmlsZURhdGEuRWR1Y2F0aW9uID0gZWR1O1xuICAgIH1cblxuICAgIHZhciB3b3JrID0gdXNlci53b3JrICE9IG51bGwgPyB1c2VyLndvcmsubGVuZ3RoIDogMDtcblxuICAgIGlmICh3b3JrID4gMCkge1xuICAgICAgcHJvZmlsZURhdGEuRW1wbG95ZWQgPSAnWSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2ZpbGVEYXRhLkVtcGxveWVkID0gJ04nO1xuICAgIH1cblxuICAgIGlmICh1c2VyLmVtYWlsICE9IG51bGwpIHtcbiAgICAgIHByb2ZpbGVEYXRhLkVtYWlsID0gdXNlci5lbWFpbDtcbiAgICB9XG5cbiAgICBpZiAodXNlci5iaXJ0aGRheSAhPSBudWxsKSB7XG4gICAgICB2YXIgbW1kZHl5ID0gdXNlci5iaXJ0aGRheS5zcGxpdCgnLycpOyAvLyBjb21lcyBpbiBhcyBcIjA4LzE1LzE5NDdcIlxuXG4gICAgICBwcm9maWxlRGF0YS5ET0IgPSBzZXREYXRlKG1tZGR5eVsyXSArIG1tZGR5eVswXSArIG1tZGR5eVsxXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb2ZpbGVEYXRhO1xuICB9O1xuICB2YXIgcHJvY2Vzc0dQbHVzVXNlck9iaiA9IGZ1bmN0aW9uIHByb2Nlc3NHUGx1c1VzZXJPYmoodXNlciwgX3JlZjIpIHtcbiAgICB2YXIgbG9nZ2VyID0gX3JlZjIubG9nZ2VyO1xuICAgIHZhciBwcm9maWxlRGF0YSA9IHt9O1xuXG4gICAgaWYgKHVzZXIuZGlzcGxheU5hbWUgIT0gbnVsbCkge1xuICAgICAgcHJvZmlsZURhdGEuTmFtZSA9IHVzZXIuZGlzcGxheU5hbWU7XG4gICAgfVxuXG4gICAgaWYgKHVzZXIuaWQgIT0gbnVsbCkge1xuICAgICAgcHJvZmlsZURhdGEuR1BJRCA9IHVzZXIuaWQgKyAnJztcbiAgICB9XG5cbiAgICBpZiAodXNlci5nZW5kZXIgIT0gbnVsbCkge1xuICAgICAgaWYgKHVzZXIuZ2VuZGVyID09PSAnbWFsZScpIHtcbiAgICAgICAgcHJvZmlsZURhdGEuR2VuZGVyID0gJ00nO1xuICAgICAgfSBlbHNlIGlmICh1c2VyLmdlbmRlciA9PT0gJ2ZlbWFsZScpIHtcbiAgICAgICAgcHJvZmlsZURhdGEuR2VuZGVyID0gJ0YnO1xuICAgICAgfSBlbHNlIGlmICh1c2VyLmdlbmRlciA9PT0gJ290aGVyJykge1xuICAgICAgICBwcm9maWxlRGF0YS5HZW5kZXIgPSAnTyc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHVzZXIuaW1hZ2UgIT0gbnVsbCkge1xuICAgICAgaWYgKHVzZXIuaW1hZ2UuaXNEZWZhdWx0ID09PSBmYWxzZSkge1xuICAgICAgICBwcm9maWxlRGF0YS5QaG90byA9IHVzZXIuaW1hZ2UudXJsLnNwbGl0KCc/c3onKVswXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXNlci5lbWFpbHMgIT0gbnVsbCkge1xuICAgICAgZm9yICh2YXIgZW1haWxJZHggPSAwOyBlbWFpbElkeCA8IHVzZXIuZW1haWxzLmxlbmd0aDsgZW1haWxJZHgrKykge1xuICAgICAgICB2YXIgZW1haWxPYmogPSB1c2VyLmVtYWlsc1tlbWFpbElkeF07XG5cbiAgICAgICAgaWYgKGVtYWlsT2JqLnR5cGUgPT09ICdhY2NvdW50Jykge1xuICAgICAgICAgIHByb2ZpbGVEYXRhLkVtYWlsID0gZW1haWxPYmoudmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXNlci5vcmdhbml6YXRpb25zICE9IG51bGwpIHtcbiAgICAgIHByb2ZpbGVEYXRhLkVtcGxveWVkID0gJ04nO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVzZXIub3JnYW5pemF0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgb3JnT2JqID0gdXNlci5vcmdhbml6YXRpb25zW2ldO1xuXG4gICAgICAgIGlmIChvcmdPYmoudHlwZSA9PT0gJ3dvcmsnKSB7XG4gICAgICAgICAgcHJvZmlsZURhdGEuRW1wbG95ZWQgPSAnWSc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXNlci5iaXJ0aGRheSAhPSBudWxsKSB7XG4gICAgICB2YXIgeXl5eW1tZGQgPSB1c2VyLmJpcnRoZGF5LnNwbGl0KCctJyk7IC8vIGNvbWVzIGluIGFzIFwiMTk3Ni0wNy0yN1wiXG5cbiAgICAgIHByb2ZpbGVEYXRhLkRPQiA9IHNldERhdGUoeXl5eW1tZGRbMF0gKyB5eXl5bW1kZFsxXSArIHl5eXltbWRkWzJdKTtcbiAgICB9XG5cbiAgICBpZiAodXNlci5yZWxhdGlvbnNoaXBTdGF0dXMgIT0gbnVsbCkge1xuICAgICAgcHJvZmlsZURhdGEuTWFycmllZCA9ICdOJztcblxuICAgICAgaWYgKHVzZXIucmVsYXRpb25zaGlwU3RhdHVzID09PSAnbWFycmllZCcpIHtcbiAgICAgICAgcHJvZmlsZURhdGEuTWFycmllZCA9ICdZJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsb2dnZXIuZGVidWcoJ2dwbHVzIHVzciBwcm9maWxlICcgKyBKU09OLnN0cmluZ2lmeShwcm9maWxlRGF0YSkpO1xuICAgIHJldHVybiBwcm9maWxlRGF0YTtcbiAgfTtcbiAgdmFyIGFkZFRvTG9jYWxQcm9maWxlTWFwID0gZnVuY3Rpb24gYWRkVG9Mb2NhbFByb2ZpbGVNYXAocHJvZmlsZU9iaiwgb3ZlcnJpZGUpIHtcbiAgICBpZiAoU3RvcmFnZU1hbmFnZXIuX2lzTG9jYWxTdG9yYWdlU3VwcG9ydGVkKCkpIHtcbiAgICAgIGlmICgkY3QuZ2xvYmFsUHJvZmlsZU1hcCA9PSBudWxsKSB7XG4gICAgICAgICRjdC5nbG9iYWxQcm9maWxlTWFwID0gU3RvcmFnZU1hbmFnZXIucmVhZEZyb21MU29yQ29va2llKFBSX0NPT0tJRSk7XG5cbiAgICAgICAgaWYgKCRjdC5nbG9iYWxQcm9maWxlTWFwID09IG51bGwpIHtcbiAgICAgICAgICAkY3QuZ2xvYmFsUHJvZmlsZU1hcCA9IHt9O1xuICAgICAgICB9XG4gICAgICB9IC8vIE1vdmUgcHJvcHMgZnJvbSBjdXN0b20gYnVja2V0IHRvIG91dHNpZGUuXG5cblxuICAgICAgaWYgKHByb2ZpbGVPYmouX2N1c3RvbSAhPSBudWxsKSB7XG4gICAgICAgIHZhciBrZXlzID0gcHJvZmlsZU9iai5fY3VzdG9tO1xuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBrZXlzKSB7XG4gICAgICAgICAgaWYgKGtleXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgcHJvZmlsZU9ialtrZXldID0ga2V5c1trZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSBwcm9maWxlT2JqLl9jdXN0b207XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIHByb3AgaW4gcHJvZmlsZU9iaikge1xuICAgICAgICBpZiAocHJvZmlsZU9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICAgIGlmICgkY3QuZ2xvYmFsUHJvZmlsZU1hcC5oYXNPd25Qcm9wZXJ0eShwcm9wKSAmJiAhb3ZlcnJpZGUpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgICRjdC5nbG9iYWxQcm9maWxlTWFwW3Byb3BdID0gcHJvZmlsZU9ialtwcm9wXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoJGN0Lmdsb2JhbFByb2ZpbGVNYXAuX2N1c3RvbSAhPSBudWxsKSB7XG4gICAgICAgIGRlbGV0ZSAkY3QuZ2xvYmFsUHJvZmlsZU1hcC5fY3VzdG9tO1xuICAgICAgfVxuXG4gICAgICBTdG9yYWdlTWFuYWdlci5zYXZlVG9MU29yQ29va2llKFBSX0NPT0tJRSwgJGN0Lmdsb2JhbFByb2ZpbGVNYXApO1xuICAgIH1cbiAgfTtcbiAgdmFyIGNsb3NlSWZyYW1lID0gZnVuY3Rpb24gY2xvc2VJZnJhbWUoY2FtcGFpZ25JZCwgZGl2SWRJZ25vcmVkLCBjdXJyZW50U2Vzc2lvbklkKSB7XG4gICAgaWYgKGNhbXBhaWduSWQgIT0gbnVsbCAmJiBjYW1wYWlnbklkICE9PSAnLTEnKSB7XG4gICAgICBpZiAoU3RvcmFnZU1hbmFnZXIuX2lzTG9jYWxTdG9yYWdlU3VwcG9ydGVkKCkpIHtcbiAgICAgICAgdmFyIGNhbXBhaWduT2JqID0gZ2V0Q2FtcGFpZ25PYmplY3QoKTtcbiAgICAgICAgdmFyIHNlc3Npb25DYW1wYWlnbk9iaiA9IGNhbXBhaWduT2JqW2N1cnJlbnRTZXNzaW9uSWRdO1xuXG4gICAgICAgIGlmIChzZXNzaW9uQ2FtcGFpZ25PYmogPT0gbnVsbCkge1xuICAgICAgICAgIHNlc3Npb25DYW1wYWlnbk9iaiA9IHt9O1xuICAgICAgICAgIGNhbXBhaWduT2JqW2N1cnJlbnRTZXNzaW9uSWRdID0gc2Vzc2lvbkNhbXBhaWduT2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgc2Vzc2lvbkNhbXBhaWduT2JqW2NhbXBhaWduSWRdID0gJ2RuZCc7XG4gICAgICAgIHNhdmVDYW1wYWlnbk9iamVjdChjYW1wYWlnbk9iaik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCRjdC5jYW1wYWlnbkRpdk1hcCAhPSBudWxsKSB7XG4gICAgICB2YXIgZGl2SWQgPSAkY3QuY2FtcGFpZ25EaXZNYXBbY2FtcGFpZ25JZF07XG5cbiAgICAgIGlmIChkaXZJZCAhPSBudWxsKSB7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRpdklkKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXG4gICAgICAgIGlmIChkaXZJZCA9PT0gJ2ludGVudFByZXZpZXcnKSB7XG4gICAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnRlbnRPcGFjaXR5RGl2JykgIT0gbnVsbCkge1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ludGVudE9wYWNpdHlEaXYnKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgdmFyIGFycCA9IGZ1bmN0aW9uIGFycChqc29uTWFwKSB7XG4gICAgLy8gRm9yIHVucmVnaXN0ZXIgY2FsbHMgZG9udCBzZXQgYXJwIGluIExTXG4gICAgaWYgKGpzb25NYXAuc2tpcFJlc0FSUCAhPSBudWxsICYmIGpzb25NYXAuc2tpcFJlc0FSUCkge1xuICAgICAgY29uc29sZS5kZWJ1ZygnVXBkYXRlIEFSUCBSZXF1ZXN0IHJlamVjdGVkJywganNvbk1hcCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgaXNPVUxBUlAgPSAhIShqc29uTWFwW0lTX09VTF0gIT0gbnVsbCAmJiBqc29uTWFwW0lTX09VTF0gPT09IHRydWUpO1xuXG4gICAgaWYgKFN0b3JhZ2VNYW5hZ2VyLl9pc0xvY2FsU3RvcmFnZVN1cHBvcnRlZCgpKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgYXJwRnJvbVN0b3JhZ2UgPSBTdG9yYWdlTWFuYWdlci5yZWFkRnJvbUxTb3JDb29raWUoQVJQX0NPT0tJRSk7XG5cbiAgICAgICAgaWYgKGFycEZyb21TdG9yYWdlID09IG51bGwgfHwgaXNPVUxBUlApIHtcbiAgICAgICAgICBhcnBGcm9tU3RvcmFnZSA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIGpzb25NYXApIHtcbiAgICAgICAgICBpZiAoanNvbk1hcC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICBpZiAoanNvbk1hcFtrZXldID09PSAtMSkge1xuICAgICAgICAgICAgICBkZWxldGUgYXJwRnJvbVN0b3JhZ2Vba2V5XTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGFycEZyb21TdG9yYWdlW2tleV0gPSBqc29uTWFwW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgU3RvcmFnZU1hbmFnZXIuc2F2ZVRvTFNvckNvb2tpZShBUlBfQ09PS0lFLCBhcnBGcm9tU3RvcmFnZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuYWJsZSB0byBwYXJzZSBBUlAgSlNPTjogJyArIGUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgdmFyIHNldEVudW0gPSBmdW5jdGlvbiBzZXRFbnVtKGVudW1WYWwsIGxvZ2dlcikge1xuICAgIGlmIChpc1N0cmluZyhlbnVtVmFsKSB8fCBpc051bWJlcihlbnVtVmFsKSkge1xuICAgICAgcmV0dXJuICckRV8nICsgZW51bVZhbDtcbiAgICB9XG5cbiAgICBsb2dnZXIuZXJyb3IoRU5VTV9GT1JNQVRfRVJST1IpO1xuICB9O1xuICB2YXIgaGFuZGxlRW1haWxTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiBoYW5kbGVFbWFpbFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24sIHJlRW5jb2RlZCwgZmV0Y2hHcm91cHMsIGFjY291bnQsIGxvZ2dlcikge1xuICAgIHZhciB1cmxQYXJhbXNBc0lzID0gZ2V0VVJMUGFyYW1zKGxvY2F0aW9uLmhyZWYpOyAvLyBjYW4ndCB1c2UgdXJsX3BhcmFtcyBhcyBpdCBpcyBpbiBsb3dlcmNhc2UgYWJvdmVcblxuICAgIHZhciBlbmNvZGVkRW1haWxJZCA9IHVybFBhcmFtc0FzSXMuZTtcbiAgICB2YXIgZW5jb2RlZFByb2ZpbGVQcm9wcyA9IHVybFBhcmFtc0FzSXMucDtcblxuICAgIGlmICh0eXBlb2YgZW5jb2RlZEVtYWlsSWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgZGF0YSA9IHt9O1xuICAgICAgZGF0YS5pZCA9IGFjY291bnQuaWQ7IC8vIGFjY291bnRJZFxuXG4gICAgICBkYXRhLnVuc3ViR3JvdXBzID0gJGN0LnVuc3ViR3JvdXBzOyAvLyB1bnN1YnNjcmliZSBncm91cHNcblxuICAgICAgaWYgKCRjdC51cGRhdGVkQ2F0ZWdvcnlMb25nKSB7XG4gICAgICAgIGRhdGFbY2F0ZWdvcnlMb25nS2V5XSA9ICRjdC51cGRhdGVkQ2F0ZWdvcnlMb25nO1xuICAgICAgfVxuXG4gICAgICB2YXIgdXJsID0gYWNjb3VudC5lbWFpbFVSTDtcblxuICAgICAgaWYgKGZldGNoR3JvdXBzKSB7XG4gICAgICAgIHVybCA9IGFkZFRvVVJMKHVybCwgJ2ZldGNoR3JvdXBzJywgZmV0Y2hHcm91cHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVFbmNvZGVkKSB7XG4gICAgICAgIHVybCA9IGFkZFRvVVJMKHVybCwgJ2VuY29kZWQnLCByZUVuY29kZWQpO1xuICAgICAgfVxuXG4gICAgICB1cmwgPSBhZGRUb1VSTCh1cmwsICdlJywgZW5jb2RlZEVtYWlsSWQpO1xuICAgICAgdXJsID0gYWRkVG9VUkwodXJsLCAnZCcsIGNvbXByZXNzRGF0YShKU09OLnN0cmluZ2lmeShkYXRhKSwgbG9nZ2VyKSk7XG5cbiAgICAgIGlmIChlbmNvZGVkUHJvZmlsZVByb3BzKSB7XG4gICAgICAgIHVybCA9IGFkZFRvVVJMKHVybCwgJ3AnLCBlbmNvZGVkUHJvZmlsZVByb3BzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN1YnNjcmlwdGlvbiAhPT0gJy0xJykge1xuICAgICAgICB1cmwgPSBhZGRUb1VSTCh1cmwsICdzdWInLCBzdWJzY3JpcHRpb24pO1xuICAgICAgfVxuXG4gICAgICBSZXF1ZXN0RGlzcGF0Y2hlci5maXJlUmVxdWVzdCh1cmwpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgX2xvZ2dlciQzID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJsb2dnZXJcIik7XG5cbiAgdmFyIF9yZXF1ZXN0JDIgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInJlcXVlc3RcIik7XG5cbiAgdmFyIF9hY2NvdW50ID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJhY2NvdW50XCIpO1xuXG4gIHZhciBfb2xkVmFsdWVzJDEgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcIm9sZFZhbHVlc1wiKTtcblxuICB2YXIgX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlJDEgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImlzUGVyc29uYWxpc2F0aW9uQWN0aXZlXCIpO1xuXG4gIHZhciBfcHJvY2Vzc1Byb2ZpbGVBcnJheSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwicHJvY2Vzc1Byb2ZpbGVBcnJheVwiKTtcblxuICB2YXIgUHJvZmlsZUhhbmRsZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9BcnJheSkge1xuICAgIF9pbmhlcml0cyhQcm9maWxlSGFuZGxlciwgX0FycmF5KTtcblxuICAgIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoUHJvZmlsZUhhbmRsZXIpO1xuXG4gICAgZnVuY3Rpb24gUHJvZmlsZUhhbmRsZXIoX3JlZiwgdmFsdWVzKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIHZhciBsb2dnZXIgPSBfcmVmLmxvZ2dlcixcbiAgICAgICAgICByZXF1ZXN0ID0gX3JlZi5yZXF1ZXN0LFxuICAgICAgICAgIGFjY291bnQgPSBfcmVmLmFjY291bnQsXG4gICAgICAgICAgaXNQZXJzb25hbGlzYXRpb25BY3RpdmUgPSBfcmVmLmlzUGVyc29uYWxpc2F0aW9uQWN0aXZlO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvZmlsZUhhbmRsZXIpO1xuXG4gICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfcHJvY2Vzc1Byb2ZpbGVBcnJheSwge1xuICAgICAgICB2YWx1ZTogX3Byb2Nlc3NQcm9maWxlQXJyYXkyXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX2xvZ2dlciQzLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX3JlcXVlc3QkMiwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF9hY2NvdW50LCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX29sZFZhbHVlcyQxLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlJDEsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfbG9nZ2VyJDMpW19sb2dnZXIkM10gPSBsb2dnZXI7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF9yZXF1ZXN0JDIpW19yZXF1ZXN0JDJdID0gcmVxdWVzdDtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX2FjY291bnQpW19hY2NvdW50XSA9IGFjY291bnQ7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF9vbGRWYWx1ZXMkMSlbX29sZFZhbHVlcyQxXSA9IHZhbHVlcztcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlJDEpW19pc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZSQxXSA9IGlzUGVyc29uYWxpc2F0aW9uQWN0aXZlO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhQcm9maWxlSGFuZGxlciwgW3tcbiAgICAgIGtleTogXCJwdXNoXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcHVzaCgpIHtcbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHByb2ZpbGVzQXJyID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgIHByb2ZpbGVzQXJyW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9wcm9jZXNzUHJvZmlsZUFycmF5KVtfcHJvY2Vzc1Byb2ZpbGVBcnJheV0ocHJvZmlsZXNBcnIpO1xuXG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfcHJvY2Vzc09sZFZhbHVlc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9wcm9jZXNzT2xkVmFsdWVzKCkge1xuICAgICAgICBpZiAoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9vbGRWYWx1ZXMkMSlbX29sZFZhbHVlcyQxXSkge1xuICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcHJvY2Vzc1Byb2ZpbGVBcnJheSlbX3Byb2Nlc3NQcm9maWxlQXJyYXldKF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfb2xkVmFsdWVzJDEpW19vbGRWYWx1ZXMkMV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9vbGRWYWx1ZXMkMSlbX29sZFZhbHVlcyQxXSA9IG51bGw7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldEF0dHJpYnV0ZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEF0dHJpYnV0ZShwcm9wTmFtZSkge1xuICAgICAgICBpZiAoIV9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfaXNQZXJzb25hbGlzYXRpb25BY3RpdmUkMSlbX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlJDFdKCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJGN0Lmdsb2JhbFByb2ZpbGVNYXAgPT0gbnVsbCkge1xuICAgICAgICAgICRjdC5nbG9iYWxQcm9maWxlTWFwID0gU3RvcmFnZU1hbmFnZXIucmVhZEZyb21MU29yQ29va2llKFBSX0NPT0tJRSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJGN0Lmdsb2JhbFByb2ZpbGVNYXAgIT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiAkY3QuZ2xvYmFsUHJvZmlsZU1hcFtwcm9wTmFtZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2hhbmRsZUluY3JlbWVudERlY3JlbWVudFZhbHVlXCIsXG5cbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7YW55fSBrZXlcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbW1hbmRcbiAgICAgICAqIGluY3JlYXNlcyBvciBkZWNyZWFzZXMgdmFsdWUgb2YgdGhlIG51bWJlciB0eXBlIHByb3BlcnRpZXMgaW4gcHJvZmlsZSBvYmplY3RcbiAgICAgICAqL1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVJbmNyZW1lbnREZWNyZW1lbnRWYWx1ZShrZXksIHZhbHVlLCBjb21tYW5kKSB7XG4gICAgICAgIHZhciBfJGN0JGdsb2JhbFByb2ZpbGVNYXA7XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiAwXG4gICAgICAgIGlmICgkY3QuZ2xvYmFsUHJvZmlsZU1hcCA9PSBudWxsKSB7XG4gICAgICAgICAgJGN0Lmdsb2JhbFByb2ZpbGVNYXAgPSBTdG9yYWdlTWFuYWdlci5yZWFkRnJvbUxTb3JDb29raWUoUFJfQ09PS0lFKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkY3QuZ2xvYmFsUHJvZmlsZU1hcCA9PSBudWxsICYmICEoKF8kY3QkZ2xvYmFsUHJvZmlsZU1hcCA9ICRjdC5nbG9iYWxQcm9maWxlTWFwKSA9PT0gbnVsbCB8fCBfJGN0JGdsb2JhbFByb2ZpbGVNYXAgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF8kY3QkZ2xvYmFsUHJvZmlsZU1hcC5oYXNPd25Qcm9wZXJ0eShrZXkpKSkge1xuICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBwcm9maWxlIG1hcCBhbHJlYWR5IGhhcyB0aGUgcHJvcGVyeSBkZWZpbmVkXG4gICAgICAgICAgY29uc29sZS5lcnJvcignS2luZGx5IGNyZWF0ZSBwcm9maWxlIHdpdGggcmVxdWlyZWQgcHJvcHJ0eSB0byBpbmNyZW1lbnQvZGVjcmVtZW50LicpO1xuICAgICAgICB9IGVsc2UgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInIHx8IHZhbHVlIDw9IDApIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdWYWx1ZSBzaG91bGQgYmUgYSBudW1iZXIgZ3JlYXRlciB0aGFuIDAnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBVcGRhdGUgdGhlIHByb2ZpbGUgcHJvcGVydHkgaW4gbG9jYWwgc3RvcmFnZVxuICAgICAgICAgIGlmIChjb21tYW5kID09PSBDT01NQU5EX0lOQ1JFTUVOVCkge1xuICAgICAgICAgICAgJGN0Lmdsb2JhbFByb2ZpbGVNYXBba2V5XSA9ICRjdC5nbG9iYWxQcm9maWxlTWFwW2tleV0gKyB2YWx1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJGN0Lmdsb2JhbFByb2ZpbGVNYXBba2V5XSA9ICRjdC5nbG9iYWxQcm9maWxlTWFwW2tleV0gLSB2YWx1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBTdG9yYWdlTWFuYWdlci5zYXZlVG9MU29yQ29va2llKFBSX0NPT0tJRSwgJGN0Lmdsb2JhbFByb2ZpbGVNYXApOyAvLyBTZW5kIHRoZSB1cGRhdGVkIHZhbHVlIHRvIExDXG5cbiAgICAgICAgICB2YXIgZGF0YSA9IHt9O1xuICAgICAgICAgIHZhciBwcm9maWxlT2JqID0ge307XG4gICAgICAgICAgZGF0YS50eXBlID0gJ3Byb2ZpbGUnO1xuICAgICAgICAgIHByb2ZpbGVPYmpba2V5XSA9IF9kZWZpbmVQcm9wZXJ0eSh7fSwgY29tbWFuZCwgdmFsdWUpO1xuXG4gICAgICAgICAgaWYgKHByb2ZpbGVPYmoudHogPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gdHJ5IHRvIGF1dG8gY2FwdHVyZSB1c2VyIHRpbWV6b25lIGlmIG5vdCBwcmVzZW50XG4gICAgICAgICAgICBwcm9maWxlT2JqLnR6ID0gbmV3IERhdGUoKS50b1N0cmluZygpLm1hdGNoKC8oW0EtWl0rW1xcKy1dWzAtOV0rKS8pWzFdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRhdGEucHJvZmlsZSA9IHByb2ZpbGVPYmo7XG4gICAgICAgICAgZGF0YSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdCQyKVtfcmVxdWVzdCQyXS5hZGRTeXN0ZW1EYXRhVG9Qcm9maWxlT2JqZWN0KGRhdGEsIHVuZGVmaW5lZCk7XG5cbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlcXVlc3QkMilbX3JlcXVlc3QkMl0uYWRkRmxhZ3MoZGF0YSk7XG5cbiAgICAgICAgICB2YXIgY29tcHJlc3NlZERhdGEgPSBjb21wcmVzc0RhdGEoSlNPTi5zdHJpbmdpZnkoZGF0YSksIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDMpW19sb2dnZXIkM10pO1xuXG4gICAgICAgICAgdmFyIHBhZ2VMb2FkVXJsID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9hY2NvdW50KVtfYWNjb3VudF0uZGF0YVBvc3RVUkw7XG5cbiAgICAgICAgICBwYWdlTG9hZFVybCA9IGFkZFRvVVJMKHBhZ2VMb2FkVXJsLCAndHlwZScsIEVWVF9QVVNIKTtcbiAgICAgICAgICBwYWdlTG9hZFVybCA9IGFkZFRvVVJMKHBhZ2VMb2FkVXJsLCAnZCcsIGNvbXByZXNzZWREYXRhKTtcblxuICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdCQyKVtfcmVxdWVzdCQyXS5zYXZlQW5kRmlyZVJlcXVlc3QocGFnZUxvYWRVcmwsICRjdC5ibG9ja1JlcXVlc3QpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2FueX0ga2V5XG4gICAgICAgKiBAcGFyYW0ge2FycmF5fSBhcnJheVZhbFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbW1hbmRcbiAgICAgICAqIG92ZXJ3cml0ZXMvc2V0cyBuZXcgdmFsdWUocykgYWdhaW5zdCBhIGtleS9wcm9wZXJ0eSBpbiBwcm9maWxlIG9iamVjdFxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2hhbmRsZU11bHRpVmFsdWVTZXRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlTXVsdGlWYWx1ZVNldChrZXksIGFycmF5VmFsLCBjb21tYW5kKSB7XG4gICAgICAgIHZhciBhcnJheSA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXlWYWwubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGFycmF5VmFsW2ldID09PSAnbnVtYmVyJyAmJiAhYXJyYXkuaW5jbHVkZXMoYXJyYXlWYWxbaV0pKSB7XG4gICAgICAgICAgICBhcnJheS5wdXNoKGFycmF5VmFsW2ldKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcnJheVZhbFtpXSA9PT0gJ3N0cmluZycgJiYgIWFycmF5LmluY2x1ZGVzKGFycmF5VmFsW2ldLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgICBhcnJheS5wdXNoKGFycmF5VmFsW2ldLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdhcnJheSBzdXBwb3J0cyBvbmx5IHN0cmluZyBvciBudW1iZXIgdHlwZSB2YWx1ZXMnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJGN0Lmdsb2JhbFByb2ZpbGVNYXAgPT0gbnVsbCkge1xuICAgICAgICAgICRjdC5nbG9iYWxQcm9maWxlTWFwID0gU3RvcmFnZU1hbmFnZXIucmVhZEZyb21MU29yQ29va2llKFBSX0NPT0tJRSk7XG4gICAgICAgIH1cblxuICAgICAgICAkY3QuZ2xvYmFsUHJvZmlsZU1hcFtrZXldID0gYXJyYXk7XG4gICAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNhdmVUb0xTb3JDb29raWUoUFJfQ09PS0lFLCAkY3QuZ2xvYmFsUHJvZmlsZU1hcCk7XG4gICAgICAgIHRoaXMuc2VuZE11bHRpVmFsdWVEYXRhKGtleSwgYXJyYXlWYWwsIGNvbW1hbmQpO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHthbnl9IHByb3BLZXkgLSB0aGUgcHJvcGVydHkgbmFtZSB0byBiZSBhZGRlZCBpbiB0aGUgcHJvZmlsZSBvYmplY3RcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nLCBudW1iZXIsIGFycmF5fSBwcm9wVmFsIC0gdGhlIHByb3BlcnR5IHZhbHVlIHRvIGJlIGFkZGVkIGFnYWluc3QgdGhlIEBwcm9wa2V5IGtleVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbW1hbmRcbiAgICAgICAqIEFkZHMgYXJyYXkgb3Igc2luZ2xlIHZhbHVlIGFnYWluc3QgYSBrZXkvcHJvcGVydHkgaW4gcHJvZmlsZSBvYmplY3RcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcIl9oYW5kbGVNdWx0aVZhbHVlQWRkXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZU11bHRpVmFsdWVBZGQocHJvcEtleSwgcHJvcFZhbCwgY29tbWFuZCkge1xuICAgICAgICB2YXIgYXJyYXkgPSBbXTtcblxuICAgICAgICBpZiAoJGN0Lmdsb2JhbFByb2ZpbGVNYXAgPT0gbnVsbCkge1xuICAgICAgICAgICRjdC5nbG9iYWxQcm9maWxlTWFwID0gU3RvcmFnZU1hbmFnZXIucmVhZEZyb21MU29yQ29va2llKFBSX0NPT0tJRSk7XG4gICAgICAgIH0gLy8gaWYgdGhlIHZhbHVlIHRvIGJlIHNldCBpcyBlaXRoZXIgc3RyaW5nIG9yIG51bWJlclxuXG5cbiAgICAgICAgaWYgKHR5cGVvZiBwcm9wVmFsID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgcHJvcFZhbCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBpZiAoJGN0Lmdsb2JhbFByb2ZpbGVNYXAuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgICAgICAgIGFycmF5ID0gJGN0Lmdsb2JhbFByb2ZpbGVNYXBbcHJvcEtleV07XG4gICAgICAgICAgICB0eXBlb2YgcHJvcFZhbCA9PT0gJ251bWJlcicgPyBhcnJheS5wdXNoKHByb3BWYWwpIDogYXJyYXkucHVzaChwcm9wVmFsLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkY3QuZ2xvYmFsUHJvZmlsZU1hcFtwcm9wS2V5XSA9IHByb3BWYWw7XG4gICAgICAgICAgfSAvLyBpZiBwcm9wVmFsIGlzIGFuIGFycmF5XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoJGN0Lmdsb2JhbFByb2ZpbGVNYXAuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgICAgICAgIGFycmF5ID0gJGN0Lmdsb2JhbFByb2ZpbGVNYXBbcHJvcEtleV07XG4gICAgICAgICAgfVxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIGNoZWNrcyBmb3IgY2FzZSBzZW5zaXRpdmUgaW5wdXRzIGFuZCBmaWx0ZXJzIHRoZSBzYW1lIG9uZXNcbiAgICAgICAgICAgKi9cblxuXG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wVmFsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHByb3BWYWxbaV0gPT09ICdudW1iZXInICYmICFhcnJheS5pbmNsdWRlcyhwcm9wVmFsW2ldKSkge1xuICAgICAgICAgICAgICBhcnJheS5wdXNoKHByb3BWYWxbaV0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcHJvcFZhbFtpXSA9PT0gJ3N0cmluZycgJiYgIWFycmF5LmluY2x1ZGVzKHByb3BWYWxbaV0udG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgICAgYXJyYXkucHVzaChwcm9wVmFsW2ldLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcHJvcFZhbFtpXSA9PT0gJ251bWJlcicgJiYgYXJyYXkuaW5jbHVkZXMocHJvcFZhbFtpXSkgfHwgdHlwZW9mIHByb3BWYWxbaV0gPT09ICdzdHJpbmcnICYmIGFycmF5LmluY2x1ZGVzKHByb3BWYWxbaV0udG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignVmFsdWVzIGFscmVhZHkgaW5jbHVkZWQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2FycmF5IHN1cHBvcnRzIG9ubHkgc3RyaW5nIG9yIG51bWJlciB0eXBlIHZhbHVlcycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgICRjdC5nbG9iYWxQcm9maWxlTWFwW3Byb3BLZXldID0gYXJyYXk7XG4gICAgICAgIH1cblxuICAgICAgICBTdG9yYWdlTWFuYWdlci5zYXZlVG9MU29yQ29va2llKFBSX0NPT0tJRSwgJGN0Lmdsb2JhbFByb2ZpbGVNYXApO1xuICAgICAgICB0aGlzLnNlbmRNdWx0aVZhbHVlRGF0YShwcm9wS2V5LCBwcm9wVmFsLCBjb21tYW5kKTtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7YW55fSBwcm9wS2V5XG4gICAgICAgKiBAcGFyYW0ge3N0cmluZywgbnVtYmVyLCBhcnJheX0gcHJvcFZhbFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbW1hbmRcbiAgICAgICAqIHJlbW92ZXMgdmFsdWUocykgYWdhaW5zdCBhIGtleS9wcm9wZXJ0eSBpbiBwcm9maWxlIG9iamVjdFxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2hhbmRsZU11bHRpVmFsdWVSZW1vdmVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlTXVsdGlWYWx1ZVJlbW92ZShwcm9wS2V5LCBwcm9wVmFsLCBjb21tYW5kKSB7XG4gICAgICAgIGlmICgkY3QuZ2xvYmFsUHJvZmlsZU1hcCA9PSBudWxsKSB7XG4gICAgICAgICAgJGN0Lmdsb2JhbFByb2ZpbGVNYXAgPSBTdG9yYWdlTWFuYWdlci5yZWFkRnJvbUxTb3JDb29raWUoUFJfQ09PS0lFKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghJGN0Lmdsb2JhbFByb2ZpbGVNYXAuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiVGhlIHByb3BlcnR5IFwiLmNvbmNhdChwcm9wS2V5LCBcIiBkb2VzIG5vdCBleGlzdC5cIikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0eXBlb2YgcHJvcFZhbCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHByb3BWYWwgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSAkY3QuZ2xvYmFsUHJvZmlsZU1hcFtwcm9wS2V5XS5pbmRleE9mKHByb3BWYWwpO1xuXG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICRjdC5nbG9iYWxQcm9maWxlTWFwW3Byb3BLZXldLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgcHJvcFZhbC5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICB2YXIgaWR4ID0gJGN0Lmdsb2JhbFByb2ZpbGVNYXBbcHJvcEtleV0uaW5kZXhPZihwcm9wVmFsW2tdKTtcblxuICAgICAgICAgICAgICBpZiAoaWR4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICRjdC5nbG9iYWxQcm9maWxlTWFwW3Byb3BLZXldLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgU3RvcmFnZU1hbmFnZXIuc2F2ZVRvTFNvckNvb2tpZShQUl9DT09LSUUsICRjdC5nbG9iYWxQcm9maWxlTWFwKTtcbiAgICAgICAgdGhpcy5zZW5kTXVsdGlWYWx1ZURhdGEocHJvcEtleSwgcHJvcFZhbCwgY29tbWFuZCk7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2FueX0gcHJvcEtleVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbW1hbmRcbiAgICAgICAqIGRlbGV0ZXMgYSBrZXkgdmFsdWUgcGFpciBmcm9tIHRoZSBwcm9maWxlIG9iamVjdFxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2hhbmRsZU11bHRpVmFsdWVEZWxldGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlTXVsdGlWYWx1ZURlbGV0ZShwcm9wS2V5LCBjb21tYW5kKSB7XG4gICAgICAgIGlmICgkY3QuZ2xvYmFsUHJvZmlsZU1hcCA9PSBudWxsKSB7XG4gICAgICAgICAgJGN0Lmdsb2JhbFByb2ZpbGVNYXAgPSBTdG9yYWdlTWFuYWdlci5yZWFkRnJvbUxTb3JDb29raWUoUFJfQ09PS0lFKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghJGN0Lmdsb2JhbFByb2ZpbGVNYXAuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiVGhlIHByb3BlcnR5IFwiLmNvbmNhdChwcm9wS2V5LCBcIiBkb2VzIG5vdCBleGlzdC5cIikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSAkY3QuZ2xvYmFsUHJvZmlsZU1hcFtwcm9wS2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNhdmVUb0xTb3JDb29raWUoUFJfQ09PS0lFLCAkY3QuZ2xvYmFsUHJvZmlsZU1hcCk7XG4gICAgICAgIHRoaXMuc2VuZE11bHRpVmFsdWVEYXRhKHByb3BLZXksIG51bGwsIGNvbW1hbmQpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZW5kTXVsdGlWYWx1ZURhdGFcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZW5kTXVsdGlWYWx1ZURhdGEocHJvcEtleSwgcHJvcFZhbCwgY29tbWFuZCkge1xuICAgICAgICAvLyBTZW5kIHRoZSB1cGRhdGVkIHZhbHVlIHRvIExDXG4gICAgICAgIHZhciBkYXRhID0ge307XG4gICAgICAgIHZhciBwcm9maWxlT2JqID0ge307XG4gICAgICAgIGRhdGEudHlwZSA9ICdwcm9maWxlJzsgLy8gdGhpcyByZW1vdmVzIHRoZSBwcm9wZXJ0eSBhdCBiYWNrZW5kXG5cbiAgICAgICAgcHJvZmlsZU9ialtwcm9wS2V5XSA9IF9kZWZpbmVQcm9wZXJ0eSh7fSwgY29tbWFuZCwgY29tbWFuZCA9PT0gQ09NTUFORF9ERUxFVEUgPyB0cnVlIDogcHJvcFZhbCk7XG5cbiAgICAgICAgaWYgKHByb2ZpbGVPYmoudHogPT0gbnVsbCkge1xuICAgICAgICAgIHByb2ZpbGVPYmoudHogPSBuZXcgRGF0ZSgpLnRvU3RyaW5nKCkubWF0Y2goLyhbQS1aXStbXFwrLV1bMC05XSspLylbMV07XG4gICAgICAgIH1cblxuICAgICAgICBkYXRhLnByb2ZpbGUgPSBwcm9maWxlT2JqO1xuICAgICAgICBkYXRhID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0JDIpW19yZXF1ZXN0JDJdLmFkZFN5c3RlbURhdGFUb1Byb2ZpbGVPYmplY3QoZGF0YSwgdW5kZWZpbmVkKTtcblxuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlcXVlc3QkMilbX3JlcXVlc3QkMl0uYWRkRmxhZ3MoZGF0YSk7XG5cbiAgICAgICAgdmFyIGNvbXByZXNzZWREYXRhID0gY29tcHJlc3NEYXRhKEpTT04uc3RyaW5naWZ5KGRhdGEpLCBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQzKVtfbG9nZ2VyJDNdKTtcblxuICAgICAgICB2YXIgcGFnZUxvYWRVcmwgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2FjY291bnQpW19hY2NvdW50XS5kYXRhUG9zdFVSTDtcblxuICAgICAgICBwYWdlTG9hZFVybCA9IGFkZFRvVVJMKHBhZ2VMb2FkVXJsLCAndHlwZScsIEVWVF9QVVNIKTtcbiAgICAgICAgcGFnZUxvYWRVcmwgPSBhZGRUb1VSTChwYWdlTG9hZFVybCwgJ2QnLCBjb21wcmVzc2VkRGF0YSk7XG5cbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0JDIpW19yZXF1ZXN0JDJdLnNhdmVBbmRGaXJlUmVxdWVzdChwYWdlTG9hZFVybCwgJGN0LmJsb2NrUmVxdWVzdCk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFByb2ZpbGVIYW5kbGVyO1xuICB9KCAvKiNfX1BVUkVfXyovX3dyYXBOYXRpdmVTdXBlcihBcnJheSkpO1xuXG4gIHZhciBfcHJvY2Vzc1Byb2ZpbGVBcnJheTIgPSBmdW5jdGlvbiBfcHJvY2Vzc1Byb2ZpbGVBcnJheTIocHJvZmlsZUFycikge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHByb2ZpbGVBcnIpICYmIHByb2ZpbGVBcnIubGVuZ3RoID4gMCkge1xuICAgICAgZm9yICh2YXIgaW5kZXggaW4gcHJvZmlsZUFycikge1xuICAgICAgICBpZiAocHJvZmlsZUFyci5oYXNPd25Qcm9wZXJ0eShpbmRleCkpIHtcbiAgICAgICAgICB2YXIgb3V0ZXJPYmogPSBwcm9maWxlQXJyW2luZGV4XTtcbiAgICAgICAgICB2YXIgZGF0YSA9IHt9O1xuICAgICAgICAgIHZhciBwcm9maWxlT2JqID0gdm9pZCAwO1xuXG4gICAgICAgICAgaWYgKG91dGVyT2JqLlNpdGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gb3JnYW5pYyBkYXRhIGZyb20gdGhlIHNpdGVcbiAgICAgICAgICAgIHByb2ZpbGVPYmogPSBvdXRlck9iai5TaXRlO1xuXG4gICAgICAgICAgICBpZiAoaXNPYmplY3RFbXB0eShwcm9maWxlT2JqKSB8fCAhaXNQcm9maWxlVmFsaWQocHJvZmlsZU9iaiwge1xuICAgICAgICAgICAgICBsb2dnZXI6IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDMpW19sb2dnZXIkM11cbiAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKG91dGVyT2JqLkZhY2Vib29rICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIGZiIGNvbm5lY3QgZGF0YVxuICAgICAgICAgICAgdmFyIEZiUHJvZmlsZU9iaiA9IG91dGVyT2JqLkZhY2Vib29rOyAvLyBtYWtlIHN1cmUgdGhhdCB0aGUgb2JqZWN0IGNvbnRhaW5zIGFueSBkYXRhIGF0IGFsbFxuXG4gICAgICAgICAgICBpZiAoIWlzT2JqZWN0RW1wdHkoRmJQcm9maWxlT2JqKSAmJiAhRmJQcm9maWxlT2JqLmVycm9yKSB7XG4gICAgICAgICAgICAgIHByb2ZpbGVPYmogPSBwcm9jZXNzRkJVc2VyT2JqKEZiUHJvZmlsZU9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChvdXRlck9ialsnR29vZ2xlIFBsdXMnXSAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgR1BsdXNQcm9maWxlT2JqID0gb3V0ZXJPYmpbJ0dvb2dsZSBQbHVzJ107XG5cbiAgICAgICAgICAgIGlmICghaXNPYmplY3RFbXB0eShHUGx1c1Byb2ZpbGVPYmopICYmICFHUGx1c1Byb2ZpbGVPYmouZXJyb3IpIHtcbiAgICAgICAgICAgICAgcHJvZmlsZU9iaiA9IHByb2Nlc3NHUGx1c1VzZXJPYmooR1BsdXNQcm9maWxlT2JqLCB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyOiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQzKVtfbG9nZ2VyJDNdXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwcm9maWxlT2JqICE9IG51bGwgJiYgIWlzT2JqZWN0RW1wdHkocHJvZmlsZU9iaikpIHtcbiAgICAgICAgICAgIC8vIHByb2ZpbGUgZ290IHNldCBmcm9tIGFib3ZlXG4gICAgICAgICAgICBkYXRhLnR5cGUgPSAncHJvZmlsZSc7XG5cbiAgICAgICAgICAgIGlmIChwcm9maWxlT2JqLnR6ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgLy8gdHJ5IHRvIGF1dG8gY2FwdHVyZSB1c2VyIHRpbWV6b25lIGlmIG5vdCBwcmVzZW50XG4gICAgICAgICAgICAgIHByb2ZpbGVPYmoudHogPSBuZXcgRGF0ZSgpLnRvU3RyaW5nKCkubWF0Y2goLyhbQS1aXStbXFwrLV1bMC05XSspLylbMV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRhdGEucHJvZmlsZSA9IHByb2ZpbGVPYmo7XG4gICAgICAgICAgICBhZGRUb0xvY2FsUHJvZmlsZU1hcChwcm9maWxlT2JqLCB0cnVlKTtcbiAgICAgICAgICAgIGRhdGEgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlcXVlc3QkMilbX3JlcXVlc3QkMl0uYWRkU3lzdGVtRGF0YVRvT2JqZWN0KGRhdGEsIHVuZGVmaW5lZCk7XG5cbiAgICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdCQyKVtfcmVxdWVzdCQyXS5hZGRGbGFncyhkYXRhKTtcblxuICAgICAgICAgICAgdmFyIGNvbXByZXNzZWREYXRhID0gY29tcHJlc3NEYXRhKEpTT04uc3RyaW5naWZ5KGRhdGEpLCBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQzKVtfbG9nZ2VyJDNdKTtcblxuICAgICAgICAgICAgdmFyIHBhZ2VMb2FkVXJsID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9hY2NvdW50KVtfYWNjb3VudF0uZGF0YVBvc3RVUkw7XG5cbiAgICAgICAgICAgIHBhZ2VMb2FkVXJsID0gYWRkVG9VUkwocGFnZUxvYWRVcmwsICd0eXBlJywgRVZUX1BVU0gpO1xuICAgICAgICAgICAgcGFnZUxvYWRVcmwgPSBhZGRUb1VSTChwYWdlTG9hZFVybCwgJ2QnLCBjb21wcmVzc2VkRGF0YSk7XG5cbiAgICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdCQyKVtfcmVxdWVzdCQyXS5zYXZlQW5kRmlyZVJlcXVlc3QocGFnZUxvYWRVcmwsICRjdC5ibG9ja1JlcXVlc3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgX3JlcXVlc3QkMyA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwicmVxdWVzdFwiKTtcblxuICB2YXIgX2xvZ2dlciQ0ID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJsb2dnZXJcIik7XG5cbiAgdmFyIF9hY2NvdW50JDEgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImFjY291bnRcIik7XG5cbiAgdmFyIF9zZXNzaW9uJDEgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInNlc3Npb25cIik7XG5cbiAgdmFyIF9vbGRWYWx1ZXMkMiA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwib2xkVmFsdWVzXCIpO1xuXG4gIHZhciBfZGV2aWNlJDEgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImRldmljZVwiKTtcblxuICB2YXIgX3Byb2Nlc3NPVUwgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInByb2Nlc3NPVUxcIik7XG5cbiAgdmFyIF9oYW5kbGVDb29raWVGcm9tQ2FjaGUgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImhhbmRsZUNvb2tpZUZyb21DYWNoZVwiKTtcblxuICB2YXIgX2RlbGV0ZVVzZXIgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImRlbGV0ZVVzZXJcIik7XG5cbiAgdmFyIF9wcm9jZXNzTG9naW5BcnJheSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwicHJvY2Vzc0xvZ2luQXJyYXlcIik7XG5cbiAgdmFyIFVzZXJMb2dpbkhhbmRsZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9BcnJheSkge1xuICAgIF9pbmhlcml0cyhVc2VyTG9naW5IYW5kbGVyLCBfQXJyYXkpO1xuXG4gICAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihVc2VyTG9naW5IYW5kbGVyKTtcblxuICAgIGZ1bmN0aW9uIFVzZXJMb2dpbkhhbmRsZXIoX3JlZiwgdmFsdWVzKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIHZhciByZXF1ZXN0ID0gX3JlZi5yZXF1ZXN0LFxuICAgICAgICAgIGFjY291bnQgPSBfcmVmLmFjY291bnQsXG4gICAgICAgICAgc2Vzc2lvbiA9IF9yZWYuc2Vzc2lvbixcbiAgICAgICAgICBsb2dnZXIgPSBfcmVmLmxvZ2dlcixcbiAgICAgICAgICBkZXZpY2UgPSBfcmVmLmRldmljZTtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVzZXJMb2dpbkhhbmRsZXIpO1xuXG4gICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfcHJvY2Vzc0xvZ2luQXJyYXksIHtcbiAgICAgICAgdmFsdWU6IF9wcm9jZXNzTG9naW5BcnJheTJcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfZGVsZXRlVXNlciwge1xuICAgICAgICB2YWx1ZTogX2RlbGV0ZVVzZXIyXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX2hhbmRsZUNvb2tpZUZyb21DYWNoZSwge1xuICAgICAgICB2YWx1ZTogX2hhbmRsZUNvb2tpZUZyb21DYWNoZTJcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfcHJvY2Vzc09VTCwge1xuICAgICAgICB2YWx1ZTogX3Byb2Nlc3NPVUwyXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX3JlcXVlc3QkMywge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF9sb2dnZXIkNCwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF9hY2NvdW50JDEsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfc2Vzc2lvbiQxLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX29sZFZhbHVlcyQyLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX2RldmljZSQxLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX3JlcXVlc3QkMylbX3JlcXVlc3QkM10gPSByZXF1ZXN0O1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfYWNjb3VudCQxKVtfYWNjb3VudCQxXSA9IGFjY291bnQ7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF9zZXNzaW9uJDEpW19zZXNzaW9uJDFdID0gc2Vzc2lvbjtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX2xvZ2dlciQ0KVtfbG9nZ2VyJDRdID0gbG9nZ2VyO1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfb2xkVmFsdWVzJDIpW19vbGRWYWx1ZXMkMl0gPSB2YWx1ZXM7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF9kZXZpY2UkMSlbX2RldmljZSQxXSA9IGRldmljZTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9IC8vIE9uIFVzZXIgTG9naW5cblxuXG4gICAgX2NyZWF0ZUNsYXNzKFVzZXJMb2dpbkhhbmRsZXIsIFt7XG4gICAgICBrZXk6IFwiY2xlYXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkNClbX2xvZ2dlciQ0XS5kZWJ1ZygnY2xlYXIgY2FsbGVkLiBSZXNldCBmbGFnIGhhcyBiZWVuIHNldC4nKTtcblxuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2RlbGV0ZVVzZXIpW19kZWxldGVVc2VyXSgpO1xuXG4gICAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNldE1ldGFQcm9wKENMRUFSLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicHVzaFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHB1c2goKSB7XG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBwcm9maWxlc0FyciA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICBwcm9maWxlc0Fycltfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcHJvY2Vzc0xvZ2luQXJyYXkpW19wcm9jZXNzTG9naW5BcnJheV0ocHJvZmlsZXNBcnIpO1xuXG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfcHJvY2Vzc09sZFZhbHVlc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9wcm9jZXNzT2xkVmFsdWVzKCkge1xuICAgICAgICBpZiAoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9vbGRWYWx1ZXMkMilbX29sZFZhbHVlcyQyXSkge1xuICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcHJvY2Vzc0xvZ2luQXJyYXkpW19wcm9jZXNzTG9naW5BcnJheV0oX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9vbGRWYWx1ZXMkMilbX29sZFZhbHVlcyQyXSk7XG4gICAgICAgIH1cblxuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX29sZFZhbHVlcyQyKVtfb2xkVmFsdWVzJDJdID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gVXNlckxvZ2luSGFuZGxlcjtcbiAgfSggLyojX19QVVJFX18qL193cmFwTmF0aXZlU3VwZXIoQXJyYXkpKTtcblxuICB2YXIgX3Byb2Nlc3NPVUwyID0gZnVuY3Rpb24gX3Byb2Nlc3NPVUwyKHByb2ZpbGVBcnIpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBzZW5kT1VMRmxhZyA9IHRydWU7XG4gICAgU3RvcmFnZU1hbmFnZXIuc2F2ZVRvTFNvckNvb2tpZShGSVJFX1BVU0hfVU5SRUdJU1RFUkVELCBzZW5kT1VMRmxhZyk7XG5cbiAgICB2YXIgYWRkVG9LID0gZnVuY3Rpb24gYWRkVG9LKGlkcykge1xuICAgICAgdmFyIGsgPSBTdG9yYWdlTWFuYWdlci5yZWFkRnJvbUxTb3JDb29raWUoS0NPT0tJRV9OQU1FKTtcbiAgICAgIHZhciBnID0gU3RvcmFnZU1hbmFnZXIucmVhZEZyb21MU29yQ29va2llKEdDT09LSUVfTkFNRSk7XG4gICAgICB2YXIga0lkO1xuXG4gICAgICBpZiAoayA9PSBudWxsKSB7XG4gICAgICAgIGsgPSB7fTtcbiAgICAgICAga0lkID0gaWRzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogY2hlY2sgaWYgYWxyZWFkeSBleGlzdHMgKi9cbiAgICAgICAga0lkID0gay5pZDtcbiAgICAgICAgdmFyIGFub255bW91c1VzZXIgPSBmYWxzZTtcbiAgICAgICAgdmFyIGZvdW5kSW5DYWNoZSA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChrSWQgPT0gbnVsbCkge1xuICAgICAgICAgIGtJZCA9IGlkc1swXTtcbiAgICAgICAgICBhbm9ueW1vdXNVc2VyID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkY3QuTFJVX0NBQ0hFID09IG51bGwgJiYgU3RvcmFnZU1hbmFnZXIuX2lzTG9jYWxTdG9yYWdlU3VwcG9ydGVkKCkpIHtcbiAgICAgICAgICAkY3QuTFJVX0NBQ0hFID0gbmV3IExSVUNhY2hlKExSVV9DQUNIRV9TSVpFKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhbm9ueW1vdXNVc2VyKSB7XG4gICAgICAgICAgaWYgKGcgIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gaWYgaGF2ZSBnY29va2llXG4gICAgICAgICAgICAkY3QuTFJVX0NBQ0hFLnNldChrSWQsIGcpO1xuICAgICAgICAgICAgJGN0LmJsb2NrUmVxdWVzdCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgaWQgaXMgcHJlc2VudCBpbiB0aGUgY2FjaGVcbiAgICAgICAgICAvLyBzZXQgZm91bmRJbkNhY2hlIHRvIHRydWVcbiAgICAgICAgICBmb3IgKHZhciBpZHggaW4gaWRzKSB7XG4gICAgICAgICAgICBpZiAoaWRzLmhhc093blByb3BlcnR5KGlkeCkpIHtcbiAgICAgICAgICAgICAgdmFyIGlkID0gaWRzW2lkeF07XG5cbiAgICAgICAgICAgICAgaWYgKCRjdC5MUlVfQ0FDSEUuY2FjaGVbaWRdKSB7XG4gICAgICAgICAgICAgICAga0lkID0gaWQ7XG4gICAgICAgICAgICAgICAgZm91bmRJbkNhY2hlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmb3VuZEluQ2FjaGUpIHtcbiAgICAgICAgICBpZiAoa0lkICE9PSAkY3QuTFJVX0NBQ0hFLmdldExhc3RLZXkoKSkge1xuICAgICAgICAgICAgLy8gTmV3IFVzZXIgZm91bmRcbiAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgZW50aXJlIGNhY2hlXG4gICAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX3RoaXMyLCBfaGFuZGxlQ29va2llRnJvbUNhY2hlKVtfaGFuZGxlQ29va2llRnJvbUNhY2hlXSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZW5kT1VMRmxhZyA9IGZhbHNlO1xuICAgICAgICAgICAgU3RvcmFnZU1hbmFnZXIuc2F2ZVRvTFNvckNvb2tpZShGSVJFX1BVU0hfVU5SRUdJU1RFUkVELCBzZW5kT1VMRmxhZyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGdGcm9tQ2FjaGUgPSAkY3QuTFJVX0NBQ0hFLmdldChrSWQpO1xuICAgICAgICAgICRjdC5MUlVfQ0FDSEUuc2V0KGtJZCwgZ0Zyb21DYWNoZSk7XG4gICAgICAgICAgU3RvcmFnZU1hbmFnZXIuc2F2ZVRvTFNvckNvb2tpZShHQ09PS0lFX05BTUUsIGdGcm9tQ2FjaGUpO1xuICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZShfdGhpczIsIF9kZXZpY2UkMSlbX2RldmljZSQxXS5nY29va2llID0gZ0Zyb21DYWNoZTtcbiAgICAgICAgICB2YXIgbGFzdEsgPSAkY3QuTFJVX0NBQ0hFLmdldFNlY29uZExhc3RLZXkoKTtcblxuICAgICAgICAgIGlmIChTdG9yYWdlTWFuYWdlci5yZWFkRnJvbUxTb3JDb29raWUoRklSRV9QVVNIX1VOUkVHSVNURVJFRCkgJiYgbGFzdEsgIT09IC0xKSB7XG4gICAgICAgICAgICAvLyBDQUNIRUQgT0xEIFVTRVIgRk9VTkQuIFRSQU5TRkVSIFBVU0ggVE9LRU4gVE8gVEhJUyBVU0VSXG4gICAgICAgICAgICB2YXIgbGFzdEdVSUQgPSAkY3QuTFJVX0NBQ0hFLmNhY2hlW2xhc3RLXTtcblxuICAgICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKF90aGlzMiwgX3JlcXVlc3QkMylbX3JlcXVlc3QkM10udW5yZWdpc3RlclRva2VuRm9yR3VpZChsYXN0R1VJRCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghYW5vbnltb3VzVXNlcikge1xuICAgICAgICAgICAgX3RoaXMyLmNsZWFyKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChnICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKF90aGlzMiwgX2RldmljZSQxKVtfZGV2aWNlJDFdLmdjb29raWUgPSBnO1xuICAgICAgICAgICAgICBTdG9yYWdlTWFuYWdlci5zYXZlVG9MU29yQ29va2llKEdDT09LSUVfTkFNRSwgZyk7XG4gICAgICAgICAgICAgIHNlbmRPVUxGbGFnID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgU3RvcmFnZU1hbmFnZXIuc2F2ZVRvTFNvckNvb2tpZShGSVJFX1BVU0hfVU5SRUdJU1RFUkVELCBmYWxzZSk7XG4gICAgICAgICAga0lkID0gaWRzWzBdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGsuaWQgPSBrSWQ7XG4gICAgICBTdG9yYWdlTWFuYWdlci5zYXZlVG9MU29yQ29va2llKEtDT09LSUVfTkFNRSwgayk7XG4gICAgfTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHByb2ZpbGVBcnIpICYmIHByb2ZpbGVBcnIubGVuZ3RoID4gMCkge1xuICAgICAgZm9yICh2YXIgaW5kZXggaW4gcHJvZmlsZUFycikge1xuICAgICAgICBpZiAocHJvZmlsZUFyci5oYXNPd25Qcm9wZXJ0eShpbmRleCkpIHtcbiAgICAgICAgICB2YXIgb3V0ZXJPYmogPSBwcm9maWxlQXJyW2luZGV4XTtcbiAgICAgICAgICB2YXIgZGF0YSA9IHt9O1xuICAgICAgICAgIHZhciBwcm9maWxlT2JqID0gdm9pZCAwO1xuXG4gICAgICAgICAgaWYgKG91dGVyT2JqLlNpdGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gb3JnYW5pYyBkYXRhIGZyb20gdGhlIHNpdGVcbiAgICAgICAgICAgIHByb2ZpbGVPYmogPSBvdXRlck9iai5TaXRlO1xuXG4gICAgICAgICAgICBpZiAoaXNPYmplY3RFbXB0eShwcm9maWxlT2JqKSB8fCAhaXNQcm9maWxlVmFsaWQocHJvZmlsZU9iaiwge1xuICAgICAgICAgICAgICBsb2dnZXI6IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDQpW19sb2dnZXIkNF1cbiAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKG91dGVyT2JqLkZhY2Vib29rICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIGZiIGNvbm5lY3QgZGF0YVxuICAgICAgICAgICAgdmFyIEZiUHJvZmlsZU9iaiA9IG91dGVyT2JqLkZhY2Vib29rOyAvLyBtYWtlIHN1cmUgdGhhdCB0aGUgb2JqZWN0IGNvbnRhaW5zIGFueSBkYXRhIGF0IGFsbFxuXG4gICAgICAgICAgICBpZiAoIWlzT2JqZWN0RW1wdHkoRmJQcm9maWxlT2JqKSAmJiAhRmJQcm9maWxlT2JqLmVycm9yKSB7XG4gICAgICAgICAgICAgIHByb2ZpbGVPYmogPSBwcm9jZXNzRkJVc2VyT2JqKEZiUHJvZmlsZU9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChvdXRlck9ialsnR29vZ2xlIFBsdXMnXSAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgR1BsdXNQcm9maWxlT2JqID0gb3V0ZXJPYmpbJ0dvb2dsZSBQbHVzJ107XG5cbiAgICAgICAgICAgIGlmIChpc09iamVjdEVtcHR5KEdQbHVzUHJvZmlsZU9iaikgJiYgIUdQbHVzUHJvZmlsZU9iai5lcnJvcikge1xuICAgICAgICAgICAgICBwcm9maWxlT2JqID0gcHJvY2Vzc0dQbHVzVXNlck9iaihHUGx1c1Byb2ZpbGVPYmosIHtcbiAgICAgICAgICAgICAgICBsb2dnZXI6IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDQpW19sb2dnZXIkNF1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHByb2ZpbGVPYmogIT0gbnVsbCAmJiAhaXNPYmplY3RFbXB0eShwcm9maWxlT2JqKSkge1xuICAgICAgICAgICAgLy8gcHJvZmlsZSBnb3Qgc2V0IGZyb20gYWJvdmVcbiAgICAgICAgICAgIGRhdGEudHlwZSA9ICdwcm9maWxlJztcblxuICAgICAgICAgICAgaWYgKHByb2ZpbGVPYmoudHogPT0gbnVsbCkge1xuICAgICAgICAgICAgICAvLyB0cnkgdG8gYXV0byBjYXB0dXJlIHVzZXIgdGltZXpvbmUgaWYgbm90IHByZXNlbnRcbiAgICAgICAgICAgICAgcHJvZmlsZU9iai50eiA9IG5ldyBEYXRlKCkudG9TdHJpbmcoKS5tYXRjaCgvKFtBLVpdK1tcXCstXVswLTldKykvKVsxXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGF0YS5wcm9maWxlID0gcHJvZmlsZU9iajtcbiAgICAgICAgICAgIHZhciBpZHMgPSBbXTtcblxuICAgICAgICAgICAgaWYgKFN0b3JhZ2VNYW5hZ2VyLl9pc0xvY2FsU3RvcmFnZVN1cHBvcnRlZCgpKSB7XG4gICAgICAgICAgICAgIGlmIChwcm9maWxlT2JqLklkZW50aXR5ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZHMucHVzaChwcm9maWxlT2JqLklkZW50aXR5KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChwcm9maWxlT2JqLkVtYWlsICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZHMucHVzaChwcm9maWxlT2JqLkVtYWlsKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChwcm9maWxlT2JqLkdQSUQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlkcy5wdXNoKCdHUDonICsgcHJvZmlsZU9iai5HUElEKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChwcm9maWxlT2JqLkZCSUQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlkcy5wdXNoKCdGQjonICsgcHJvZmlsZU9iai5GQklEKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChpZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGFkZFRvSyhpZHMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFkZFRvTG9jYWxQcm9maWxlTWFwKHByb2ZpbGVPYmosIHRydWUpO1xuICAgICAgICAgICAgZGF0YSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdCQzKVtfcmVxdWVzdCQzXS5hZGRTeXN0ZW1EYXRhVG9PYmplY3QoZGF0YSwgdW5kZWZpbmVkKTtcblxuICAgICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0JDMpW19yZXF1ZXN0JDNdLmFkZEZsYWdzKGRhdGEpOyAvLyBBZGRpbmcgJ2lzT1VMJyBmbGFnIGluIHRydWUgZm9yIE9VTCBjYXNlcyB3aGljaC5cbiAgICAgICAgICAgIC8vIFRoaXMgZmxhZyB0ZWxscyBMQyB0byBjcmVhdGUgYSBuZXcgYXJwIG9iamVjdC5cbiAgICAgICAgICAgIC8vIEFsc28gd2Ugd2lsbCByZWNlaXZlIHRoZSBzYW1lIGZsYWcgaW4gcmVzcG9uc2UgYXJwIHdoaWNoIHRlbGxzIHRvIGRlbGV0ZSBleGlzdGluZyBhcnAgb2JqZWN0LlxuXG5cbiAgICAgICAgICAgIGlmIChzZW5kT1VMRmxhZykge1xuICAgICAgICAgICAgICBkYXRhW0lTX09VTF0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgY29tcHJlc3NlZERhdGEgPSBjb21wcmVzc0RhdGEoSlNPTi5zdHJpbmdpZnkoZGF0YSksIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDQpW19sb2dnZXIkNF0pO1xuXG4gICAgICAgICAgICB2YXIgcGFnZUxvYWRVcmwgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2FjY291bnQkMSlbX2FjY291bnQkMV0uZGF0YVBvc3RVUkw7XG5cbiAgICAgICAgICAgIHBhZ2VMb2FkVXJsID0gYWRkVG9VUkwocGFnZUxvYWRVcmwsICd0eXBlJywgRVZUX1BVU0gpO1xuICAgICAgICAgICAgcGFnZUxvYWRVcmwgPSBhZGRUb1VSTChwYWdlTG9hZFVybCwgJ2QnLCBjb21wcmVzc2VkRGF0YSk7IC8vIFdoZW5ldmVyIHNlbmRPVUxGbGFnIGlzIHRydWUgdGhlbiBkb250IHNlbmQgYXJwIGFuZCBnY29va2llIChndWlkIGluIG1lbW9yeSBpbiB0aGUgcmVxdWVzdClcbiAgICAgICAgICAgIC8vIEFsc28gd2hlbiB0aGlzIGZsYWcgaXMgc2V0IHdlIHdpbGwgZ2V0IGFub3RoZXIgZmxhZyBmcm9tIExDIGluIGFycCB3aGljaCB0ZWxscyB1cyB0byBkZWxldGUgYXJwXG4gICAgICAgICAgICAvLyBzdG9yZWQgaW4gdGhlIGNhY2hlIGFuZCByZXBsYWNlIGl0IHdpdGggdGhlIHJlc3BvbnNlIGFycC5cblxuICAgICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0JDMpW19yZXF1ZXN0JDNdLnNhdmVBbmRGaXJlUmVxdWVzdChwYWdlTG9hZFVybCwgJGN0LmJsb2NrUmVxdWVzdCwgc2VuZE9VTEZsYWcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgX2hhbmRsZUNvb2tpZUZyb21DYWNoZTIgPSBmdW5jdGlvbiBfaGFuZGxlQ29va2llRnJvbUNhY2hlMigpIHtcbiAgICAkY3QuYmxvY2tSZXF1ZXN0ID0gZmFsc2U7XG4gICAgY29uc29sZS5kZWJ1ZygnQmxvY2sgcmVxdWVzdCBpcyBmYWxzZScpO1xuXG4gICAgaWYgKFN0b3JhZ2VNYW5hZ2VyLl9pc0xvY2FsU3RvcmFnZVN1cHBvcnRlZCgpKSB7XG4gICAgICBkZWxldGUgbG9jYWxTdG9yYWdlW1BSX0NPT0tJRV07XG4gICAgICBkZWxldGUgbG9jYWxTdG9yYWdlW0VWX0NPT0tJRV07XG4gICAgICBkZWxldGUgbG9jYWxTdG9yYWdlW01FVEFfQ09PS0lFXTtcbiAgICAgIGRlbGV0ZSBsb2NhbFN0b3JhZ2VbQVJQX0NPT0tJRV07XG4gICAgICBkZWxldGUgbG9jYWxTdG9yYWdlW0NBTVBfQ09PS0lFX05BTUVdO1xuICAgICAgZGVsZXRlIGxvY2FsU3RvcmFnZVtDSEFSR0VESURfQ09PS0lFX05BTUVdO1xuICAgIH1cblxuICAgIFN0b3JhZ2VNYW5hZ2VyLnJlbW92ZUNvb2tpZShDQU1QX0NPT0tJRV9OQU1FLCBnZXRIb3N0TmFtZSgpKTtcbiAgICBTdG9yYWdlTWFuYWdlci5yZW1vdmVDb29raWUoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXNzaW9uJDEpW19zZXNzaW9uJDFdLmNvb2tpZU5hbWUsICRjdC5icm9hZERvbWFpbik7XG4gICAgU3RvcmFnZU1hbmFnZXIucmVtb3ZlQ29va2llKEFSUF9DT09LSUUsICRjdC5icm9hZERvbWFpbik7XG5cbiAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3Nlc3Npb24kMSlbX3Nlc3Npb24kMV0uc2V0U2Vzc2lvbkNvb2tpZU9iamVjdCgnJyk7XG4gIH07XG5cbiAgdmFyIF9kZWxldGVVc2VyMiA9IGZ1bmN0aW9uIF9kZWxldGVVc2VyMigpIHtcbiAgICAkY3QuYmxvY2tSZXF1ZXN0ID0gdHJ1ZTtcblxuICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDQpW19sb2dnZXIkNF0uZGVidWcoJ0Jsb2NrIHJlcXVlc3QgaXMgdHJ1ZScpO1xuXG4gICAgJGN0Lmdsb2JhbENhY2hlID0ge1xuICAgICAgZ2Nvb2tpZTogbnVsbCxcbiAgICAgIFJFUV9OOiAwLFxuICAgICAgUkVTUF9OOiAwXG4gICAgfTtcblxuICAgIGlmIChTdG9yYWdlTWFuYWdlci5faXNMb2NhbFN0b3JhZ2VTdXBwb3J0ZWQoKSkge1xuICAgICAgZGVsZXRlIGxvY2FsU3RvcmFnZVtHQ09PS0lFX05BTUVdO1xuICAgICAgZGVsZXRlIGxvY2FsU3RvcmFnZVtLQ09PS0lFX05BTUVdO1xuICAgICAgZGVsZXRlIGxvY2FsU3RvcmFnZVtQUl9DT09LSUVdO1xuICAgICAgZGVsZXRlIGxvY2FsU3RvcmFnZVtFVl9DT09LSUVdO1xuICAgICAgZGVsZXRlIGxvY2FsU3RvcmFnZVtNRVRBX0NPT0tJRV07XG4gICAgICBkZWxldGUgbG9jYWxTdG9yYWdlW0FSUF9DT09LSUVdO1xuICAgICAgZGVsZXRlIGxvY2FsU3RvcmFnZVtDQU1QX0NPT0tJRV9OQU1FXTtcbiAgICAgIGRlbGV0ZSBsb2NhbFN0b3JhZ2VbQ0hBUkdFRElEX0NPT0tJRV9OQU1FXTtcbiAgICB9XG5cbiAgICBTdG9yYWdlTWFuYWdlci5yZW1vdmVDb29raWUoR0NPT0tJRV9OQU1FLCAkY3QuYnJvYWREb21haW4pO1xuICAgIFN0b3JhZ2VNYW5hZ2VyLnJlbW92ZUNvb2tpZShDQU1QX0NPT0tJRV9OQU1FLCBnZXRIb3N0TmFtZSgpKTtcbiAgICBTdG9yYWdlTWFuYWdlci5yZW1vdmVDb29raWUoS0NPT0tJRV9OQU1FLCBnZXRIb3N0TmFtZSgpKTtcbiAgICBTdG9yYWdlTWFuYWdlci5yZW1vdmVDb29raWUoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXNzaW9uJDEpW19zZXNzaW9uJDFdLmNvb2tpZU5hbWUsICRjdC5icm9hZERvbWFpbik7XG4gICAgU3RvcmFnZU1hbmFnZXIucmVtb3ZlQ29va2llKEFSUF9DT09LSUUsICRjdC5icm9hZERvbWFpbik7XG4gICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9kZXZpY2UkMSlbX2RldmljZSQxXS5nY29va2llID0gbnVsbDtcblxuICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfc2Vzc2lvbiQxKVtfc2Vzc2lvbiQxXS5zZXRTZXNzaW9uQ29va2llT2JqZWN0KCcnKTtcbiAgfTtcblxuICB2YXIgX3Byb2Nlc3NMb2dpbkFycmF5MiA9IGZ1bmN0aW9uIF9wcm9jZXNzTG9naW5BcnJheTIobG9naW5BcnIpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShsb2dpbkFycikgJiYgbG9naW5BcnIubGVuZ3RoID4gMCkge1xuICAgICAgdmFyIHByb2ZpbGVPYmogPSBsb2dpbkFyci5wb3AoKTtcbiAgICAgIHZhciBwcm9jZXNzUHJvZmlsZSA9IHByb2ZpbGVPYmogIT0gbnVsbCAmJiBpc09iamVjdChwcm9maWxlT2JqKSAmJiAocHJvZmlsZU9iai5TaXRlICE9IG51bGwgJiYgT2JqZWN0LmtleXMocHJvZmlsZU9iai5TaXRlKS5sZW5ndGggPiAwIHx8IHByb2ZpbGVPYmouRmFjZWJvb2sgIT0gbnVsbCAmJiBPYmplY3Qua2V5cyhwcm9maWxlT2JqLkZhY2Vib29rKS5sZW5ndGggPiAwIHx8IHByb2ZpbGVPYmpbJ0dvb2dsZSBQbHVzJ10gIT0gbnVsbCAmJiBPYmplY3Qua2V5cyhwcm9maWxlT2JqWydHb29nbGUgUGx1cyddKS5sZW5ndGggPiAwKTtcblxuICAgICAgaWYgKHByb2Nlc3NQcm9maWxlKSB7XG4gICAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNldEluc3RhbnREZWxldGVGbGFnSW5LKCk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3Byb2Nlc3NPVUwpW19wcm9jZXNzT1VMXShbcHJvZmlsZU9ial0pO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkNClbX2xvZ2dlciQ0XS5kZWJ1ZyhlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkNClbX2xvZ2dlciQ0XS5lcnJvcignUHJvZmlsZSBvYmplY3QgaXMgaW4gaW5jb3JyZWN0IGZvcm1hdCcpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgQ1RXZWJQZXJzb25hbGlzYXRpb25CYW5uZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9IVE1MRWxlbWVudCkge1xuICAgIF9pbmhlcml0cyhDVFdlYlBlcnNvbmFsaXNhdGlvbkJhbm5lciwgX0hUTUxFbGVtZW50KTtcblxuICAgIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoQ1RXZWJQZXJzb25hbGlzYXRpb25CYW5uZXIpO1xuXG4gICAgZnVuY3Rpb24gQ1RXZWJQZXJzb25hbGlzYXRpb25CYW5uZXIoKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDVFdlYlBlcnNvbmFsaXNhdGlvbkJhbm5lcik7XG5cbiAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICBfdGhpcy5fZGV0YWlscyA9IG51bGw7XG4gICAgICBfdGhpcy5zaGFkb3cgPSBudWxsO1xuICAgICAgX3RoaXMuc2hhZG93ID0gX3RoaXMuYXR0YWNoU2hhZG93KHtcbiAgICAgICAgbW9kZTogJ29wZW4nXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoQ1RXZWJQZXJzb25hbGlzYXRpb25CYW5uZXIsIFt7XG4gICAgICBrZXk6IFwicmVuZGVyQmFubmVyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyQmFubmVyKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICB0aGlzLnNoYWRvdy5pbm5lckhUTUwgPSB0aGlzLmdldEJhbm5lckNvbnRlbnQoKTtcblxuICAgICAgICBpZiAodGhpcy50cmFja0NsaWNrICE9PSBmYWxzZSkge1xuICAgICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb25DbGlja1VybCA9IF90aGlzMi5kZXRhaWxzLm9uQ2xpY2s7XG5cbiAgICAgICAgICAgIGlmIChvbkNsaWNrVXJsKSB7XG4gICAgICAgICAgICAgIF90aGlzMi5kZXRhaWxzLndpbmRvdyA/IHdpbmRvdy5vcGVuKG9uQ2xpY2tVcmwsICdfYmxhbmsnKSA6IHdpbmRvdy5wYXJlbnQubG9jYXRpb24uaHJlZiA9IG9uQ2xpY2tVcmw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdpbmRvdy5jbGV2ZXJ0YXAucmVuZGVyTm90aWZpY2F0aW9uQ2xpY2tlZCh7XG4gICAgICAgICAgICAgIG1zZ0lkOiBfdGhpczIubXNnSWQsXG4gICAgICAgICAgICAgIHBpdm90SWQ6IF90aGlzMi5waXZvdElkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdpbmRvdy5jbGV2ZXJ0YXAucmVuZGVyTm90aWZpY2F0aW9uVmlld2VkKHtcbiAgICAgICAgICBtc2dJZDogdGhpcy5tc2dJZCxcbiAgICAgICAgICBwaXZvdElkOiB0aGlzLnBpdm90SWRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldEJhbm5lckNvbnRlbnRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRCYW5uZXJDb250ZW50KCkge1xuICAgICAgICByZXR1cm4gXCJcXG4gICAgICA8c3R5bGUgdHlwZT1cXFwidGV4dC9jc3NcXFwiPlxcbiAgICAgICAgLmJhbm5lciB7XFxuICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAgICAgfVxcbiAgICAgICAgaW1nIHtcXG4gICAgICAgICAgaGVpZ2h0OiBcIi5jb25jYXQodGhpcy5kaXZIZWlnaHQgPyB0aGlzLmRpdkhlaWdodCA6ICdhdXRvJywgXCI7XFxuICAgICAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgICAgfVxcbiAgICAgICAgLndyYXBwZXI6aXMoLmxlZnQsIC5yaWdodCwgLmNlbnRlcikge1xcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgICAgICB3aWR0aDogMTAwJTtcXG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xcbiAgICAgICAgICBvdmVyZmxvdzogYXV0bztcXG4gICAgICAgICAgdG9wOiAwO1xcbiAgICAgICAgfVxcbiAgICAgICAgXCIpLmNvbmNhdCh0aGlzLmRldGFpbHMuY3NzID8gdGhpcy5kZXRhaWxzLmNzcyA6ICcnLCBcIlxcbiAgICAgIDwvc3R5bGU+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwiYmFubmVyXFxcIj5cXG4gICAgICAgIDxwaWN0dXJlPlxcbiAgICAgICAgICA8c291cmNlIG1lZGlhPVxcXCIobWluLXdpZHRoOjQ4MHB4KVxcXCIgc3Jjc2V0PVxcXCJcIikuY29uY2F0KHRoaXMuZGV0YWlscy5kZXNrdG9wSW1hZ2VVUkwsIFwiXFxcIj5cXG4gICAgICAgICAgPHNvdXJjZSBzcmNzZXQ9XFxcIlwiKS5jb25jYXQodGhpcy5kZXRhaWxzLm1vYmlsZUltYWdlVVJMLCBcIlxcXCI+XFxuICAgICAgICAgIDxpbWcgc3JjPVxcXCJcIikuY29uY2F0KHRoaXMuZGV0YWlscy5kZXNrdG9wSW1hZ2VVUkwsIFwiXFxcIiBhbHQ9XFxcIlBsZWFzZSB1cGxvYWQgYSBwaWN0dXJlXFxcIiBzdHlsZT1cXFwid2lkdGg6MTAwJTtcXFwiPlxcbiAgICAgICAgPC9waWN0dXJlPlxcbiAgICAgICAgXCIpLmNvbmNhdCh0aGlzLmRldGFpbHMuaHRtbCA/IHRoaXMuZGV0YWlscy5odG1sIDogJycsIFwiXFxuICAgICAgPC9kaXY+XFxuICAgIFwiKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZGV0YWlsc1wiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZXRhaWxzIHx8ICcnO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbCkge1xuICAgICAgICBpZiAodGhpcy5fZGV0YWlscyA9PT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuX2RldGFpbHMgPSB2YWw7XG4gICAgICAgICAgdGhpcy5yZW5kZXJCYW5uZXIoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBDVFdlYlBlcnNvbmFsaXNhdGlvbkJhbm5lcjtcbiAgfSggLyojX19QVVJFX18qL193cmFwTmF0aXZlU3VwZXIoSFRNTEVsZW1lbnQpKTtcblxuICB2YXIgQ1RXZWJQZXJzb25hbGlzYXRpb25DYXJvdXNlbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0hUTUxFbGVtZW50KSB7XG4gICAgX2luaGVyaXRzKENUV2ViUGVyc29uYWxpc2F0aW9uQ2Fyb3VzZWwsIF9IVE1MRWxlbWVudCk7XG5cbiAgICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKENUV2ViUGVyc29uYWxpc2F0aW9uQ2Fyb3VzZWwpO1xuXG4gICAgZnVuY3Rpb24gQ1RXZWJQZXJzb25hbGlzYXRpb25DYXJvdXNlbCgpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENUV2ViUGVyc29uYWxpc2F0aW9uQ2Fyb3VzZWwpO1xuXG4gICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgX3RoaXMuX3RhcmdldCA9IG51bGw7XG4gICAgICBfdGhpcy5fY2Fyb3VzZWwgPSBudWxsO1xuICAgICAgX3RoaXMuc2hhZG93ID0gbnVsbDtcbiAgICAgIF90aGlzLnNsaWRlcyA9IDA7XG4gICAgICBfdGhpcy5wcmV2aW91c2x5U2VsZWN0ZWRJdGVtID0gLTE7XG4gICAgICBfdGhpcy5zZWxlY3RlZEl0ZW0gPSAxO1xuICAgICAgX3RoaXMuYXV0b1NsaWRlID0gbnVsbDtcbiAgICAgIF90aGlzLnN0b3BBdXRvU2xpZGVUaW1lb3V0ID0gbnVsbDtcbiAgICAgIF90aGlzLnNoYWRvdyA9IF90aGlzLmF0dGFjaFNoYWRvdyh7XG4gICAgICAgIG1vZGU6ICdvcGVuJ1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChjdXN0b21FbGVtZW50cy5nZXQoJ2N0LXdlYi1wZXJzb25hbGlzYXRpb24tYmFubmVyJykgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ2N0LXdlYi1wZXJzb25hbGlzYXRpb24tYmFubmVyJywgQ1RXZWJQZXJzb25hbGlzYXRpb25CYW5uZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKENUV2ViUGVyc29uYWxpc2F0aW9uQ2Fyb3VzZWwsIFt7XG4gICAgICBrZXk6IFwicmVuZGVyQ2Fyb3VzZWxcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJDYXJvdXNlbCgpIHtcbiAgICAgICAgdGhpcy5zbGlkZXMgPSB0aGlzLmRldGFpbHMubGVuZ3RoO1xuICAgICAgICB0aGlzLnNoYWRvdy5pbm5lckhUTUwgPSB0aGlzLmdldFN0eWxlcygpO1xuICAgICAgICB2YXIgY2Fyb3VzZWwgPSB0aGlzLmdldENhcm91c2VsQ29udGVudCgpO1xuXG4gICAgICAgIGlmICh0aGlzLmRpc3BsYXkuc2hvd05hdkJ0bnMpIHtcbiAgICAgICAgICBjYXJvdXNlbC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIHRoaXMuZGlzcGxheS5uYXZCdG5zSHRtbCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5kaXNwbGF5LnNob3dOYXZBcnJvd3MpIHtcbiAgICAgICAgICBjYXJvdXNlbC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIHRoaXMuZGlzcGxheS5sZWZ0TmF2QXJyb3dIdG1sKTtcbiAgICAgICAgICBjYXJvdXNlbC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIHRoaXMuZGlzcGxheS5yaWdodE5hdkFycm93SHRtbCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jYXJvdXNlbCA9IGNhcm91c2VsO1xuICAgICAgICB0aGlzLnNoYWRvdy5hcHBlbmRDaGlsZChjYXJvdXNlbCk7XG4gICAgICAgIHRoaXMuc2V0dXBDbGljaygpO1xuICAgICAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkSXRlbSgpOyAvLyBUT0RPOiBlbmFibGUgY29uZGl0aW9uYWxseVxuXG4gICAgICAgIHRoaXMuc3RhcnRBdXRvU2xpZGUoKTtcbiAgICAgICAgdGhpcy5zZXR1cE9uSG92ZXIoKTtcbiAgICAgICAgd2luZG93LmNsZXZlcnRhcC5yZW5kZXJOb3RpZmljYXRpb25WaWV3ZWQoe1xuICAgICAgICAgIG1zZ0lkOiB0aGlzLnRhcmdldC53enJrX2lkLFxuICAgICAgICAgIHBpdm90SWQ6IHRoaXMudGFyZ2V0Lnd6cmtfcGl2b3RcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldHVwQ2xpY2tcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXR1cENsaWNrKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICB0aGlzLl9jYXJvdXNlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHZhciBldmVudElEID0gZXZlbnQudGFyZ2V0LmlkO1xuXG4gICAgICAgICAgaWYgKGV2ZW50SUQuc3RhcnRzV2l0aCgnY2Fyb3VzZWxfX2J1dHRvbicpKSB7XG4gICAgICAgICAgICB2YXIgc2VsZWN0ZWQgPSArZXZlbnRJRC5zcGxpdCgnLScpWzFdO1xuXG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWQgIT09IF90aGlzMi5zZWxlY3RlZEl0ZW0pIHtcbiAgICAgICAgICAgICAgX3RoaXMyLnByZXZpb3VzbHlTZWxlY3RlZEl0ZW0gPSBfdGhpczIuc2VsZWN0ZWRJdGVtO1xuICAgICAgICAgICAgICBfdGhpczIuc2VsZWN0ZWRJdGVtID0gc2VsZWN0ZWQ7XG5cbiAgICAgICAgICAgICAgX3RoaXMyLnVwZGF0ZVNlbGVjdGVkSXRlbSgpO1xuXG4gICAgICAgICAgICAgIF90aGlzMi5zdGFydEF1dG9TbGlkZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnRJRC5zdGFydHNXaXRoKCdjYXJvdXNlbF9fYXJyb3cnKSkge1xuICAgICAgICAgICAgZXZlbnRJRC5lbmRzV2l0aCgncmlnaHQnKSA/IF90aGlzMi5nb1RvTmV4dCgpIDogX3RoaXMyLmdvVG9QcmV2KCk7XG5cbiAgICAgICAgICAgIF90aGlzMi5zdGFydEF1dG9TbGlkZSgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnRJRC5pbmRleE9mKCctJykgPiAtMSkge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSArZXZlbnRJRC5zcGxpdCgnLScpWzFdO1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gaXRlbSAtIDE7XG5cbiAgICAgICAgICAgIGlmICh3aW5kb3cucGFyZW50LmNsZXZlcnRhcCkge1xuICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnUmFpc2Ugbm90aWZpY2F0aW9uIGNsaWNrZWQgZXZlbnQgZm9yICcsIGl0ZW0pXG4gICAgICAgICAgICAgIHdpbmRvdy5jbGV2ZXJ0YXAucmVuZGVyTm90aWZpY2F0aW9uQ2xpY2tlZCh7XG4gICAgICAgICAgICAgICAgbXNnSWQ6IF90aGlzMi50YXJnZXQud3pya19pZCxcbiAgICAgICAgICAgICAgICBwaXZvdElkOiBfdGhpczIudGFyZ2V0Lnd6cmtfcGl2b3QsXG4gICAgICAgICAgICAgICAgd3pya19zbGlkZU5vOiBpdGVtXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdXJsID0gX3RoaXMyLmRldGFpbHNbaW5kZXhdLm9uQ2xpY2s7XG5cbiAgICAgICAgICAgIGlmICh1cmwgIT09ICcnKSB7XG4gICAgICAgICAgICAgIF90aGlzMi5kZXRhaWxzW2luZGV4XS53aW5kb3cgPyB3aW5kb3cub3Blbih1cmwsICdfYmxhbmsnKSA6IHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldHVwT25Ib3ZlclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldHVwT25Ib3ZlcigpIHtcbiAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5fY2Fyb3VzZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIF90aGlzMy5zdG9wQXV0b1NsaWRlVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMzLmF1dG9TbGlkZSA9IGNsZWFySW50ZXJ2YWwoX3RoaXMzLmF1dG9TbGlkZSk7XG4gICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fY2Fyb3VzZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpczMuc3RvcEF1dG9TbGlkZVRpbWVvdXQpO1xuXG4gICAgICAgICAgaWYgKF90aGlzMy5hdXRvU2xpZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgX3RoaXMzLnN0YXJ0QXV0b1NsaWRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0Q2Fyb3VzZWxDb250ZW50XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2Fyb3VzZWxDb250ZW50KCkge1xuICAgICAgICB2YXIgY2Fyb3VzZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgY2Fyb3VzZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjYXJvdXNlbCcpO1xuICAgICAgICB0aGlzLmRldGFpbHMuZm9yRWFjaChmdW5jdGlvbiAoZGV0YWlsLCBpKSB7XG4gICAgICAgICAgdmFyIGJhbm5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2N0LXdlYi1wZXJzb25hbGlzYXRpb24tYmFubmVyJyk7XG4gICAgICAgICAgYmFubmVyLmNsYXNzTGlzdC5hZGQoJ2Nhcm91c2VsX19pdGVtJyk7XG4gICAgICAgICAgYmFubmVyLnRyYWNrQ2xpY2sgPSBmYWxzZTtcbiAgICAgICAgICBiYW5uZXIuc2V0QXR0cmlidXRlKCdpZCcsIFwiY2Fyb3VzZWxfX2l0ZW0tXCIuY29uY2F0KGkgKyAxKSk7XG4gICAgICAgICAgYmFubmVyLmRldGFpbHMgPSBkZXRhaWw7XG4gICAgICAgICAgY2Fyb3VzZWwuYXBwZW5kQ2hpbGQoYmFubmVyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjYXJvdXNlbDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0U3R5bGVzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U3R5bGVzKCkge1xuICAgICAgICByZXR1cm4gXCJcXG4gICAgICA8c3R5bGU+XFxuICAgICAgLmNhcm91c2VsIHtcXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgICB9XFxuXFxuICAgICAgLmNhcm91c2VsX19pdGVtIHtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IGdyZXk7XFxuICAgICAgICBkaXNwbGF5OiBub25lO1xcbiAgICAgICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXG4gICAgICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XFxuICAgICAgfVxcblxcbiAgICAgIC5jYXJvdXNlbF9faXRlbSBpbWcge1xcbiAgICAgICAgaGVpZ2h0OiBhdXRvO1xcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgICB0cmFuc2l0aW9uOiAycztcXG4gICAgICB9XFxuXFxuICAgICAgLmNhcm91c2VsX19pdGVtLS1zZWxlY3RlZCB7XFxuICAgICAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgICB9XFxuICAgICAgXCIuY29uY2F0KHRoaXMuZGlzcGxheS5uYXZCdG5zQ3NzLCBcIlxcbiAgICAgIFwiKS5jb25jYXQodGhpcy5kaXNwbGF5Lm5hdkFycm93c0NzcywgXCJcXG4gICAgICA8L3N0eWxlPlxcbiAgXCIpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ1cGRhdGVTZWxlY3RlZEl0ZW1cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVTZWxlY3RlZEl0ZW0oKSB7XG4gICAgICAgIHZhciBfcmVmMjtcblxuICAgICAgICBpZiAodGhpcy5wcmV2aW91c2x5U2VsZWN0ZWRJdGVtICE9PSAtMSkge1xuICAgICAgICAgIHZhciBfcmVmO1xuXG4gICAgICAgICAgdmFyIHByZXZJdGVtID0gdGhpcy5zaGFkb3cuZ2V0RWxlbWVudEJ5SWQoXCJjYXJvdXNlbF9faXRlbS1cIi5jb25jYXQodGhpcy5wcmV2aW91c2x5U2VsZWN0ZWRJdGVtKSk7XG4gICAgICAgICAgdmFyIHByZXZCdXR0b24gPSB0aGlzLnNoYWRvdy5nZXRFbGVtZW50QnlJZChcImNhcm91c2VsX19idXR0b24tXCIuY29uY2F0KHRoaXMucHJldmlvdXNseVNlbGVjdGVkSXRlbSkpO1xuICAgICAgICAgIHByZXZJdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2Nhcm91c2VsX19pdGVtLS1zZWxlY3RlZCcpO1xuICAgICAgICAgIChfcmVmID0gcHJldkJ1dHRvbiAhPT0gbnVsbCkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IHByZXZCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnY2Fyb3VzZWxfX2J1dHRvbi0tc2VsZWN0ZWQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpdGVtID0gdGhpcy5zaGFkb3cuZ2V0RWxlbWVudEJ5SWQoXCJjYXJvdXNlbF9faXRlbS1cIi5jb25jYXQodGhpcy5zZWxlY3RlZEl0ZW0pKTtcbiAgICAgICAgdmFyIGJ1dHRvbiA9IHRoaXMuc2hhZG93LmdldEVsZW1lbnRCeUlkKFwiY2Fyb3VzZWxfX2J1dHRvbi1cIi5jb25jYXQodGhpcy5zZWxlY3RlZEl0ZW0pKTtcbiAgICAgICAgaXRlbS5jbGFzc0xpc3QuYWRkKCdjYXJvdXNlbF9faXRlbS0tc2VsZWN0ZWQnKTtcbiAgICAgICAgKF9yZWYyID0gYnV0dG9uICE9PSBudWxsKSAhPT0gbnVsbCAmJiBfcmVmMiAhPT0gdm9pZCAwID8gX3JlZjIgOiBidXR0b24uY2xhc3NMaXN0LmFkZCgnY2Fyb3VzZWxfX2J1dHRvbi0tc2VsZWN0ZWQnKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic3RhcnRBdXRvU2xpZGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydEF1dG9TbGlkZSgpIHtcbiAgICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmF1dG9TbGlkZSk7XG4gICAgICAgIHRoaXMuYXV0b1NsaWRlID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzNC5nb1RvTmV4dCgpO1xuICAgICAgICB9LCB0aGlzLmRpc3BsYXkuc2xpZGVyVGltZSA/IHRoaXMuZGlzcGxheS5zbGlkZXJUaW1lICogMTAwMCA6IDMwMDApO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnb1RvTmV4dFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdvVG9OZXh0KCkge1xuICAgICAgICB0aGlzLmdvVG8odGhpcy5zZWxlY3RlZEl0ZW0sICh0aGlzLnNlbGVjdGVkSXRlbSArIDEpICUgdGhpcy5zbGlkZXMpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnb1RvUHJldlwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdvVG9QcmV2KCkge1xuICAgICAgICB0aGlzLmdvVG8odGhpcy5zZWxlY3RlZEl0ZW0sIHRoaXMuc2VsZWN0ZWRJdGVtIC0gMSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdvVG9cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnb1RvKHByZXYsIGN1cikge1xuICAgICAgICB0aGlzLnByZXZpb3VzbHlTZWxlY3RlZEl0ZW0gPSBwcmV2O1xuICAgICAgICB0aGlzLnNlbGVjdGVkSXRlbSA9IGN1cjtcblxuICAgICAgICBpZiAoY3VyID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5zZWxlY3RlZEl0ZW0gPSB0aGlzLnNsaWRlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudXBkYXRlU2VsZWN0ZWRJdGVtKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInRhcmdldFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90YXJnZXQgfHwgJyc7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsKSB7XG4gICAgICAgIGlmICh0aGlzLl90YXJnZXQgPT09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLl90YXJnZXQgPSB2YWw7XG4gICAgICAgICAgdGhpcy5yZW5kZXJDYXJvdXNlbCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRldGFpbHNcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy50YXJnZXQuZGlzcGxheS5kZXRhaWxzO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkaXNwbGF5XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0LmRpc3BsYXk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIENUV2ViUGVyc29uYWxpc2F0aW9uQ2Fyb3VzZWw7XG4gIH0oIC8qI19fUFVSRV9fKi9fd3JhcE5hdGl2ZVN1cGVyKEhUTUxFbGVtZW50KSk7XG5cbiAgdmFyIF90ciA9IGZ1bmN0aW9uIF90cihtc2csIF9yZWYpIHtcbiAgICB2YXIgZGV2aWNlID0gX3JlZi5kZXZpY2UsXG4gICAgICAgIHNlc3Npb24gPSBfcmVmLnNlc3Npb24sXG4gICAgICAgIHJlcXVlc3QgPSBfcmVmLnJlcXVlc3QsXG4gICAgICAgIGxvZ2dlciA9IF9yZWYubG9nZ2VyLFxuICAgICAgICBpc1dlYlBvcFVwU3BhbUNvbnRyb2xEaXNhYmxlZCA9IF9yZWYuaXNXZWJQb3BVcFNwYW1Db250cm9sRGlzYWJsZWQ7XG4gICAgdmFyIF9kZXZpY2UgPSBkZXZpY2U7XG4gICAgdmFyIF9zZXNzaW9uID0gc2Vzc2lvbjtcbiAgICB2YXIgX3JlcXVlc3QgPSByZXF1ZXN0O1xuICAgIHZhciBfbG9nZ2VyID0gbG9nZ2VyO1xuICAgIHZhciBfd2l6Q291bnRlciA9IDA7IC8vIENhbXBhaWduIEhvdXNlIGtlZXBpbmdcblxuICAgIHZhciBkb0NhbXBIb3VzZUtlZXBpbmcgPSBmdW5jdGlvbiBkb0NhbXBIb3VzZUtlZXBpbmcodGFyZ2V0aW5nTXNnSnNvbikge1xuICAgICAgdmFyIGNhbXBhaWduSWQgPSB0YXJnZXRpbmdNc2dKc29uLnd6cmtfaWQuc3BsaXQoJ18nKVswXTtcbiAgICAgIHZhciB0b2RheSA9IGdldFRvZGF5KCk7XG5cbiAgICAgIHZhciBpbmNyQ291bnQgPSBmdW5jdGlvbiBpbmNyQ291bnQob2JqLCBjYW1wYWlnbklkLCBleGNsdWRlRnJvbUZyZXFDYXBzKSB7XG4gICAgICAgIHZhciBjdXJyZW50Q291bnQgPSAwO1xuICAgICAgICB2YXIgdG90YWxDb3VudCA9IDA7XG5cbiAgICAgICAgaWYgKG9ialtjYW1wYWlnbklkXSAhPSBudWxsKSB7XG4gICAgICAgICAgY3VycmVudENvdW50ID0gb2JqW2NhbXBhaWduSWRdO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudENvdW50Kys7XG5cbiAgICAgICAgaWYgKG9iai50YyAhPSBudWxsKSB7XG4gICAgICAgICAgdG90YWxDb3VudCA9IG9iai50YztcbiAgICAgICAgfSAvLyBpZiBleGNsdWRlIGZyb20gY2FwcyB0aGVuIGRvbnQgYWRkIHRvIHRvdGFsIGNvdW50c1xuXG5cbiAgICAgICAgaWYgKGV4Y2x1ZGVGcm9tRnJlcUNhcHMgPCAwKSB7XG4gICAgICAgICAgdG90YWxDb3VudCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgb2JqLnRjID0gdG90YWxDb3VudDtcbiAgICAgICAgb2JqW2NhbXBhaWduSWRdID0gY3VycmVudENvdW50O1xuICAgICAgfTtcblxuICAgICAgaWYgKFN0b3JhZ2VNYW5hZ2VyLl9pc0xvY2FsU3RvcmFnZVN1cHBvcnRlZCgpKSB7XG4gICAgICAgIGRlbGV0ZSBzZXNzaW9uU3RvcmFnZVtDQU1QX0NPT0tJRV9OQU1FXTtcbiAgICAgICAgdmFyIGNhbXBPYmogPSBnZXRDYW1wYWlnbk9iamVjdCgpOyAvLyBnbG9iYWwgc2Vzc2lvbiBsaW1pdC4gZGVmYXVsdCBpcyAxXG5cbiAgICAgICAgaWYgKHRhcmdldGluZ01zZ0pzb25bRElTUExBWV0ud21jID09IG51bGwpIHtcbiAgICAgICAgICB0YXJnZXRpbmdNc2dKc29uW0RJU1BMQVldLndtYyA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZXhjbHVkZUZyb21GcmVxQ2FwcyA9IC0xO1xuICAgICAgICB2YXIgY2FtcGFpZ25TZXNzaW9uTGltaXQgPSAtMTtcbiAgICAgICAgdmFyIGNhbXBhaWduRGFpbHlMaW1pdCA9IC0xO1xuICAgICAgICB2YXIgY2FtcGFpZ25Ub3RhbExpbWl0ID0gLTE7XG4gICAgICAgIHZhciB0b3RhbERhaWx5TGltaXQgPSAtMTtcbiAgICAgICAgdmFyIHRvdGFsU2Vzc2lvbkxpbWl0ID0gLTE7XG5cbiAgICAgICAgaWYgKHRhcmdldGluZ01zZ0pzb25bRElTUExBWV0uZWZjICE9IG51bGwpIHtcbiAgICAgICAgICBleGNsdWRlRnJvbUZyZXFDYXBzID0gcGFyc2VJbnQodGFyZ2V0aW5nTXNnSnNvbltESVNQTEFZXS5lZmMsIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YXJnZXRpbmdNc2dKc29uW0RJU1BMQVldLm1kYyAhPSBudWxsKSB7XG4gICAgICAgICAgY2FtcGFpZ25TZXNzaW9uTGltaXQgPSBwYXJzZUludCh0YXJnZXRpbmdNc2dKc29uW0RJU1BMQVldLm1kYywgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRhcmdldGluZ01zZ0pzb25bRElTUExBWV0udGRjICE9IG51bGwpIHtcbiAgICAgICAgICBjYW1wYWlnbkRhaWx5TGltaXQgPSBwYXJzZUludCh0YXJnZXRpbmdNc2dKc29uW0RJU1BMQVldLnRkYywgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRhcmdldGluZ01zZ0pzb25bRElTUExBWV0udGxjICE9IG51bGwpIHtcbiAgICAgICAgICBjYW1wYWlnblRvdGFsTGltaXQgPSBwYXJzZUludCh0YXJnZXRpbmdNc2dKc29uW0RJU1BMQVldLnRsYywgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRhcmdldGluZ01zZ0pzb25bRElTUExBWV0ud21wICE9IG51bGwpIHtcbiAgICAgICAgICB0b3RhbERhaWx5TGltaXQgPSBwYXJzZUludCh0YXJnZXRpbmdNc2dKc29uW0RJU1BMQVldLndtcCwgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRhcmdldGluZ01zZ0pzb25bRElTUExBWV0ud21jICE9IG51bGwpIHtcbiAgICAgICAgICB0b3RhbFNlc3Npb25MaW1pdCA9IHBhcnNlSW50KHRhcmdldGluZ01zZ0pzb25bRElTUExBWV0ud21jLCAxMCk7XG4gICAgICAgIH0gLy8gc2Vzc2lvbiBsZXZlbCBjYXBwaW5nXG5cblxuICAgICAgICB2YXIgX3Nlc3Npb25PYmogPSBjYW1wT2JqW19zZXNzaW9uLnNlc3Npb25JZF07XG5cbiAgICAgICAgaWYgKF9zZXNzaW9uT2JqKSB7XG4gICAgICAgICAgdmFyIGNhbXBhaWduU2Vzc2lvbkNvdW50ID0gX3Nlc3Npb25PYmpbY2FtcGFpZ25JZF07XG4gICAgICAgICAgdmFyIHRvdGFsU2Vzc2lvbkNvdW50ID0gX3Nlc3Npb25PYmoudGM7IC8vIGRuZFxuXG4gICAgICAgICAgaWYgKGNhbXBhaWduU2Vzc2lvbkNvdW50ID09PSAnZG5kJykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH0gLy8gc2Vzc2lvblxuXG5cbiAgICAgICAgICBpZiAodG90YWxTZXNzaW9uTGltaXQgPiAwICYmIHRvdGFsU2Vzc2lvbkNvdW50ID49IHRvdGFsU2Vzc2lvbkxpbWl0ICYmIGV4Y2x1ZGVGcm9tRnJlcUNhcHMgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfSAvLyBjYW1wYWlnbiBzZXNzaW9uXG5cblxuICAgICAgICAgIGlmIChjYW1wYWlnblNlc3Npb25MaW1pdCA+IDAgJiYgY2FtcGFpZ25TZXNzaW9uQ291bnQgPj0gY2FtcGFpZ25TZXNzaW9uTGltaXQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3Nlc3Npb25PYmogPSB7fTtcbiAgICAgICAgICBjYW1wT2JqW19zZXNzaW9uLnNlc3Npb25JZF0gPSBfc2Vzc2lvbk9iajtcbiAgICAgICAgfSAvLyBkYWlseSBsZXZlbCBjYXBwaW5nXG5cblxuICAgICAgICB2YXIgZGFpbHlPYmogPSBjYW1wT2JqW3RvZGF5XTtcblxuICAgICAgICBpZiAoZGFpbHlPYmogIT0gbnVsbCkge1xuICAgICAgICAgIHZhciBjYW1wYWlnbkRhaWx5Q291bnQgPSBkYWlseU9ialtjYW1wYWlnbklkXTtcbiAgICAgICAgICB2YXIgdG90YWxEYWlseUNvdW50ID0gZGFpbHlPYmoudGM7IC8vIGRhaWx5XG5cbiAgICAgICAgICBpZiAodG90YWxEYWlseUxpbWl0ID4gMCAmJiB0b3RhbERhaWx5Q291bnQgPj0gdG90YWxEYWlseUxpbWl0ICYmIGV4Y2x1ZGVGcm9tRnJlcUNhcHMgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfSAvLyBjYW1wYWlnbiBkYWlseVxuXG5cbiAgICAgICAgICBpZiAoY2FtcGFpZ25EYWlseUxpbWl0ID4gMCAmJiBjYW1wYWlnbkRhaWx5Q291bnQgPj0gY2FtcGFpZ25EYWlseUxpbWl0KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhaWx5T2JqID0ge307XG4gICAgICAgICAgY2FtcE9ialt0b2RheV0gPSBkYWlseU9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBnbG9iYWxPYmogPSBjYW1wT2JqW0dMT0JBTF07XG5cbiAgICAgICAgaWYgKGdsb2JhbE9iaiAhPSBudWxsKSB7XG4gICAgICAgICAgdmFyIGNhbXBhaWduVG90YWxDb3VudCA9IGdsb2JhbE9ialtjYW1wYWlnbklkXTsgLy8gY2FtcGFpZ24gdG90YWxcblxuICAgICAgICAgIGlmIChjYW1wYWlnblRvdGFsTGltaXQgPiAwICYmIGNhbXBhaWduVG90YWxDb3VudCA+PSBjYW1wYWlnblRvdGFsTGltaXQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ2xvYmFsT2JqID0ge307XG4gICAgICAgICAgY2FtcE9ialtHTE9CQUxdID0gZ2xvYmFsT2JqO1xuICAgICAgICB9XG4gICAgICB9IC8vIGRlbGF5XG5cblxuICAgICAgaWYgKHRhcmdldGluZ01zZ0pzb25bRElTUExBWV0uZGVsYXkgIT0gbnVsbCAmJiB0YXJnZXRpbmdNc2dKc29uW0RJU1BMQVldLmRlbGF5ID4gMCkge1xuICAgICAgICB2YXIgZGVsYXkgPSB0YXJnZXRpbmdNc2dKc29uW0RJU1BMQVldLmRlbGF5O1xuICAgICAgICB0YXJnZXRpbmdNc2dKc29uW0RJU1BMQVldLmRlbGF5ID0gMDtcbiAgICAgICAgc2V0VGltZW91dChfdHIsIGRlbGF5ICogMTAwMCwgbXNnLCB7XG4gICAgICAgICAgZGV2aWNlOiBfZGV2aWNlLFxuICAgICAgICAgIHNlc3Npb246IF9zZXNzaW9uLFxuICAgICAgICAgIHJlcXVlc3Q6IF9yZXF1ZXN0LFxuICAgICAgICAgIGxvZ2dlcjogX2xvZ2dlclxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2Vzc2lvbk9iaiA9IF9zZXNzaW9uLmdldFNlc3Npb25Db29raWVPYmplY3QoKTtcblxuICAgICAgaW5jckNvdW50KHNlc3Npb25PYmosIGNhbXBhaWduSWQsIGV4Y2x1ZGVGcm9tRnJlcUNhcHMpO1xuICAgICAgaW5jckNvdW50KGRhaWx5T2JqLCBjYW1wYWlnbklkLCBleGNsdWRlRnJvbUZyZXFDYXBzKTtcbiAgICAgIGluY3JDb3VudChnbG9iYWxPYmosIGNhbXBhaWduSWQsIGV4Y2x1ZGVGcm9tRnJlcUNhcHMpOyAvLyBnZXQgcmlkZSBvZiBzdGFsZSBzZXNzaW9ucyBhbmQgZGF5IGVudHJpZXNcblxuICAgICAgdmFyIG5ld0NhbXBPYmogPSB7fTtcbiAgICAgIG5ld0NhbXBPYmpbX3Nlc3Npb24uc2Vzc2lvbklkXSA9IHNlc3Npb25PYmo7XG4gICAgICBuZXdDYW1wT2JqW3RvZGF5XSA9IGRhaWx5T2JqO1xuICAgICAgbmV3Q2FtcE9ialtHTE9CQUxdID0gZ2xvYmFsT2JqO1xuICAgICAgc2F2ZUNhbXBhaWduT2JqZWN0KG5ld0NhbXBPYmopO1xuICAgIH07XG5cbiAgICB2YXIgZ2V0Q29va2llUGFyYW1zID0gZnVuY3Rpb24gZ2V0Q29va2llUGFyYW1zKCkge1xuICAgICAgdmFyIGdjb29raWUgPSBfZGV2aWNlLmdldEd1aWQoKTtcblxuICAgICAgdmFyIHNjb29raWVPYmogPSBfc2Vzc2lvbi5nZXRTZXNzaW9uQ29va2llT2JqZWN0KCk7XG5cbiAgICAgIHJldHVybiAnJnQ9d2MmZD0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGNvbXByZXNzVG9CYXNlNjQoZ2Nvb2tpZSArICd8JyArIHNjb29raWVPYmoucCArICd8JyArIHNjb29raWVPYmoucykpO1xuICAgIH07XG5cbiAgICB2YXIgc2V0dXBDbGlja0V2ZW50ID0gZnVuY3Rpb24gc2V0dXBDbGlja0V2ZW50KG9uQ2xpY2ssIHRhcmdldGluZ01zZ0pzb24sIGNvbnRlbnREaXYsIGRpdklkLCBpc0xlZ2FjeSkge1xuICAgICAgaWYgKG9uQ2xpY2sgIT09ICcnICYmIG9uQ2xpY2sgIT0gbnVsbCkge1xuICAgICAgICB2YXIgY3RhRWxlbWVudDtcbiAgICAgICAgdmFyIGpzQ1RBRWxlbWVudHM7XG5cbiAgICAgICAgaWYgKGlzTGVnYWN5KSB7XG4gICAgICAgICAgY3RhRWxlbWVudCA9IGNvbnRlbnREaXY7XG4gICAgICAgIH0gZWxzZSBpZiAoY29udGVudERpdiAhPT0gbnVsbCkge1xuICAgICAgICAgIGpzQ1RBRWxlbWVudHMgPSBjb250ZW50RGl2LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2pzQ1RfQ1RBJyk7XG5cbiAgICAgICAgICBpZiAoanNDVEFFbGVtZW50cyAhPSBudWxsICYmIGpzQ1RBRWxlbWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBjdGFFbGVtZW50ID0ganNDVEFFbGVtZW50c1swXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIganNGdW5jID0gdGFyZ2V0aW5nTXNnSnNvbi5kaXNwbGF5LmpzRnVuYztcbiAgICAgICAgdmFyIGlzUHJldmlldyA9IHRhcmdldGluZ01zZ0pzb24uZGlzcGxheS5wcmV2aWV3O1xuXG4gICAgICAgIGlmIChpc1ByZXZpZXcgPT0gbnVsbCkge1xuICAgICAgICAgIG9uQ2xpY2sgKz0gZ2V0Q29va2llUGFyYW1zKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3RhRWxlbWVudCAhPSBudWxsKSB7XG4gICAgICAgICAgY3RhRWxlbWVudC5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gaW52b2tlIGpzIGZ1bmN0aW9uIGNhbGxcbiAgICAgICAgICAgIGlmIChqc0Z1bmMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAvLyB0cmFjayBub3RpZmljYXRpb24gY2xpY2tlZCBldmVudFxuICAgICAgICAgICAgICBpZiAoaXNQcmV2aWV3ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBSZXF1ZXN0RGlzcGF0Y2hlci5maXJlUmVxdWVzdChvbkNsaWNrKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGludm9rZUV4dGVybmFsSnMoanNGdW5jLCB0YXJnZXRpbmdNc2dKc29uKTsgLy8gY2xvc2UgaWZyYW1lLiB1c2luZyAtMSBmb3Igbm8gY2FtcGFpZ25JZFxuXG4gICAgICAgICAgICAgIGNsb3NlSWZyYW1lKCctMScsIGRpdklkLCBfc2Vzc2lvbi5zZXNzaW9uSWQpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IC8vIHBhc3Mgb24gdGhlIGdjb29raWV8cGFnZXxzY29va2llSWQgZm9yIGNhcHR1cmluZyB0aGUgY2xpY2sgZXZlbnRcblxuXG4gICAgICAgICAgICBpZiAodGFyZ2V0aW5nTXNnSnNvbi5kaXNwbGF5LndpbmRvdyA9PT0gMSkge1xuICAgICAgICAgICAgICB3aW5kb3cub3BlbihvbkNsaWNrLCAnX2JsYW5rJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBvbkNsaWNrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGludm9rZUV4dGVybmFsSnMgPSBmdW5jdGlvbiBpbnZva2VFeHRlcm5hbEpzKGpzRnVuYywgdGFyZ2V0aW5nTXNnSnNvbikge1xuICAgICAgdmFyIGZ1bmMgPSB3aW5kb3cucGFyZW50W2pzRnVuY107XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpZiAodGFyZ2V0aW5nTXNnSnNvbi5kaXNwbGF5Lmt2ICE9IG51bGwpIHtcbiAgICAgICAgICBmdW5jKHRhcmdldGluZ01zZ0pzb24uZGlzcGxheS5rdik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZnVuYygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBzZXR1cENsaWNrVXJsID0gZnVuY3Rpb24gc2V0dXBDbGlja1VybChvbkNsaWNrLCB0YXJnZXRpbmdNc2dKc29uLCBjb250ZW50RGl2LCBkaXZJZCwgaXNMZWdhY3kpIHtcbiAgICAgIGluY3JlbWVudEltcHJlc3Npb24odGFyZ2V0aW5nTXNnSnNvbik7XG4gICAgICBzZXR1cENsaWNrRXZlbnQob25DbGljaywgdGFyZ2V0aW5nTXNnSnNvbiwgY29udGVudERpdiwgZGl2SWQsIGlzTGVnYWN5KTtcbiAgICB9O1xuXG4gICAgdmFyIGluY3JlbWVudEltcHJlc3Npb24gPSBmdW5jdGlvbiBpbmNyZW1lbnRJbXByZXNzaW9uKHRhcmdldGluZ01zZ0pzb24pIHtcbiAgICAgIHZhciBkYXRhID0ge307XG4gICAgICBkYXRhLnR5cGUgPSAnZXZlbnQnO1xuICAgICAgZGF0YS5ldnROYW1lID0gTk9USUZJQ0FUSU9OX1ZJRVdFRDtcbiAgICAgIGRhdGEuZXZ0RGF0YSA9IF9kZWZpbmVQcm9wZXJ0eSh7fSwgV1pSS19JRCwgdGFyZ2V0aW5nTXNnSnNvbi53enJrX2lkKTtcblxuICAgICAgaWYgKHRhcmdldGluZ01zZ0pzb24ud3pya19waXZvdCkge1xuICAgICAgICBkYXRhLmV2dERhdGEgPSBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgZGF0YS5ldnREYXRhKSwge30sIHtcbiAgICAgICAgICB3enJrX3Bpdm90OiB0YXJnZXRpbmdNc2dKc29uLnd6cmtfcGl2b3RcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIF9yZXF1ZXN0LnByb2Nlc3NFdmVudChkYXRhKTtcbiAgICB9O1xuXG4gICAgdmFyIHJlbmRlclBlcnNvbmFsaXNhdGlvbkJhbm5lciA9IGZ1bmN0aW9uIHJlbmRlclBlcnNvbmFsaXNhdGlvbkJhbm5lcih0YXJnZXRpbmdNc2dKc29uKSB7XG4gICAgICB2YXIgZGl2SWQgPSB0YXJnZXRpbmdNc2dKc29uLmRpc3BsYXkuZGl2SWQ7XG4gICAgICB2YXIgYmFubmVyRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjdC13ZWItcGVyc29uYWxpc2F0aW9uLWJhbm5lcicpO1xuICAgICAgYmFubmVyRWwubXNnSWQgPSB0YXJnZXRpbmdNc2dKc29uLnd6cmtfaWQ7XG4gICAgICBiYW5uZXJFbC5waXZvdElkID0gdGFyZ2V0aW5nTXNnSnNvbi53enJrX3Bpdm90O1xuICAgICAgYmFubmVyRWwuZGl2SGVpZ2h0ID0gdGFyZ2V0aW5nTXNnSnNvbi5kaXNwbGF5LmRpdkhlaWdodDtcbiAgICAgIGJhbm5lckVsLmRldGFpbHMgPSB0YXJnZXRpbmdNc2dKc29uLmRpc3BsYXkuZGV0YWlsc1swXTtcbiAgICAgIHZhciBjb250YWluZXJFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRpdklkKTtcbiAgICAgIGNvbnRhaW5lckVsLmlubmVySFRNTCA9ICcnO1xuICAgICAgY29udGFpbmVyRWwuYXBwZW5kQ2hpbGQoYmFubmVyRWwpO1xuICAgIH07XG5cbiAgICB2YXIgcmVuZGVyUGVyc29uYWxpc2F0aW9uQ2Fyb3VzZWwgPSBmdW5jdGlvbiByZW5kZXJQZXJzb25hbGlzYXRpb25DYXJvdXNlbCh0YXJnZXRpbmdNc2dKc29uKSB7XG4gICAgICB2YXIgZGl2SWQgPSB0YXJnZXRpbmdNc2dKc29uLmRpc3BsYXkuZGl2SWQ7XG4gICAgICB2YXIgY2Fyb3VzZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjdC13ZWItcGVyc29uYWxpc2F0aW9uLWNhcm91c2VsJyk7XG4gICAgICBjYXJvdXNlbC50YXJnZXQgPSB0YXJnZXRpbmdNc2dKc29uO1xuICAgICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRpdklkKTtcbiAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjYXJvdXNlbCk7XG4gICAgfTtcblxuICAgIHZhciByZW5kZXJGb290ZXJOb3RpZmljYXRpb24gPSBmdW5jdGlvbiByZW5kZXJGb290ZXJOb3RpZmljYXRpb24odGFyZ2V0aW5nTXNnSnNvbikge1xuICAgICAgdmFyIGNhbXBhaWduSWQgPSB0YXJnZXRpbmdNc2dKc29uLnd6cmtfaWQuc3BsaXQoJ18nKVswXTtcbiAgICAgIHZhciBkaXNwbGF5T2JqID0gdGFyZ2V0aW5nTXNnSnNvbi5kaXNwbGF5O1xuXG4gICAgICBpZiAoZGlzcGxheU9iai53dGFyZ2V0X3R5cGUgPT09IDIpIHtcbiAgICAgICAgLy8gTG9naWMgZm9yIGt2IHBhaXIgZGF0YVxuICAgICAgICBpZiAodGFyZ2V0aW5nTXNnSnNvbi5tc2dDb250ZW50LnR5cGUgPT09IDEpIHtcbiAgICAgICAgICB2YXIgaW5hT2JqID0ge307XG4gICAgICAgICAgaW5hT2JqLm1zZ0lkID0gdGFyZ2V0aW5nTXNnSnNvbi53enJrX2lkO1xuXG4gICAgICAgICAgaWYgKHRhcmdldGluZ01zZ0pzb24ud3pya19waXZvdCkge1xuICAgICAgICAgICAgaW5hT2JqLnBpdm90SWQgPSB0YXJnZXRpbmdNc2dKc29uLnd6cmtfcGl2b3Q7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRhcmdldGluZ01zZ0pzb24ubXNnQ29udGVudC5rdiAhPSBudWxsKSB7XG4gICAgICAgICAgICBpbmFPYmoua3YgPSB0YXJnZXRpbmdNc2dKc29uLm1zZ0NvbnRlbnQua3Y7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGt2UGFpcnNFdmVudCA9IG5ldyBDdXN0b21FdmVudCgnQ1Rfd2ViX25hdGl2ZV9kaXNwbGF5Jywge1xuICAgICAgICAgICAgZGV0YWlsOiBpbmFPYmpcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGt2UGFpcnNFdmVudCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIExvZ2ljIGZvciBwZXJzb25hbGlzYXRpb24gYmFubmVyXG5cblxuICAgICAgICBpZiAodGFyZ2V0aW5nTXNnSnNvbi5tc2dDb250ZW50LnR5cGUgPT09IDIpIHtcbiAgICAgICAgICB2YXIgX2RpdklkID0gdGFyZ2V0aW5nTXNnSnNvbi5kaXNwbGF5LmRpdklkO1xuXG4gICAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKF9kaXZJZCkgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjdXN0b21FbGVtZW50cy5nZXQoJ2N0LXdlYi1wZXJzb25hbGlzYXRpb24tYmFubmVyJykgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdjdC13ZWItcGVyc29uYWxpc2F0aW9uLWJhbm5lcicsIENUV2ViUGVyc29uYWxpc2F0aW9uQmFubmVyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcmVuZGVyUGVyc29uYWxpc2F0aW9uQmFubmVyKHRhcmdldGluZ01zZ0pzb24pO1xuICAgICAgICB9IC8vIExvZ2ljIGZvciBwZXJzb25hbGlzYXRpb24gY2Fyb3VzZWxcblxuXG4gICAgICAgIGlmICh0YXJnZXRpbmdNc2dKc29uLm1zZ0NvbnRlbnQudHlwZSA9PT0gMykge1xuICAgICAgICAgIHZhciBfZGl2SWQyID0gdGFyZ2V0aW5nTXNnSnNvbi5kaXNwbGF5LmRpdklkO1xuXG4gICAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKF9kaXZJZDIpID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY3VzdG9tRWxlbWVudHMuZ2V0KCdjdC13ZWItcGVyc29uYWxpc2F0aW9uLWNhcm91c2VsJykgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdjdC13ZWItcGVyc29uYWxpc2F0aW9uLWNhcm91c2VsJywgQ1RXZWJQZXJzb25hbGlzYXRpb25DYXJvdXNlbCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHJlbmRlclBlcnNvbmFsaXNhdGlvbkNhcm91c2VsKHRhcmdldGluZ01zZ0pzb24pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChkaXNwbGF5T2JqLmxheW91dCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gc2hvd0V4aXRJbnRlbnQodW5kZWZpbmVkLCB0YXJnZXRpbmdNc2dKc29uKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc1dlYlBvcFVwU3BhbUNvbnRyb2xEaXNhYmxlZCAmJiBkb0NhbXBIb3VzZUtlZXBpbmcodGFyZ2V0aW5nTXNnSnNvbikgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGRpdklkID0gJ3dpelBhckRpdicgKyBkaXNwbGF5T2JqLmxheW91dDtcblxuICAgICAgaWYgKGlzV2ViUG9wVXBTcGFtQ29udHJvbERpc2FibGVkICYmIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRpdklkKSAhPSBudWxsKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGl2SWQpO1xuICAgICAgICBlbGVtZW50LnJlbW92ZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGl2SWQpICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAkY3QuY2FtcGFpZ25EaXZNYXBbY2FtcGFpZ25JZF0gPSBkaXZJZDtcbiAgICAgIHZhciBpc0Jhbm5lciA9IGRpc3BsYXlPYmoubGF5b3V0ID09PSAyO1xuICAgICAgdmFyIG1zZ0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgbXNnRGl2LmlkID0gZGl2SWQ7XG4gICAgICB2YXIgdmlld0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgIHZhciB2aWV3V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgIHZhciBsZWdhY3kgPSBmYWxzZTtcblxuICAgICAgaWYgKCFpc0Jhbm5lcikge1xuICAgICAgICB2YXIgbWFyZ2luQm90dG9tID0gdmlld0hlaWdodCAqIDUgLyAxMDA7XG4gICAgICAgIHZhciBjb250ZW50SGVpZ2h0ID0gMTA7XG4gICAgICAgIHZhciByaWdodCA9IHZpZXdXaWR0aCAqIDUgLyAxMDA7XG4gICAgICAgIHZhciBib3R0b21Qb3NpdGlvbiA9IGNvbnRlbnRIZWlnaHQgKyBtYXJnaW5Cb3R0b207XG4gICAgICAgIHZhciB3aWR0aCA9IHZpZXdXaWR0aCAqIDMwIC8gMTAwICsgMjA7XG4gICAgICAgIHZhciB3aWR0aFBlcmN0ID0gJ3dpZHRoOjMwJTsnOyAvLyBmb3Igc21hbGwgZGV2aWNlcyAgLSBtb2JpbGUgcGhvbmVzXG5cbiAgICAgICAgaWYgKCgvbW9iaWxlL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSB8fCAvbWluaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpICYmIC9pUGFkL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICB3aWR0aCA9IHZpZXdXaWR0aCAqIDg1IC8gMTAwICsgMjA7XG4gICAgICAgICAgcmlnaHQgPSB2aWV3V2lkdGggKiA1IC8gMTAwO1xuICAgICAgICAgIGJvdHRvbVBvc2l0aW9uID0gdmlld0hlaWdodCAqIDUgLyAxMDA7XG4gICAgICAgICAgd2lkdGhQZXJjdCA9ICd3aWR0aDo4MCU7JzsgLy8gbWVkaXVtIGRldmljZXMgLSB0YWJsZXRzXG4gICAgICAgIH0gZWxzZSBpZiAoJ29udG91Y2hzdGFydCcgaW4gd2luZG93IHx8IC90YWJsZXQvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICAgICAgd2lkdGggPSB2aWV3V2lkdGggKiA1MCAvIDEwMCArIDIwO1xuICAgICAgICAgIHJpZ2h0ID0gdmlld1dpZHRoICogNSAvIDEwMDtcbiAgICAgICAgICBib3R0b21Qb3NpdGlvbiA9IHZpZXdIZWlnaHQgKiA1IC8gMTAwO1xuICAgICAgICAgIHdpZHRoUGVyY3QgPSAnd2lkdGg6NTAlOyc7XG4gICAgICAgIH0gLy8gbGVnYWN5IGZvb3RlciBub3RpZlxuXG5cbiAgICAgICAgaWYgKGRpc3BsYXlPYmoucHJvdG8gPT0gbnVsbCkge1xuICAgICAgICAgIGxlZ2FjeSA9IHRydWU7XG4gICAgICAgICAgbXNnRGl2LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnZGlzcGxheTpibG9jaztvdmVyZmxvdzpoaWRkZW47IGJvdHRvbTonICsgYm90dG9tUG9zaXRpb24gKyAncHggIWltcG9ydGFudDt3aWR0aDonICsgd2lkdGggKyAncHggIWltcG9ydGFudDtyaWdodDonICsgcmlnaHQgKyAncHggIWltcG9ydGFudDtwb3NpdGlvbjpmaXhlZDt6LWluZGV4OjIxNDc0ODM2NDc7Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbXNnRGl2LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCB3aWR0aFBlcmN0ICsgZGlzcGxheU9iai5pRnJhbWVTdHlsZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1zZ0Rpdi5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgZGlzcGxheU9iai5pRnJhbWVTdHlsZSk7XG4gICAgICB9XG5cbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobXNnRGl2KTtcbiAgICAgIHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICAgIHZhciBib3JkZXJSYWRpdXMgPSBkaXNwbGF5T2JqLmJyID09PSBmYWxzZSA/ICcwJyA6ICc4JztcbiAgICAgIGlmcmFtZS5mcmFtZWJvcmRlciA9ICcwcHgnO1xuICAgICAgaWZyYW1lLm1hcmdpbmhlaWdodCA9ICcwcHgnO1xuICAgICAgaWZyYW1lLm1hcmdpbndpZHRoID0gJzBweCc7XG4gICAgICBpZnJhbWUuc2Nyb2xsaW5nID0gJ25vJztcbiAgICAgIGlmcmFtZS5pZCA9ICd3aXotaWZyYW1lJztcbiAgICAgIHZhciBvbkNsaWNrID0gdGFyZ2V0aW5nTXNnSnNvbi5kaXNwbGF5Lm9uQ2xpY2s7XG4gICAgICB2YXIgcG9pbnRlckNzcyA9ICcnO1xuXG4gICAgICBpZiAob25DbGljayAhPT0gJycgJiYgb25DbGljayAhPSBudWxsKSB7XG4gICAgICAgIHBvaW50ZXJDc3MgPSAnY3Vyc29yOnBvaW50ZXI7JztcbiAgICAgIH1cblxuICAgICAgdmFyIGh0bWw7IC8vIGRpcmVjdCBodG1sXG5cbiAgICAgIGlmICh0YXJnZXRpbmdNc2dKc29uLm1zZ0NvbnRlbnQudHlwZSA9PT0gMSkge1xuICAgICAgICBodG1sID0gdGFyZ2V0aW5nTXNnSnNvbi5tc2dDb250ZW50Lmh0bWw7XG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoLyMjY2FtcGFpZ25JZCMjL2csIGNhbXBhaWduSWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGNzcyA9ICcnICsgJzxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj4nICsgJ2JvZHl7bWFyZ2luOjA7cGFkZGluZzowO30nICsgJyNjb250ZW50RGl2Lnd6cmt7b3ZlcmZsb3c6aGlkZGVuO3BhZGRpbmc6MDt0ZXh0LWFsaWduOmNlbnRlcjsnICsgcG9pbnRlckNzcyArICd9JyArICcjY29udGVudERpdi53enJrIHRke3BhZGRpbmc6MTVweCAxMHB4O30nICsgJy53enJrUFB0aXRsZXtmb250LXdlaWdodDogYm9sZDtmb250LXNpemU6IDE2cHg7Zm9udC1mYW1pbHk6YXJpYWw7cGFkZGluZy1ib3R0b206MTBweDt3b3JkLWJyZWFrOiBicmVhay13b3JkO30nICsgJy53enJrUFBkc2Nye2ZvbnQtc2l6ZTogMTRweDtmb250LWZhbWlseTphcmlhbDtsaW5lLWhlaWdodDoxNnB4O3dvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7ZGlzcGxheTppbmxpbmUtYmxvY2s7fScgKyAnLlBMMTV7cGFkZGluZy1sZWZ0OjE1cHg7fScgKyAnLnd6cmtQUHdhcnB7bWFyZ2luOjIwcHggMjBweCAwIDVweDtwYWRkaW5nOjBweDtib3JkZXItcmFkaXVzOiAnICsgYm9yZGVyUmFkaXVzICsgJ3B4O2JveC1zaGFkb3c6IDFweCAxcHggNXB4ICM4ODg4ODg7fScgKyAnYS53enJrQ2xvc2V7Y3Vyc29yOnBvaW50ZXI7cG9zaXRpb246IGFic29sdXRlO3RvcDogMTFweDtyaWdodDogMTFweDt6LWluZGV4OiAyMTQ3NDgzNjQ3O2ZvbnQtc2l6ZToxOXB4O2ZvbnQtZmFtaWx5OmFyaWFsO2ZvbnQtd2VpZ2h0OmJvbGQ7dGV4dC1kZWNvcmF0aW9uOiBub25lO3dpZHRoOiAyNXB4Oy8qaGVpZ2h0OiAyNXB4OyovdGV4dC1hbGlnbjogY2VudGVyOyAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7IGxpbmUtaGVpZ2h0OiAyNXB4OycgKyAnYmFja2dyb3VuZDogIzM1MzUzNTtib3JkZXI6ICNmZmYgMnB4IHNvbGlkO2JvcmRlci1yYWRpdXM6IDEwMCU7Ym94LXNoYWRvdzogIzc3NyAycHggMnB4IDJweDtjb2xvcjojZmZmO30nICsgJ2E6aG92ZXIud3pya0Nsb3Nle2JhY2tncm91bmQtY29sb3I6I2QxOTE0YSAhaW1wb3J0YW50O2NvbG9yOiNmZmYgIWltcG9ydGFudDsgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO30nICsgJ3Rke3ZlcnRpY2FsLWFsaWduOnRvcDt9JyArICd0ZC5pbWdUZHtib3JkZXItdG9wLWxlZnQtcmFkaXVzOjhweDtib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOjhweDt9JyArICc8L3N0eWxlPic7XG4gICAgICAgIHZhciBiZ0NvbG9yLCB0ZXh0Q29sb3IsIGJ0bkJnLCBsZWZ0VGQsIGJ0Q29sb3I7XG5cbiAgICAgICAgaWYgKHRhcmdldGluZ01zZ0pzb24uZGlzcGxheS50aGVtZSA9PT0gJ2RhcmsnKSB7XG4gICAgICAgICAgYmdDb2xvciA9ICcjMmQyZDJlJztcbiAgICAgICAgICB0ZXh0Q29sb3IgPSAnI2VhZWFlYSc7XG4gICAgICAgICAgYnRuQmcgPSAnIzM1MzUzNSc7XG4gICAgICAgICAgbGVmdFRkID0gJyMzNTM1MzUnO1xuICAgICAgICAgIGJ0Q29sb3IgPSAnI2ZmZmZmZic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYmdDb2xvciA9ICcjZmZmZmZmJztcbiAgICAgICAgICB0ZXh0Q29sb3IgPSAnIzAwMDAwMCc7XG4gICAgICAgICAgbGVmdFRkID0gJyNmNGY0ZjQnO1xuICAgICAgICAgIGJ0bkJnID0gJyNhNWE2YTYnO1xuICAgICAgICAgIGJ0Q29sb3IgPSAnI2ZmZmZmZic7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGl0bGVUZXh0ID0gdGFyZ2V0aW5nTXNnSnNvbi5tc2dDb250ZW50LnRpdGxlO1xuICAgICAgICB2YXIgZGVzY3JpcHRpb25UZXh0ID0gdGFyZ2V0aW5nTXNnSnNvbi5tc2dDb250ZW50LmRlc2NyaXB0aW9uO1xuICAgICAgICB2YXIgaW1hZ2VUZCA9ICcnO1xuXG4gICAgICAgIGlmICh0YXJnZXRpbmdNc2dKc29uLm1zZ0NvbnRlbnQuaW1hZ2VVcmwgIT0gbnVsbCAmJiB0YXJnZXRpbmdNc2dKc29uLm1zZ0NvbnRlbnQuaW1hZ2VVcmwgIT09ICcnKSB7XG4gICAgICAgICAgaW1hZ2VUZCA9IFwiPHRkIGNsYXNzPSdpbWdUZCcgc3R5bGU9J2JhY2tncm91bmQtY29sb3I6XCIgKyBsZWZ0VGQgKyBcIic+PGltZyBzcmM9J1wiICsgdGFyZ2V0aW5nTXNnSnNvbi5tc2dDb250ZW50LmltYWdlVXJsICsgXCInIGhlaWdodD0nNjAnIHdpZHRoPSc2MCc+PC90ZD5cIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvbkNsaWNrU3RyID0gJ3BhcmVudC4kV1pSS19XUi5jbG9zZUlmcmFtZSgnICsgY2FtcGFpZ25JZCArIFwiLCdcIiArIGRpdklkICsgXCInKTtcIjtcbiAgICAgICAgdmFyIHRpdGxlID0gXCI8ZGl2IGNsYXNzPSd3enJrUFB3YXJwJyBzdHlsZT0nY29sb3I6XCIgKyB0ZXh0Q29sb3IgKyAnO2JhY2tncm91bmQtY29sb3I6JyArIGJnQ29sb3IgKyBcIjsnPlwiICsgXCI8YSBocmVmPSdqYXZhc2NyaXB0OnZvaWQoMCk7JyBvbmNsaWNrPVwiICsgb25DbGlja1N0ciArIFwiIGNsYXNzPSd3enJrQ2xvc2UnIHN0eWxlPSdiYWNrZ3JvdW5kLWNvbG9yOlwiICsgYnRuQmcgKyAnO2NvbG9yOicgKyBidENvbG9yICsgXCInPiZ0aW1lczs8L2E+XCIgKyBcIjxkaXYgaWQ9J2NvbnRlbnREaXYnIGNsYXNzPSd3enJrJz5cIiArIFwiPHRhYmxlIGNlbGxwYWRkaW5nPScwJyBjZWxsc3BhY2luZz0nMCcgYm9yZGVyPScwJz5cIiArIC8vIFwiPHRyPjx0ZCBjb2xzcGFuPScyJz48L3RkPjwvdHI+XCIrXG4gICAgICAgICc8dHI+JyArIGltYWdlVGQgKyBcIjx0ZCBzdHlsZT0ndmVydGljYWwtYWxpZ246dG9wOyc+XCIgKyBcIjxkaXYgY2xhc3M9J3d6cmtQUHRpdGxlJyBzdHlsZT0nY29sb3I6XCIgKyB0ZXh0Q29sb3IgKyBcIic+XCIgKyB0aXRsZVRleHQgKyAnPC9kaXY+JztcbiAgICAgICAgdmFyIGJvZHkgPSBcIjxkaXYgY2xhc3M9J3d6cmtQUGRzY3InIHN0eWxlPSdjb2xvcjpcIiArIHRleHRDb2xvciArIFwiJz5cIiArIGRlc2NyaXB0aW9uVGV4dCArICc8ZGl2PjwvdGQ+PC90cj48L3RhYmxlPjwvZGl2Pic7XG4gICAgICAgIGh0bWwgPSBjc3MgKyB0aXRsZSArIGJvZHk7XG4gICAgICB9XG5cbiAgICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ3otaW5kZXg6IDIxNDc0ODM2NDc7IGRpc3BsYXk6YmxvY2s7IHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7IGJvcmRlcjowcHggIWltcG9ydGFudDsgYm9yZGVyLWNvbG9yOm5vbmUgIWltcG9ydGFudDsnKTtcbiAgICAgIG1zZ0Rpdi5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgICAgdmFyIGlmcm0gPSBpZnJhbWUuY29udGVudFdpbmRvdyA/IGlmcmFtZS5jb250ZW50V2luZG93IDogaWZyYW1lLmNvbnRlbnREb2N1bWVudC5kb2N1bWVudCA/IGlmcmFtZS5jb250ZW50RG9jdW1lbnQuZG9jdW1lbnQgOiBpZnJhbWUuY29udGVudERvY3VtZW50O1xuICAgICAgdmFyIGRvYyA9IGlmcm0uZG9jdW1lbnQ7XG4gICAgICBkb2Mub3BlbigpO1xuICAgICAgZG9jLndyaXRlKGh0bWwpO1xuXG4gICAgICBpZiAoZGlzcGxheU9ialsnY3VzdG9tLWVkaXRvciddKSB7XG4gICAgICAgIGFwcGVuZFNjcmlwdEZvckN1c3RvbUV2ZW50KHRhcmdldGluZ01zZ0pzb24sIGRvYyk7XG4gICAgICB9XG5cbiAgICAgIGRvYy5jbG9zZSgpO1xuXG4gICAgICB2YXIgYWRqdXN0SUZyYW1lSGVpZ2h0ID0gZnVuY3Rpb24gYWRqdXN0SUZyYW1lSGVpZ2h0KCkge1xuICAgICAgICAvLyBhZGp1c3QgaWZyYW1lIGFuZCBib2R5IGhlaWdodCBvZiBodG1sIGluc2lkZSBjb3JyZWN0bHlcbiAgICAgICAgY29udGVudEhlaWdodCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3aXotaWZyYW1lJykuY29udGVudERvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250ZW50RGl2Jykuc2Nyb2xsSGVpZ2h0O1xuXG4gICAgICAgIGlmIChkaXNwbGF5T2JqWydjdXN0b20tZWRpdG9yJ10gIT09IHRydWUgJiYgIWlzQmFubmVyKSB7XG4gICAgICAgICAgY29udGVudEhlaWdodCArPSAyNTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3aXotaWZyYW1lJykuY29udGVudERvY3VtZW50LmJvZHkuc3R5bGUubWFyZ2luID0gJzBweCc7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3aXotaWZyYW1lJykuc3R5bGUuaGVpZ2h0ID0gY29udGVudEhlaWdodCArICdweCc7XG4gICAgICB9O1xuXG4gICAgICB2YXIgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGlmICh1YS5pbmRleE9mKCdzYWZhcmknKSAhPT0gLTEpIHtcbiAgICAgICAgaWYgKHVhLmluZGV4T2YoJ2Nocm9tZScpID4gLTEpIHtcbiAgICAgICAgICBpZnJhbWUub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYWRqdXN0SUZyYW1lSGVpZ2h0KCk7XG4gICAgICAgICAgICB2YXIgY29udGVudERpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3aXotaWZyYW1lJykuY29udGVudERvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250ZW50RGl2Jyk7XG4gICAgICAgICAgICBzZXR1cENsaWNrVXJsKG9uQ2xpY2ssIHRhcmdldGluZ01zZ0pzb24sIGNvbnRlbnREaXYsIGRpdklkLCBsZWdhY3kpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGluRG9jID0gaWZyYW1lLmNvbnRlbnREb2N1bWVudCB8fCBpZnJhbWUuY29udGVudFdpbmRvdztcbiAgICAgICAgICBpZiAoaW5Eb2MuZG9jdW1lbnQpIGluRG9jID0gaW5Eb2MuZG9jdW1lbnQ7IC8vIHNhZmFyaSBpcGhvbmUgNysgbmVlZHMgdGhpcy5cblxuICAgICAgICAgIGFkanVzdElGcmFtZUhlaWdodCgpO1xuXG4gICAgICAgICAgdmFyIF90aW1lciA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpbkRvYy5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoX3RpbWVyKTsgLy8gYWRqdXN0IGlmcmFtZSBhbmQgYm9keSBoZWlnaHQgb2YgaHRtbCBpbnNpZGUgY29ycmVjdGx5XG5cbiAgICAgICAgICAgICAgYWRqdXN0SUZyYW1lSGVpZ2h0KCk7XG4gICAgICAgICAgICAgIHZhciBjb250ZW50RGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dpei1pZnJhbWUnKS5jb250ZW50RG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRlbnREaXYnKTtcbiAgICAgICAgICAgICAgc2V0dXBDbGlja1VybChvbkNsaWNrLCB0YXJnZXRpbmdNc2dKc29uLCBjb250ZW50RGl2LCBkaXZJZCwgbGVnYWN5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCAxMCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmcmFtZS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gYWRqdXN0IGlmcmFtZSBhbmQgYm9keSBoZWlnaHQgb2YgaHRtbCBpbnNpZGUgY29ycmVjdGx5XG4gICAgICAgICAgYWRqdXN0SUZyYW1lSGVpZ2h0KCk7XG4gICAgICAgICAgdmFyIGNvbnRlbnREaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2l6LWlmcmFtZScpLmNvbnRlbnREb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGVudERpdicpO1xuICAgICAgICAgIHNldHVwQ2xpY2tVcmwob25DbGljaywgdGFyZ2V0aW5nTXNnSnNvbiwgY29udGVudERpdiwgZGl2SWQsIGxlZ2FjeSk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBhcHBlbmRTY3JpcHRGb3JDdXN0b21FdmVudCA9IGZ1bmN0aW9uIGFwcGVuZFNjcmlwdEZvckN1c3RvbUV2ZW50KHRhcmdldGluZ01zZ0pzb24sIGRvYykge1xuICAgICAgdmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgIHNjcmlwdC5pbm5lckhUTUwgPSBcIlxcbiAgICAgIGNvbnN0IGN0X19jYW1hcGlnbklkID0gJ1wiLmNvbmNhdCh0YXJnZXRpbmdNc2dKc29uLnd6cmtfaWQsIFwiJztcXG4gICAgICBjb25zdCBjdF9fZm9ybWF0VmFsID0gKHYpID0+IHtcXG4gICAgICAgICAgcmV0dXJuIHYgJiYgdi50cmltKCkuc3Vic3RyaW5nKDAsIDIwKTtcXG4gICAgICB9XFxuICAgICAgY29uc3QgY3RfX3BhcmVudE9yaWdpbiA9ICB3aW5kb3cucGFyZW50Lm9yaWdpbjtcXG4gICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XFxuICAgICAgICBjb25zdCBlbGVtID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3Q/LignYVt3enJrX2MyYV0sIGJ1dHRvblt3enJrX2MyYV0nKTtcXG4gICAgICAgIGlmIChlbGVtKSB7XFxuICAgICAgICAgICAgY29uc3Qge2lubmVyVGV4dCwgaWQsIG5hbWUsIHZhbHVlLCBocmVmfSA9IGVsZW07XFxuICAgICAgICAgICAgY29uc3QgY2xpY2tBdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoJ29uY2xpY2snKSB8fCBlbGVtLmdldEF0dHJpYnV0ZSgnY2xpY2snKTtcXG4gICAgICAgICAgICBjb25zdCBvbmNsaWNrVVJMID0gY2xpY2tBdHRyPy5tYXRjaCgvKHdpbmRvdy5vcGVuKVsoXShcXFwifCcpKC4qKShcXFwifCcsKS8pPy5bM10gfHwgY2xpY2tBdHRyPy5tYXRjaCgvKGxvY2F0aW9uLmhyZWYgKj0gKikoXFxcInwnKSguKikoXFxcInwnKS8pPy5bM107XFxuICAgICAgICAgICAgY29uc3QgcHJvcHMgPSB7aW5uZXJUZXh0LCBpZCwgbmFtZSwgdmFsdWV9O1xcbiAgICAgICAgICAgIGxldCBtc2dDVGt2ID0gT2JqZWN0LmtleXMocHJvcHMpLnJlZHVjZSgoYWNjLCBjKSA9PiB7XFxuICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1hdHRlZFZhbCA9IGN0X19mb3JtYXRWYWwocHJvcHNbY10pO1xcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZWRWYWwgJiYgKGFjY1snd3pya19jbGlja18nICsgY10gPSBmb3JtYXR0ZWRWYWwpO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xcbiAgICAgICAgICAgIH0sIHt9KTtcXG4gICAgICAgICAgICBpZihvbmNsaWNrVVJMKSB7IG1zZ0NUa3ZbJ3d6cmtfY2xpY2tfJyArICd1cmwnXSA9IG9uY2xpY2tVUkw7IH1cXG4gICAgICAgICAgICBpZihocmVmKSB7IG1zZ0NUa3ZbJ3d6cmtfY2xpY2tfJyArICdjMmEnXSA9IGhyZWY7IH1cXG4gICAgICAgICAgICBjb25zdCBub3RpZkRhdGEgPSB7IG1zZ0lkOiBjdF9fY2FtYXBpZ25JZCwgbXNnQ1RrdiwgcGl2b3RJZDogJ1wiKS5jb25jYXQodGFyZ2V0aW5nTXNnSnNvbi53enJrX3Bpdm90LCBcIicgfTtcXG4gICAgICAgICAgICB3aW5kb3cucGFyZW50LmNsZXZlcnRhcC5yZW5kZXJOb3RpZmljYXRpb25DbGlja2VkKG5vdGlmRGF0YSk7XFxuICAgICAgICB9XFxuICAgICAgfSk7XFxuICAgIFwiKTtcbiAgICAgIGRvYy5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgfTtcblxuICAgIHZhciBfY2FsbEJhY2tDYWxsZWQgPSBmYWxzZTtcblxuICAgIHZhciBzaG93Rm9vdGVyTm90aWZpY2F0aW9uID0gZnVuY3Rpb24gc2hvd0Zvb3Rlck5vdGlmaWNhdGlvbih0YXJnZXRpbmdNc2dKc29uKSB7XG4gICAgICB2YXIgb25DbGljayA9IHRhcmdldGluZ01zZ0pzb24uZGlzcGxheS5vbkNsaWNrOyAvLyBUT0RPOiBOZWVkcyB3aXpyb2NrZXQgYXMgYSBnbG9iYWwgdmFyaWFibGVcblxuICAgICAgaWYgKHdpbmRvdy5jbGV2ZXJ0YXAuaGFzT3duUHJvcGVydHkoJ25vdGlmaWNhdGlvbkNhbGxiYWNrJykgJiYgdHlwZW9mIHdpbmRvdy5jbGV2ZXJ0YXAubm90aWZpY2F0aW9uQ2FsbGJhY2sgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuY2xldmVydGFwLm5vdGlmaWNhdGlvbkNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBub3RpZmljYXRpb25DYWxsYmFjayA9IHdpbmRvdy5jbGV2ZXJ0YXAubm90aWZpY2F0aW9uQ2FsbGJhY2s7XG5cbiAgICAgICAgaWYgKCFfY2FsbEJhY2tDYWxsZWQpIHtcbiAgICAgICAgICB2YXIgaW5hT2JqID0ge307XG4gICAgICAgICAgaW5hT2JqLm1zZ0NvbnRlbnQgPSB0YXJnZXRpbmdNc2dKc29uLm1zZ0NvbnRlbnQ7XG4gICAgICAgICAgaW5hT2JqLm1zZ0lkID0gdGFyZ2V0aW5nTXNnSnNvbi53enJrX2lkO1xuXG4gICAgICAgICAgaWYgKHRhcmdldGluZ01zZ0pzb24ud3pya19waXZvdCkge1xuICAgICAgICAgICAgaW5hT2JqLnBpdm90SWQgPSB0YXJnZXRpbmdNc2dKc29uLnd6cmtfcGl2b3Q7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRhcmdldGluZ01zZ0pzb24uZGlzcGxheS5rdiAhPSBudWxsKSB7XG4gICAgICAgICAgICBpbmFPYmoua3YgPSB0YXJnZXRpbmdNc2dKc29uLmRpc3BsYXkua3Y7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgd2luZG93LmNsZXZlcnRhcC5yYWlzZU5vdGlmaWNhdGlvbkNsaWNrZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAob25DbGljayAhPT0gJycgJiYgb25DbGljayAhPSBudWxsKSB7XG4gICAgICAgICAgICAgIHZhciBqc0Z1bmMgPSB0YXJnZXRpbmdNc2dKc29uLmRpc3BsYXkuanNGdW5jO1xuICAgICAgICAgICAgICBvbkNsaWNrICs9IGdldENvb2tpZVBhcmFtcygpOyAvLyBpbnZva2UganMgZnVuY3Rpb24gY2FsbFxuXG4gICAgICAgICAgICAgIGlmIChqc0Z1bmMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIHRyYWNrIG5vdGlmaWNhdGlvbiBjbGlja2VkIGV2ZW50XG4gICAgICAgICAgICAgICAgUmVxdWVzdERpc3BhdGNoZXIuZmlyZVJlcXVlc3Qob25DbGljayk7XG4gICAgICAgICAgICAgICAgaW52b2tlRXh0ZXJuYWxKcyhqc0Z1bmMsIHRhcmdldGluZ01zZ0pzb24pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfSAvLyBwYXNzIG9uIHRoZSBnY29va2llfHBhZ2V8c2Nvb2tpZUlkIGZvciBjYXB0dXJpbmcgdGhlIGNsaWNrIGV2ZW50XG5cblxuICAgICAgICAgICAgICBpZiAodGFyZ2V0aW5nTXNnSnNvbi5kaXNwbGF5LndpbmRvdyA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKG9uQ2xpY2ssICdfYmxhbmsnKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBvbkNsaWNrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHdpbmRvdy5jbGV2ZXJ0YXAucmFpc2VOb3RpZmljYXRpb25WaWV3ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpbmNyZW1lbnRJbXByZXNzaW9uKHRhcmdldGluZ01zZ0pzb24pO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBub3RpZmljYXRpb25DYWxsYmFjayhpbmFPYmopO1xuICAgICAgICAgIF9jYWxsQmFja0NhbGxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5jbGV2ZXJ0YXAucG9wdXBDdXJyZW50V3pya0lkID0gdGFyZ2V0aW5nTXNnSnNvbi53enJrX2lkO1xuICAgICAgICByZW5kZXJGb290ZXJOb3RpZmljYXRpb24odGFyZ2V0aW5nTXNnSnNvbik7XG5cbiAgICAgICAgaWYgKHdpbmRvdy5jbGV2ZXJ0YXAuaGFzT3duUHJvcGVydHkoJ3BvcHVwQ2FsbGJhY2tzJykgJiYgdHlwZW9mIHdpbmRvdy5jbGV2ZXJ0YXAucG9wdXBDYWxsYmFja3MgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuY2xldmVydGFwLnBvcHVwQ2FsbGJhY2tzW3RhcmdldGluZ01zZ0pzb24ud3pya19pZF0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2YXIgcG9wdXBDYWxsYmFjayA9IHdpbmRvdy5jbGV2ZXJ0YXAucG9wdXBDYWxsYmFja3NbdGFyZ2V0aW5nTXNnSnNvbi53enJrX2lkXTtcbiAgICAgICAgICB2YXIgX2luYU9iaiA9IHt9O1xuICAgICAgICAgIF9pbmFPYmoubXNnQ29udGVudCA9IHRhcmdldGluZ01zZ0pzb24ubXNnQ29udGVudDtcbiAgICAgICAgICBfaW5hT2JqLm1zZ0lkID0gdGFyZ2V0aW5nTXNnSnNvbi53enJrX2lkO1xuXG4gICAgICAgICAgaWYgKHRhcmdldGluZ01zZ0pzb24ud3pya19waXZvdCkge1xuICAgICAgICAgICAgX2luYU9iai5waXZvdElkID0gdGFyZ2V0aW5nTXNnSnNvbi53enJrX3Bpdm90O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBtc2dDVGt2ID0gW107XG5cbiAgICAgICAgICBmb3IgKHZhciB3enJrUHJlZml4S2V5IGluIHRhcmdldGluZ01zZ0pzb24pIHtcbiAgICAgICAgICAgIC8vIEFERCBXWlJLIFBSRUZJWCBLRVkgVkFMVUUgUEFJUlNcbiAgICAgICAgICAgIGlmICh3enJrUHJlZml4S2V5LnN0YXJ0c1dpdGgoV1pSS19QUkVGSVgpICYmIHd6cmtQcmVmaXhLZXkgIT09IFdaUktfSUQpIHtcbiAgICAgICAgICAgICAgdmFyIHd6cmtKc29uID0gX2RlZmluZVByb3BlcnR5KHt9LCB3enJrUHJlZml4S2V5LCB0YXJnZXRpbmdNc2dKc29uW3d6cmtQcmVmaXhLZXldKTtcblxuICAgICAgICAgICAgICBtc2dDVGt2LnB1c2god3pya0pzb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChtc2dDVGt2Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIF9pbmFPYmoubXNnQ1RrdiA9IG1zZ0NUa3Y7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRhcmdldGluZ01zZ0pzb24uZGlzcGxheS5rdiAhPSBudWxsKSB7XG4gICAgICAgICAgICBfaW5hT2JqLmt2ID0gdGFyZ2V0aW5nTXNnSnNvbi5kaXNwbGF5Lmt2O1xuICAgICAgICAgIH0gLy8gUFVCTElDIEFQSSBUTyBSRUNPUkQgQ0xJQ0tFRCBFVkVOVFxuXG5cbiAgICAgICAgICB3aW5kb3cuY2xldmVydGFwLnJhaXNlUG9wdXBOb3RpZmljYXRpb25DbGlja2VkID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbkRhdGEpIHtcbiAgICAgICAgICAgIGlmICghbm90aWZpY2F0aW9uRGF0YSB8fCAhbm90aWZpY2F0aW9uRGF0YS5tc2dJZCkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBldmVudERhdGEgPSB7fTtcbiAgICAgICAgICAgIGV2ZW50RGF0YS50eXBlID0gJ2V2ZW50JztcbiAgICAgICAgICAgIGV2ZW50RGF0YS5ldnROYW1lID0gTk9USUZJQ0FUSU9OX0NMSUNLRUQ7XG4gICAgICAgICAgICBldmVudERhdGEuZXZ0RGF0YSA9IF9kZWZpbmVQcm9wZXJ0eSh7fSwgV1pSS19JRCwgbm90aWZpY2F0aW9uRGF0YS5tc2dJZCk7XG5cbiAgICAgICAgICAgIGlmICh0YXJnZXRpbmdNc2dKc29uLnd6cmtfcGl2b3QpIHtcbiAgICAgICAgICAgICAgZXZlbnREYXRhLmV2dERhdGEgPSBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgZXZlbnREYXRhLmV2dERhdGEpLCB7fSwge1xuICAgICAgICAgICAgICAgIHd6cmtfcGl2b3Q6IG5vdGlmaWNhdGlvbkRhdGEucGl2b3RJZFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gLy8gV1pSSyBQUkVGSVggS0VZIFZBTFVFIFBBSVJTXG5cblxuICAgICAgICAgICAgaWYgKG5vdGlmaWNhdGlvbkRhdGEubXNnQ1Rrdikge1xuICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobm90aWZpY2F0aW9uRGF0YS5tc2dDVGt2KSxcbiAgICAgICAgICAgICAgICAgIF9zdGVwO1xuXG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICAgICAgICAgIHZhciB3enJrUHJlZml4T2JqID0gX3N0ZXAudmFsdWU7XG4gICAgICAgICAgICAgICAgICBldmVudERhdGEuZXZ0RGF0YSA9IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBldmVudERhdGEuZXZ0RGF0YSksIHd6cmtQcmVmaXhPYmopO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yLmUoZXJyKTtcbiAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3IuZigpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF9yZXF1ZXN0LnByb2Nlc3NFdmVudChldmVudERhdGEpO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBwb3B1cENhbGxiYWNrKF9pbmFPYmopO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBleGl0aW50ZW50T2JqO1xuXG4gICAgdmFyIHNob3dFeGl0SW50ZW50ID0gZnVuY3Rpb24gc2hvd0V4aXRJbnRlbnQoZXZlbnQsIHRhcmdldE9iaikge1xuICAgICAgdmFyIHRhcmdldGluZ01zZ0pzb247XG5cbiAgICAgIGlmIChldmVudCAhPSBudWxsICYmIGV2ZW50LmNsaWVudFkgPiAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRhcmdldE9iaiA9PSBudWxsKSB7XG4gICAgICAgIHRhcmdldGluZ01zZ0pzb24gPSBleGl0aW50ZW50T2JqO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0aW5nTXNnSnNvbiA9IHRhcmdldE9iajtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzV2ViUG9wVXBTcGFtQ29udHJvbERpc2FibGVkICYmIHRhcmdldGluZ01zZ0pzb24uZGlzcGxheS53dGFyZ2V0X3R5cGUgPT09IDAgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ludGVudFByZXZpZXcnKSAhPSBudWxsICYmIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnRlbnRPcGFjaXR5RGl2JykgIT0gbnVsbCkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnRlbnRQcmV2aWV3Jyk7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnRlbnRPcGFjaXR5RGl2JykucmVtb3ZlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW50ZW50UHJldmlldycpICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBkb250IHNob3cgZXhpdCBpbnRlbnQgb24gdGFibGV0L21vYmlsZSAtIG9ubHkgb24gZGVza3RvcFxuXG5cbiAgICAgIGlmICh0YXJnZXRpbmdNc2dKc29uLmRpc3BsYXkubGF5b3V0ID09IG51bGwgJiYgKC9tb2JpbGUvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpIHx8IC9taW5pL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSB8fCAvaVBhZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgfHwgJ29udG91Y2hzdGFydCcgaW4gd2luZG93IHx8IC90YWJsZXQvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBjYW1wYWlnbklkID0gdGFyZ2V0aW5nTXNnSnNvbi53enJrX2lkLnNwbGl0KCdfJylbMF07XG5cbiAgICAgIGlmICghaXNXZWJQb3BVcFNwYW1Db250cm9sRGlzYWJsZWQgJiYgZG9DYW1wSG91c2VLZWVwaW5nKHRhcmdldGluZ01zZ0pzb24pID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICRjdC5jYW1wYWlnbkRpdk1hcFtjYW1wYWlnbklkXSA9ICdpbnRlbnRQcmV2aWV3JztcbiAgICAgIHZhciBsZWdhY3kgPSBmYWxzZTtcbiAgICAgIHZhciBvcGFjaXR5RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBvcGFjaXR5RGl2LmlkID0gJ2ludGVudE9wYWNpdHlEaXYnO1xuICAgICAgb3BhY2l0eURpdi5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ3Bvc2l0aW9uOiBmaXhlZDt0b3A6IDA7Ym90dG9tOiAwO2xlZnQ6IDA7d2lkdGg6IDEwMCU7aGVpZ2h0OiAxMDAlO3otaW5kZXg6IDIxNDc0ODM2NDY7YmFja2dyb3VuZDogcmdiYSgwLDAsMCwwLjcpOycpO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChvcGFjaXR5RGl2KTtcbiAgICAgIHZhciBtc2dEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIG1zZ0Rpdi5pZCA9ICdpbnRlbnRQcmV2aWV3JztcblxuICAgICAgaWYgKHRhcmdldGluZ01zZ0pzb24uZGlzcGxheS5wcm90byA9PSBudWxsKSB7XG4gICAgICAgIGxlZ2FjeSA9IHRydWU7XG4gICAgICAgIG1zZ0Rpdi5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ2Rpc3BsYXk6YmxvY2s7b3ZlcmZsb3c6aGlkZGVuO3RvcDo1NSUgIWltcG9ydGFudDtsZWZ0OjUwJSAhaW1wb3J0YW50O3Bvc2l0aW9uOmZpeGVkO3otaW5kZXg6MjE0NzQ4MzY0Nzt3aWR0aDo2MDBweCAhaW1wb3J0YW50O2hlaWdodDo2MDBweCAhaW1wb3J0YW50O21hcmdpbjotMzAwcHggMCAwIC0zMDBweCAhaW1wb3J0YW50OycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXNnRGl2LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCB0YXJnZXRpbmdNc2dKc29uLmRpc3BsYXkuaUZyYW1lU3R5bGUpO1xuICAgICAgfVxuXG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG1zZ0Rpdik7XG4gICAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICB2YXIgYm9yZGVyUmFkaXVzID0gdGFyZ2V0aW5nTXNnSnNvbi5kaXNwbGF5LmJyID09PSBmYWxzZSA/ICcwJyA6ICc4JztcbiAgICAgIGlmcmFtZS5mcmFtZWJvcmRlciA9ICcwcHgnO1xuICAgICAgaWZyYW1lLm1hcmdpbmhlaWdodCA9ICcwcHgnO1xuICAgICAgaWZyYW1lLm1hcmdpbndpZHRoID0gJzBweCc7XG4gICAgICBpZnJhbWUuc2Nyb2xsaW5nID0gJ25vJztcbiAgICAgIGlmcmFtZS5pZCA9ICd3aXotaWZyYW1lLWludGVudCc7XG4gICAgICB2YXIgb25DbGljayA9IHRhcmdldGluZ01zZ0pzb24uZGlzcGxheS5vbkNsaWNrO1xuICAgICAgdmFyIHBvaW50ZXJDc3MgPSAnJztcblxuICAgICAgaWYgKG9uQ2xpY2sgIT09ICcnICYmIG9uQ2xpY2sgIT0gbnVsbCkge1xuICAgICAgICBwb2ludGVyQ3NzID0gJ2N1cnNvcjpwb2ludGVyOyc7XG4gICAgICB9XG5cbiAgICAgIHZhciBodG1sOyAvLyBkaXJlY3QgaHRtbFxuXG4gICAgICBpZiAodGFyZ2V0aW5nTXNnSnNvbi5tc2dDb250ZW50LnR5cGUgPT09IDEpIHtcbiAgICAgICAgaHRtbCA9IHRhcmdldGluZ01zZ0pzb24ubXNnQ29udGVudC5odG1sO1xuICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKC8jI2NhbXBhaWduSWQjIy9nLCBjYW1wYWlnbklkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjc3MgPSAnJyArICc8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+JyArICdib2R5e21hcmdpbjowO3BhZGRpbmc6MDt9JyArICcjY29udGVudERpdi53enJre292ZXJmbG93OmhpZGRlbjtwYWRkaW5nOjAgMCAyMHB4IDA7dGV4dC1hbGlnbjpjZW50ZXI7JyArIHBvaW50ZXJDc3MgKyAnfScgKyAnI2NvbnRlbnREaXYud3pyayB0ZHtwYWRkaW5nOjE1cHggMTBweDt9JyArICcud3pya1BQdGl0bGV7Zm9udC13ZWlnaHQ6IGJvbGQ7Zm9udC1zaXplOiAyNHB4O2ZvbnQtZmFtaWx5OmFyaWFsO3dvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7cGFkZGluZy10b3A6MjBweDt9JyArICcud3pya1BQZHNjcntmb250LXNpemU6IDE0cHg7Zm9udC1mYW1pbHk6YXJpYWw7bGluZS1oZWlnaHQ6MTZweDt3b3JkLWJyZWFrOiBicmVhay13b3JkO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3BhZGRpbmc6MjBweCAyMHB4IDAgMjBweDtsaW5lLWhlaWdodDoyMHB4O30nICsgJy5QTDE1e3BhZGRpbmctbGVmdDoxNXB4O30nICsgJy53enJrUFB3YXJwe21hcmdpbjoyMHB4IDIwcHggMCA1cHg7cGFkZGluZzowcHg7Ym9yZGVyLXJhZGl1czogJyArIGJvcmRlclJhZGl1cyArICdweDtib3gtc2hhZG93OiAxcHggMXB4IDVweCAjODg4ODg4O30nICsgJ2Eud3pya0Nsb3Nle2N1cnNvcjpwb2ludGVyO3Bvc2l0aW9uOiBhYnNvbHV0ZTt0b3A6IDExcHg7cmlnaHQ6IDExcHg7ei1pbmRleDogMjE0NzQ4MzY0Nztmb250LXNpemU6MTlweDtmb250LWZhbWlseTphcmlhbDtmb250LXdlaWdodDpib2xkO3RleHQtZGVjb3JhdGlvbjogbm9uZTt3aWR0aDogMjVweDsvKmhlaWdodDogMjVweDsqL3RleHQtYWxpZ246IGNlbnRlcjsgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lOyBsaW5lLWhlaWdodDogMjVweDsnICsgJ2JhY2tncm91bmQ6ICMzNTM1MzU7Ym9yZGVyOiAjZmZmIDJweCBzb2xpZDtib3JkZXItcmFkaXVzOiAxMDAlO2JveC1zaGFkb3c6ICM3NzcgMnB4IDJweCAycHg7Y29sb3I6I2ZmZjt9JyArICdhOmhvdmVyLnd6cmtDbG9zZXtiYWNrZ3JvdW5kLWNvbG9yOiNkMTkxNGEgIWltcG9ydGFudDtjb2xvcjojZmZmICFpbXBvcnRhbnQ7IC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTt9JyArICcjY29udGVudERpdiAuYnV0dG9ue3BhZGRpbmctdG9wOjIwcHg7fScgKyAnI2NvbnRlbnREaXYgLmJ1dHRvbiBhe2ZvbnQtc2l6ZTogMTRweDtmb250LXdlaWdodDpib2xkO2ZvbnQtZmFtaWx5OmFyaWFsO3RleHQtYWxpZ246Y2VudGVyO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3RleHQtZGVjb3JhdGlvbjpub25lO3BhZGRpbmc6MCAzMHB4O2hlaWdodDo0MHB4O2xpbmUtaGVpZ2h0OjQwcHg7YmFja2dyb3VuZDojZWE2OTNiO2NvbG9yOiNmZmY7Ym9yZGVyLXJhZGl1czo0cHg7LXdlYmtpdC1ib3JkZXItcmFkaXVzOjRweDstbW96LWJvcmRlci1yYWRpdXM6NHB4O30nICsgJzwvc3R5bGU+JztcbiAgICAgICAgdmFyIGJnQ29sb3IsIHRleHRDb2xvciwgYnRuQmcsIGJ0Q29sb3I7XG5cbiAgICAgICAgaWYgKHRhcmdldGluZ01zZ0pzb24uZGlzcGxheS50aGVtZSA9PT0gJ2RhcmsnKSB7XG4gICAgICAgICAgYmdDb2xvciA9ICcjMmQyZDJlJztcbiAgICAgICAgICB0ZXh0Q29sb3IgPSAnI2VhZWFlYSc7XG4gICAgICAgICAgYnRuQmcgPSAnIzM1MzUzNSc7XG4gICAgICAgICAgYnRDb2xvciA9ICcjZmZmZmZmJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBiZ0NvbG9yID0gJyNmZmZmZmYnO1xuICAgICAgICAgIHRleHRDb2xvciA9ICcjMDAwMDAwJztcbiAgICAgICAgICBidG5CZyA9ICcjYTVhNmE2JztcbiAgICAgICAgICBidENvbG9yID0gJyNmZmZmZmYnO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRpdGxlVGV4dCA9IHRhcmdldGluZ01zZ0pzb24ubXNnQ29udGVudC50aXRsZTtcbiAgICAgICAgdmFyIGRlc2NyaXB0aW9uVGV4dCA9IHRhcmdldGluZ01zZ0pzb24ubXNnQ29udGVudC5kZXNjcmlwdGlvbjtcbiAgICAgICAgdmFyIGN0YVRleHQgPSAnJztcblxuICAgICAgICBpZiAodGFyZ2V0aW5nTXNnSnNvbi5tc2dDb250ZW50LmN0YVRleHQgIT0gbnVsbCAmJiB0YXJnZXRpbmdNc2dKc29uLm1zZ0NvbnRlbnQuY3RhVGV4dCAhPT0gJycpIHtcbiAgICAgICAgICBjdGFUZXh0ID0gXCI8ZGl2IGNsYXNzPSdidXR0b24nPjxhIGhyZWY9JyMnPlwiICsgdGFyZ2V0aW5nTXNnSnNvbi5tc2dDb250ZW50LmN0YVRleHQgKyAnPC9hPjwvZGl2Pic7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaW1hZ2VUZCA9ICcnO1xuXG4gICAgICAgIGlmICh0YXJnZXRpbmdNc2dKc29uLm1zZ0NvbnRlbnQuaW1hZ2VVcmwgIT0gbnVsbCAmJiB0YXJnZXRpbmdNc2dKc29uLm1zZ0NvbnRlbnQuaW1hZ2VVcmwgIT09ICcnKSB7XG4gICAgICAgICAgaW1hZ2VUZCA9IFwiPGRpdiBzdHlsZT0ncGFkZGluZy10b3A6MjBweDsnPjxpbWcgc3JjPSdcIiArIHRhcmdldGluZ01zZ0pzb24ubXNnQ29udGVudC5pbWFnZVVybCArIFwiJyB3aWR0aD0nNTAwJyBhbHQ9XCIgKyB0aXRsZVRleHQgKyAnIC8+PC9kaXY+JztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvbkNsaWNrU3RyID0gJ3BhcmVudC4kV1pSS19XUi5jbG9zZUlmcmFtZSgnICsgY2FtcGFpZ25JZCArIFwiLCdpbnRlbnRQcmV2aWV3Jyk7XCI7XG4gICAgICAgIHZhciB0aXRsZSA9IFwiPGRpdiBjbGFzcz0nd3pya1BQd2FycCcgc3R5bGU9J2NvbG9yOlwiICsgdGV4dENvbG9yICsgJztiYWNrZ3JvdW5kLWNvbG9yOicgKyBiZ0NvbG9yICsgXCI7Jz5cIiArIFwiPGEgaHJlZj0namF2YXNjcmlwdDp2b2lkKDApOycgb25jbGljaz1cIiArIG9uQ2xpY2tTdHIgKyBcIiBjbGFzcz0nd3pya0Nsb3NlJyBzdHlsZT0nYmFja2dyb3VuZC1jb2xvcjpcIiArIGJ0bkJnICsgJztjb2xvcjonICsgYnRDb2xvciArIFwiJz4mdGltZXM7PC9hPlwiICsgXCI8ZGl2IGlkPSdjb250ZW50RGl2JyBjbGFzcz0nd3pyayc+XCIgKyBcIjxkaXYgY2xhc3M9J3d6cmtQUHRpdGxlJyBzdHlsZT0nY29sb3I6XCIgKyB0ZXh0Q29sb3IgKyBcIic+XCIgKyB0aXRsZVRleHQgKyAnPC9kaXY+JztcbiAgICAgICAgdmFyIGJvZHkgPSBcIjxkaXYgY2xhc3M9J3d6cmtQUGRzY3InIHN0eWxlPSdjb2xvcjpcIiArIHRleHRDb2xvciArIFwiJz5cIiArIGRlc2NyaXB0aW9uVGV4dCArICc8L2Rpdj4nICsgaW1hZ2VUZCArIGN0YVRleHQgKyAnPC9kaXY+PC9kaXY+JztcbiAgICAgICAgaHRtbCA9IGNzcyArIHRpdGxlICsgYm9keTtcbiAgICAgIH1cblxuICAgICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnei1pbmRleDogMjE0NzQ4MzY0NzsgZGlzcGxheTpibG9jazsgaGVpZ2h0OiAxMDAlICFpbXBvcnRhbnQ7IHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7bWluLWhlaWdodDo4MHB4ICFpbXBvcnRhbnQ7Ym9yZGVyOjBweCAhaW1wb3J0YW50OyBib3JkZXItY29sb3I6bm9uZSAhaW1wb3J0YW50OycpO1xuICAgICAgbXNnRGl2LmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gICAgICB2YXIgaWZybSA9IGlmcmFtZS5jb250ZW50V2luZG93ID8gaWZyYW1lLmNvbnRlbnRXaW5kb3cgOiBpZnJhbWUuY29udGVudERvY3VtZW50LmRvY3VtZW50ID8gaWZyYW1lLmNvbnRlbnREb2N1bWVudC5kb2N1bWVudCA6IGlmcmFtZS5jb250ZW50RG9jdW1lbnQ7XG4gICAgICB2YXIgZG9jID0gaWZybS5kb2N1bWVudDtcbiAgICAgIGRvYy5vcGVuKCk7XG4gICAgICBkb2Mud3JpdGUoaHRtbCk7XG5cbiAgICAgIGlmICh0YXJnZXRpbmdNc2dKc29uLmRpc3BsYXlbJ2N1c3RvbS1lZGl0b3InXSkge1xuICAgICAgICBhcHBlbmRTY3JpcHRGb3JDdXN0b21FdmVudCh0YXJnZXRpbmdNc2dKc29uLCBkb2MpO1xuICAgICAgfVxuXG4gICAgICBkb2MuY2xvc2UoKTtcbiAgICAgIHZhciBjb250ZW50RGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dpei1pZnJhbWUtaW50ZW50JykuY29udGVudERvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250ZW50RGl2Jyk7XG4gICAgICBzZXR1cENsaWNrVXJsKG9uQ2xpY2ssIHRhcmdldGluZ01zZ0pzb24sIGNvbnRlbnREaXYsICdpbnRlbnRQcmV2aWV3JywgbGVnYWN5KTtcbiAgICB9O1xuXG4gICAgaWYgKCFkb2N1bWVudC5ib2R5KSB7XG4gICAgICBpZiAoX3dpekNvdW50ZXIgPCA2KSB7XG4gICAgICAgIF93aXpDb3VudGVyKys7XG4gICAgICAgIHNldFRpbWVvdXQoX3RyLCAxMDAwLCBtc2csIHtcbiAgICAgICAgICBkZXZpY2U6IF9kZXZpY2UsXG4gICAgICAgICAgc2Vzc2lvbjogX3Nlc3Npb24sXG4gICAgICAgICAgcmVxdWVzdDogX3JlcXVlc3QsXG4gICAgICAgICAgbG9nZ2VyOiBfbG9nZ2VyXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG1zZy5pbmFwcF9ub3RpZnMgIT0gbnVsbCkge1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IG1zZy5pbmFwcF9ub3RpZnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHZhciB0YXJnZXROb3RpZiA9IG1zZy5pbmFwcF9ub3RpZnNbaW5kZXhdO1xuXG4gICAgICAgIGlmICh0YXJnZXROb3RpZi5kaXNwbGF5Lnd0YXJnZXRfdHlwZSA9PSBudWxsIHx8IHRhcmdldE5vdGlmLmRpc3BsYXkud3RhcmdldF90eXBlID09PSAwIHx8IHRhcmdldE5vdGlmLmRpc3BsYXkud3RhcmdldF90eXBlID09PSAyKSB7XG4gICAgICAgICAgc2hvd0Zvb3Rlck5vdGlmaWNhdGlvbih0YXJnZXROb3RpZik7XG4gICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0Tm90aWYuZGlzcGxheS53dGFyZ2V0X3R5cGUgPT09IDEpIHtcbiAgICAgICAgICAvLyBpZiBkaXNwbGF5Wyd3dGFyZ2V0X3R5cGUnXT09MSB0aGVuIGV4aXQgaW50ZW50XG4gICAgICAgICAgZXhpdGludGVudE9iaiA9IHRhcmdldE5vdGlmO1xuICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5ib2R5Lm9ubW91c2VsZWF2ZSA9IHNob3dFeGl0SW50ZW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG1lcmdlRXZlbnRNYXAgPSBmdW5jdGlvbiBtZXJnZUV2ZW50TWFwKG5ld0V2dE1hcCkge1xuICAgICAgaWYgKCRjdC5nbG9iYWxFdmVudHNNYXAgPT0gbnVsbCkge1xuICAgICAgICAkY3QuZ2xvYmFsRXZlbnRzTWFwID0gU3RvcmFnZU1hbmFnZXIucmVhZEZyb21MU29yQ29va2llKEVWX0NPT0tJRSk7XG5cbiAgICAgICAgaWYgKCRjdC5nbG9iYWxFdmVudHNNYXAgPT0gbnVsbCkge1xuICAgICAgICAgICRjdC5nbG9iYWxFdmVudHNNYXAgPSBuZXdFdnRNYXA7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBuZXdFdnRNYXApIHtcbiAgICAgICAgaWYgKG5ld0V2dE1hcC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgdmFyIG9sZEV2dE9iaiA9ICRjdC5nbG9iYWxFdmVudHNNYXBba2V5XTtcbiAgICAgICAgICB2YXIgbmV3RXZ0T2JqID0gbmV3RXZ0TWFwW2tleV07XG5cbiAgICAgICAgICBpZiAoJGN0Lmdsb2JhbEV2ZW50c01hcFtrZXldICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChuZXdFdnRPYmpbMF0gIT0gbnVsbCAmJiBuZXdFdnRPYmpbMF0gPiBvbGRFdnRPYmpbMF0pIHtcbiAgICAgICAgICAgICAgJGN0Lmdsb2JhbEV2ZW50c01hcFtrZXldID0gbmV3RXZ0T2JqO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkY3QuZ2xvYmFsRXZlbnRzTWFwW2tleV0gPSBuZXdFdnRPYmo7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChTdG9yYWdlTWFuYWdlci5faXNMb2NhbFN0b3JhZ2VTdXBwb3J0ZWQoKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKG1zZy5ldnByICE9IG51bGwpIHtcbiAgICAgICAgICB2YXIgZXZlbnRzTWFwID0gbXNnLmV2cHIuZXZlbnRzO1xuICAgICAgICAgIHZhciBwcm9maWxlTWFwID0gbXNnLmV2cHIucHJvZmlsZTtcbiAgICAgICAgICB2YXIgc3luY0V4cGlyeSA9IG1zZy5ldnByLmV4cGlyZXNfaW47XG4gICAgICAgICAgdmFyIG5vdyA9IGdldE5vdygpO1xuICAgICAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNldE1ldGFQcm9wKCdsc1RpbWUnLCBub3cpO1xuICAgICAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNldE1ldGFQcm9wKCdleFRzJywgc3luY0V4cGlyeSk7XG4gICAgICAgICAgbWVyZ2VFdmVudE1hcChldmVudHNNYXApO1xuICAgICAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNhdmVUb0xTb3JDb29raWUoRVZfQ09PS0lFLCAkY3QuZ2xvYmFsRXZlbnRzTWFwKTtcblxuICAgICAgICAgIGlmICgkY3QuZ2xvYmFsUHJvZmlsZU1hcCA9PSBudWxsKSB7XG4gICAgICAgICAgICBhZGRUb0xvY2FsUHJvZmlsZU1hcChwcm9maWxlTWFwLCB0cnVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWRkVG9Mb2NhbFByb2ZpbGVNYXAocHJvZmlsZU1hcCwgZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtc2cuYXJwICE9IG51bGwpIHtcbiAgICAgICAgICBhcnAobXNnLmFycCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobXNnLmluYXBwX3N0YWxlICE9IG51bGwpIHtcbiAgICAgICAgICB2YXIgY2FtcE9iaiA9IGdldENhbXBhaWduT2JqZWN0KCk7XG4gICAgICAgICAgdmFyIGdsb2JhbE9iaiA9IGNhbXBPYmouZ2xvYmFsO1xuXG4gICAgICAgICAgaWYgKGdsb2JhbE9iaiAhPSBudWxsKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpZHggaW4gbXNnLmluYXBwX3N0YWxlKSB7XG4gICAgICAgICAgICAgIGlmIChtc2cuaW5hcHBfc3RhbGUuaGFzT3duUHJvcGVydHkoaWR4KSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBnbG9iYWxPYmpbbXNnLmluYXBwX3N0YWxlW2lkeF1dO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2F2ZUNhbXBhaWduT2JqZWN0KGNhbXBPYmopO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIF9sb2dnZXIuZXJyb3IoJ1VuYWJsZSB0byBwZXJzaXN0IGV2cnAvYXJwOiAnICsgZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBfaXNQZXJzb25hbGlzYXRpb25BY3RpdmUkMiA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiaXNQZXJzb25hbGlzYXRpb25BY3RpdmVcIik7XG5cbiAgdmFyIFVzZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFVzZXIoX3JlZikge1xuICAgICAgdmFyIGlzUGVyc29uYWxpc2F0aW9uQWN0aXZlID0gX3JlZi5pc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZTtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVzZXIpO1xuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlJDIsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9pc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZSQyKVtfaXNQZXJzb25hbGlzYXRpb25BY3RpdmUkMl0gPSBpc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoVXNlciwgW3tcbiAgICAgIGtleTogXCJnZXRUb3RhbFZpc2l0c1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRvdGFsVmlzaXRzKCkge1xuICAgICAgICBpZiAoIV9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfaXNQZXJzb25hbGlzYXRpb25BY3RpdmUkMilbX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlJDJdKCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdmlzaXRDb3VudCA9IFN0b3JhZ2VNYW5hZ2VyLmdldE1ldGFQcm9wKCdzYycpO1xuXG4gICAgICAgIGlmICh2aXNpdENvdW50ID09IG51bGwpIHtcbiAgICAgICAgICB2aXNpdENvdW50ID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2aXNpdENvdW50O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRMYXN0VmlzaXRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMYXN0VmlzaXQoKSB7XG4gICAgICAgIGlmICghX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9pc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZSQyKVtfaXNQZXJzb25hbGlzYXRpb25BY3RpdmUkMl0oKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwcmV2U2Vzc2lvbiA9IFN0b3JhZ2VNYW5hZ2VyLmdldE1ldGFQcm9wKCdwcycpO1xuXG4gICAgICAgIGlmIChwcmV2U2Vzc2lvbiAhPSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHByZXZTZXNzaW9uICogMTAwMCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gVXNlcjtcbiAgfSgpO1xuXG4gIHZhciBsb2dMZXZlbHMgPSB7XG4gICAgRElTQUJMRTogMCxcbiAgICBFUlJPUjogMSxcbiAgICBJTkZPOiAyLFxuICAgIERFQlVHOiAzXG4gIH07XG5cbiAgdmFyIF9sb2dMZXZlbCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwibG9nTGV2ZWxcIik7XG5cbiAgdmFyIF9sb2cgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImxvZ1wiKTtcblxuICB2YXIgX2lzTGVnYWN5RGVidWcgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImlzTGVnYWN5RGVidWdcIik7XG5cbiAgdmFyIExvZ2dlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTG9nZ2VyKGxvZ0xldmVsKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9nZ2VyKTtcblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9pc0xlZ2FjeURlYnVnLCB7XG4gICAgICAgIGdldDogX2dldF9pc0xlZ2FjeURlYnVnLFxuICAgICAgICBzZXQ6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX2xvZywge1xuICAgICAgICB2YWx1ZTogX2xvZzJcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9sb2dMZXZlbCwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICB0aGlzLnd6cmtFcnJvciA9IHt9O1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dMZXZlbClbX2xvZ0xldmVsXSA9IGxvZ0xldmVsID09IG51bGwgPyBsb2dMZXZlbCA6IGxvZ0xldmVscy5JTkZPO1xuICAgICAgdGhpcy53enJrRXJyb3IgPSB7fTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTG9nZ2VyLCBbe1xuICAgICAga2V5OiBcImVycm9yXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZXJyb3IobWVzc2FnZSkge1xuICAgICAgICBpZiAoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dMZXZlbClbX2xvZ0xldmVsXSA+PSBsb2dMZXZlbHMuRVJST1IpIHtcbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZylbX2xvZ10oJ2Vycm9yJywgbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaW5mb1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluZm8obWVzc2FnZSkge1xuICAgICAgICBpZiAoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dMZXZlbClbX2xvZ0xldmVsXSA+PSBsb2dMZXZlbHMuSU5GTykge1xuICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nKVtfbG9nXSgnbG9nJywgbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZGVidWdcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZWJ1ZyhtZXNzYWdlKSB7XG4gICAgICAgIGlmIChfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ0xldmVsKVtfbG9nTGV2ZWxdID49IGxvZ0xldmVscy5ERUJVRyB8fCBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2lzTGVnYWN5RGVidWcpW19pc0xlZ2FjeURlYnVnXSkge1xuICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nKVtfbG9nXSgnZGVidWcnLCBtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJyZXBvcnRFcnJvclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlcG9ydEVycm9yKGNvZGUsIGRlc2NyaXB0aW9uKSB7XG4gICAgICAgIHRoaXMud3pya0Vycm9yLmMgPSBjb2RlO1xuICAgICAgICB0aGlzLnd6cmtFcnJvci5kID0gZGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMuZXJyb3IoXCJcIi5jb25jYXQoQ0xFVkVSVEFQX0VSUk9SX1BSRUZJWCwgXCIgXCIpLmNvbmNhdChjb2RlLCBcIjogXCIpLmNvbmNhdChkZXNjcmlwdGlvbikpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJsb2dMZXZlbFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ0xldmVsKVtfbG9nTGV2ZWxdO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KGxvZ0xldmVsKSB7XG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nTGV2ZWwpW19sb2dMZXZlbF0gPSBsb2dMZXZlbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9nZ2VyO1xuICB9KCk7XG5cbiAgdmFyIF9sb2cyID0gZnVuY3Rpb24gX2xvZzIobGV2ZWwsIG1lc3NhZ2UpIHtcbiAgICBpZiAod2luZG93LmNvbnNvbGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciB0cyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICBjb25zb2xlW2xldmVsXShcIkNsZXZlclRhcCBbXCIuY29uY2F0KHRzLCBcIl06IFwiKS5jb25jYXQobWVzc2FnZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG4gIH07XG5cbiAgdmFyIF9nZXRfaXNMZWdhY3lEZWJ1ZyA9IGZ1bmN0aW9uIF9nZXRfaXNMZWdhY3lEZWJ1ZygpIHtcbiAgICByZXR1cm4gdHlwZW9mIHNlc3Npb25TdG9yYWdlICE9PSAndW5kZWZpbmVkJyAmJiBzZXNzaW9uU3RvcmFnZS5XWlJLX0QgPT09ICcnO1xuICB9O1xuXG4gIHZhciBfbG9nZ2VyJDUgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImxvZ2dlclwiKTtcblxuICB2YXIgX3Nlc3Npb25JZCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwic2Vzc2lvbklkXCIpO1xuXG4gIHZhciBfaXNQZXJzb25hbGlzYXRpb25BY3RpdmUkMyA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiaXNQZXJzb25hbGlzYXRpb25BY3RpdmVcIik7XG5cbiAgdmFyIFNlc3Npb25NYW5hZ2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICAvLyBTQ09PS0lFX05BTUVcbiAgICBmdW5jdGlvbiBTZXNzaW9uTWFuYWdlcihfcmVmKSB7XG4gICAgICB2YXIgbG9nZ2VyID0gX3JlZi5sb2dnZXIsXG4gICAgICAgICAgaXNQZXJzb25hbGlzYXRpb25BY3RpdmUgPSBfcmVmLmlzUGVyc29uYWxpc2F0aW9uQWN0aXZlO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2Vzc2lvbk1hbmFnZXIpO1xuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX2xvZ2dlciQ1LCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfc2Vzc2lvbklkLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfaXNQZXJzb25hbGlzYXRpb25BY3RpdmUkMywge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICB0aGlzLmNvb2tpZU5hbWUgPSB2b2lkIDA7XG4gICAgICB0aGlzLnNjb29raWVPYmogPSB2b2lkIDA7XG4gICAgICB0aGlzLnNlc3Npb25JZCA9IFN0b3JhZ2VNYW5hZ2VyLmdldE1ldGFQcm9wKCdjcycpO1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkNSlbX2xvZ2dlciQ1XSA9IGxvZ2dlcjtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfaXNQZXJzb25hbGlzYXRpb25BY3RpdmUkMylbX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlJDNdID0gaXNQZXJzb25hbGlzYXRpb25BY3RpdmU7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFNlc3Npb25NYW5hZ2VyLCBbe1xuICAgICAga2V5OiBcImdldFNlc3Npb25Db29raWVPYmplY3RcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTZXNzaW9uQ29va2llT2JqZWN0KCkge1xuICAgICAgICB2YXIgc2Nvb2tpZVN0ciA9IFN0b3JhZ2VNYW5hZ2VyLnJlYWRDb29raWUodGhpcy5jb29raWVOYW1lKTtcbiAgICAgICAgdmFyIG9iaiA9IHt9O1xuXG4gICAgICAgIGlmIChzY29va2llU3RyICE9IG51bGwpIHtcbiAgICAgICAgICAvLyBjb252ZXJ0aW5nIGJhY2sgc2luZ2xlIHF1b3RlcyB0byBkb3VibGUgZm9yIEpTT04gcGFyc2luZyAtIGh0dHA6Ly93d3cuaWFuZGV2bGluLmNvbS9ibG9nLzIwMTIvMDQvaHRtbDUvY29va2llcy1qc29uLWxvY2Fsc3RvcmFnZS1hbmQtb3BlcmFcbiAgICAgICAgICBzY29va2llU3RyID0gc2Nvb2tpZVN0ci5yZXBsYWNlKHNpbmdsZVF1b3RlUmVnZXgsICdcIicpO1xuICAgICAgICAgIG9iaiA9IEpTT04ucGFyc2Uoc2Nvb2tpZVN0cik7XG5cbiAgICAgICAgICBpZiAoIWlzT2JqZWN0KG9iaikpIHtcbiAgICAgICAgICAgIG9iaiA9IHt9O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9iai50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAvLyBjaGVjayB0aW1lIGVsYXBzZWQgc2luY2UgbGFzdCByZXF1ZXN0XG4gICAgICAgICAgICAgIHZhciBsYXN0VGltZSA9IG9iai50O1xuICAgICAgICAgICAgICB2YXIgbm93ID0gZ2V0Tm93KCk7XG5cbiAgICAgICAgICAgICAgaWYgKG5vdyAtIGxhc3RUaW1lID4gU0NPT0tJRV9FWFBfVElNRV9JTl9TRUNTICsgNjApIHtcbiAgICAgICAgICAgICAgICAvLyBhZGRpbmcgNjAgc2Vjb25kcyB0byBjb21wZW5zYXRlIGZvciBpbi1qb3VybmV5IHJlcXVlc3RzXG4gICAgICAgICAgICAgICAgLy8gaWRlYWxseSB0aGUgY29va2llIHNob3VsZCd2ZSBkaWVkIGFmdGVyIFNDT09LSUVfRVhQX1RJTUVfSU5fU0VDUyBidXQgaXQncyBzdGlsbCBhcm91bmQgYXMgd2UgY2FuIHJlYWRcbiAgICAgICAgICAgICAgICAvLyBoZW5jZSB3ZSBzaG91bGRuJ3QgdXNlIGl0LlxuICAgICAgICAgICAgICAgIG9iaiA9IHt9O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zY29va2llT2JqID0gb2JqO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRTZXNzaW9uQ29va2llT2JqZWN0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2Vzc2lvbkNvb2tpZU9iamVjdChvYmopIHtcbiAgICAgICAgdmFyIG9ialN0ciA9IEpTT04uc3RyaW5naWZ5KG9iaik7XG4gICAgICAgIFN0b3JhZ2VNYW5hZ2VyLmNyZWF0ZUJyb2FkQ29va2llKHRoaXMuY29va2llTmFtZSwgb2JqU3RyLCBTQ09PS0lFX0VYUF9USU1FX0lOX1NFQ1MsIGdldEhvc3ROYW1lKCkpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJtYW5hZ2VTZXNzaW9uXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbWFuYWdlU2Vzc2lvbihzZXNzaW9uKSB7XG4gICAgICAgIC8vIGZpcnN0IHRpbWUuIGNoZWNrIGlmIGN1cnJlbnQgc2Vzc2lvbiBpZCBpbiBsb2NhbHN0b3JhZ2UgaXMgc2FtZVxuICAgICAgICAvLyBpZiBub3Qgc2FtZSB0aGVuIHByZXYgPSBjdXJyZW50IGFuZCBjdXJyZW50ID0gdGhpcyBuZXcgc2Vzc2lvblxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuc2Vzc2lvbklkID09PSAndW5kZWZpbmVkJyB8fCB0aGlzLnNlc3Npb25JZCAhPT0gc2Vzc2lvbikge1xuICAgICAgICAgIHZhciBjdXJyZW50U2Vzc2lvbkluTFMgPSBTdG9yYWdlTWFuYWdlci5nZXRNZXRhUHJvcCgnY3MnKTsgLy8gaWYgc2Vzc2lvbklkIGluIG1ldGEgaXMgdW5kZWZpbmVkIC0gc2V0IGN1cnJlbnQgdG8gYm90aFxuXG4gICAgICAgICAgaWYgKHR5cGVvZiBjdXJyZW50U2Vzc2lvbkluTFMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBTdG9yYWdlTWFuYWdlci5zZXRNZXRhUHJvcCgncHMnLCBzZXNzaW9uKTtcbiAgICAgICAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNldE1ldGFQcm9wKCdjcycsIHNlc3Npb24pO1xuICAgICAgICAgICAgU3RvcmFnZU1hbmFnZXIuc2V0TWV0YVByb3AoJ3NjJywgMSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50U2Vzc2lvbkluTFMgIT09IHNlc3Npb24pIHtcbiAgICAgICAgICAgIC8vIG5vdCBzYW1lIGFzIHNlc3Npb24gaW4gbG9jYWwgc3RvcmFnZS4gbmV3IHNlc3Npb25cbiAgICAgICAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNldE1ldGFQcm9wKCdwcycsIGN1cnJlbnRTZXNzaW9uSW5MUyk7XG4gICAgICAgICAgICBTdG9yYWdlTWFuYWdlci5zZXRNZXRhUHJvcCgnY3MnLCBzZXNzaW9uKTtcbiAgICAgICAgICAgIHZhciBzZXNzaW9uQ291bnQgPSBTdG9yYWdlTWFuYWdlci5nZXRNZXRhUHJvcCgnc2MnKTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZXNzaW9uQ291bnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHNlc3Npb25Db3VudCA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNldE1ldGFQcm9wKCdzYycsIHNlc3Npb25Db3VudCArIDEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuc2Vzc2lvbklkID0gc2Vzc2lvbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRUaW1lRWxhcHNlZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRpbWVFbGFwc2VkKCkge1xuICAgICAgICBpZiAoIV9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfaXNQZXJzb25hbGlzYXRpb25BY3RpdmUkMylbX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlJDNdKCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zY29va2llT2JqICE9IG51bGwpIHtcbiAgICAgICAgICAvLyBUT0RPOiBjaGVjayBsb2dpYz9cbiAgICAgICAgICB0aGlzLnNjb29raWVPYmogPSB0aGlzLmdldFNlc3Npb25Db29raWVPYmplY3QoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZXNzaW9uU3RhcnQgPSB0aGlzLnNjb29raWVPYmoucztcblxuICAgICAgICBpZiAoc2Vzc2lvblN0YXJ0ICE9IG51bGwpIHtcbiAgICAgICAgICB2YXIgdHMgPSBnZXROb3coKTtcbiAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih0cyAtIHNlc3Npb25TdGFydCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0UGFnZUNvdW50XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGFnZUNvdW50KCkge1xuICAgICAgICBpZiAoIV9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfaXNQZXJzb25hbGlzYXRpb25BY3RpdmUkMylbX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlJDNdKCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zY29va2llT2JqICE9IG51bGwpIHtcbiAgICAgICAgICAvLyBUT0RPOiBjaGVjayBsb2dpY1xuICAgICAgICAgIHRoaXMuc2Nvb2tpZU9iaiA9IHRoaXMuZ2V0U2Vzc2lvbkNvb2tpZU9iamVjdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuc2Nvb2tpZU9iai5wO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXNzaW9uSWRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXNzaW9uSWQpW19zZXNzaW9uSWRdO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHNlc3Npb25JZCkge1xuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3Nlc3Npb25JZClbX3Nlc3Npb25JZF0gPSBzZXNzaW9uSWQ7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFNlc3Npb25NYW5hZ2VyO1xuICB9KCk7XG5cbiAgdmFyIHNlcU5vID0gMDtcbiAgdmFyIHJlcXVlc3RUaW1lID0gMDtcblxuICB2YXIgX2xvZ2dlciQ2ID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJsb2dnZXJcIik7XG5cbiAgdmFyIF9hY2NvdW50JDIgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImFjY291bnRcIik7XG5cbiAgdmFyIF9kZXZpY2UkMiA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiZGV2aWNlXCIpO1xuXG4gIHZhciBfc2Vzc2lvbiQyID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJzZXNzaW9uXCIpO1xuXG4gIHZhciBfaXNQZXJzb25hbGlzYXRpb25BY3RpdmUkNCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiaXNQZXJzb25hbGlzYXRpb25BY3RpdmVcIik7XG5cbiAgdmFyIF9jbGVhckNvb2tpZSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiY2xlYXJDb29raWVcIik7XG5cbiAgdmFyIF9hZGRUb0xvY2FsRXZlbnRNYXAgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImFkZFRvTG9jYWxFdmVudE1hcFwiKTtcblxuICB2YXIgUmVxdWVzdE1hbmFnZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlcXVlc3RNYW5hZ2VyKF9yZWYpIHtcbiAgICAgIHZhciBsb2dnZXIgPSBfcmVmLmxvZ2dlcixcbiAgICAgICAgICBhY2NvdW50ID0gX3JlZi5hY2NvdW50LFxuICAgICAgICAgIGRldmljZSA9IF9yZWYuZGV2aWNlLFxuICAgICAgICAgIHNlc3Npb24gPSBfcmVmLnNlc3Npb24sXG4gICAgICAgICAgaXNQZXJzb25hbGlzYXRpb25BY3RpdmUgPSBfcmVmLmlzUGVyc29uYWxpc2F0aW9uQWN0aXZlO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVxdWVzdE1hbmFnZXIpO1xuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX2FkZFRvTG9jYWxFdmVudE1hcCwge1xuICAgICAgICB2YWx1ZTogX2FkZFRvTG9jYWxFdmVudE1hcDJcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9sb2dnZXIkNiwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX2FjY291bnQkMiwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX2RldmljZSQyLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfc2Vzc2lvbiQyLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfaXNQZXJzb25hbGlzYXRpb25BY3RpdmUkNCwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX2NsZWFyQ29va2llLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgdGhpcy5wcm9jZXNzaW5nQmFja3VwID0gZmFsc2U7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ2KVtfbG9nZ2VyJDZdID0gbG9nZ2VyO1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9hY2NvdW50JDIpW19hY2NvdW50JDJdID0gYWNjb3VudDtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfZGV2aWNlJDIpW19kZXZpY2UkMl0gPSBkZXZpY2U7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3Nlc3Npb24kMilbX3Nlc3Npb24kMl0gPSBzZXNzaW9uO1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9pc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZSQ0KVtfaXNQZXJzb25hbGlzYXRpb25BY3RpdmUkNF0gPSBpc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZTtcbiAgICAgIFJlcXVlc3REaXNwYXRjaGVyLmxvZ2dlciA9IGxvZ2dlcjtcbiAgICAgIFJlcXVlc3REaXNwYXRjaGVyLmRldmljZSA9IGRldmljZTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoUmVxdWVzdE1hbmFnZXIsIFt7XG4gICAgICBrZXk6IFwicHJvY2Vzc0JhY2t1cEV2ZW50c1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHByb2Nlc3NCYWNrdXBFdmVudHMoKSB7XG4gICAgICAgIHZhciBiYWNrdXBNYXAgPSBTdG9yYWdlTWFuYWdlci5yZWFkRnJvbUxTb3JDb29raWUoTENPT0tJRV9OQU1FKTtcblxuICAgICAgICBpZiAodHlwZW9mIGJhY2t1cE1hcCA9PT0gJ3VuZGVmaW5lZCcgfHwgYmFja3VwTWFwID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wcm9jZXNzaW5nQmFja3VwID0gdHJ1ZTtcblxuICAgICAgICBmb3IgKHZhciBpZHggaW4gYmFja3VwTWFwKSB7XG4gICAgICAgICAgaWYgKGJhY2t1cE1hcC5oYXNPd25Qcm9wZXJ0eShpZHgpKSB7XG4gICAgICAgICAgICB2YXIgYmFja3VwRXZlbnQgPSBiYWNrdXBNYXBbaWR4XTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBiYWNrdXBFdmVudC5maXJlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkNilbX2xvZ2dlciQ2XS5kZWJ1ZygnUHJvY2Vzc2luZyBiYWNrdXAgZXZlbnQgOiAnICsgYmFja3VwRXZlbnQucSk7XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBiYWNrdXBFdmVudC5xICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIFJlcXVlc3REaXNwYXRjaGVyLmZpcmVSZXF1ZXN0KGJhY2t1cEV2ZW50LnEpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYmFja3VwRXZlbnQuZmlyZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNhdmVUb0xTb3JDb29raWUoTENPT0tJRV9OQU1FLCBiYWNrdXBNYXApO1xuICAgICAgICB0aGlzLnByb2Nlc3NpbmdCYWNrdXAgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYWRkU3lzdGVtRGF0YVRvT2JqZWN0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkU3lzdGVtRGF0YVRvT2JqZWN0KGRhdGFPYmplY3QsIGlnbm9yZVRyaW0pIHtcbiAgICAgICAgLy8gaWdub3JlIHRyaW0gZm9yIGNocm9tZSBub3RpZmljYXRpb25zOyB1bmRlZmluZWQgZXZlcnl3aGVyZSBlbHNlXG4gICAgICAgIGlmICh0eXBlb2YgaWdub3JlVHJpbSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBkYXRhT2JqZWN0ID0gcmVtb3ZlVW5zdXBwb3J0ZWRDaGFycyhkYXRhT2JqZWN0LCBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ2KVtfbG9nZ2VyJDZdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNPYmplY3RFbXB0eShfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ2KVtfbG9nZ2VyJDZdLnd6cmtFcnJvcikpIHtcbiAgICAgICAgICBkYXRhT2JqZWN0Lnd6cmtfZXJyb3IgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ2KVtfbG9nZ2VyJDZdLnd6cmtFcnJvcjtcbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ2KVtfbG9nZ2VyJDZdLnd6cmtFcnJvciA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0YU9iamVjdC5pZCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWNjb3VudCQyKVtfYWNjb3VudCQyXS5pZDtcblxuICAgICAgICBpZiAoaXNWYWx1ZVZhbGlkKF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfZGV2aWNlJDIpW19kZXZpY2UkMl0uZ2Nvb2tpZSkpIHtcbiAgICAgICAgICBkYXRhT2JqZWN0LmcgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2RldmljZSQyKVtfZGV2aWNlJDJdLmdjb29raWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb2JqID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXNzaW9uJDIpW19zZXNzaW9uJDJdLmdldFNlc3Npb25Db29raWVPYmplY3QoKTtcblxuICAgICAgICBkYXRhT2JqZWN0LnMgPSBvYmouczsgLy8gc2Vzc2lvbiBjb29raWVcblxuICAgICAgICBkYXRhT2JqZWN0LnBnID0gdHlwZW9mIG9iai5wID09PSAndW5kZWZpbmVkJyA/IDEgOiBvYmoucDsgLy8gUGFnZSBjb3VudFxuXG4gICAgICAgIHJldHVybiBkYXRhT2JqZWN0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJhZGRTeXN0ZW1EYXRhVG9Qcm9maWxlT2JqZWN0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkU3lzdGVtRGF0YVRvUHJvZmlsZU9iamVjdChkYXRhT2JqZWN0LCBpZ25vcmVUcmltKSB7XG4gICAgICAgIGlmICghaXNPYmplY3RFbXB0eShfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ2KVtfbG9nZ2VyJDZdLnd6cmtFcnJvcikpIHtcbiAgICAgICAgICBkYXRhT2JqZWN0Lnd6cmtfZXJyb3IgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ2KVtfbG9nZ2VyJDZdLnd6cmtFcnJvcjtcbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ2KVtfbG9nZ2VyJDZdLnd6cmtFcnJvciA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0YU9iamVjdC5pZCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWNjb3VudCQyKVtfYWNjb3VudCQyXS5pZDtcblxuICAgICAgICBpZiAoaXNWYWx1ZVZhbGlkKF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfZGV2aWNlJDIpW19kZXZpY2UkMl0uZ2Nvb2tpZSkpIHtcbiAgICAgICAgICBkYXRhT2JqZWN0LmcgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2RldmljZSQyKVtfZGV2aWNlJDJdLmdjb29raWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb2JqID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXNzaW9uJDIpW19zZXNzaW9uJDJdLmdldFNlc3Npb25Db29raWVPYmplY3QoKTtcblxuICAgICAgICBkYXRhT2JqZWN0LnMgPSBvYmouczsgLy8gc2Vzc2lvbiBjb29raWVcblxuICAgICAgICBkYXRhT2JqZWN0LnBnID0gdHlwZW9mIG9iai5wID09PSAndW5kZWZpbmVkJyA/IDEgOiBvYmoucDsgLy8gUGFnZSBjb3VudFxuXG4gICAgICAgIHJldHVybiBkYXRhT2JqZWN0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJhZGRGbGFnc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEZsYWdzKGRhdGEpIHtcbiAgICAgICAgLy8gY2hlY2sgaWYgY29va2llIHNob3VsZCBiZSBjbGVhcmVkLlxuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2NsZWFyQ29va2llKVtfY2xlYXJDb29raWVdID0gU3RvcmFnZU1hbmFnZXIuZ2V0QW5kQ2xlYXJNZXRhUHJvcChDTEVBUik7XG5cbiAgICAgICAgaWYgKF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfY2xlYXJDb29raWUpW19jbGVhckNvb2tpZV0gIT09IHVuZGVmaW5lZCAmJiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2NsZWFyQ29va2llKVtfY2xlYXJDb29raWVdKSB7XG4gICAgICAgICAgZGF0YS5yYyA9IHRydWU7XG5cbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ2KVtfbG9nZ2VyJDZdLmRlYnVnKCdyZXNldCBjb29raWUgc2VudCBpbiByZXF1ZXN0IGFuZCBjbGVhcmVkIGZyb20gbWV0YSBmb3IgZnV0dXJlIHJlcXVlc3RzLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfaXNQZXJzb25hbGlzYXRpb25BY3RpdmUkNClbX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlJDRdKCkpIHtcbiAgICAgICAgICB2YXIgbGFzdFN5bmNUaW1lID0gU3RvcmFnZU1hbmFnZXIuZ2V0TWV0YVByb3AoJ2xzVGltZScpO1xuICAgICAgICAgIHZhciBleHBpcnlTZWNvbmRzID0gU3RvcmFnZU1hbmFnZXIuZ2V0TWV0YVByb3AoJ2V4VHMnKTsgLy8gZHN5bmMgbm90IGZvdW5kIGluIGxvY2FsIHN0b3JhZ2UgLSBnZXQgZGF0YSBmcm9tIHNlcnZlclxuXG4gICAgICAgICAgaWYgKHR5cGVvZiBsYXN0U3luY1RpbWUgPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBleHBpcnlTZWNvbmRzID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgZGF0YS5kc3luYyA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIG5vdyA9IGdldE5vdygpOyAvLyBsYXN0IHN5bmMgdGltZSBoYXMgZXhwaXJlZCAtIGdldCBmcmVzaCBkYXRhIGZyb20gc2VydmVyXG5cbiAgICAgICAgICBpZiAobGFzdFN5bmNUaW1lICsgZXhwaXJ5U2Vjb25kcyA8IG5vdykge1xuICAgICAgICAgICAgZGF0YS5kc3luYyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IC8vIHNhdmVzIHVybCB0byBiYWNrdXAgY2FjaGUgYW5kIGZpcmVzIHRoZSByZXF1ZXN0XG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2F2ZUFuZEZpcmVSZXF1ZXN0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2F2ZUFuZEZpcmVSZXF1ZXN0KHVybCwgb3ZlcnJpZGUsIHNlbmRPVUxGbGFnKSB7XG4gICAgICAgIHZhciBub3cgPSBnZXROb3coKTtcbiAgICAgICAgdXJsID0gYWRkVG9VUkwodXJsLCAncm4nLCArKyRjdC5nbG9iYWxDYWNoZS5SRVFfTik7XG4gICAgICAgIHZhciBkYXRhID0gdXJsICsgJyZpPScgKyBub3cgKyAnJnNuPScgKyBzZXFObztcbiAgICAgICAgU3RvcmFnZU1hbmFnZXIuYmFja3VwRXZlbnQoZGF0YSwgJGN0Lmdsb2JhbENhY2hlLlJFUV9OLCBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ2KVtfbG9nZ2VyJDZdKTsgLy8gaWYgdGhlcmUgaXMgbm8gb3ZlcnJpZGVcbiAgICAgICAgLy8gYW5kIGFuIE9VTCByZXF1ZXN0IGlzIG5vdCBpbiBwcm9ncmVzc1xuICAgICAgICAvLyB0aGVuIHByb2Nlc3MgdGhlIHJlcXVlc3QgYXMgaXQgaXNcbiAgICAgICAgLy8gZWxzZSBibG9jayB0aGUgcmVxdWVzdFxuXG4gICAgICAgIGlmICgoIW92ZXJyaWRlIHx8IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfY2xlYXJDb29raWUpW19jbGVhckNvb2tpZV0gIT09IHVuZGVmaW5lZCAmJiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2NsZWFyQ29va2llKVtfY2xlYXJDb29raWVdKSAmJiAhd2luZG93LmlzT1VMSW5Qcm9ncmVzcykge1xuICAgICAgICAgIGlmIChub3cgPT09IHJlcXVlc3RUaW1lKSB7XG4gICAgICAgICAgICBzZXFObysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXF1ZXN0VGltZSA9IG5vdztcbiAgICAgICAgICAgIHNlcU5vID0gMDtcbiAgICAgICAgICB9IC8vIHNlY29uZCBhcmd1bWVudCBleHBsaWNpdGx5IHNldCB0byBmYWxzZSBvbmx5IGhlcmVcbiAgICAgICAgICAvLyBhcyB0aGUgYWJvdmUgb3ZlcnJpZGUgcGFyYW1ldGVyIGlzICRjdC5ibG9ja1JlcXVlc3RcbiAgICAgICAgICAvLyB3aGljaCBzaG91bGQgY29udHJvbCBpZiB0aGUgcmVxdWVzdCBzaG91bGQgYmUgZmlyZWQgb3Igbm90XG5cblxuICAgICAgICAgIFJlcXVlc3REaXNwYXRjaGVyLmZpcmVSZXF1ZXN0KGRhdGEsIGZhbHNlLCBzZW5kT1VMRmxhZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkNilbX2xvZ2dlciQ2XS5kZWJ1ZyhcIk5vdCBmaXJlZCBkdWUgdG8gb3ZlcnJpZGUgLSBcIi5jb25jYXQoJGN0LmJsb2NrUmVxdWVzdCwgXCIgb3IgY2xlYXJDb29raWUgLSBcIikuY29uY2F0KF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfY2xlYXJDb29raWUpW19jbGVhckNvb2tpZV0sIFwiIG9yIE9VTCByZXF1ZXN0IGluIHByb2dyZXNzIC0gXCIpLmNvbmNhdCh3aW5kb3cuaXNPVUxJblByb2dyZXNzKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidW5yZWdpc3RlclRva2VuRm9yR3VpZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVucmVnaXN0ZXJUb2tlbkZvckd1aWQoZ2l2ZW5HVUlEKSB7XG4gICAgICAgIHZhciBwYXlsb2FkID0gU3RvcmFnZU1hbmFnZXIucmVhZEZyb21MU29yQ29va2llKFBVU0hfU1VCU0NSSVBUSU9OX0RBVEEpOyAvLyBTZW5kIHVucmVnaXN0ZXIgZXZlbnQgb25seSB3aGVuIHRva2VuIGlzIGF2YWlsYWJsZVxuXG4gICAgICAgIGlmIChwYXlsb2FkKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSB7fTtcbiAgICAgICAgICBkYXRhLnR5cGUgPSAnZGF0YSc7XG5cbiAgICAgICAgICBpZiAoaXNWYWx1ZVZhbGlkKGdpdmVuR1VJRCkpIHtcbiAgICAgICAgICAgIGRhdGEuZyA9IGdpdmVuR1VJRDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkYXRhLmFjdGlvbiA9ICd1bnJlZ2lzdGVyJztcbiAgICAgICAgICBkYXRhLmlkID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9hY2NvdW50JDIpW19hY2NvdW50JDJdLmlkO1xuXG4gICAgICAgICAgdmFyIG9iaiA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfc2Vzc2lvbiQyKVtfc2Vzc2lvbiQyXS5nZXRTZXNzaW9uQ29va2llT2JqZWN0KCk7XG5cbiAgICAgICAgICBkYXRhLnMgPSBvYmouczsgLy8gc2Vzc2lvbiBjb29raWVcblxuICAgICAgICAgIHZhciBjb21wcmVzc2VkRGF0YSA9IGNvbXByZXNzRGF0YShKU09OLnN0cmluZ2lmeShkYXRhKSwgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkNilbX2xvZ2dlciQ2XSk7XG5cbiAgICAgICAgICB2YXIgcGFnZUxvYWRVcmwgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2FjY291bnQkMilbX2FjY291bnQkMl0uZGF0YVBvc3RVUkw7XG5cbiAgICAgICAgICBwYWdlTG9hZFVybCA9IGFkZFRvVVJMKHBhZ2VMb2FkVXJsLCAndHlwZScsICdkYXRhJyk7XG4gICAgICAgICAgcGFnZUxvYWRVcmwgPSBhZGRUb1VSTChwYWdlTG9hZFVybCwgJ2QnLCBjb21wcmVzc2VkRGF0YSk7XG4gICAgICAgICAgUmVxdWVzdERpc3BhdGNoZXIuZmlyZVJlcXVlc3QocGFnZUxvYWRVcmwsIHRydWUpO1xuICAgICAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNhdmVUb0xTb3JDb29raWUoRklSRV9QVVNIX1VOUkVHSVNURVJFRCwgZmFsc2UpO1xuICAgICAgICB9IC8vIFJFR0lTVEVSIFRPS0VOXG5cblxuICAgICAgICB0aGlzLnJlZ2lzdGVyVG9rZW4ocGF5bG9hZCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInJlZ2lzdGVyVG9rZW5cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3RlclRva2VuKHBheWxvYWQpIHtcbiAgICAgICAgaWYgKCFwYXlsb2FkKSByZXR1cm47XG4gICAgICAgIHBheWxvYWQgPSB0aGlzLmFkZFN5c3RlbURhdGFUb09iamVjdChwYXlsb2FkLCB0cnVlKTtcbiAgICAgICAgcGF5bG9hZCA9IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpO1xuXG4gICAgICAgIHZhciBwYWdlTG9hZFVybCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWNjb3VudCQyKVtfYWNjb3VudCQyXS5kYXRhUG9zdFVSTDtcblxuICAgICAgICBwYWdlTG9hZFVybCA9IGFkZFRvVVJMKHBhZ2VMb2FkVXJsLCAndHlwZScsICdkYXRhJyk7XG4gICAgICAgIHBhZ2VMb2FkVXJsID0gYWRkVG9VUkwocGFnZUxvYWRVcmwsICdkJywgY29tcHJlc3NEYXRhKHBheWxvYWQsIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDYpW19sb2dnZXIkNl0pKTtcbiAgICAgICAgUmVxdWVzdERpc3BhdGNoZXIuZmlyZVJlcXVlc3QocGFnZUxvYWRVcmwpOyAvLyBzZXQgaW4gbG9jYWxzdG9yYWdlXG5cbiAgICAgICAgU3RvcmFnZU1hbmFnZXIuc2F2ZShXRUJQVVNIX0xTX0tFWSwgJ29rJyk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInByb2Nlc3NFdmVudFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHByb2Nlc3NFdmVudChkYXRhKSB7XG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWRkVG9Mb2NhbEV2ZW50TWFwKVtfYWRkVG9Mb2NhbEV2ZW50TWFwXShkYXRhLmV2dE5hbWUpO1xuXG4gICAgICAgIGRhdGEgPSB0aGlzLmFkZFN5c3RlbURhdGFUb09iamVjdChkYXRhLCB1bmRlZmluZWQpO1xuICAgICAgICB0aGlzLmFkZEZsYWdzKGRhdGEpO1xuICAgICAgICBkYXRhW0NBTVBfQ09PS0lFX05BTUVdID0gZ2V0Q2FtcGFpZ25PYmpGb3JMYygpO1xuICAgICAgICB2YXIgY29tcHJlc3NlZERhdGEgPSBjb21wcmVzc0RhdGEoSlNPTi5zdHJpbmdpZnkoZGF0YSksIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDYpW19sb2dnZXIkNl0pO1xuXG4gICAgICAgIHZhciBwYWdlTG9hZFVybCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWNjb3VudCQyKVtfYWNjb3VudCQyXS5kYXRhUG9zdFVSTDtcblxuICAgICAgICBwYWdlTG9hZFVybCA9IGFkZFRvVVJMKHBhZ2VMb2FkVXJsLCAndHlwZScsIEVWVF9QVVNIKTtcbiAgICAgICAgcGFnZUxvYWRVcmwgPSBhZGRUb1VSTChwYWdlTG9hZFVybCwgJ2QnLCBjb21wcmVzc2VkRGF0YSk7XG4gICAgICAgIHRoaXMuc2F2ZUFuZEZpcmVSZXF1ZXN0KHBhZ2VMb2FkVXJsLCAkY3QuYmxvY2tSZXF1ZXN0KTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gUmVxdWVzdE1hbmFnZXI7XG4gIH0oKTtcblxuICB2YXIgX2FkZFRvTG9jYWxFdmVudE1hcDIgPSBmdW5jdGlvbiBfYWRkVG9Mb2NhbEV2ZW50TWFwMihldnROYW1lKSB7XG4gICAgaWYgKFN0b3JhZ2VNYW5hZ2VyLl9pc0xvY2FsU3RvcmFnZVN1cHBvcnRlZCgpKSB7XG4gICAgICBpZiAodHlwZW9mICRjdC5nbG9iYWxFdmVudHNNYXAgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICRjdC5nbG9iYWxFdmVudHNNYXAgPSBTdG9yYWdlTWFuYWdlci5yZWFkRnJvbUxTb3JDb29raWUoRVZfQ09PS0lFKTtcblxuICAgICAgICBpZiAodHlwZW9mICRjdC5nbG9iYWxFdmVudHNNYXAgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgJGN0Lmdsb2JhbEV2ZW50c01hcCA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBub3dUcyA9IGdldE5vdygpO1xuICAgICAgdmFyIGV2dERldGFpbCA9ICRjdC5nbG9iYWxFdmVudHNNYXBbZXZ0TmFtZV07XG5cbiAgICAgIGlmICh0eXBlb2YgZXZ0RGV0YWlsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBldnREZXRhaWxbMl0gPSBub3dUcztcbiAgICAgICAgZXZ0RGV0YWlsWzBdKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBldnREZXRhaWwgPSBbXTtcbiAgICAgICAgZXZ0RGV0YWlsLnB1c2goMSk7XG4gICAgICAgIGV2dERldGFpbC5wdXNoKG5vd1RzKTtcbiAgICAgICAgZXZ0RGV0YWlsLnB1c2gobm93VHMpO1xuICAgICAgfVxuXG4gICAgICAkY3QuZ2xvYmFsRXZlbnRzTWFwW2V2dE5hbWVdID0gZXZ0RGV0YWlsO1xuICAgICAgU3RvcmFnZU1hbmFnZXIuc2F2ZVRvTFNvckNvb2tpZShFVl9DT09LSUUsICRjdC5nbG9iYWxFdmVudHNNYXApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgX3JlcXVlc3QkNCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwicmVxdWVzdFwiKTtcblxuICB2YXIgX2FjY291bnQkMyA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiYWNjb3VudFwiKTtcblxuICB2YXIgX29sZFZhbHVlcyQzID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJvbGRWYWx1ZXNcIik7XG5cbiAgdmFyIF9sb2dnZXIkNyA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwibG9nZ2VyXCIpO1xuXG4gIHZhciBfcHJvY2Vzc1ByaXZhY3lBcnJheSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwicHJvY2Vzc1ByaXZhY3lBcnJheVwiKTtcblxuICB2YXIgUHJpdmFjeSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0FycmF5KSB7XG4gICAgX2luaGVyaXRzKFByaXZhY3ksIF9BcnJheSk7XG5cbiAgICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFByaXZhY3kpO1xuXG4gICAgZnVuY3Rpb24gUHJpdmFjeShfcmVmLCB2YWx1ZXMpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgdmFyIHJlcXVlc3QgPSBfcmVmLnJlcXVlc3QsXG4gICAgICAgICAgYWNjb3VudCA9IF9yZWYuYWNjb3VudCxcbiAgICAgICAgICBsb2dnZXIgPSBfcmVmLmxvZ2dlcjtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByaXZhY3kpO1xuXG4gICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfcHJvY2Vzc1ByaXZhY3lBcnJheSwge1xuICAgICAgICB2YWx1ZTogX3Byb2Nlc3NQcml2YWN5QXJyYXkyXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX3JlcXVlc3QkNCwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF9hY2NvdW50JDMsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfb2xkVmFsdWVzJDMsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfbG9nZ2VyJDcsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfbG9nZ2VyJDcpW19sb2dnZXIkN10gPSBsb2dnZXI7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF9yZXF1ZXN0JDQpW19yZXF1ZXN0JDRdID0gcmVxdWVzdDtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX2FjY291bnQkMylbX2FjY291bnQkM10gPSBhY2NvdW50O1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfb2xkVmFsdWVzJDMpW19vbGRWYWx1ZXMkM10gPSB2YWx1ZXM7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFByaXZhY3ksIFt7XG4gICAgICBrZXk6IFwicHVzaFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHB1c2goKSB7XG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBwcml2YWN5QXJyID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgIHByaXZhY3lBcnJbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJGN0LmlzUHJpdmFjeUFyclB1c2hlZCkge1xuICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcHJvY2Vzc1ByaXZhY3lBcnJheSlbX3Byb2Nlc3NQcml2YWN5QXJyYXldKCRjdC5wcml2YWN5QXJyYXkubGVuZ3RoID4gMCA/ICRjdC5wcml2YWN5QXJyYXkgOiBwcml2YWN5QXJyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgXyRjdCRwcml2YWN5QXJyYXk7XG5cbiAgICAgICAgICAoXyRjdCRwcml2YWN5QXJyYXkgPSAkY3QucHJpdmFjeUFycmF5KS5wdXNoLmFwcGx5KF8kY3QkcHJpdmFjeUFycmF5LCBwcml2YWN5QXJyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfcHJvY2Vzc09sZFZhbHVlc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9wcm9jZXNzT2xkVmFsdWVzKCkge1xuICAgICAgICBpZiAoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9vbGRWYWx1ZXMkMylbX29sZFZhbHVlcyQzXSkge1xuICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcHJvY2Vzc1ByaXZhY3lBcnJheSlbX3Byb2Nlc3NQcml2YWN5QXJyYXldKF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfb2xkVmFsdWVzJDMpW19vbGRWYWx1ZXMkM10pO1xuICAgICAgICB9XG5cbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9vbGRWYWx1ZXMkMylbX29sZFZhbHVlcyQzXSA9IG51bGw7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFByaXZhY3k7XG4gIH0oIC8qI19fUFVSRV9fKi9fd3JhcE5hdGl2ZVN1cGVyKEFycmF5KSk7XG5cbiAgdmFyIF9wcm9jZXNzUHJpdmFjeUFycmF5MiA9IGZ1bmN0aW9uIF9wcm9jZXNzUHJpdmFjeUFycmF5Mihwcml2YWN5QXJyKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocHJpdmFjeUFycikgJiYgcHJpdmFjeUFyci5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgcHJpdmFjeU9iaiA9IHByaXZhY3lBcnIucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBjdXJyKSB7XG4gICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgcHJldiksIGN1cnIpO1xuICAgICAgfSwge30pO1xuICAgICAgdmFyIGRhdGEgPSB7fTtcbiAgICAgIHZhciBwcm9maWxlT2JqID0ge307XG4gICAgICB2YXIgb3B0T3V0ID0gZmFsc2U7XG5cbiAgICAgIGlmIChwcml2YWN5T2JqLmhhc093blByb3BlcnR5KE9QVE9VVF9LRVkpKSB7XG4gICAgICAgIG9wdE91dCA9IHByaXZhY3lPYmpbT1BUT1VUX0tFWV07XG5cbiAgICAgICAgaWYgKHR5cGVvZiBvcHRPdXQgPT09ICdib29sZWFuJykge1xuICAgICAgICAgIHByb2ZpbGVPYmpbQ1RfT1BUT1VUX0tFWV0gPSBvcHRPdXQ7IC8vIHNob3VsZCBiZSB0cnVlIHdoZW4gdXNlciB3YW50cyB0byBvcHQgaW5cblxuICAgICAgICAgICRjdC5pc09wdEluUmVxdWVzdCA9ICFvcHRPdXQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHByaXZhY3lPYmouaGFzT3duUHJvcGVydHkoVVNFSVBfS0VZKSkge1xuICAgICAgICB2YXIgdXNlSVAgPSBwcml2YWN5T2JqW1VTRUlQX0tFWV07XG4gICAgICAgIHZhciBzaG91bGRVc2VJUCA9IHR5cGVvZiB1c2VJUCA9PT0gJ2Jvb2xlYW4nID8gdXNlSVAgOiBmYWxzZTtcbiAgICAgICAgU3RvcmFnZU1hbmFnZXIuc2V0TWV0YVByb3AoVVNFSVBfS0VZLCBzaG91bGRVc2VJUCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNPYmplY3RFbXB0eShwcm9maWxlT2JqKSkge1xuICAgICAgICBkYXRhLnR5cGUgPSAncHJvZmlsZSc7XG4gICAgICAgIGRhdGEucHJvZmlsZSA9IHByb2ZpbGVPYmo7XG4gICAgICAgIGRhdGEgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlcXVlc3QkNClbX3JlcXVlc3QkNF0uYWRkU3lzdGVtRGF0YVRvT2JqZWN0KGRhdGEsIHVuZGVmaW5lZCk7XG4gICAgICAgIHZhciBjb21wcmVzc2VkRGF0YSA9IGNvbXByZXNzRGF0YShKU09OLnN0cmluZ2lmeShkYXRhKSwgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkNylbX2xvZ2dlciQ3XSk7XG5cbiAgICAgICAgdmFyIHBhZ2VMb2FkVXJsID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9hY2NvdW50JDMpW19hY2NvdW50JDNdLmRhdGFQb3N0VVJMO1xuXG4gICAgICAgIHBhZ2VMb2FkVXJsID0gYWRkVG9VUkwocGFnZUxvYWRVcmwsICd0eXBlJywgRVZUX1BVU0gpO1xuICAgICAgICBwYWdlTG9hZFVybCA9IGFkZFRvVVJMKHBhZ2VMb2FkVXJsLCAnZCcsIGNvbXByZXNzZWREYXRhKTtcbiAgICAgICAgcGFnZUxvYWRVcmwgPSBhZGRUb1VSTChwYWdlTG9hZFVybCwgT1BUT1VUX0tFWSwgb3B0T3V0ID8gJ3RydWUnIDogJ2ZhbHNlJyk7XG5cbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0JDQpW19yZXF1ZXN0JDRdLnNhdmVBbmRGaXJlUmVxdWVzdChwYWdlTG9hZFVybCwgJGN0LmJsb2NrUmVxdWVzdCk7XG5cbiAgICAgICAgcHJpdmFjeUFyci5zcGxpY2UoMCwgcHJpdmFjeUFyci5sZW5ndGgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgX29sZFZhbHVlcyQ0ID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJvbGRWYWx1ZXNcIik7XG5cbiAgdmFyIF9sb2dnZXIkOCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwibG9nZ2VyXCIpO1xuXG4gIHZhciBfcmVxdWVzdCQ1ID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJyZXF1ZXN0XCIpO1xuXG4gIHZhciBfYWNjb3VudCQ0ID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJhY2NvdW50XCIpO1xuXG4gIHZhciBfd2l6QWxlcnRKU1BhdGggPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcIndpekFsZXJ0SlNQYXRoXCIpO1xuXG4gIHZhciBfZmNtUHVibGljS2V5ID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJmY21QdWJsaWNLZXlcIik7XG5cbiAgdmFyIF9zZXRVcFdlYlB1c2ggPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInNldFVwV2ViUHVzaFwiKTtcblxuICB2YXIgX3NldFVwV2ViUHVzaE5vdGlmaWNhdGlvbnMgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInNldFVwV2ViUHVzaE5vdGlmaWNhdGlvbnNcIik7XG5cbiAgdmFyIF9zZXRBcHBsaWNhdGlvblNlcnZlcktleSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwic2V0QXBwbGljYXRpb25TZXJ2ZXJLZXlcIik7XG5cbiAgdmFyIF9zZXRVcFNhZmFyaU5vdGlmaWNhdGlvbnMgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInNldFVwU2FmYXJpTm90aWZpY2F0aW9uc1wiKTtcblxuICB2YXIgX3NldFVwQ2hyb21lRmlyZWZveE5vdGlmaWNhdGlvbnMgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInNldFVwQ2hyb21lRmlyZWZveE5vdGlmaWNhdGlvbnNcIik7XG5cbiAgdmFyIF9hZGRXaXpBbGVydEpTID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJhZGRXaXpBbGVydEpTXCIpO1xuXG4gIHZhciBfcmVtb3ZlV2l6QWxlcnRKUyA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwicmVtb3ZlV2l6QWxlcnRKU1wiKTtcblxuICB2YXIgX2hhbmRsZU5vdGlmaWNhdGlvblJlZ2lzdHJhdGlvbiA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiaGFuZGxlTm90aWZpY2F0aW9uUmVnaXN0cmF0aW9uXCIpO1xuXG4gIHZhciBOb3RpZmljYXRpb25IYW5kbGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQXJyYXkpIHtcbiAgICBfaW5oZXJpdHMoTm90aWZpY2F0aW9uSGFuZGxlciwgX0FycmF5KTtcblxuICAgIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoTm90aWZpY2F0aW9uSGFuZGxlcik7XG5cbiAgICBmdW5jdGlvbiBOb3RpZmljYXRpb25IYW5kbGVyKF9yZWYsIHZhbHVlcykge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICB2YXIgbG9nZ2VyID0gX3JlZi5sb2dnZXIsXG4gICAgICAgICAgc2Vzc2lvbiA9IF9yZWYuc2Vzc2lvbixcbiAgICAgICAgICByZXF1ZXN0ID0gX3JlZi5yZXF1ZXN0LFxuICAgICAgICAgIGFjY291bnQgPSBfcmVmLmFjY291bnQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOb3RpZmljYXRpb25IYW5kbGVyKTtcblxuICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX2hhbmRsZU5vdGlmaWNhdGlvblJlZ2lzdHJhdGlvbiwge1xuICAgICAgICB2YWx1ZTogX2hhbmRsZU5vdGlmaWNhdGlvblJlZ2lzdHJhdGlvbjJcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfcmVtb3ZlV2l6QWxlcnRKUywge1xuICAgICAgICB2YWx1ZTogX3JlbW92ZVdpekFsZXJ0SlMyXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX2FkZFdpekFsZXJ0SlMsIHtcbiAgICAgICAgdmFsdWU6IF9hZGRXaXpBbGVydEpTMlxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF9zZXRVcENocm9tZUZpcmVmb3hOb3RpZmljYXRpb25zLCB7XG4gICAgICAgIHZhbHVlOiBfc2V0VXBDaHJvbWVGaXJlZm94Tm90aWZpY2F0aW9uczJcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfc2V0VXBTYWZhcmlOb3RpZmljYXRpb25zLCB7XG4gICAgICAgIHZhbHVlOiBfc2V0VXBTYWZhcmlOb3RpZmljYXRpb25zMlxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF9zZXRBcHBsaWNhdGlvblNlcnZlcktleSwge1xuICAgICAgICB2YWx1ZTogX3NldEFwcGxpY2F0aW9uU2VydmVyS2V5MlxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF9zZXRVcFdlYlB1c2hOb3RpZmljYXRpb25zLCB7XG4gICAgICAgIHZhbHVlOiBfc2V0VXBXZWJQdXNoTm90aWZpY2F0aW9uczJcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfc2V0VXBXZWJQdXNoLCB7XG4gICAgICAgIHZhbHVlOiBfc2V0VXBXZWJQdXNoMlxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF9vbGRWYWx1ZXMkNCwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF9sb2dnZXIkOCwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF9yZXF1ZXN0JDUsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfYWNjb3VudCQ0LCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX3dpekFsZXJ0SlNQYXRoLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX2ZjbVB1YmxpY0tleSwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF93aXpBbGVydEpTUGF0aClbX3dpekFsZXJ0SlNQYXRoXSA9ICdodHRwczovL2QycjF5cDJ3N2JieTJ1LmNsb3VkZnJvbnQubmV0L2pzL3d6cmtfZGlhbG9nLm1pbi5qcyc7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF9mY21QdWJsaWNLZXkpW19mY21QdWJsaWNLZXldID0gbnVsbDtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX29sZFZhbHVlcyQ0KVtfb2xkVmFsdWVzJDRdID0gdmFsdWVzO1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfbG9nZ2VyJDgpW19sb2dnZXIkOF0gPSBsb2dnZXI7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF9yZXF1ZXN0JDUpW19yZXF1ZXN0JDVdID0gcmVxdWVzdDtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX2FjY291bnQkNClbX2FjY291bnQkNF0gPSBhY2NvdW50O1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhOb3RpZmljYXRpb25IYW5kbGVyLCBbe1xuICAgICAga2V5OiBcInB1c2hcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBwdXNoKCkge1xuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZGlzcGxheUFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgZGlzcGxheUFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cblxuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3NldFVwV2ViUHVzaClbX3NldFVwV2ViUHVzaF0oZGlzcGxheUFyZ3MpO1xuXG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfcHJvY2Vzc09sZFZhbHVlc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9wcm9jZXNzT2xkVmFsdWVzKCkge1xuICAgICAgICBpZiAoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9vbGRWYWx1ZXMkNClbX29sZFZhbHVlcyQ0XSkge1xuICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfc2V0VXBXZWJQdXNoKVtfc2V0VXBXZWJQdXNoXShfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX29sZFZhbHVlcyQ0KVtfb2xkVmFsdWVzJDRdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfb2xkVmFsdWVzJDQpW19vbGRWYWx1ZXMkNF0gPSBudWxsO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfZW5hYmxlV2ViUHVzaFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9lbmFibGVXZWJQdXNoKGVuYWJsZWQsIGFwcGxpY2F0aW9uU2VydmVyS2V5KSB7XG4gICAgICAgICRjdC53ZWJQdXNoRW5hYmxlZCA9IGVuYWJsZWQ7XG5cbiAgICAgICAgaWYgKGFwcGxpY2F0aW9uU2VydmVyS2V5ICE9IG51bGwpIHtcbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3NldEFwcGxpY2F0aW9uU2VydmVyS2V5KVtfc2V0QXBwbGljYXRpb25TZXJ2ZXJLZXldKGFwcGxpY2F0aW9uU2VydmVyS2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkY3Qud2ViUHVzaEVuYWJsZWQgJiYgJGN0Lm5vdGlmQXBpLm5vdGlmRW5hYmxlZEZyb21BcGkpIHtcbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2hhbmRsZU5vdGlmaWNhdGlvblJlZ2lzdHJhdGlvbilbX2hhbmRsZU5vdGlmaWNhdGlvblJlZ2lzdHJhdGlvbl0oJGN0Lm5vdGlmQXBpLmRpc3BsYXlBcmdzKTtcbiAgICAgICAgfSBlbHNlIGlmICghJGN0LndlYlB1c2hFbmFibGVkICYmICRjdC5ub3RpZkFwaS5ub3RpZkVuYWJsZWRGcm9tQXBpKSB7XG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkOClbX2xvZ2dlciQ4XS5lcnJvcignRW5zdXJlIHRoYXQgd2ViIHB1c2ggbm90aWZpY2F0aW9ucyBhcmUgZnVsbHkgZW5hYmxlZCBhbmQgaW50ZWdyYXRlZCBiZWZvcmUgcmVxdWVzdGluZyB0aGVtJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTm90aWZpY2F0aW9uSGFuZGxlcjtcbiAgfSggLyojX19QVVJFX18qL193cmFwTmF0aXZlU3VwZXIoQXJyYXkpKTtcblxuICB2YXIgX3NldFVwV2ViUHVzaDIgPSBmdW5jdGlvbiBfc2V0VXBXZWJQdXNoMihkaXNwbGF5QXJncykge1xuICAgIGlmICgkY3Qud2ViUHVzaEVuYWJsZWQgJiYgZGlzcGxheUFyZ3MubGVuZ3RoID4gMCkge1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9oYW5kbGVOb3RpZmljYXRpb25SZWdpc3RyYXRpb24pW19oYW5kbGVOb3RpZmljYXRpb25SZWdpc3RyYXRpb25dKGRpc3BsYXlBcmdzKTtcbiAgICB9IGVsc2UgaWYgKCRjdC53ZWJQdXNoRW5hYmxlZCA9PSBudWxsICYmIGRpc3BsYXlBcmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICRjdC5ub3RpZkFwaS5ub3RpZkVuYWJsZWRGcm9tQXBpID0gdHJ1ZTtcbiAgICAgICRjdC5ub3RpZkFwaS5kaXNwbGF5QXJncyA9IGRpc3BsYXlBcmdzLnNsaWNlKCk7XG4gICAgfSBlbHNlIGlmICgkY3Qud2ViUHVzaEVuYWJsZWQgPT09IGZhbHNlICYmIGRpc3BsYXlBcmdzLmxlbmd0aCA+IDApIHtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDgpW19sb2dnZXIkOF0uZXJyb3IoJ01ha2Ugc3VyZSBwdXNoIG5vdGlmaWNhdGlvbnMgYXJlIGZ1bGx5IGVuYWJsZWQgYW5kIGludGVncmF0ZWQnKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIF9zZXRVcFdlYlB1c2hOb3RpZmljYXRpb25zMiA9IGZ1bmN0aW9uIF9zZXRVcFdlYlB1c2hOb3RpZmljYXRpb25zMihzdWJzY3JpcHRpb25DYWxsYmFjaywgc2VydmljZVdvcmtlclBhdGgsIGFwbnNXZWJQdXNoSWQsIGFwbnNTZXJ2aWNlVXJsKSB7XG4gICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lJykgIT09IC0xIHx8IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpICE9PSAtMSkge1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXRVcENocm9tZUZpcmVmb3hOb3RpZmljYXRpb25zKVtfc2V0VXBDaHJvbWVGaXJlZm94Tm90aWZpY2F0aW9uc10oc3Vic2NyaXB0aW9uQ2FsbGJhY2ssIHNlcnZpY2VXb3JrZXJQYXRoKTtcbiAgICB9IGVsc2UgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignU2FmYXJpJykgIT09IC0xKSB7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3NldFVwU2FmYXJpTm90aWZpY2F0aW9ucylbX3NldFVwU2FmYXJpTm90aWZpY2F0aW9uc10oc3Vic2NyaXB0aW9uQ2FsbGJhY2ssIGFwbnNXZWJQdXNoSWQsIGFwbnNTZXJ2aWNlVXJsKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIF9zZXRBcHBsaWNhdGlvblNlcnZlcktleTIgPSBmdW5jdGlvbiBfc2V0QXBwbGljYXRpb25TZXJ2ZXJLZXkyKGFwcGxpY2F0aW9uU2VydmVyS2V5KSB7XG4gICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9mY21QdWJsaWNLZXkpW19mY21QdWJsaWNLZXldID0gYXBwbGljYXRpb25TZXJ2ZXJLZXk7XG4gIH07XG5cbiAgdmFyIF9zZXRVcFNhZmFyaU5vdGlmaWNhdGlvbnMyID0gZnVuY3Rpb24gX3NldFVwU2FmYXJpTm90aWZpY2F0aW9uczIoc3Vic2NyaXB0aW9uQ2FsbGJhY2ssIGFwbnNXZWJQdXNoSWQsIGFwbnNTZXJ2aWNlVXJsKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAvLyBlbnN1cmUgdGhhdCBwcm9wZXIgYXJndW1lbnRzIGFyZSBwYXNzZWRcbiAgICBpZiAodHlwZW9mIGFwbnNXZWJQdXNoSWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ4KVtfbG9nZ2VyJDhdLmVycm9yKCdFbnN1cmUgdGhhdCBBUE5TIFdlYiBQdXNoIElEIGlzIHN1cHBsaWVkJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhcG5zU2VydmljZVVybCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDgpW19sb2dnZXIkOF0uZXJyb3IoJ0Vuc3VyZSB0aGF0IEFQTlMgV2ViIFB1c2ggc2VydmljZSBwYXRoIGlzIHN1cHBsaWVkJyk7XG4gICAgfVxuXG4gICAgaWYgKCdzYWZhcmknIGluIHdpbmRvdyAmJiAncHVzaE5vdGlmaWNhdGlvbicgaW4gd2luZG93LnNhZmFyaSkge1xuICAgICAgd2luZG93LnNhZmFyaS5wdXNoTm90aWZpY2F0aW9uLnJlcXVlc3RQZXJtaXNzaW9uKGFwbnNTZXJ2aWNlVXJsLCBhcG5zV2ViUHVzaElkLCB7fSwgZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgICBpZiAoc3Vic2NyaXB0aW9uLnBlcm1pc3Npb24gPT09ICdncmFudGVkJykge1xuICAgICAgICAgIHZhciBzdWJzY3JpcHRpb25EYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzdWJzY3JpcHRpb24pKTtcbiAgICAgICAgICBzdWJzY3JpcHRpb25EYXRhLmVuZHBvaW50ID0gc3Vic2NyaXB0aW9uLmRldmljZVRva2VuO1xuICAgICAgICAgIHN1YnNjcmlwdGlvbkRhdGEuYnJvd3NlciA9ICdTYWZhcmknO1xuICAgICAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNhdmVUb0xTb3JDb29raWUoUFVTSF9TVUJTQ1JJUFRJT05fREFUQSwgc3Vic2NyaXB0aW9uRGF0YSk7XG5cbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX3RoaXMyLCBfcmVxdWVzdCQ1KVtfcmVxdWVzdCQ1XS5yZWdpc3RlclRva2VuKHN1YnNjcmlwdGlvbkRhdGEpO1xuXG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKF90aGlzMiwgX2xvZ2dlciQ4KVtfbG9nZ2VyJDhdLmluZm8oJ1NhZmFyaSBXZWIgUHVzaCByZWdpc3RlcmVkLiBEZXZpY2UgVG9rZW46ICcgKyBzdWJzY3JpcHRpb24uZGV2aWNlVG9rZW4pO1xuICAgICAgICB9IGVsc2UgaWYgKHN1YnNjcmlwdGlvbi5wZXJtaXNzaW9uID09PSAnZGVuaWVkJykge1xuICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZShfdGhpczIsIF9sb2dnZXIkOClbX2xvZ2dlciQ4XS5pbmZvKCdFcnJvciBzdWJzY3JpYmluZyB0byBTYWZhcmkgd2ViIHB1c2gnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBfc2V0VXBDaHJvbWVGaXJlZm94Tm90aWZpY2F0aW9uczIgPSBmdW5jdGlvbiBfc2V0VXBDaHJvbWVGaXJlZm94Tm90aWZpY2F0aW9uczIoc3Vic2NyaXB0aW9uQ2FsbGJhY2ssIHNlcnZpY2VXb3JrZXJQYXRoKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgcmVnaXN0cmF0aW9uU2NvcGUgPSAnJztcblxuICAgIGlmICgnc2VydmljZVdvcmtlcicgaW4gbmF2aWdhdG9yKSB7XG4gICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3RlcihzZXJ2aWNlV29ya2VyUGF0aCkudGhlbihmdW5jdGlvbiAocmVnaXN0cmF0aW9uKSB7XG4gICAgICAgIGlmICh0eXBlb2YgX193enJrX2FjY291bnRfaWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICAgIC8vIHNob3BpZnkgYWNjb3VudHMgLCBzaW5jZSB0aGUgc2VydmljZSB3b3JrZXIgaXMgbm90IGF0IHJvb3QsIHNlcnZpY2VXb3JrZXIucmVhZHkgaXMgbmV2ZXIgcmVzb2x2ZWQuXG4gICAgICAgICAgLy8gaGVuY2UgYWRkIGEgdGltZW91dCBhbmQgaG9wZSBzZXJ2aWNlV3Jva2VyIGlzIHJlYWR5IHdpdGhpbiB0aGF0IHRpbWUuXG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHJlZ2lzdHJhdGlvbik7XG4gICAgICAgICAgICB9LCA1MDAwKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdHJhdGlvblNjb3BlID0gcmVnaXN0cmF0aW9uLnNjb3BlOyAvLyBJRiBTRVJWSUNFIFdPUktFUiBJUyBBVCBST09ULCBSRVRVUk4gVEhFIFJFQURZIFBST01JU0VcbiAgICAgICAgLy8gRUxTRSBJRiBDSFJPTUUgUkVUVVJOIFBST01JU0UgQUZURVIgNSBTRUNPTkRTXG4gICAgICAgIC8vIE9SIGdldFJlZ2lzdHJhdGlvbnMgUFJPTUlTRSBJRiBJVFMgRklSRUZPWFxuXG4gICAgICAgIHZhciByb290RGlyUmVnZXggPSAvXihcXC4/KShcXC8/KShbXi9dKikuanMkLztcbiAgICAgICAgdmFyIGlzU2VydmljZVdvcmtlckF0Um9vdCA9IHJvb3REaXJSZWdleC50ZXN0KHNlcnZpY2VXb3JrZXJQYXRoKTtcblxuICAgICAgICBpZiAoaXNTZXJ2aWNlV29ya2VyQXRSb290KSB7XG4gICAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlYWR5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZScpICE9PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShyZWdpc3RyYXRpb24pO1xuICAgICAgICAgICAgICB9LCA1MDAwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuZ2V0UmVnaXN0cmF0aW9ucygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSkudGhlbihmdW5jdGlvbiAoc2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbikge1xuICAgICAgICAvLyBJVFMgQU4gQVJSQVkgSU4gQ0FTRSBPRiBGSVJFRk9YLCBTTyBVU0UgVEhFIFJFR0lTVFJBVElPTiBXSVRIIFBST1BFUiBTQ09QRVxuICAgICAgICBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgIT09IC0xICYmIEFycmF5LmlzQXJyYXkoc2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbikpIHtcbiAgICAgICAgICBzZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uID0gc2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbi5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIHJldHVybiBpLnNjb3BlID09PSByZWdpc3RyYXRpb25TY29wZTtcbiAgICAgICAgICB9KVswXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdWJzY3JpYmVPYmogPSB7XG4gICAgICAgICAgdXNlclZpc2libGVPbmx5OiB0cnVlXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZShfdGhpczMsIF9mY21QdWJsaWNLZXkpW19mY21QdWJsaWNLZXldICE9IG51bGwpIHtcbiAgICAgICAgICBzdWJzY3JpYmVPYmouYXBwbGljYXRpb25TZXJ2ZXJLZXkgPSB1cmxCYXNlNjRUb1VpbnQ4QXJyYXkoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKF90aGlzMywgX2ZjbVB1YmxpY0tleSlbX2ZjbVB1YmxpY0tleV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbi5wdXNoTWFuYWdlci5zdWJzY3JpYmUoc3Vic2NyaWJlT2JqKS50aGVuKGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX3RoaXMzLCBfbG9nZ2VyJDgpW19sb2dnZXIkOF0uaW5mbygnU2VydmljZSBXb3JrZXIgcmVnaXN0ZXJlZC4gRW5kcG9pbnQ6ICcgKyBzdWJzY3JpcHRpb24uZW5kcG9pbnQpOyAvLyBjb252ZXJ0IHRoZSBzdWJzY3JpcHRpb24ga2V5cyB0byBzdHJpbmdzOyB0aGlzIHNldHMgaXQgdXAgbmljZWx5IGZvciBwdXNoaW5nIHRvIExDXG5cblxuICAgICAgICAgIHZhciBzdWJzY3JpcHRpb25EYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzdWJzY3JpcHRpb24pKTsgLy8gcmVtb3ZlIHRoZSBjb21tb24gY2hyb21lL2ZpcmVmb3ggZW5kcG9pbnQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgdG9rZW5cblxuICAgICAgICAgIGlmIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZScpICE9PSAtMSkge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uRGF0YS5lbmRwb2ludCA9IHN1YnNjcmlwdGlvbkRhdGEuZW5kcG9pbnQuc3BsaXQoJy8nKS5wb3AoKTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbkRhdGEuYnJvd3NlciA9ICdDaHJvbWUnO1xuICAgICAgICAgIH0gZWxzZSBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgIT09IC0xKSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25EYXRhLmVuZHBvaW50ID0gc3Vic2NyaXB0aW9uRGF0YS5lbmRwb2ludC5zcGxpdCgnLycpLnBvcCgpO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uRGF0YS5icm93c2VyID0gJ0ZpcmVmb3gnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNhdmVUb0xTb3JDb29raWUoUFVTSF9TVUJTQ1JJUFRJT05fREFUQSwgc3Vic2NyaXB0aW9uRGF0YSk7IC8vIHZhciBzaG91bGRTZW5kVG9rZW4gPSB0eXBlb2Ygc2Vzc2lvbk9ialsncCddID09PSBTVFJJTkdfQ09OU1RBTlRTLlVOREVGSU5FRCB8fCBzZXNzaW9uT2JqWydwJ10gPT09IDFcblxuICAgICAgICAgIHtcbiAgICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZShfdGhpczMsIF9yZXF1ZXN0JDUpW19yZXF1ZXN0JDVdLnJlZ2lzdGVyVG9rZW4oc3Vic2NyaXB0aW9uRGF0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHR5cGVvZiBzdWJzY3JpcHRpb25DYWxsYmFjayAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHN1YnNjcmlwdGlvbkNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25DYWxsYmFjaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKF90aGlzMywgX2xvZ2dlciQ4KVtfbG9nZ2VyJDhdLmVycm9yKCdFcnJvciBzdWJzY3JpYmluZzogJyArIGVycm9yKTsgLy8gdW5zdWJzY3JpYmUgZnJvbSB3ZWJwdXNoIGlmIGVycm9yXG5cblxuICAgICAgICAgIHNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24ucHVzaE1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uKCkudGhlbihmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpLnRoZW4oZnVuY3Rpb24gKHN1Y2Nlc3NmdWwpIHtcbiAgICAgICAgICAgICAgICAvLyBZb3UndmUgc3VjY2Vzc2Z1bGx5IHVuc3Vic2NyaWJlZFxuICAgICAgICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZShfdGhpczMsIF9sb2dnZXIkOClbX2xvZ2dlciQ4XS5pbmZvKCdVbnN1YnNjcmlwdGlvbiBzdWNjZXNzZnVsJyk7XG4gICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgLy8gVW5zdWJzY3JpcHRpb24gZmFpbGVkXG4gICAgICAgICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKF90aGlzMywgX2xvZ2dlciQ4KVtfbG9nZ2VyJDhdLmVycm9yKCdFcnJvciB1bnN1YnNjcmliaW5nOiAnICsgZSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKF90aGlzMywgX2xvZ2dlciQ4KVtfbG9nZ2VyJDhdLmVycm9yKCdlcnJvciByZWdpc3RlcmluZyBzZXJ2aWNlIHdvcmtlcjogJyArIGVycik7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIF9hZGRXaXpBbGVydEpTMiA9IGZ1bmN0aW9uIF9hZGRXaXpBbGVydEpTMigpIHtcbiAgICB2YXIgc2NyaXB0VGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgc2NyaXB0VGFnLnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0L2phdmFzY3JpcHQnKTtcbiAgICBzY3JpcHRUYWcuc2V0QXR0cmlidXRlKCdpZCcsICd3enJrLWFsZXJ0LWpzJyk7XG4gICAgc2NyaXB0VGFnLnNldEF0dHJpYnV0ZSgnc3JjJywgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF93aXpBbGVydEpTUGF0aClbX3dpekFsZXJ0SlNQYXRoXSk7IC8vIGFkZCB0aGUgc2NyaXB0IHRhZyB0byB0aGUgZW5kIG9mIHRoZSBib2R5XG5cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdLmFwcGVuZENoaWxkKHNjcmlwdFRhZyk7XG4gICAgcmV0dXJuIHNjcmlwdFRhZztcbiAgfTtcblxuICB2YXIgX3JlbW92ZVdpekFsZXJ0SlMyID0gZnVuY3Rpb24gX3JlbW92ZVdpekFsZXJ0SlMyKCkge1xuICAgIHZhciBzY3JpcHRUYWcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd3pyay1hbGVydC1qcycpO1xuICAgIHNjcmlwdFRhZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdFRhZyk7XG4gIH07XG5cbiAgdmFyIF9oYW5kbGVOb3RpZmljYXRpb25SZWdpc3RyYXRpb24yID0gZnVuY3Rpb24gX2hhbmRsZU5vdGlmaWNhdGlvblJlZ2lzdHJhdGlvbjIoZGlzcGxheUFyZ3MpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIC8vIG1ha2Ugc3VyZSBldmVyeXRoaW5nIGlzIHNwZWNpZmllZFxuICAgIHZhciB0aXRsZVRleHQ7XG4gICAgdmFyIGJvZHlUZXh0O1xuICAgIHZhciBva0J1dHRvblRleHQ7XG4gICAgdmFyIHJlamVjdEJ1dHRvblRleHQ7XG4gICAgdmFyIG9rQnV0dG9uQ29sb3I7XG4gICAgdmFyIHNraXBEaWFsb2c7XG4gICAgdmFyIGFza0FnYWluVGltZUluU2Vjb25kcztcbiAgICB2YXIgb2tDYWxsYmFjaztcbiAgICB2YXIgcmVqZWN0Q2FsbGJhY2s7XG4gICAgdmFyIHN1YnNjcmlwdGlvbkNhbGxiYWNrO1xuICAgIHZhciBoaWRlUG93ZXJlZEJ5Q1Q7XG4gICAgdmFyIHNlcnZpY2VXb3JrZXJQYXRoO1xuICAgIHZhciBodHRwc1BvcHVwUGF0aDtcbiAgICB2YXIgaHR0cHNJZnJhbWVQYXRoO1xuICAgIHZhciBhcG5zV2ViUHVzaElkO1xuICAgIHZhciBhcG5zV2ViUHVzaFNlcnZpY2VVcmw7XG5cbiAgICBpZiAoZGlzcGxheUFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICBpZiAoaXNPYmplY3QoZGlzcGxheUFyZ3NbMF0pKSB7XG4gICAgICAgIHZhciBub3RpZk9iaiA9IGRpc3BsYXlBcmdzWzBdO1xuICAgICAgICB0aXRsZVRleHQgPSBub3RpZk9iai50aXRsZVRleHQ7XG4gICAgICAgIGJvZHlUZXh0ID0gbm90aWZPYmouYm9keVRleHQ7XG4gICAgICAgIG9rQnV0dG9uVGV4dCA9IG5vdGlmT2JqLm9rQnV0dG9uVGV4dDtcbiAgICAgICAgcmVqZWN0QnV0dG9uVGV4dCA9IG5vdGlmT2JqLnJlamVjdEJ1dHRvblRleHQ7XG4gICAgICAgIG9rQnV0dG9uQ29sb3IgPSBub3RpZk9iai5va0J1dHRvbkNvbG9yO1xuICAgICAgICBza2lwRGlhbG9nID0gbm90aWZPYmouc2tpcERpYWxvZztcbiAgICAgICAgYXNrQWdhaW5UaW1lSW5TZWNvbmRzID0gbm90aWZPYmouYXNrQWdhaW5UaW1lSW5TZWNvbmRzO1xuICAgICAgICBva0NhbGxiYWNrID0gbm90aWZPYmoub2tDYWxsYmFjaztcbiAgICAgICAgcmVqZWN0Q2FsbGJhY2sgPSBub3RpZk9iai5yZWplY3RDYWxsYmFjaztcbiAgICAgICAgc3Vic2NyaXB0aW9uQ2FsbGJhY2sgPSBub3RpZk9iai5zdWJzY3JpcHRpb25DYWxsYmFjaztcbiAgICAgICAgaGlkZVBvd2VyZWRCeUNUID0gbm90aWZPYmouaGlkZVBvd2VyZWRCeUNUO1xuICAgICAgICBzZXJ2aWNlV29ya2VyUGF0aCA9IG5vdGlmT2JqLnNlcnZpY2VXb3JrZXJQYXRoO1xuICAgICAgICBodHRwc1BvcHVwUGF0aCA9IG5vdGlmT2JqLmh0dHBzUG9wdXBQYXRoO1xuICAgICAgICBodHRwc0lmcmFtZVBhdGggPSBub3RpZk9iai5odHRwc0lmcmFtZVBhdGg7XG4gICAgICAgIGFwbnNXZWJQdXNoSWQgPSBub3RpZk9iai5hcG5zV2ViUHVzaElkO1xuICAgICAgICBhcG5zV2ViUHVzaFNlcnZpY2VVcmwgPSBub3RpZk9iai5hcG5zV2ViUHVzaFNlcnZpY2VVcmw7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpdGxlVGV4dCA9IGRpc3BsYXlBcmdzWzBdO1xuICAgICAgYm9keVRleHQgPSBkaXNwbGF5QXJnc1sxXTtcbiAgICAgIG9rQnV0dG9uVGV4dCA9IGRpc3BsYXlBcmdzWzJdO1xuICAgICAgcmVqZWN0QnV0dG9uVGV4dCA9IGRpc3BsYXlBcmdzWzNdO1xuICAgICAgb2tCdXR0b25Db2xvciA9IGRpc3BsYXlBcmdzWzRdO1xuICAgICAgc2tpcERpYWxvZyA9IGRpc3BsYXlBcmdzWzVdO1xuICAgICAgYXNrQWdhaW5UaW1lSW5TZWNvbmRzID0gZGlzcGxheUFyZ3NbNl07XG4gICAgfVxuXG4gICAgaWYgKHNraXBEaWFsb2cgPT0gbnVsbCkge1xuICAgICAgc2tpcERpYWxvZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChoaWRlUG93ZXJlZEJ5Q1QgPT0gbnVsbCkge1xuICAgICAgaGlkZVBvd2VyZWRCeUNUID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHNlcnZpY2VXb3JrZXJQYXRoID09IG51bGwpIHtcbiAgICAgIHNlcnZpY2VXb3JrZXJQYXRoID0gJy9jbGV2ZXJ0YXBfc3cuanMnO1xuICAgIH0gLy8gZW5zdXJlIHRoYXQgdGhlIGJyb3dzZXIgc3VwcG9ydHMgbm90aWZpY2F0aW9uc1xuXG5cbiAgICBpZiAodHlwZW9mIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBpc0hUVFAgPSBodHRwc1BvcHVwUGF0aCAhPSBudWxsICYmIGh0dHBzSWZyYW1lUGF0aCAhPSBudWxsOyAvLyBtYWtlIHN1cmUgdGhlIHNpdGUgaXMgb24gaHR0cHMgZm9yIGNocm9tZSBub3RpZmljYXRpb25zXG5cbiAgICBpZiAod2luZG93LmxvY2F0aW9uLnByb3RvY29sICE9PSAnaHR0cHM6JyAmJiBkb2N1bWVudC5sb2NhdGlvbi5ob3N0bmFtZSAhPT0gJ2xvY2FsaG9zdCcgJiYgIWlzSFRUUCkge1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkOClbX2xvZ2dlciQ4XS5lcnJvcignTWFrZSBzdXJlIHlvdSBhcmUgaHR0cHMgb3IgbG9jYWxob3N0IHRvIHJlZ2lzdGVyIGZvciBub3RpZmljYXRpb25zJyk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9IC8vIHJpZ2h0IG5vdywgd2Ugb25seSBzdXBwb3J0IENocm9tZSBWNTAgJiBoaWdoZXIgJiBGaXJlZm94XG5cblxuICAgIGlmIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZScpICE9PSAtMSkge1xuICAgICAgdmFyIGNocm9tZUFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvQ2hyb21lXFwvKFxcZCspLyk7XG5cbiAgICAgIGlmIChjaHJvbWVBZ2VudCA9PSBudWxsIHx8IHBhcnNlSW50KGNocm9tZUFnZW50WzFdLCAxMCkgPCA1MCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSAhPT0gLTEpIHtcbiAgICAgIHZhciBmaXJlZm94QWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9GaXJlZm94XFwvKFxcZCspLyk7XG5cbiAgICAgIGlmIChmaXJlZm94QWdlbnQgPT0gbnVsbCB8fCBwYXJzZUludChmaXJlZm94QWdlbnRbMV0sIDEwKSA8IDUwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignU2FmYXJpJykgIT09IC0xKSB7XG4gICAgICB2YXIgc2FmYXJpQWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9TYWZhcmlcXC8oXFxkKykvKTtcblxuICAgICAgaWYgKHNhZmFyaUFnZW50ID09IG51bGwgfHwgcGFyc2VJbnQoc2FmYXJpQWdlbnRbMV0sIDEwKSA8IDUwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gd2UgY2hlY2sgZm9yIHRoZSBjb29raWUgaW4gc2V0VXBDaHJvbWVOb3RpZmljYXRpb25zKCkgdGhlIHRva2VucyBtYXkgaGF2ZSBjaGFuZ2VkXG5cblxuICAgIGlmICghaXNIVFRQKSB7XG4gICAgICBpZiAoTm90aWZpY2F0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBoYW5kbGUgbWlncmF0aW9ucyBmcm9tIG90aGVyIHNlcnZpY2VzIC0+IGNocm9tZSBub3RpZmljYXRpb25zIG1heSBoYXZlIGFscmVhZHkgYmVlbiBhc2tlZCBmb3IgYmVmb3JlXG5cblxuICAgICAgaWYgKE5vdGlmaWNhdGlvbi5wZXJtaXNzaW9uID09PSAnZ3JhbnRlZCcpIHtcbiAgICAgICAgLy8gc2tpcCB0aGUgZGlhbG9nIGFuZCByZWdpc3RlclxuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3NldFVwV2ViUHVzaE5vdGlmaWNhdGlvbnMpW19zZXRVcFdlYlB1c2hOb3RpZmljYXRpb25zXShzdWJzY3JpcHRpb25DYWxsYmFjaywgc2VydmljZVdvcmtlclBhdGgsIGFwbnNXZWJQdXNoSWQsIGFwbnNXZWJQdXNoU2VydmljZVVybCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmIChOb3RpZmljYXRpb24ucGVybWlzc2lvbiA9PT0gJ2RlbmllZCcpIHtcbiAgICAgICAgLy8gd2UndmUgbG9zdCB0aGlzIHByb2ZpbGUgOicoXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHNraXBEaWFsb2cpIHtcbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXRVcFdlYlB1c2hOb3RpZmljYXRpb25zKVtfc2V0VXBXZWJQdXNoTm90aWZpY2F0aW9uc10oc3Vic2NyaXB0aW9uQ2FsbGJhY2ssIHNlcnZpY2VXb3JrZXJQYXRoLCBhcG5zV2ViUHVzaElkLCBhcG5zV2ViUHVzaFNlcnZpY2VVcmwpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IC8vIG1ha2Ugc3VyZSB0aGUgcmlnaHQgcGFyYW1ldGVycyBhcmUgcGFzc2VkXG5cblxuICAgIGlmICghdGl0bGVUZXh0IHx8ICFib2R5VGV4dCB8fCAhb2tCdXR0b25UZXh0IHx8ICFyZWplY3RCdXR0b25UZXh0KSB7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ4KVtfbG9nZ2VyJDhdLmVycm9yKCdNaXNzaW5nIGlucHV0IHBhcmFtZXRlcnM7IHBsZWFzZSBzcGVjaWZ5IHRpdGxlLCBib2R5LCBvayBidXR0b24gYW5kIGNhbmNlbCBidXR0b24gdGV4dCcpO1xuXG4gICAgICByZXR1cm47XG4gICAgfSAvLyBtYWtlIHN1cmUgb2tCdXR0b25Db2xvciBpcyBmb3JtYXR0ZWQgcHJvcGVybHlcblxuXG4gICAgaWYgKG9rQnV0dG9uQ29sb3IgPT0gbnVsbCB8fCAhb2tCdXR0b25Db2xvci5tYXRjaCgvXiNbYS1mXFxkXXs2fSQvaSkpIHtcbiAgICAgIG9rQnV0dG9uQ29sb3IgPSAnI2YyODA0Nic7IC8vIGRlZmF1bHQgY29sb3IgZm9yIHBvc2l0aXZlIGJ1dHRvblxuICAgIH0gLy8gbWFrZSBzdXJlIHRoZSB1c2VyIGlzbid0IGFza2VkIGZvciBub3RpZmljYXRpb25zIG1vcmUgdGhhbiBhc2tBZ2FpblRpbWVJblNlY29uZHNcblxuXG4gICAgdmFyIG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMDtcblxuICAgIGlmIChTdG9yYWdlTWFuYWdlci5nZXRNZXRhUHJvcCgnbm90aWZfbGFzdF90aW1lJykgPT0gbnVsbCkge1xuICAgICAgU3RvcmFnZU1hbmFnZXIuc2V0TWV0YVByb3AoJ25vdGlmX2xhc3RfdGltZScsIG5vdyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChhc2tBZ2FpblRpbWVJblNlY29uZHMgPT0gbnVsbCkge1xuICAgICAgICAvLyA3IGRheXMgYnkgZGVmYXVsdFxuICAgICAgICBhc2tBZ2FpblRpbWVJblNlY29uZHMgPSA3ICogMjQgKiA2MCAqIDYwO1xuICAgICAgfVxuXG4gICAgICBpZiAobm93IC0gU3RvcmFnZU1hbmFnZXIuZ2V0TWV0YVByb3AoJ25vdGlmX2xhc3RfdGltZScpIDwgYXNrQWdhaW5UaW1lSW5TZWNvbmRzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGNvbnRpbnVlIGFza2luZ1xuICAgICAgICBTdG9yYWdlTWFuYWdlci5zZXRNZXRhUHJvcCgnbm90aWZfbGFzdF90aW1lJywgbm93KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNIVFRQKSB7XG4gICAgICAvLyBhZGQgdGhlIGh0dHBzIGlmcmFtZVxuICAgICAgdmFyIGh0dHBzSWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICBodHRwc0lmcmFtZS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ2Rpc3BsYXk6bm9uZTsnKTtcbiAgICAgIGh0dHBzSWZyYW1lLnNldEF0dHJpYnV0ZSgnc3JjJywgaHR0cHNJZnJhbWVQYXRoKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaHR0cHNJZnJhbWUpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LmRhdGEgIT0gbnVsbCkge1xuICAgICAgICAgIHZhciBvYmogPSB7fTtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBvYmogPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIG5vdCBhIGNhbGwgZnJvbSBvdXIgaWZyYW1lXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG9iai5zdGF0ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAob2JqLmZyb20gPT09ICdjdCcgJiYgb2JqLnN0YXRlID09PSAnbm90Jykge1xuICAgICAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX3RoaXM0LCBfYWRkV2l6QWxlcnRKUylbX2FkZFdpekFsZXJ0SlNdKCkub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBvdXIgd2l6cm9ja2V0IHBvcHVwXG4gICAgICAgICAgICAgICAgd2luZG93Lnd6cmtQZXJtaXNzaW9uUG9wdXAud2l6QWxlcnQoe1xuICAgICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlVGV4dCxcbiAgICAgICAgICAgICAgICAgIGJvZHk6IGJvZHlUZXh0LFxuICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IG9rQnV0dG9uVGV4dCxcbiAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogb2tCdXR0b25Db2xvcixcbiAgICAgICAgICAgICAgICAgIHJlamVjdEJ1dHRvblRleHQ6IHJlamVjdEJ1dHRvblRleHQsXG4gICAgICAgICAgICAgICAgICBoaWRlUG93ZXJlZEJ5Q1Q6IGhpZGVQb3dlcmVkQnlDVFxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICAvLyBjYWxsYmFjayBmdW5jdGlvblxuICAgICAgICAgICAgICAgICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHVzZXIgYWNjZXB0ZWQgb24gdGhlIGRpYWxvZyBib3hcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBva0NhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgb2tDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgICB9IC8vIHJlZGlyZWN0IHRvIHBvcHVwLmh0bWxcblxuXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKGh0dHBzUG9wdXBQYXRoKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVqZWN0Q2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZWplY3RDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZShfdGhpczQsIF9yZW1vdmVXaXpBbGVydEpTKVtfcmVtb3ZlV2l6QWxlcnRKU10oKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9hZGRXaXpBbGVydEpTKVtfYWRkV2l6QWxlcnRKU10oKS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIGNyZWF0ZSBvdXIgd2l6cm9ja2V0IHBvcHVwXG4gICAgICAgIHdpbmRvdy53enJrUGVybWlzc2lvblBvcHVwLndpekFsZXJ0KHtcbiAgICAgICAgICB0aXRsZTogdGl0bGVUZXh0LFxuICAgICAgICAgIGJvZHk6IGJvZHlUZXh0LFxuICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBva0J1dHRvblRleHQsXG4gICAgICAgICAgY29uZmlybUJ1dHRvbkNvbG9yOiBva0J1dHRvbkNvbG9yLFxuICAgICAgICAgIHJlamVjdEJ1dHRvblRleHQ6IHJlamVjdEJ1dHRvblRleHQsXG4gICAgICAgICAgaGlkZVBvd2VyZWRCeUNUOiBoaWRlUG93ZXJlZEJ5Q1RcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVuYWJsZWQpIHtcbiAgICAgICAgICAvLyBjYWxsYmFjayBmdW5jdGlvblxuICAgICAgICAgIGlmIChlbmFibGVkKSB7XG4gICAgICAgICAgICAvLyB0aGUgdXNlciBhY2NlcHRlZCBvbiB0aGUgZGlhbG9nIGJveFxuICAgICAgICAgICAgaWYgKHR5cGVvZiBva0NhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIG9rQ2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKF90aGlzNCwgX3NldFVwV2ViUHVzaE5vdGlmaWNhdGlvbnMpW19zZXRVcFdlYlB1c2hOb3RpZmljYXRpb25zXShzdWJzY3JpcHRpb25DYWxsYmFjaywgc2VydmljZVdvcmtlclBhdGgsIGFwbnNXZWJQdXNoSWQsIGFwbnNXZWJQdXNoU2VydmljZVVybCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVqZWN0Q2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgcmVqZWN0Q2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX3RoaXM0LCBfcmVtb3ZlV2l6QWxlcnRKUylbX3JlbW92ZVdpekFsZXJ0SlNdKCk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIF9sb2dnZXIkOSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwibG9nZ2VyXCIpO1xuXG4gIHZhciBfYXBpID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJhcGlcIik7XG5cbiAgdmFyIF9vbmxvYWRjYWxsZWQgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcIm9ubG9hZGNhbGxlZFwiKTtcblxuICB2YXIgX2RldmljZSQzID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJkZXZpY2VcIik7XG5cbiAgdmFyIF9zZXNzaW9uJDMgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInNlc3Npb25cIik7XG5cbiAgdmFyIF9hY2NvdW50JDUgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImFjY291bnRcIik7XG5cbiAgdmFyIF9yZXF1ZXN0JDYgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInJlcXVlc3RcIik7XG5cbiAgdmFyIF9pc1NwYSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiaXNTcGFcIik7XG5cbiAgdmFyIF9wcmV2aW91c1VybCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwicHJldmlvdXNVcmxcIik7XG5cbiAgdmFyIF9ib3VuZENoZWNrUGFnZUNoYW5nZWQgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcImJvdW5kQ2hlY2tQYWdlQ2hhbmdlZFwiKTtcblxuICB2YXIgX2lzV2ViUG9wVXBTcGFtQ29udHJvbERpc2FibGVkID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJpc1dlYlBvcFVwU3BhbUNvbnRyb2xEaXNhYmxlZFwiKTtcblxuICB2YXIgX3Byb2Nlc3NPbGRWYWx1ZXMgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInByb2Nlc3NPbGRWYWx1ZXNcIik7XG5cbiAgdmFyIF9jaGVja1BhZ2VDaGFuZ2VkID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJjaGVja1BhZ2VDaGFuZ2VkXCIpO1xuXG4gIHZhciBfcGluZ1JlcXVlc3QgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShcInBpbmdSZXF1ZXN0XCIpO1xuXG4gIHZhciBfaXNQaW5nQ29udGludW91cyA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5KFwiaXNQaW5nQ29udGludW91c1wiKTtcblxuICB2YXIgX292ZXJyaWRlRFN5bmNGbGFnID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkoXCJvdmVycmlkZURTeW5jRmxhZ1wiKTtcblxuICB2YXIgQ2xldmVyVGFwID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBfY3JlYXRlQ2xhc3MoQ2xldmVyVGFwLCBbe1xuICAgICAga2V5OiBcInNwYVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2lzU3BhKVtfaXNTcGFdO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgIHZhciBpc1NwYSA9IHZhbHVlID09PSB0cnVlO1xuXG4gICAgICAgIGlmIChfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2lzU3BhKVtfaXNTcGFdICE9PSBpc1NwYSAmJiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX29ubG9hZGNhbGxlZClbX29ubG9hZGNhbGxlZF0gPT09IDEpIHtcbiAgICAgICAgICAvLyBpZiBjbGV2ZXJ0YXAuc3BhIGlzIGNoYW5nZWQgYWZ0ZXIgaW5pdCBoYXMgYmVlbiBjYWxsZWQgdGhlbiB1cGRhdGUgdGhlIGNsaWNrIGxpc3RlbmVyc1xuICAgICAgICAgIGlmIChpc1NwYSkge1xuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2JvdW5kQ2hlY2tQYWdlQ2hhbmdlZClbX2JvdW5kQ2hlY2tQYWdlQ2hhbmdlZF0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYm91bmRDaGVja1BhZ2VDaGFuZ2VkKVtfYm91bmRDaGVja1BhZ2VDaGFuZ2VkXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9pc1NwYSlbX2lzU3BhXSA9IGlzU3BhO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkaXNtaXNzU3BhbUNvbnRyb2xcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9pc1dlYlBvcFVwU3BhbUNvbnRyb2xEaXNhYmxlZClbX2lzV2ViUG9wVXBTcGFtQ29udHJvbERpc2FibGVkXTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICB2YXIgaXNXZWJQb3BVcFNwYW1Db250cm9sRGlzYWJsZWQgPSB2YWx1ZSA9PT0gdHJ1ZTtcbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9pc1dlYlBvcFVwU3BhbUNvbnRyb2xEaXNhYmxlZClbX2lzV2ViUG9wVXBTcGFtQ29udHJvbERpc2FibGVkXSA9IGlzV2ViUG9wVXBTcGFtQ29udHJvbERpc2FibGVkO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIGZ1bmN0aW9uIENsZXZlclRhcCgpIHtcbiAgICAgIHZhciBfY2xldmVydGFwJGFjY291bnQsXG4gICAgICAgICAgX2NsZXZlcnRhcCRhY2NvdW50MixcbiAgICAgICAgICBfY2xldmVydGFwJGFjY291bnQzLFxuICAgICAgICAgIF90aGlzID0gdGhpcyxcbiAgICAgICAgICBfY2xldmVydGFwJGFjY291bnQ0O1xuXG4gICAgICB2YXIgY2xldmVydGFwID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENsZXZlclRhcCk7XG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfb3ZlcnJpZGVEU3luY0ZsYWcsIHtcbiAgICAgICAgdmFsdWU6IF9vdmVycmlkZURTeW5jRmxhZzJcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9pc1BpbmdDb250aW51b3VzLCB7XG4gICAgICAgIHZhbHVlOiBfaXNQaW5nQ29udGludW91czJcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9waW5nUmVxdWVzdCwge1xuICAgICAgICB2YWx1ZTogX3BpbmdSZXF1ZXN0MlxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX2NoZWNrUGFnZUNoYW5nZWQsIHtcbiAgICAgICAgdmFsdWU6IF9jaGVja1BhZ2VDaGFuZ2VkMlxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX3Byb2Nlc3NPbGRWYWx1ZXMsIHtcbiAgICAgICAgdmFsdWU6IF9wcm9jZXNzT2xkVmFsdWVzMlxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX2xvZ2dlciQ5LCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfYXBpLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfb25sb2FkY2FsbGVkLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfZGV2aWNlJDMsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9zZXNzaW9uJDMsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9hY2NvdW50JDUsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9yZXF1ZXN0JDYsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIF9pc1NwYSwge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX3ByZXZpb3VzVXJsLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBfYm91bmRDaGVja1BhZ2VDaGFuZ2VkLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9jaGVja1BhZ2VDaGFuZ2VkKVtfY2hlY2tQYWdlQ2hhbmdlZF0uYmluZCh0aGlzKVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX2lzV2ViUG9wVXBTcGFtQ29udHJvbERpc2FibGVkLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZW5hYmxlUGVyc29uYWxpemF0aW9uID0gdm9pZCAwO1xuICAgICAgdGhpcy5wb3B1cENhbGxiYWNrcyA9IHt9O1xuICAgICAgdGhpcy5wb3B1cEN1cnJlbnRXenJrSWQgPSAnJztcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfb25sb2FkY2FsbGVkKVtfb25sb2FkY2FsbGVkXSA9IDA7XG4gICAgICB0aGlzLl9pc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZSA9IHRoaXMuX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlLmJpbmQodGhpcyk7XG5cbiAgICAgIHRoaXMucmFpc2VOb3RpZmljYXRpb25DbGlja2VkID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDkpW19sb2dnZXIkOV0gPSBuZXcgTG9nZ2VyKGxvZ0xldmVscy5JTkZPKTtcbiAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWNjb3VudCQ1KVtfYWNjb3VudCQ1XSA9IG5ldyBBY2NvdW50KChfY2xldmVydGFwJGFjY291bnQgPSBjbGV2ZXJ0YXAuYWNjb3VudCkgPT09IG51bGwgfHwgX2NsZXZlcnRhcCRhY2NvdW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY2xldmVydGFwJGFjY291bnRbMF0sIGNsZXZlcnRhcC5yZWdpb24gfHwgKChfY2xldmVydGFwJGFjY291bnQyID0gY2xldmVydGFwLmFjY291bnQpID09PSBudWxsIHx8IF9jbGV2ZXJ0YXAkYWNjb3VudDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jbGV2ZXJ0YXAkYWNjb3VudDJbMV0pLCBjbGV2ZXJ0YXAudGFyZ2V0RG9tYWluIHx8ICgoX2NsZXZlcnRhcCRhY2NvdW50MyA9IGNsZXZlcnRhcC5hY2NvdW50KSA9PT0gbnVsbCB8fCBfY2xldmVydGFwJGFjY291bnQzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY2xldmVydGFwJGFjY291bnQzWzJdKSk7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2RldmljZSQzKVtfZGV2aWNlJDNdID0gbmV3IERldmljZU1hbmFnZXIoe1xuICAgICAgICBsb2dnZXI6IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDkpW19sb2dnZXIkOV1cbiAgICAgIH0pO1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXNzaW9uJDMpW19zZXNzaW9uJDNdID0gbmV3IFNlc3Npb25NYW5hZ2VyKHtcbiAgICAgICAgbG9nZ2VyOiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ5KVtfbG9nZ2VyJDldLFxuICAgICAgICBpc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZTogdGhpcy5faXNQZXJzb25hbGlzYXRpb25BY3RpdmVcbiAgICAgIH0pO1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0JDYpW19yZXF1ZXN0JDZdID0gbmV3IFJlcXVlc3RNYW5hZ2VyKHtcbiAgICAgICAgbG9nZ2VyOiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ5KVtfbG9nZ2VyJDldLFxuICAgICAgICBhY2NvdW50OiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2FjY291bnQkNSlbX2FjY291bnQkNV0sXG4gICAgICAgIGRldmljZTogX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9kZXZpY2UkMylbX2RldmljZSQzXSxcbiAgICAgICAgc2Vzc2lvbjogX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXNzaW9uJDMpW19zZXNzaW9uJDNdLFxuICAgICAgICBpc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZTogdGhpcy5faXNQZXJzb25hbGlzYXRpb25BY3RpdmVcbiAgICAgIH0pO1xuICAgICAgdGhpcy5lbmFibGVQZXJzb25hbGl6YXRpb24gPSBjbGV2ZXJ0YXAuZW5hYmxlUGVyc29uYWxpemF0aW9uIHx8IGZhbHNlO1xuICAgICAgdGhpcy5ldmVudCA9IG5ldyBFdmVudEhhbmRsZXIoe1xuICAgICAgICBsb2dnZXI6IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDkpW19sb2dnZXIkOV0sXG4gICAgICAgIHJlcXVlc3Q6IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdCQ2KVtfcmVxdWVzdCQ2XSxcbiAgICAgICAgaXNQZXJzb25hbGlzYXRpb25BY3RpdmU6IHRoaXMuX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlXG4gICAgICB9LCBjbGV2ZXJ0YXAuZXZlbnQpO1xuICAgICAgdGhpcy5wcm9maWxlID0gbmV3IFByb2ZpbGVIYW5kbGVyKHtcbiAgICAgICAgbG9nZ2VyOiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ5KVtfbG9nZ2VyJDldLFxuICAgICAgICByZXF1ZXN0OiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlcXVlc3QkNilbX3JlcXVlc3QkNl0sXG4gICAgICAgIGFjY291bnQ6IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWNjb3VudCQ1KVtfYWNjb3VudCQ1XSxcbiAgICAgICAgaXNQZXJzb25hbGlzYXRpb25BY3RpdmU6IHRoaXMuX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlXG4gICAgICB9LCBjbGV2ZXJ0YXAucHJvZmlsZSk7XG4gICAgICB0aGlzLm9uVXNlckxvZ2luID0gbmV3IFVzZXJMb2dpbkhhbmRsZXIoe1xuICAgICAgICByZXF1ZXN0OiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlcXVlc3QkNilbX3JlcXVlc3QkNl0sXG4gICAgICAgIGFjY291bnQ6IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWNjb3VudCQ1KVtfYWNjb3VudCQ1XSxcbiAgICAgICAgc2Vzc2lvbjogX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXNzaW9uJDMpW19zZXNzaW9uJDNdLFxuICAgICAgICBsb2dnZXI6IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDkpW19sb2dnZXIkOV0sXG4gICAgICAgIGRldmljZTogX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9kZXZpY2UkMylbX2RldmljZSQzXVxuICAgICAgfSwgY2xldmVydGFwLm9uVXNlckxvZ2luKTtcbiAgICAgIHRoaXMucHJpdmFjeSA9IG5ldyBQcml2YWN5KHtcbiAgICAgICAgcmVxdWVzdDogX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0JDYpW19yZXF1ZXN0JDZdLFxuICAgICAgICBhY2NvdW50OiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2FjY291bnQkNSlbX2FjY291bnQkNV0sXG4gICAgICAgIGxvZ2dlcjogX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkOSlbX2xvZ2dlciQ5XVxuICAgICAgfSwgY2xldmVydGFwLnByaXZhY3kpO1xuICAgICAgdGhpcy5ub3RpZmljYXRpb25zID0gbmV3IE5vdGlmaWNhdGlvbkhhbmRsZXIoe1xuICAgICAgICBsb2dnZXI6IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDkpW19sb2dnZXIkOV0sXG4gICAgICAgIHJlcXVlc3Q6IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdCQ2KVtfcmVxdWVzdCQ2XSxcbiAgICAgICAgYWNjb3VudDogX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9hY2NvdW50JDUpW19hY2NvdW50JDVdXG4gICAgICB9LCBjbGV2ZXJ0YXAubm90aWZpY2F0aW9ucyk7XG4gICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2FwaSlbX2FwaV0gPSBuZXcgQ2xldmVyVGFwQVBJKHtcbiAgICAgICAgbG9nZ2VyOiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ5KVtfbG9nZ2VyJDldLFxuICAgICAgICByZXF1ZXN0OiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlcXVlc3QkNilbX3JlcXVlc3QkNl0sXG4gICAgICAgIGRldmljZTogX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9kZXZpY2UkMylbX2RldmljZSQzXSxcbiAgICAgICAgc2Vzc2lvbjogX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXNzaW9uJDMpW19zZXNzaW9uJDNdXG4gICAgICB9KTtcbiAgICAgIHRoaXMuc3BhID0gY2xldmVydGFwLnNwYTtcbiAgICAgIHRoaXMuZGlzbWlzc1NwYW1Db250cm9sID0gY2xldmVydGFwLmRpc21pc3NTcGFtQ29udHJvbDtcbiAgICAgIHRoaXMudXNlciA9IG5ldyBVc2VyKHtcbiAgICAgICAgaXNQZXJzb25hbGlzYXRpb25BY3RpdmU6IHRoaXMuX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlXG4gICAgICB9KTtcbiAgICAgIHRoaXMuc2Vzc2lvbiA9IHtcbiAgICAgICAgZ2V0VGltZUVsYXBzZWQ6IGZ1bmN0aW9uIGdldFRpbWVFbGFwc2VkKCkge1xuICAgICAgICAgIHJldHVybiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX3RoaXMsIF9zZXNzaW9uJDMpW19zZXNzaW9uJDNdLmdldFRpbWVFbGFwc2VkKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldFBhZ2VDb3VudDogZnVuY3Rpb24gZ2V0UGFnZUNvdW50KCkge1xuICAgICAgICAgIHJldHVybiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX3RoaXMsIF9zZXNzaW9uJDMpW19zZXNzaW9uJDNdLmdldFBhZ2VDb3VudCgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmxvZ291dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKF90aGlzLCBfbG9nZ2VyJDkpW19sb2dnZXIkOV0uZGVidWcoJ2xvZ291dCBjYWxsZWQnKTtcblxuICAgICAgICBTdG9yYWdlTWFuYWdlci5zZXRJbnN0YW50RGVsZXRlRmxhZ0luSygpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMub25Vc2VyTG9naW4uY2xlYXIoKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuZ2V0Q2xldmVyVGFwSUQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX3RoaXMsIF9kZXZpY2UkMylbX2RldmljZSQzXS5nZXRHdWlkKCk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmdldEFjY291bnRJRCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZShfdGhpcywgX2FjY291bnQkNSlbX2FjY291bnQkNV0uaWQ7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmdldFNDRG9tYWluID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKF90aGlzLCBfYWNjb3VudCQ1KVtfYWNjb3VudCQ1XS5maW5hbFRhcmdldERvbWFpbjtcbiAgICAgIH07IC8vIFNldCB0aGUgU2lnbmVkIENhbGwgc2RrIHZlcnNpb24gYW5kIGZpcmUgcmVxdWVzdFxuXG5cbiAgICAgIHRoaXMuc2V0U0NTREtWZXJzaW9uID0gZnVuY3Rpb24gKHZlcikge1xuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX3RoaXMsIF9hY2NvdW50JDUpW19hY2NvdW50JDVdLnNjU0RLVmVyc2lvbiA9IHZlcjtcbiAgICAgICAgdmFyIGRhdGEgPSB7fTtcbiAgICAgICAgZGF0YS5hZiA9IHtcbiAgICAgICAgICBzY3Y6ICdzYy1zZGstdicgKyBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX3RoaXMsIF9hY2NvdW50JDUpW19hY2NvdW50JDVdLnNjU0RLVmVyc2lvblxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBwYWdlTG9hZFVybCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZShfdGhpcywgX2FjY291bnQkNSlbX2FjY291bnQkNV0uZGF0YVBvc3RVUkw7XG5cbiAgICAgICAgcGFnZUxvYWRVcmwgPSBhZGRUb1VSTChwYWdlTG9hZFVybCwgJ3R5cGUnLCAncGFnZScpO1xuICAgICAgICBwYWdlTG9hZFVybCA9IGFkZFRvVVJMKHBhZ2VMb2FkVXJsLCAnZCcsIGNvbXByZXNzRGF0YShKU09OLnN0cmluZ2lmeShkYXRhKSwgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKF90aGlzLCBfbG9nZ2VyJDkpW19sb2dnZXIkOV0pKTtcblxuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX3RoaXMsIF9yZXF1ZXN0JDYpW19yZXF1ZXN0JDZdLnNhdmVBbmRGaXJlUmVxdWVzdChwYWdlTG9hZFVybCwgZmFsc2UpO1xuICAgICAgfTsgLy8gbWV0aG9kIGZvciBub3RpZmljYXRpb24gdmlld2VkXG5cblxuICAgICAgdGhpcy5yZW5kZXJOb3RpZmljYXRpb25WaWV3ZWQgPSBmdW5jdGlvbiAoZGV0YWlsKSB7XG4gICAgICAgIHByb2Nlc3NOb3RpZmljYXRpb25FdmVudChOT1RJRklDQVRJT05fVklFV0VELCBkZXRhaWwpO1xuICAgICAgfTsgLy8gbWV0aG9kIGZvciBub3RpZmljYXRpb24gY2xpY2tlZFxuXG5cbiAgICAgIHRoaXMucmVuZGVyTm90aWZpY2F0aW9uQ2xpY2tlZCA9IGZ1bmN0aW9uIChkZXRhaWwpIHtcbiAgICAgICAgcHJvY2Vzc05vdGlmaWNhdGlvbkV2ZW50KE5PVElGSUNBVElPTl9DTElDS0VELCBkZXRhaWwpO1xuICAgICAgfTtcblxuICAgICAgdmFyIHByb2Nlc3NOb3RpZmljYXRpb25FdmVudCA9IGZ1bmN0aW9uIHByb2Nlc3NOb3RpZmljYXRpb25FdmVudChldmVudE5hbWUsIGV2ZW50RGV0YWlsKSB7XG4gICAgICAgIGlmICghZXZlbnREZXRhaWwgfHwgIWV2ZW50RGV0YWlsLm1zZ0lkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRhdGEgPSB7fTtcbiAgICAgICAgZGF0YS50eXBlID0gJ2V2ZW50JztcbiAgICAgICAgZGF0YS5ldnROYW1lID0gZXZlbnROYW1lO1xuICAgICAgICBkYXRhLmV2dERhdGEgPSBfZGVmaW5lUHJvcGVydHkoe30sIFdaUktfSUQsIGV2ZW50RGV0YWlsLm1zZ0lkKTtcblxuICAgICAgICBpZiAoZXZlbnREZXRhaWwucGl2b3RJZCkge1xuICAgICAgICAgIGRhdGEuZXZ0RGF0YSA9IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBkYXRhLmV2dERhdGEpLCB7fSwge1xuICAgICAgICAgICAgd3pya19waXZvdDogZXZlbnREZXRhaWwucGl2b3RJZFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50RGV0YWlsLnd6cmtfc2xpZGVObykge1xuICAgICAgICAgIGRhdGEuZXZ0RGF0YSA9IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBkYXRhLmV2dERhdGEpLCB7fSwge1xuICAgICAgICAgICAgd3pya19zbGlkZU5vOiBldmVudERldGFpbC53enJrX3NsaWRlTm9cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSAvLyBBZGRpbmcga3YgcGFpciB0byBldmVudCBkYXRhXG5cblxuICAgICAgICBpZiAoZXZlbnREZXRhaWwua3YgJiYgZXZlbnREZXRhaWwua3YgIT09IG51bGwgJiYgZXZlbnREZXRhaWwua3YgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGZvciAodmFyIGtleSBpbiBldmVudERldGFpbC5rdikge1xuICAgICAgICAgICAgaWYgKGtleS5zdGFydHNXaXRoKFdaUktfUFJFRklYKSkge1xuICAgICAgICAgICAgICBkYXRhLmV2dERhdGEgPSBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgZGF0YS5ldnREYXRhKSwge30sIF9kZWZpbmVQcm9wZXJ0eSh7fSwga2V5LCBldmVudERldGFpbC5rdltrZXldKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIEFkZGluZyBtc2dDVGt2IHRvIGV2ZW50IGRhdGFcblxuXG4gICAgICAgIGlmIChldmVudERldGFpbC5tc2dDVGt2ICYmIGV2ZW50RGV0YWlsLm1zZ0NUa3YgIT09IG51bGwgJiYgZXZlbnREZXRhaWwubXNnQ1RrdiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2tleSBpbiBldmVudERldGFpbC5tc2dDVGt2KSB7XG4gICAgICAgICAgICBpZiAoX2tleS5zdGFydHNXaXRoKFdaUktfUFJFRklYKSkge1xuICAgICAgICAgICAgICBkYXRhLmV2dERhdGEgPSBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgZGF0YS5ldnREYXRhKSwge30sIF9kZWZpbmVQcm9wZXJ0eSh7fSwgX2tleSwgZXZlbnREZXRhaWwubXNnQ1Rrdltfa2V5XSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZShfdGhpcywgX3JlcXVlc3QkNilbX3JlcXVlc3QkNl0ucHJvY2Vzc0V2ZW50KGRhdGEpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5zZXRMb2dMZXZlbCA9IGZ1bmN0aW9uIChsKSB7XG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZShfdGhpcywgX2xvZ2dlciQ5KVtfbG9nZ2VyJDldLmxvZ0xldmVsID0gTnVtYmVyKGwpO1xuXG4gICAgICAgIGlmIChsID09PSAzKSB7XG4gICAgICAgICAgc2Vzc2lvblN0b3JhZ2UuV1pSS19EID0gJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIHNlc3Npb25TdG9yYWdlLldaUktfRDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIC8qKlxuICAgICAgKiBAcGFyYW0ge30ga2V5XG4gICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICAgICovXG5cblxuICAgICAgdGhpcy5oYW5kbGVJbmNyZW1lbnRWYWx1ZSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIF90aGlzLnByb2ZpbGUuX2hhbmRsZUluY3JlbWVudERlY3JlbWVudFZhbHVlKGtleSwgdmFsdWUsIENPTU1BTkRfSU5DUkVNRU5UKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuaGFuZGxlRGVjcmVtZW50VmFsdWUgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICBfdGhpcy5wcm9maWxlLl9oYW5kbGVJbmNyZW1lbnREZWNyZW1lbnRWYWx1ZShrZXksIHZhbHVlLCBDT01NQU5EX0RFQ1JFTUVOVCk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnNldE11bHRpVmFsdWVzRm9yS2V5ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgX3RoaXMucHJvZmlsZS5faGFuZGxlTXVsdGlWYWx1ZVNldChrZXksIHZhbHVlLCBDT01NQU5EX1NFVCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignc2V0TXVsdGlWYWx1ZXNGb3JLZXkgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIGEgdmFsdWUgb2YgdHlwZSBhcnJheScpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmFkZE11bHRpVmFsdWVGb3JLZXkgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgX3RoaXMucHJvZmlsZS5faGFuZGxlTXVsdGlWYWx1ZUFkZChrZXksIHZhbHVlLCBDT01NQU5EX0FERCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignYWRkTXVsdGlWYWx1ZUZvcktleSBzaG91bGQgYmUgY2FsbGVkIHdpdGggYSB2YWx1ZSBvZiB0eXBlIHN0cmluZyBvciBudW1iZXIuJyk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHRoaXMuYWRkTXVsdGlWYWx1ZXNGb3JLZXkgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICBfdGhpcy5wcm9maWxlLl9oYW5kbGVNdWx0aVZhbHVlQWRkKGtleSwgdmFsdWUsIENPTU1BTkRfQUREKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdhZGRNdWx0aVZhbHVlc0ZvcktleSBzaG91bGQgYmUgY2FsbGVkIHdpdGggYSB2YWx1ZSBvZiB0eXBlIGFycmF5LicpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnJlbW92ZU11bHRpVmFsdWVGb3JLZXkgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgX3RoaXMucHJvZmlsZS5faGFuZGxlTXVsdGlWYWx1ZVJlbW92ZShrZXksIHZhbHVlLCBDT01NQU5EX1JFTU9WRSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcigncmVtb3ZlTXVsdGlWYWx1ZUZvcktleSBzaG91bGQgYmUgY2FsbGVkIHdpdGggYSB2YWx1ZSBvZiB0eXBlIHN0cmluZyBvciBudW1iZXIuJyk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHRoaXMucmVtb3ZlTXVsdGlWYWx1ZXNGb3JLZXkgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICBfdGhpcy5wcm9maWxlLl9oYW5kbGVNdWx0aVZhbHVlUmVtb3ZlKGtleSwgdmFsdWUsIENPTU1BTkRfUkVNT1ZFKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdyZW1vdmVNdWx0aVZhbHVlc0ZvcktleSBzaG91bGQgYmUgY2FsbGVkIHdpdGggYSB2YWx1ZSBvZiB0eXBlIGFycmF5LicpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnJlbW92ZVZhbHVlRm9yS2V5ID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfdGhpcy5wcm9maWxlLl9oYW5kbGVNdWx0aVZhbHVlRGVsZXRlKGtleSwgQ09NTUFORF9ERUxFVEUpO1xuICAgICAgfTtcblxuICAgICAgdmFyIF9oYW5kbGVFbWFpbFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIF9oYW5kbGVFbWFpbFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24sIHJlRW5jb2RlZCwgZmV0Y2hHcm91cHMpIHtcbiAgICAgICAgaGFuZGxlRW1haWxTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uLCByZUVuY29kZWQsIGZldGNoR3JvdXBzLCBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX3RoaXMsIF9hY2NvdW50JDUpW19hY2NvdW50JDVdLCBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX3RoaXMsIF9sb2dnZXIkOSlbX2xvZ2dlciQ5XSk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgYXBpID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9hcGkpW19hcGldO1xuXG4gICAgICBhcGkubG9nb3V0ID0gdGhpcy5sb2dvdXQ7XG4gICAgICBhcGkuY2xlYXIgPSB0aGlzLmNsZWFyO1xuXG4gICAgICBhcGkuY2xvc2VJZnJhbWUgPSBmdW5jdGlvbiAoY2FtcGFpZ25JZCwgZGl2SWRJZ25vcmVkKSB7XG4gICAgICAgIGNsb3NlSWZyYW1lKGNhbXBhaWduSWQsIGRpdklkSWdub3JlZCwgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKF90aGlzLCBfc2Vzc2lvbiQzKVtfc2Vzc2lvbiQzXS5zZXNzaW9uSWQpO1xuICAgICAgfTtcblxuICAgICAgYXBpLmVuYWJsZVdlYlB1c2ggPSBmdW5jdGlvbiAoZW5hYmxlZCwgYXBwbGljYXRpb25TZXJ2ZXJLZXkpIHtcbiAgICAgICAgX3RoaXMubm90aWZpY2F0aW9ucy5fZW5hYmxlV2ViUHVzaChlbmFibGVkLCBhcHBsaWNhdGlvblNlcnZlcktleSk7XG4gICAgICB9O1xuXG4gICAgICBhcGkudHIgPSBmdW5jdGlvbiAobXNnKSB7XG4gICAgICAgIF90cihtc2csIHtcbiAgICAgICAgICBkZXZpY2U6IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZShfdGhpcywgX2RldmljZSQzKVtfZGV2aWNlJDNdLFxuICAgICAgICAgIHNlc3Npb246IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZShfdGhpcywgX3Nlc3Npb24kMylbX3Nlc3Npb24kM10sXG4gICAgICAgICAgcmVxdWVzdDogX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKF90aGlzLCBfcmVxdWVzdCQ2KVtfcmVxdWVzdCQ2XSxcbiAgICAgICAgICBsb2dnZXI6IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZShfdGhpcywgX2xvZ2dlciQ5KVtfbG9nZ2VyJDldLFxuICAgICAgICAgIGlzV2ViUG9wVXBTcGFtQ29udHJvbERpc2FibGVkOiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX3RoaXMsIF9pc1dlYlBvcFVwU3BhbUNvbnRyb2xEaXNhYmxlZClbX2lzV2ViUG9wVXBTcGFtQ29udHJvbERpc2FibGVkXVxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIGFwaS5zZXRFbnVtID0gZnVuY3Rpb24gKGVudW1WYWwpIHtcbiAgICAgICAgc2V0RW51bShlbnVtVmFsLCBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX3RoaXMsIF9sb2dnZXIkOSlbX2xvZ2dlciQ5XSk7XG4gICAgICB9O1xuXG4gICAgICBhcGkuaXNfb25sb2FkY2FsbGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKF90aGlzLCBfb25sb2FkY2FsbGVkKVtfb25sb2FkY2FsbGVkXSA9PT0gMTtcbiAgICAgIH07XG5cbiAgICAgIGFwaS5zdWJFbWFpbCA9IGZ1bmN0aW9uIChyZUVuY29kZWQpIHtcbiAgICAgICAgX2hhbmRsZUVtYWlsU3Vic2NyaXB0aW9uKCcxJywgcmVFbmNvZGVkKTtcbiAgICAgIH07XG5cbiAgICAgIGFwaS5nZXRFbWFpbCA9IGZ1bmN0aW9uIChyZUVuY29kZWQsIHdpdGhHcm91cHMpIHtcbiAgICAgICAgX2hhbmRsZUVtYWlsU3Vic2NyaXB0aW9uKCctMScsIHJlRW5jb2RlZCwgd2l0aEdyb3Vwcyk7XG4gICAgICB9O1xuXG4gICAgICBhcGkudW5TdWJFbWFpbCA9IGZ1bmN0aW9uIChyZUVuY29kZWQpIHtcbiAgICAgICAgX2hhbmRsZUVtYWlsU3Vic2NyaXB0aW9uKCcwJywgcmVFbmNvZGVkKTtcbiAgICAgIH07XG5cbiAgICAgIGFwaS51bnN1YkVtYWlsR3JvdXBzID0gZnVuY3Rpb24gKHJlRW5jb2RlZCkge1xuICAgICAgICAkY3QudW5zdWJHcm91cHMgPSBbXTtcbiAgICAgICAgdmFyIGVsZW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY3QtdW5zdWItZ3JvdXAtaW5wdXQtaXRlbScpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgZWxlbWVudCA9IGVsZW1lbnRzW2ldO1xuXG4gICAgICAgICAgaWYgKGVsZW1lbnQubmFtZSkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgIG5hbWU6IGVsZW1lbnQubmFtZSxcbiAgICAgICAgICAgICAgaXNVbnN1YnNjcmliZWQ6IGVsZW1lbnQuY2hlY2tlZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICRjdC51bnN1Ykdyb3Vwcy5wdXNoKGRhdGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF9oYW5kbGVFbWFpbFN1YnNjcmlwdGlvbihHUk9VUF9TVUJTQ1JJUFRJT05fUkVRVUVTVF9JRCwgcmVFbmNvZGVkKTtcbiAgICAgIH07XG5cbiAgICAgIGFwaS5zZXRTdWJzY3JpcHRpb25Hcm91cHMgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgJGN0LnVuc3ViR3JvdXBzID0gdmFsdWU7XG4gICAgICB9O1xuXG4gICAgICBhcGkuZ2V0U3Vic2NyaXB0aW9uR3JvdXBzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJGN0LnVuc3ViR3JvdXBzO1xuICAgICAgfTtcblxuICAgICAgYXBpLmNoYW5nZVN1YnNjcmlwdGlvbkdyb3VwcyA9IGZ1bmN0aW9uIChyZUVuY29kZWQsIHVwZGF0ZWRHcm91cHMpIHtcbiAgICAgICAgYXBpLnNldFN1YnNjcmlwdGlvbkdyb3Vwcyh1cGRhdGVkR3JvdXBzKTtcblxuICAgICAgICBfaGFuZGxlRW1haWxTdWJzY3JpcHRpb24oR1JPVVBfU1VCU0NSSVBUSU9OX1JFUVVFU1RfSUQsIHJlRW5jb2RlZCk7XG4gICAgICB9O1xuXG4gICAgICBhcGkuc2V0VXBkYXRlZENhdGVnb3J5TG9uZyA9IGZ1bmN0aW9uIChwcm9maWxlKSB7XG4gICAgICAgIGlmIChwcm9maWxlW2NhdGVnb3J5TG9uZ0tleV0pIHtcbiAgICAgICAgICAkY3QudXBkYXRlZENhdGVnb3J5TG9uZyA9IHByb2ZpbGVbY2F0ZWdvcnlMb25nS2V5XTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgd2luZG93LiRDTFRQX1dSID0gd2luZG93LiRXWlJLX1dSID0gYXBpO1xuXG4gICAgICBpZiAoKF9jbGV2ZXJ0YXAkYWNjb3VudDQgPSBjbGV2ZXJ0YXAuYWNjb3VudCkgPT09IG51bGwgfHwgX2NsZXZlcnRhcCRhY2NvdW50NCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2NsZXZlcnRhcCRhY2NvdW50NFswXS5pZCkge1xuICAgICAgICAvLyBUaGUgYWNjb3VudElkIGlzIHByZXNlbnQgc28gY2FuIGluaXQgd2l0aCBlbXB0eSB2YWx1ZXMuXG4gICAgICAgIC8vIE5lZWRlZCB0byBtYWludGFpbiBiYWNrd2FyZCBjb21wYXRhYmlsaXR5IHdpdGggbGVnYWN5IGltcGxlbWVudGF0aW9ucy5cbiAgICAgICAgLy8gTnBtIGltcG9ydHMvcmVxdWlyZSB3aWxsIG5lZWQgdG8gY2FsbCBpbml0IGV4cGxpY3RseSB3aXRoIGFjY291bnRJZFxuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgIH1cbiAgICB9IC8vIHN0YXJ0cyBoZXJlXG5cblxuICAgIF9jcmVhdGVDbGFzcyhDbGV2ZXJUYXAsIFt7XG4gICAgICBrZXk6IFwiaW5pdFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoYWNjb3VudElkLCByZWdpb24sIHRhcmdldERvbWFpbikge1xuICAgICAgICBpZiAoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9vbmxvYWRjYWxsZWQpW19vbmxvYWRjYWxsZWRdID09PSAxKSB7XG4gICAgICAgICAgLy8gYWxyZWFkeSBpbml0YWlsc2VkXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgU3RvcmFnZU1hbmFnZXIucmVtb3ZlQ29va2llKCdXWlJLX1AnLCB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUpO1xuXG4gICAgICAgIGlmICghX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9hY2NvdW50JDUpW19hY2NvdW50JDVdLmlkKSB7XG4gICAgICAgICAgaWYgKCFhY2NvdW50SWQpIHtcbiAgICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDkpW19sb2dnZXIkOV0uZXJyb3IoRU1CRURfRVJST1IpO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9hY2NvdW50JDUpW19hY2NvdW50JDVdLmlkID0gYWNjb3VudElkO1xuICAgICAgICB9XG5cbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXNzaW9uJDMpW19zZXNzaW9uJDNdLmNvb2tpZU5hbWUgPSBTQ09PS0lFX1BSRUZJWCArICdfJyArIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWNjb3VudCQ1KVtfYWNjb3VudCQ1XS5pZDtcblxuICAgICAgICBpZiAocmVnaW9uKSB7XG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9hY2NvdW50JDUpW19hY2NvdW50JDVdLnJlZ2lvbiA9IHJlZ2lvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YXJnZXREb21haW4pIHtcbiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2FjY291bnQkNSlbX2FjY291bnQkNV0udGFyZ2V0RG9tYWluID0gdGFyZ2V0RG9tYWluO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGN1cnJMb2NhdGlvbiA9IGxvY2F0aW9uLmhyZWY7XG4gICAgICAgIHZhciB1cmxQYXJhbXMgPSBnZXRVUkxQYXJhbXMoY3VyckxvY2F0aW9uLnRvTG93ZXJDYXNlKCkpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cbiAgICAgICAgaWYgKHR5cGVvZiB1cmxQYXJhbXMuZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdXJsUGFyYW1zLnd6cmtfZXggPT0gJzAnKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0JDYpW19yZXF1ZXN0JDZdLnByb2Nlc3NCYWNrdXBFdmVudHMoKTtcblxuICAgICAgICAkY3QuaXNQcml2YWN5QXJyUHVzaGVkID0gdHJ1ZTtcblxuICAgICAgICBpZiAoJGN0LnByaXZhY3lBcnJheS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdGhpcy5wcml2YWN5LnB1c2goJGN0LnByaXZhY3lBcnJheSk7XG4gICAgICAgIH1cblxuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3Byb2Nlc3NPbGRWYWx1ZXMpW19wcm9jZXNzT2xkVmFsdWVzXSgpO1xuXG4gICAgICAgIHRoaXMucGFnZUNoYW5nZWQoKTtcblxuICAgICAgICBpZiAoX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9pc1NwYSlbX2lzU3BhXSkge1xuICAgICAgICAgIC8vIGxpc3RlbiB0byBjbGljayBvbiB0aGUgZG9jdW1lbnQgYW5kIGNoZWNrIGlmIFVSTCBoYXMgY2hhbmdlZC5cbiAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYm91bmRDaGVja1BhZ2VDaGFuZ2VkKVtfYm91bmRDaGVja1BhZ2VDaGFuZ2VkXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gcmVtb3ZlIGV4aXN0aW5nIGNsaWNrIGxpc3RlbmVycyBpZiBhbnlcbiAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYm91bmRDaGVja1BhZ2VDaGFuZ2VkKVtfYm91bmRDaGVja1BhZ2VDaGFuZ2VkXSk7XG4gICAgICAgIH1cblxuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX29ubG9hZGNhbGxlZClbX29ubG9hZGNhbGxlZF0gPSAxO1xuICAgICAgfSAvLyBwcm9jZXNzIHRoZSBvcHRpb24gYXJyYXkgcHJvdmlkZWQgdG8gdGhlIGNsZXZlcnRhcCBvYmplY3RcbiAgICAgIC8vIGFmdGVyIGl0cyBiZWVuIGluaXRpYWxpemVkXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicGFnZUNoYW5nZWRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBwYWdlQ2hhbmdlZCgpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGN1cnJMb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgICB2YXIgdXJsUGFyYW1zID0gZ2V0VVJMUGFyYW1zKGN1cnJMb2NhdGlvbi50b0xvd2VyQ2FzZSgpKTsgLy8gLS0gdXBkYXRlIHBhZ2UgY291bnRcblxuICAgICAgICB2YXIgb2JqID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9zZXNzaW9uJDMpW19zZXNzaW9uJDNdLmdldFNlc3Npb25Db29raWVPYmplY3QoKTtcblxuICAgICAgICB2YXIgcGdDb3VudCA9IHR5cGVvZiBvYmoucCA9PT0gJ3VuZGVmaW5lZCcgPyAwIDogb2JqLnA7XG4gICAgICAgIG9iai5wID0gKytwZ0NvdW50O1xuXG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfc2Vzc2lvbiQzKVtfc2Vzc2lvbiQzXS5zZXRTZXNzaW9uQ29va2llT2JqZWN0KG9iaik7IC8vIC0tIHVwZGF0ZSBwYWdlIGNvdW50XG5cblxuICAgICAgICB2YXIgZGF0YSA9IHt9O1xuICAgICAgICB2YXIgcmVmZXJyZXJEb21haW4gPSBnZXREb21haW4oZG9jdW1lbnQucmVmZXJyZXIpO1xuXG4gICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgIT09IHJlZmVycmVyRG9tYWluKSB7XG4gICAgICAgICAgdmFyIG1heExlbiA9IDEyMDtcblxuICAgICAgICAgIGlmIChyZWZlcnJlckRvbWFpbiAhPT0gJycpIHtcbiAgICAgICAgICAgIHJlZmVycmVyRG9tYWluID0gcmVmZXJyZXJEb21haW4ubGVuZ3RoID4gbWF4TGVuID8gcmVmZXJyZXJEb21haW4uc3Vic3RyaW5nKDAsIG1heExlbikgOiByZWZlcnJlckRvbWFpbjtcbiAgICAgICAgICAgIGRhdGEucmVmZXJyZXIgPSByZWZlcnJlckRvbWFpbjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgdXRtU291cmNlID0gdXJsUGFyYW1zLnV0bV9zb3VyY2UgfHwgdXJsUGFyYW1zLnd6cmtfc291cmNlO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiB1dG1Tb3VyY2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB1dG1Tb3VyY2UgPSB1dG1Tb3VyY2UubGVuZ3RoID4gbWF4TGVuID8gdXRtU291cmNlLnN1YnN0cmluZygwLCBtYXhMZW4pIDogdXRtU291cmNlO1xuICAgICAgICAgICAgZGF0YS51cyA9IHV0bVNvdXJjZTsgLy8gdXRtX3NvdXJjZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciB1dG1NZWRpdW0gPSB1cmxQYXJhbXMudXRtX21lZGl1bSB8fCB1cmxQYXJhbXMud3pya19tZWRpdW07XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHV0bU1lZGl1bSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHV0bU1lZGl1bSA9IHV0bU1lZGl1bS5sZW5ndGggPiBtYXhMZW4gPyB1dG1NZWRpdW0uc3Vic3RyaW5nKDAsIG1heExlbikgOiB1dG1NZWRpdW07XG4gICAgICAgICAgICBkYXRhLnVtID0gdXRtTWVkaXVtOyAvLyB1dG1fbWVkaXVtXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHV0bUNhbXBhaWduID0gdXJsUGFyYW1zLnV0bV9jYW1wYWlnbiB8fCB1cmxQYXJhbXMud3pya19jYW1wYWlnbjtcblxuICAgICAgICAgIGlmICh0eXBlb2YgdXRtQ2FtcGFpZ24gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB1dG1DYW1wYWlnbiA9IHV0bUNhbXBhaWduLmxlbmd0aCA+IG1heExlbiA/IHV0bUNhbXBhaWduLnN1YnN0cmluZygwLCBtYXhMZW4pIDogdXRtQ2FtcGFpZ247XG4gICAgICAgICAgICBkYXRhLnVjID0gdXRtQ2FtcGFpZ247IC8vIHV0bV9jYW1wYWlnblxuICAgICAgICAgIH0gLy8gYWxzbyBpbmRlcGVuZGVudGx5IHNlbmQgd3pya19tZWRpdW0gdG8gdGhlIGJhY2tlbmRcblxuXG4gICAgICAgICAgaWYgKHR5cGVvZiB1cmxQYXJhbXMud3pya19tZWRpdW0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB2YXIgd20gPSB1cmxQYXJhbXMud3pya19tZWRpdW07XG5cbiAgICAgICAgICAgIGlmICh3bS5tYXRjaCgvXmVtYWlsJHxec29jaWFsJHxec2VhcmNoJC8pKSB7XG4gICAgICAgICAgICAgIGRhdGEud20gPSB3bTsgLy8gd3pya19tZWRpdW1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBkYXRhID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0JDYpW19yZXF1ZXN0JDZdLmFkZFN5c3RlbURhdGFUb09iamVjdChkYXRhLCB1bmRlZmluZWQpO1xuICAgICAgICBkYXRhLmNwZyA9IGN1cnJMb2NhdGlvbjtcbiAgICAgICAgZGF0YVtDQU1QX0NPT0tJRV9OQU1FXSA9IGdldENhbXBhaWduT2JqRm9yTGMoKTtcblxuICAgICAgICB2YXIgcGFnZUxvYWRVcmwgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2FjY291bnQkNSlbX2FjY291bnQkNV0uZGF0YVBvc3RVUkw7XG5cbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0JDYpW19yZXF1ZXN0JDZdLmFkZEZsYWdzKGRhdGEpOyAvLyBzZW5kIGRzeW5jIGZsYWcgd2hlbiBwYWdlID0gMVxuXG5cbiAgICAgICAgaWYgKHBhcnNlSW50KGRhdGEucGcpID09PSAxKSB7XG4gICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9vdmVycmlkZURTeW5jRmxhZylbX292ZXJyaWRlRFN5bmNGbGFnXShkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGEuYWYgPSB7XG4gICAgICAgICAgbGliOiAnd2ViLXNkay12MS4zLjMnXG4gICAgICAgIH07XG4gICAgICAgIHBhZ2VMb2FkVXJsID0gYWRkVG9VUkwocGFnZUxvYWRVcmwsICd0eXBlJywgJ3BhZ2UnKTtcbiAgICAgICAgcGFnZUxvYWRVcmwgPSBhZGRUb1VSTChwYWdlTG9hZFVybCwgJ2QnLCBjb21wcmVzc0RhdGEoSlNPTi5zdHJpbmdpZnkoZGF0YSksIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfbG9nZ2VyJDkpW19sb2dnZXIkOV0pKTtcblxuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlcXVlc3QkNilbX3JlcXVlc3QkNl0uc2F2ZUFuZEZpcmVSZXF1ZXN0KHBhZ2VMb2FkVXJsLCBmYWxzZSk7XG5cbiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9wcmV2aW91c1VybClbX3ByZXZpb3VzVXJsXSA9IGN1cnJMb2NhdGlvbjsgLy8gTk9URSAtIHdoeSBkbyB3ZSB1c2UgcGluZyByZXF1ZXN0XG4gICAgICAgIC8vIE5PVEUgLSBETyB3ZSBuZWVkIHRvIGNsZWFyIHRoZSB0aW1lb3V0P1xuXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChwZ0NvdW50IDw9IDMpIHtcbiAgICAgICAgICAgIC8vIHNlbmQgcGluZyBmb3IgdXAgdG8gMyBwYWdlc1xuICAgICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKF90aGlzMiwgX3BpbmdSZXF1ZXN0KVtfcGluZ1JlcXVlc3RdKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZShfdGhpczIsIF9pc1BpbmdDb250aW51b3VzKVtfaXNQaW5nQ29udGludW91c10oKSkge1xuICAgICAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UoX3RoaXMyLCBfcGluZ1JlcXVlc3QpW19waW5nUmVxdWVzdF0oKTtcbiAgICAgICAgICAgIH0sIENPTlRJTlVPVVNfUElOR19GUkVRX0lOX01JTExJUyk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBGSVJTVF9QSU5HX0ZSRVFfSU5fTUlMTElTKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gU3RvcmFnZU1hbmFnZXIuX2lzTG9jYWxTdG9yYWdlU3VwcG9ydGVkKCkgJiYgdGhpcy5lbmFibGVQZXJzb25hbGl6YXRpb247XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNlbmRNdWx0aVZhbHVlRGF0YVwiLFxuXG4gICAgICAvKipcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gcGF5bG9hZFxuICAgICAgICovXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2VuZE11bHRpVmFsdWVEYXRhKHBheWxvYWQpIHtcbiAgICAgICAgLy8gU2VuZCB0aGUgdXBkYXRlZCB2YWx1ZSB0byBMQ1xuICAgICAgICB2YXIgZGF0YSA9IHt9O1xuICAgICAgICBkYXRhLmFmID0ge307XG4gICAgICAgIHZhciBwcm9maWxlT2JqID0ge307XG4gICAgICAgIGRhdGEudHlwZSA9ICdwcm9maWxlJztcblxuICAgICAgICBpZiAocHJvZmlsZU9iai50eiA9PSBudWxsKSB7XG4gICAgICAgICAgcHJvZmlsZU9iai50eiA9IG5ldyBEYXRlKCkudG9TdHJpbmcoKS5tYXRjaCgvKFtBLVpdK1tcXCstXVswLTldKykvKVsxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGEucHJvZmlsZSA9IHByb2ZpbGVPYmo7XG5cbiAgICAgICAgaWYgKHBheWxvYWQpIHtcbiAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHBheWxvYWQpO1xuICAgICAgICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBkYXRhLmFmW2tleV0gPSBwYXlsb2FkW2tleV07XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBkYXRhID0gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0JDYpW19yZXF1ZXN0JDZdLmFkZFN5c3RlbURhdGFUb1Byb2ZpbGVPYmplY3QoZGF0YSwgdW5kZWZpbmVkKTtcblxuICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX3JlcXVlc3QkNilbX3JlcXVlc3QkNl0uYWRkRmxhZ3MoZGF0YSk7XG5cbiAgICAgICAgdmFyIGNvbXByZXNzZWREYXRhID0gY29tcHJlc3NEYXRhKEpTT04uc3RyaW5naWZ5KGRhdGEpLCBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2xvZ2dlciQ5KVtfbG9nZ2VyJDldKTtcblxuICAgICAgICB2YXIgcGFnZUxvYWRVcmwgPSBfY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2UodGhpcywgX2FjY291bnQkNSlbX2FjY291bnQkNV0uZGF0YVBvc3RVUkw7XG5cbiAgICAgICAgcGFnZUxvYWRVcmwgPSBhZGRUb1VSTChwYWdlTG9hZFVybCwgJ3R5cGUnLCBFVlRfUFVTSCk7XG4gICAgICAgIHBhZ2VMb2FkVXJsID0gYWRkVG9VUkwocGFnZUxvYWRVcmwsICdkJywgY29tcHJlc3NlZERhdGEpO1xuXG4gICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdCQ2KVtfcmVxdWVzdCQ2XS5zYXZlQW5kRmlyZVJlcXVlc3QocGFnZUxvYWRVcmwsICRjdC5ibG9ja1JlcXVlc3QpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJwb3B1cENhbGxiYWNrXCIsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgYWNjZXNzb3ItcGFpcnNcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMucG9wdXBDYWxsYmFja3NbdGhpcy5wb3B1cEN1cnJlbnRXenJrSWRdID0gY2FsbGJhY2s7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIENsZXZlclRhcDtcbiAgfSgpO1xuXG4gIHZhciBfcHJvY2Vzc09sZFZhbHVlczIgPSBmdW5jdGlvbiBfcHJvY2Vzc09sZFZhbHVlczIoKSB7XG4gICAgdGhpcy5vblVzZXJMb2dpbi5fcHJvY2Vzc09sZFZhbHVlcygpO1xuXG4gICAgdGhpcy5wcml2YWN5Ll9wcm9jZXNzT2xkVmFsdWVzKCk7XG5cbiAgICB0aGlzLmV2ZW50Ll9wcm9jZXNzT2xkVmFsdWVzKCk7XG5cbiAgICB0aGlzLnByb2ZpbGUuX3Byb2Nlc3NPbGRWYWx1ZXMoKTtcblxuICAgIHRoaXMubm90aWZpY2F0aW9ucy5fcHJvY2Vzc09sZFZhbHVlcygpO1xuICB9O1xuXG4gIHZhciBfY2hlY2tQYWdlQ2hhbmdlZDIgPSBmdW5jdGlvbiBfY2hlY2tQYWdlQ2hhbmdlZDIoKSB7XG4gICAgaWYgKF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcHJldmlvdXNVcmwpW19wcmV2aW91c1VybF0gIT09IGxvY2F0aW9uLmhyZWYpIHtcbiAgICAgIHRoaXMucGFnZUNoYW5nZWQoKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIF9waW5nUmVxdWVzdDIgPSBmdW5jdGlvbiBfcGluZ1JlcXVlc3QyKCkge1xuICAgIHZhciBwYWdlTG9hZFVybCA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfYWNjb3VudCQ1KVtfYWNjb3VudCQ1XS5kYXRhUG9zdFVSTDtcblxuICAgIHZhciBkYXRhID0ge307XG4gICAgZGF0YSA9IF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSh0aGlzLCBfcmVxdWVzdCQ2KVtfcmVxdWVzdCQ2XS5hZGRTeXN0ZW1EYXRhVG9PYmplY3QoZGF0YSwgdW5kZWZpbmVkKTtcbiAgICBwYWdlTG9hZFVybCA9IGFkZFRvVVJMKHBhZ2VMb2FkVXJsLCAndHlwZScsIEVWVF9QSU5HKTtcbiAgICBwYWdlTG9hZFVybCA9IGFkZFRvVVJMKHBhZ2VMb2FkVXJsLCAnZCcsIGNvbXByZXNzRGF0YShKU09OLnN0cmluZ2lmeShkYXRhKSwgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9sb2dnZXIkOSlbX2xvZ2dlciQ5XSkpO1xuXG4gICAgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHRoaXMsIF9yZXF1ZXN0JDYpW19yZXF1ZXN0JDZdLnNhdmVBbmRGaXJlUmVxdWVzdChwYWdlTG9hZFVybCwgZmFsc2UpO1xuICB9O1xuXG4gIHZhciBfaXNQaW5nQ29udGludW91czIgPSBmdW5jdGlvbiBfaXNQaW5nQ29udGludW91czIoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cud3pya19kICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cud3pya19kLnBpbmcgPT09ICdjb250aW51b3VzJztcbiAgfTtcblxuICB2YXIgX292ZXJyaWRlRFN5bmNGbGFnMiA9IGZ1bmN0aW9uIF9vdmVycmlkZURTeW5jRmxhZzIoZGF0YSkge1xuICAgIGlmICh0aGlzLl9pc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZSgpKSB7XG4gICAgICBkYXRhLmRzeW5jID0gdHJ1ZTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNsZXZlcnRhcCA9IG5ldyBDbGV2ZXJUYXAod2luZG93LmNsZXZlcnRhcCk7XG4gIHdpbmRvdy5jbGV2ZXJ0YXAgPSB3aW5kb3cud2l6cm9ja2V0ID0gY2xldmVydGFwO1xuXG4gIHJldHVybiBjbGV2ZXJ0YXA7XG5cbn0pKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGV2ZXJ0YXAuanMubWFwXG4iLCIvKipcbiAqIExvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyA8aHR0cHM6Ly9qcy5mb3VuZGF0aW9uLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuXG4vKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbnZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xudmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xudmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG50eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbnR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbnR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbnR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbnR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbnR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbnR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbnR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbnR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4vKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbnZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZpbHRlcmAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXNJbmRleCA9IDAsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBBcHBlbmRzIHRoZSBlbGVtZW50cyBvZiBgdmFsdWVzYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W29mZnNldCArIGluZGV4XSA9IHZhbHVlc1tpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zb21lYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlTb21lKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGNhY2hlSGFzKGNhY2hlLCBrZXkpIHtcbiAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICovXG5mdW5jdGlvbiBtYXBUb0FycmF5KG1hcCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbi8qKlxuICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLFxuICAgIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG52YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xufSgpKTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICBTeW1ib2wgPSByb290LlN5bWJvbCxcbiAgICBVaW50OEFycmF5ID0gcm9vdC5VaW50OEFycmF5LFxuICAgIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGUsXG4gICAgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2UsXG4gICAgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxcbiAgICBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKHJvb3QsICdEYXRhVmlldycpLFxuICAgIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyksXG4gICAgUHJvbWlzZSA9IGdldE5hdGl2ZShyb290LCAnUHJvbWlzZScpLFxuICAgIFNldCA9IGdldE5hdGl2ZShyb290LCAnU2V0JyksXG4gICAgV2Vha01hcCA9IGdldE5hdGl2ZShyb290LCAnV2Vha01hcCcpLFxuICAgIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbnZhciBkYXRhVmlld0N0b3JTdHJpbmcgPSB0b1NvdXJjZShEYXRhVmlldyksXG4gICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICBzZXRDdG9yU3RyaW5nID0gdG9Tb3VyY2UoU2V0KSxcbiAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbkhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbkhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG5IYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gW107XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICBkYXRhLnBvcCgpO1xuICB9IGVsc2Uge1xuICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgfVxuICAtLXRoaXMuc2l6ZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgICsrdGhpcy5zaXplO1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbkxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuc2l6ZSA9IDA7XG4gIHRoaXMuX19kYXRhX18gPSB7XG4gICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgfTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuLyoqXG4gKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGU7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBZGRzIGB2YWx1ZWAgdG8gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBhZGRcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQGFsaWFzIHB1c2hcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlQWRkKHZhbHVlKSB7XG4gIHRoaXMuX19kYXRhX18uc2V0KHZhbHVlLCBIQVNIX1VOREVGSU5FRCk7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlSGFzKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTZXRDYWNoZWAuXG5TZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcblNldENhY2hlLnByb3RvdHlwZS5oYXMgPSBzZXRDYWNoZUhhcztcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqL1xuZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgfVxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cblN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG5TdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG5TdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG5TdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG5TdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKSxcbiAgICAgIGlzQXJnID0gIWlzQXJyICYmIGlzQXJndW1lbnRzKHZhbHVlKSxcbiAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgaXNUeXBlID0gIWlzQXJyICYmICFpc0FyZyAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSh2YWx1ZSksXG4gICAgICBza2lwSW5kZXhlcyA9IGlzQXJyIHx8IGlzQXJnIHx8IGlzQnVmZiB8fCBpc1R5cGUsXG4gICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoXG4gICAgICAgICAgIC8vIFNhZmFyaSA5IGhhcyBlbnVtZXJhYmxlIGBhcmd1bWVudHMubGVuZ3RoYCBpbiBzdHJpY3QgbW9kZS5cbiAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgIC8vIE5vZGUuanMgMC4xMCBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiBidWZmZXJzLlxuICAgICAgICAgICAoaXNCdWZmICYmIChrZXkgPT0gJ29mZnNldCcgfHwga2V5ID09ICdwYXJlbnQnKSkgfHxcbiAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAoaXNUeXBlICYmIChrZXkgPT0gJ2J1ZmZlcicgfHwga2V5ID09ICdieXRlTGVuZ3RoJyB8fCBrZXkgPT0gJ2J5dGVPZmZzZXQnKSkgfHxcbiAgICAgICAgICAgLy8gU2tpcCBpbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICApKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXNcbiAqIGBrZXlzRnVuY2AgYW5kIGBzeW1ib2xzRnVuY2AgdG8gZ2V0IHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN5bWJvbHNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNGdW5jLCBzeW1ib2xzRnVuYykge1xuICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgcmV0dXJuIGlzQXJyYXkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqL1xuZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICB9XG4gIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICBvYmpUYWcgPSBvYmpJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG9iamVjdCksXG4gICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG5cbiAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgIG9iaklzT2JqID0gZmFsc2U7XG4gIH1cbiAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgfVxuICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBhcnJheXMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcblxuICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICBpZiAoc3RhY2tlZCAmJiBzdGFjay5nZXQob3RoZXIpKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gIH1cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgc3RhY2suc2V0KGFycmF5LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHtcbiAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGNvbXBhcmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoc2Vlbikge1xuICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgaWYgKCFjYWNoZUhhcyhzZWVuLCBvdGhJbmRleCkgJiZcbiAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICBhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHxcbiAgICAgICAgICAgIGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgY29tcGFyaW5nIG9iamVjdHMgb2ZcbiAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuXG4gKlxuICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjb21wYXJpbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdHMgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICBvdGhlciA9IG90aGVyLmJ1ZmZlcjtcblxuICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgIWVxdWFsRnVuYyhuZXcgVWludDhBcnJheShvYmplY3QpLCBuZXcgVWludDhBcnJheShvdGhlcikpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgY2FzZSBib29sVGFnOlxuICAgIGNhc2UgZGF0ZVRhZzpcbiAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuXG4gICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgcmV0dXJuIGVxKCtvYmplY3QsICtvdGhlcik7XG5cbiAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgIC8vIGFzIGVxdWFsLiBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbiAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgIGNhc2UgbWFwVGFnOlxuICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuXG4gICAgY2FzZSBzZXRUYWc6XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHO1xuICAgICAgY29udmVydCB8fCAoY29udmVydCA9IHNldFRvQXJyYXkpO1xuXG4gICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIGJpdG1hc2sgfD0gQ09NUEFSRV9VTk9SREVSRURfRkxBRztcblxuICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICB2YXIgcmVzdWx0ID0gZXF1YWxBcnJheXMoY29udmVydChvYmplY3QpLCBjb252ZXJ0KG90aGVyKSwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mLmNhbGwob2JqZWN0KSA9PSBzeW1ib2xWYWx1ZU9mLmNhbGwob3RoZXIpO1xuICAgICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIG9iamVjdHMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgb2JqTGVuZ3RoID0gb2JqUHJvcHMubGVuZ3RoLFxuICAgICAgb3RoUHJvcHMgPSBnZXRBbGxLZXlzKG90aGVyKSxcbiAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICBpZiAob2JqTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBpbmRleCA9IG9iakxlbmd0aDtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIGlmICghKGlzUGFydGlhbCA/IGtleSBpbiBvdGhlciA6IGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsIGtleSkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICB9XG4gIHZhciByZXN1bHQgPSB0cnVlO1xuICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSlcbiAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgfVxuICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICovXG52YXIgZ2V0U3ltYm9scyA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgcmV0dXJuIGFycmF5RmlsdGVyKG5hdGl2ZUdldFN5bWJvbHMob2JqZWN0KSwgZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpO1xuICB9KTtcbn07XG5cbi8qKlxuICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbnZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4vLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG5pZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHwgcmVJc1VpbnQudGVzdCh2YWx1ZSkpICYmXG4gICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG59XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBQZXJmb3JtcyBhXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoJ2EnLCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoTmFOLCBOYU4pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG59O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxuLyoqXG4gKiBQZXJmb3JtcyBhIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlXG4gKiBlcXVpdmFsZW50LlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBjb21wYXJpbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucyxcbiAqIGRhdGUgb2JqZWN0cywgZXJyb3Igb2JqZWN0cywgbWFwcywgbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcyxcbiAqIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZCBhcnJheXMuIGBPYmplY3RgIG9iamVjdHMgYXJlIGNvbXBhcmVkXG4gKiBieSB0aGVpciBvd24sIG5vdCBpbmhlcml0ZWQsIGVudW1lcmFibGUgcHJvcGVydGllcy4gRnVuY3Rpb25zIGFuZCBET01cbiAqIG5vZGVzIGFyZSBjb21wYXJlZCBieSBzdHJpY3QgZXF1YWxpdHksIGkuZS4gYD09PWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uaXNFcXVhbChvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBvYmplY3QgPT09IG90aGVyO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNFcXVhbCh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlcik7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0xlbmd0aCgzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aCgnMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8ua2V5cygnaGknKTtcbiAqIC8vID0+IFsnMCcsICcxJ11cbiAqL1xuZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5cyk7XG4gKiAvLyA9PiBbW10sIFtdXVxuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5c1swXSA9PT0gYXJyYXlzWzFdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIHN0dWJBcnJheSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNFcXVhbDtcbiIsIlwidXNlIHN0cmljdFwiO1xuLypcbiAqICBDb3B5cmlnaHQgMjAyMCBMZWFucGx1bSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdDpcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBDb25zdGFudHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9Db25zdGFudHNcIikpO1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuLyoqXG4gKiBMZWFucGx1bSBBcmdzQnVpbGRlciwgdXNlIHRvIGNvbnN0cnVjdCByZXF1ZXN0IHBheWxvYWQuXG4gKi9cbnZhciBBcmdzQnVpbGRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgZW1wdHkgcmVxdWVzdCBhcmd1bWVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBBcmdzQnVpbGRlcigpIHtcbiAgICAgICAgdGhpcy5hcmdTdHJpbmcgPSAnJztcbiAgICAgICAgdGhpcy5hcmdWYWx1ZXMgPSB7fTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGdpdmVuIGtleSwgdmFsdWUgdG8gdGhlIHBheWxvYWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IGZvciB0aGUgdmFsdWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd8Ym9vbGVhbn0gdmFsdWUgVGhlIHZhbHVlIGZvciBnaXZlbiBrZXkuXG4gICAgICogQHJldHVybiB7QXJnc0J1aWxkZXJ9IFJldHVybnMgYW4gb2JqZWN0IG9mIEFyZ3NCdWlsZGVyLlxuICAgICAqL1xuICAgIEFyZ3NCdWlsZGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYXJnU3RyaW5nKSB7XG4gICAgICAgICAgICB0aGlzLmFyZ1N0cmluZyArPSAnJic7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZhbCA9ICcnO1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgdmFsID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFsID0gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFyZ1N0cmluZyArPSBcIlwiLmNvbmNhdChrZXksIFwiPVwiKS5jb25jYXQodmFsKTtcbiAgICAgICAgdGhpcy5hcmdWYWx1ZXNba2V5XSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIEFyZ3NCdWlsZGVyLnByb3RvdHlwZS5ib2R5ID0gZnVuY3Rpb24gKGJvZHkpIHtcbiAgICAgICAgaWYgKGJvZHkpIHtcbiAgICAgICAgICAgIHRoaXMuX2JvZHkgPSBib2R5O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2JvZHk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDb252ZW5pZW5jZSBtZXRob2QgdG8gYXR0YWNoIGdpdmVuIGFwcElkIGFuZCBhcHBLZXkgdG8gcmVxdWVzdC5cbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IGFwcElkIFRoZSBhcHBJZCB0byBhdHRhY2guXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSBjbGllbnRLZXkgVGhlIGFwcEtleSB0byBhdHRhY2guXG4gICAgICogQHJldHVybiB7QXJnc0J1aWxkZXJ9IFJldHVybnMgYW4gb2JqZWN0IG9mIEFyZ3NCdWlsZGVyLlxuICAgICAqL1xuICAgIEFyZ3NCdWlsZGVyLnByb3RvdHlwZS5hdHRhY2hBcGlLZXlzID0gZnVuY3Rpb24gKGFwcElkLCBjbGllbnRLZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLkFQUF9JRCwgYXBwSWQpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLkNMSUVOVCwgQ29uc3RhbnRzXzEuZGVmYXVsdC5DTElFTlQpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLkNMSUVOVF9LRVksIGNsaWVudEtleSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIGFyZ3VtZW50cy5cbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IEFyZ3VtZW50cyBzdHJpbmcuXG4gICAgICovXG4gICAgQXJnc0J1aWxkZXIucHJvdG90eXBlLmJ1aWxkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcmdTdHJpbmc7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIGFyZ3VtZW50IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBhcmd1bWVudCB2YWx1ZXMuXG4gICAgICovXG4gICAgQXJnc0J1aWxkZXIucHJvdG90eXBlLmJ1aWxkRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXJnVmFsdWVzO1xuICAgIH07XG4gICAgcmV0dXJuIEFyZ3NCdWlsZGVyO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IEFyZ3NCdWlsZGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogIENvcHlyaWdodCAyMDIwIExlYW5wbHVtIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0OlxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8gQnJvd3NlciBkZXRlY3Rpb24uIFNvdXJjZTogaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9qcy9kZXRlY3QuaHRtbFxuLyoqXG4gKiBIZWxwZXIgY2xhc3MgdG8gZGV0ZWN0IHdoaWNoIGJyb3dzZXIgY2xpZW50IGlzIHVzaW5nLlxuICovXG52YXIgQnJvd3NlckRldGVjdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBvYmplY3Qgd2l0aCBjdXJyZW50IGJyb3dzZXIgc2V0dGluZ3MuXG4gICAgICovXG4gICAgZnVuY3Rpb24gQnJvd3NlckRldGVjdG9yKHduZCkge1xuICAgICAgICB0aGlzLmJyb3dzZXIgPSB0aGlzLnNlYXJjaFN0cmluZyh0aGlzLmdldEJyb3dzZXJEYXRhKHduZCkpIHx8ICdVbmtub3duIEJyb3dzZXInO1xuICAgICAgICB0aGlzLnZlcnNpb24gPSAodGhpcy5zZWFyY2hWZXJzaW9uKHduZC5uYXZpZ2F0b3IudXNlckFnZW50KSB8fFxuICAgICAgICAgICAgdGhpcy5zZWFyY2hWZXJzaW9uKHduZC5uYXZpZ2F0b3IuYXBwVmVyc2lvbikgfHxcbiAgICAgICAgICAgICdVbmtub3duIFZlcnNpb24nKTtcbiAgICAgICAgdGhpcy5PUyA9IHRoaXMuc2VhcmNoU3RyaW5nKHRoaXMuZ2V0T1NEYXRhKHduZCkpIHx8ICdVbmtub3duIE9TJztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWF0Y2hlcyB0aGUgY2xpZW50J3Mgc3lzdGVtIHRvIHRoZSBwcmVkZWZpbmVkIHN5c3RlbSBsaXN0LlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIFRoZSBkYXRhIG9iamVjdCB0byBzY2FuLlxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGZvdW5kIGlkZW50aXR5IHN0cmluZy5cbiAgICAgKi9cbiAgICBCcm93c2VyRGV0ZWN0b3IucHJvdG90eXBlLnNlYXJjaFN0cmluZyA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGRhdGFTdHJpbmcgPSBkYXRhW2ldLnN0cmluZztcbiAgICAgICAgICAgIHZhciBkYXRhUHJvcCA9IGRhdGFbaV0ucHJvcDtcbiAgICAgICAgICAgIHRoaXMudmVyc2lvblNlYXJjaFN0cmluZyA9IGRhdGFbaV0udmVyc2lvblNlYXJjaCB8fCBkYXRhW2ldLmlkZW50aXR5O1xuICAgICAgICAgICAgaWYgKGRhdGFTdHJpbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YVN0cmluZy5pbmRleE9mKGRhdGFbaV0uc3ViU3RyaW5nKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFbaV0uaWRlbnRpdHk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZGF0YVByb3ApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVtpXS5pZGVudGl0eTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogRmluZHMgdGhlIGN1cnJlbnQgdmVyc2lvbiBvZiB0aGUgZ2l2ZW4gc3lzdGVtLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhU3RyaW5nIFRoZSBkYXRhIG9iamVjdCB0byBzY2FuLlxuICAgICAqIEByZXR1cm4ge251bWJlcn0gVGhlIGZvdW5kIG51bWJlci5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIEJyb3dzZXJEZXRlY3Rvci5wcm90b3R5cGUuc2VhcmNoVmVyc2lvbiA9IGZ1bmN0aW9uIChkYXRhU3RyaW5nKSB7XG4gICAgICAgIGlmICghZGF0YVN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5kZXggPSBkYXRhU3RyaW5nLmluZGV4T2YodGhpcy52ZXJzaW9uU2VhcmNoU3RyaW5nKTtcbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChkYXRhU3RyaW5nLnN1YnN0cmluZyhpbmRleCArIHRoaXMudmVyc2lvblNlYXJjaFN0cmluZy5sZW5ndGggKyAxKSk7XG4gICAgfTtcbiAgICBCcm93c2VyRGV0ZWN0b3IucHJvdG90eXBlLmdldEJyb3dzZXJEYXRhID0gZnVuY3Rpb24gKHduZCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmluZzogd25kLm5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgICAgICAgICAgc3ViU3RyaW5nOiAnQ2hyb21lJyxcbiAgICAgICAgICAgICAgICBpZGVudGl0eTogJ0Nocm9tZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmluZzogd25kLm5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgICAgICAgICAgc3ViU3RyaW5nOiAnT21uaVdlYicsXG4gICAgICAgICAgICAgICAgaWRlbnRpdHk6ICdPbW5pV2ViJyxcbiAgICAgICAgICAgICAgICB2ZXJzaW9uU2VhcmNoOiAnT21uaVdlYi8nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHJpbmc6IHduZC5uYXZpZ2F0b3IudXNlckFnZW50LFxuICAgICAgICAgICAgICAgIHN1YlN0cmluZzogJ0NyaU9TJyxcbiAgICAgICAgICAgICAgICBpZGVudGl0eTogJ0Nocm9tZScsXG4gICAgICAgICAgICAgICAgdmVyc2lvblNlYXJjaDogJ0NyaU9TJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nOiB3bmQubmF2aWdhdG9yLnVzZXJBZ2VudCxcbiAgICAgICAgICAgICAgICBzdWJTdHJpbmc6ICdGeGlPUycsXG4gICAgICAgICAgICAgICAgaWRlbnRpdHk6ICdGaXJlZm94JyxcbiAgICAgICAgICAgICAgICB2ZXJzaW9uU2VhcmNoOiAnRnhpT1MnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHJpbmc6IHduZC5uYXZpZ2F0b3IudmVuZG9yLFxuICAgICAgICAgICAgICAgIHN1YlN0cmluZzogJ0FwcGxlJyxcbiAgICAgICAgICAgICAgICBpZGVudGl0eTogJ1NhZmFyaScsXG4gICAgICAgICAgICAgICAgdmVyc2lvblNlYXJjaDogJ1ZlcnNpb24nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwcm9wOiB3bmQub3BlcmEsXG4gICAgICAgICAgICAgICAgaWRlbnRpdHk6ICdPcGVyYScsXG4gICAgICAgICAgICAgICAgdmVyc2lvblNlYXJjaDogJ1ZlcnNpb24nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHJpbmc6IHduZC5uYXZpZ2F0b3IudmVuZG9yLFxuICAgICAgICAgICAgICAgIHN1YlN0cmluZzogJ2lDYWInLFxuICAgICAgICAgICAgICAgIGlkZW50aXR5OiAnaUNhYicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmluZzogd25kLm5hdmlnYXRvci52ZW5kb3IsXG4gICAgICAgICAgICAgICAgc3ViU3RyaW5nOiAnS0RFJyxcbiAgICAgICAgICAgICAgICBpZGVudGl0eTogJ0tvbnF1ZXJvcicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmluZzogd25kLm5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgICAgICAgICAgc3ViU3RyaW5nOiAnRmlyZWZveCcsXG4gICAgICAgICAgICAgICAgaWRlbnRpdHk6ICdGaXJlZm94JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nOiB3bmQubmF2aWdhdG9yLnZlbmRvcixcbiAgICAgICAgICAgICAgICBzdWJTdHJpbmc6ICdDYW1pbm8nLFxuICAgICAgICAgICAgICAgIGlkZW50aXR5OiAnQ2FtaW5vJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nOiB3bmQubmF2aWdhdG9yLnVzZXJBZ2VudCxcbiAgICAgICAgICAgICAgICBzdWJTdHJpbmc6ICdOZXRzY2FwZScsXG4gICAgICAgICAgICAgICAgaWRlbnRpdHk6ICdOZXRzY2FwZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmluZzogd25kLm5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgICAgICAgICAgc3ViU3RyaW5nOiAnTVNJRScsXG4gICAgICAgICAgICAgICAgaWRlbnRpdHk6ICdFeHBsb3JlcicsXG4gICAgICAgICAgICAgICAgdmVyc2lvblNlYXJjaDogJ01TSUUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHJpbmc6IHduZC5uYXZpZ2F0b3IudXNlckFnZW50LFxuICAgICAgICAgICAgICAgIHN1YlN0cmluZzogJ0FuZHJvaWQnLFxuICAgICAgICAgICAgICAgIGlkZW50aXR5OiAnQW5kcm9pZCBCcm93c2VyJyxcbiAgICAgICAgICAgICAgICB2ZXJzaW9uU2VhcmNoOiAnVmVyc2lvbicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmluZzogd25kLm5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgICAgICAgICAgc3ViU3RyaW5nOiAnR2Vja28nLFxuICAgICAgICAgICAgICAgIGlkZW50aXR5OiAnTW96aWxsYScsXG4gICAgICAgICAgICAgICAgdmVyc2lvblNlYXJjaDogJ3J2JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nOiB3bmQubmF2aWdhdG9yLnVzZXJBZ2VudCxcbiAgICAgICAgICAgICAgICBzdWJTdHJpbmc6ICdNb3ppbGxhJyxcbiAgICAgICAgICAgICAgICBpZGVudGl0eTogJ05ldHNjYXBlJyxcbiAgICAgICAgICAgICAgICB2ZXJzaW9uU2VhcmNoOiAnTW96aWxsYScsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdO1xuICAgIH07XG4gICAgQnJvd3NlckRldGVjdG9yLnByb3RvdHlwZS5nZXRPU0RhdGEgPSBmdW5jdGlvbiAod25kKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nOiB3bmQubmF2aWdhdG9yLnBsYXRmb3JtLFxuICAgICAgICAgICAgICAgIHN1YlN0cmluZzogJ1dpbicsXG4gICAgICAgICAgICAgICAgaWRlbnRpdHk6ICdXaW5kb3dzJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nOiB3bmQubmF2aWdhdG9yLnBsYXRmb3JtLFxuICAgICAgICAgICAgICAgIHN1YlN0cmluZzogJ01hYycsXG4gICAgICAgICAgICAgICAgaWRlbnRpdHk6ICdNYWMgT1MnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHJpbmc6IHduZC5uYXZpZ2F0b3IucGxhdGZvcm0sXG4gICAgICAgICAgICAgICAgc3ViU3RyaW5nOiAnaVBhZCcsXG4gICAgICAgICAgICAgICAgaWRlbnRpdHk6ICdpT1MnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHJpbmc6IHduZC5uYXZpZ2F0b3IudXNlckFnZW50LFxuICAgICAgICAgICAgICAgIHN1YlN0cmluZzogJ2lQaG9uZScsXG4gICAgICAgICAgICAgICAgaWRlbnRpdHk6ICdpT1MnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHJpbmc6IHduZC5uYXZpZ2F0b3IudXNlckFnZW50LFxuICAgICAgICAgICAgICAgIHN1YlN0cmluZzogJ0FuZHJvaWQnLFxuICAgICAgICAgICAgICAgIGlkZW50aXR5OiAnQW5kcm9pZCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmluZzogd25kLm5hdmlnYXRvci5wbGF0Zm9ybSxcbiAgICAgICAgICAgICAgICBzdWJTdHJpbmc6ICdMaW51eCcsXG4gICAgICAgICAgICAgICAgaWRlbnRpdHk6ICdMaW51eCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdO1xuICAgIH07XG4gICAgcmV0dXJuIEJyb3dzZXJEZXRlY3Rvcjtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBCcm93c2VyRGV0ZWN0b3I7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qXG4gKlxuICogIENvcHlyaWdodCAyMDIwIExlYW5wbHVtIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlXG4gKlxuICovXG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gICAgTUVUSE9EUzoge1xuICAgICAgICBTVEFSVDogJ3N0YXJ0JyxcbiAgICAgICAgU1RPUDogJ3N0b3AnLFxuICAgICAgICBBRFZBTkNFOiAnYWR2YW5jZScsXG4gICAgICAgIFRSQUNLOiAndHJhY2snLFxuICAgICAgICBQQVVTRV9TRVNTSU9OOiAncGF1c2VTZXNzaW9uJyxcbiAgICAgICAgUkVTVU1FX1NFU1NJT046ICdyZXN1bWVTZXNzaW9uJyxcbiAgICAgICAgUEFVU0VfU1RBVEU6ICdwYXVzZVN0YXRlJyxcbiAgICAgICAgUkVTVU1FX1NUQVRFOiAncmVzdW1lU3RhdGUnLFxuICAgICAgICBET1dOTE9BRF9GSUxFOiAnZG93bmxvYWRGaWxlJyxcbiAgICAgICAgTVVMVEk6ICdtdWx0aScsXG4gICAgICAgIFNFVF9WQVJTOiAnc2V0VmFycycsXG4gICAgICAgIEdFVF9WQVJTOiAnZ2V0VmFycycsXG4gICAgICAgIFNFVF9VU0VSX0FUVFJJQlVURVM6ICdzZXRVc2VyQXR0cmlidXRlcycsXG4gICAgICAgIFNFVF9ERVZJQ0VfQVRUUklCVVRFUzogJ3NldERldmljZUF0dHJpYnV0ZXMnLFxuICAgICAgICBVUExPQURfRklMRTogJ3VwbG9hZEZpbGUnLFxuICAgICAgICBSRUdJU1RFUl9ERVZJQ0U6ICdyZWdpc3RlckRldmljZScsXG4gICAgfSxcbiAgICBTREtfVkVSU0lPTjogJzEuMTEuMC1kZXZlbG9wLjInLFxuICAgIENMSUVOVDogJ2pzJyxcbiAgICBQQVJBTVM6IHtcbiAgICAgICAgQUNUSU9OOiAnYWN0aW9uJyxcbiAgICAgICAgQVBQX0lEOiAnYXBwSWQnLFxuICAgICAgICBDTElFTlQ6ICdjbGllbnQnLFxuICAgICAgICBDTElFTlRfS0VZOiAnY2xpZW50S2V5JyxcbiAgICAgICAgQ1Q6ICdjdCcsXG4gICAgICAgIENVUlJFTkNZX0NPREU6ICdjdXJyZW5jeUNvZGUnLFxuICAgICAgICBERVZJQ0VfSUQ6ICdkZXZpY2VJZCcsXG4gICAgICAgIFNES19WRVJTSU9OOiAnc2RrVmVyc2lvbicsXG4gICAgICAgIFVTRVJfSUQ6ICd1c2VySWQnLFxuICAgICAgICBORVdfVVNFUl9JRDogJ25ld1VzZXJJZCcsXG4gICAgICAgIERFVl9NT0RFOiAnZGV2TW9kZScsXG4gICAgICAgIFZFUlNJT05fTkFNRTogJ3ZlcnNpb25OYW1lJyxcbiAgICAgICAgU1lTVEVNX05BTUU6ICdzeXN0ZW1OYW1lJyxcbiAgICAgICAgU1lTVEVNX1ZFUlNJT046ICdzeXN0ZW1WZXJzaW9uJyxcbiAgICAgICAgQlJPV1NFUl9OQU1FOiAnYnJvd3Nlck5hbWUnLFxuICAgICAgICBCUk9XU0VSX1ZFUlNJT046ICdicm93c2VyVmVyc2lvbicsXG4gICAgICAgIERFVklDRV9OQU1FOiAnZGV2aWNlTmFtZScsXG4gICAgICAgIERFVklDRV9NT0RFTDogJ2RldmljZU1vZGVsJyxcbiAgICAgICAgVVNFUl9BVFRSSUJVVEVTOiAndXNlckF0dHJpYnV0ZXMnLFxuICAgICAgICBMT0NBTEU6ICdsb2NhbGUnLFxuICAgICAgICBDT1VOVFJZOiAnY291bnRyeScsXG4gICAgICAgIFJFR0lPTjogJ3JlZ2lvbicsXG4gICAgICAgIENJVFk6ICdjaXR5JyxcbiAgICAgICAgTE9DQVRJT046ICdsb2NhdGlvbicsXG4gICAgICAgIFNUQVRFOiAnc3RhdGUnLFxuICAgICAgICBJTkZPOiAnaW5mbycsXG4gICAgICAgIEVWRU5UOiAnZXZlbnQnLFxuICAgICAgICBWQUxVRTogJ3ZhbHVlJyxcbiAgICAgICAgRklMRU5BTUU6ICdmaWxlbmFtZScsXG4gICAgICAgIFRJTUU6ICd0aW1lJyxcbiAgICAgICAgREFUQTogJ2RhdGEnLFxuICAgICAgICBWQVJTOiAndmFycycsXG4gICAgICAgIEZJTEU6ICdmaWxlJyxcbiAgICAgICAgU0laRTogJ3NpemUnLFxuICAgICAgICBWQVJJQVRJT046ICd2YXJpYXRpb24nLFxuICAgICAgICBIQVNIOiAnaGFzaCcsXG4gICAgICAgIEVNQUlMOiAnZW1haWwnLFxuICAgICAgICBWQVJJQUJMRVM6ICd2YXJzJyxcbiAgICAgICAgQUNUSU9OX0RFRklOSVRJT05TOiAnYWN0aW9uRGVmaW5pdGlvbnMnLFxuICAgICAgICBQQVJBTVM6ICdwYXJhbXMnLFxuICAgICAgICBJTkNMVURFX0RFRkFVTFRTOiAnaW5jbHVkZURlZmF1bHRzJyxcbiAgICAgICAgSU5DTFVERV9WQVJJQU5UX0RFQlVHX0lORk86ICdpbmNsdWRlVmFyaWFudERlYnVnSW5mbycsXG4gICAgICAgIE5FV1NGRUVEX01FU1NBR0VTOiAnbmV3c2ZlZWRNZXNzYWdlcycsXG4gICAgICAgIE1FU1NBR0VfSUQ6ICdtZXNzYWdlSWQnLFxuICAgICAgICBXRUJfUFVTSF9TVUJTQ1JJUFRJT046ICd3ZWJQdXNoU3Vic2NyaXB0aW9uJyxcbiAgICB9LFxuICAgIEtFWVM6IHtcbiAgICAgICAgSVNfUkVHSVNURVJFRDogJ2lzUmVnaXN0ZXJlZCcsXG4gICAgICAgIExBVEVTVF9WRVJTSU9OOiAnbGF0ZXN0VmVyc2lvbicsXG4gICAgICAgIFNZTkNfSU5CT1g6ICdzeW5jTmV3c2ZlZWQnLFxuICAgICAgICBNRVNTQUdFUzogJ21lc3NhZ2VzJyxcbiAgICAgICAgVkFSUzogJ3ZhcnMnLFxuICAgICAgICBWQVJJQU5UUzogJ3ZhcmlhbnRzJyxcbiAgICAgICAgVkFSSUFOVF9ERUJVR19JTkZPOiAndmFyaWFudERlYnVnSW5mbycsXG4gICAgICAgIEFDVElPTl9ERUZJTklUSU9OUzogJ2FjdGlvbkRlZmluaXRpb25zJyxcbiAgICAgICAgVE9LRU46ICd0b2tlbicsXG4gICAgfSxcbiAgICBERUZBVUxUX0tFWVM6IHtcbiAgICAgICAgQ09VTlQ6ICdfX2xlYW5wbHVtX3Vuc3luY2VkJyxcbiAgICAgICAgSVRFTTogJ19fbGVhbnBsdW1fdW5zeW5jZWRfJyxcbiAgICAgICAgVkFSSUFCTEVTOiAnX19sZWFucGx1bV92YXJpYWJsZXMnLFxuICAgICAgICBWQVJJQU5UUzogJ19fbGVhbnBsdW1fdmFyaWFudHMnLFxuICAgICAgICBWQVJJQU5UX0RFQlVHX0lORk86ICdfX2xlYW5wbHVtX3ZhcmlhbnRfZGVidWdfaW5mbycsXG4gICAgICAgIEFDVElPTl9ERUZJTklUSU9OUzogJ19fbGVhbnBsdW1fYWN0aW9uX2RlZmluaXRpb25zJyxcbiAgICAgICAgSE9TVF9DT05GSUc6ICdfX2xlYW5wbHVtX2hvc3RzJyxcbiAgICAgICAgSU5CT1hfTUVTU0FHRVM6ICdfX2xlYW5wbHVtX2luYm94X21lc3NhZ2VzJyxcbiAgICAgICAgVE9LRU46ICdfX2xlYW5wbHVtX3Rva2VuJyxcbiAgICAgICAgREVWSUNFX0lEOiAnX19sZWFucGx1bV9kZXZpY2VfaWQnLFxuICAgICAgICBVU0VSX0lEOiAnX19sZWFucGx1bV91c2VyX2lkJyxcbiAgICAgICAgU0VTU0lPTjogJ19fbGVhbnBsdW1fc2Vzc2lvbicsXG4gICAgICAgIE1FU1NBR0VfT0NDVVJSRU5DRVM6ICdfX2xlYW5wbHVtX21lc3NhZ2Vfb2NjdXJyZW5jZXMnLFxuICAgICAgICBNRVNTQUdFX0NBQ0hFOiAnX19sZWFucGx1bV9tZXNzYWdlX2NhY2hlJyxcbiAgICAgICAgTUlHUkFUSU9OX1NUQVRFOiAnX19sZWFucGx1bV9taWdyYXRpb25fc3RhdGUnLFxuICAgICAgICBQVVNIX1NVQlNDUklQVElPTjogJ19fbGVhbnBsdW1fcHVzaF9zdWJzY3JpcHRpb24nLFxuICAgIH0sXG4gICAgVkFMVUVTOiB7XG4gICAgICAgIERFVEVDVDogJyhkZXRlY3QpJyxcbiAgICAgICAgREVGQVVMVF9QVVNIX0FDVElPTjogJ09wZW4gYWN0aW9uJyxcbiAgICB9LFxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEV2ZW50RW1pdHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcbiAgICB9XG4gICAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlcnMucHVzaCh7IGV2ZW50TmFtZTogZXZlbnROYW1lLCBjYWxsYmFjazogY2FsbGJhY2sgfSk7XG4gICAgfTtcbiAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5ldmVudE5hbWUgIT09IGV2ZW50TmFtZSB8fCB4LmNhbGxiYWNrICE9PSBjYWxsYmFjazsgfSk7XG4gICAgfTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIEV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGFyZ3MpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgICAgICBpZiAoaGFuZGxlci5ldmVudE5hbWUgPT09IGV2ZW50TmFtZSkge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIuY2FsbGJhY2soYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIEV2ZW50RW1pdHRlcjtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBFdmVudEVtaXR0ZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiAgQ29weXJpZ2h0IDIwMjAgTGVhbnBsdW0gSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgSW50ZXJuYWxTdGF0ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBJbnRlcm5hbFN0YXRlKCkge1xuICAgICAgICB0aGlzLnN0YXJ0SGFuZGxlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5kZXZNb2RlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaGFzU3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN0YXJ0U3VjY2Vzc2Z1bCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnZhcmlhbnREZWJ1Z0luZm9FbmFibGVkID0gZmFsc2U7XG4gICAgfVxuICAgIEludGVybmFsU3RhdGUucHJvdG90eXBlLmFkZFN0YXJ0UmVzcG9uc2VIYW5kbGVyID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5zdGFydEhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgICAgIGlmICh0aGlzLmhhc1N0YXJ0ZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZXIodGhpcy5zdGFydFN1Y2Nlc3NmdWwpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnRlcm5hbFN0YXRlLnByb3RvdHlwZS5yZW1vdmVTdGFydFJlc3BvbnNlSGFuZGxlciA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHZhciBpZHggPSB0aGlzLnN0YXJ0SGFuZGxlcnMuaW5kZXhPZihoYW5kbGVyKTtcbiAgICAgICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0SGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEludGVybmFsU3RhdGUucHJvdG90eXBlLnRyaWdnZXJTdGFydEhhbmRsZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc3RhcnRIYW5kbGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5zdGFydEhhbmRsZXJzW2ldKHRoaXMuc3RhcnRTdWNjZXNzZnVsKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEludGVybmFsU3RhdGU7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gSW50ZXJuYWxTdGF0ZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuLypcbiAqICBDb3B5cmlnaHQgMjAyMCBMZWFucGx1bSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdDpcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBDb25zdGFudHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9Db25zdGFudHNcIikpO1xudmFyIExlYW5wbHVtSW50ZXJuYWxfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9MZWFucGx1bUludGVybmFsXCIpKTtcbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXMgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbnZhciBMZWFucGx1bSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMZWFucGx1bSgpIHtcbiAgICB9XG4gICAgTGVhbnBsdW0uc2V0QXBpUGF0aCA9IGZ1bmN0aW9uIChhcGlQYXRoKSB7XG4gICAgICAgIExlYW5wbHVtLl9scC5zZXRBcGlQYXRoKGFwaVBhdGgpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uc2V0RW1haWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIGRlcHJlY2F0ZWRcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG5ldHdvcmsgdGltZW91dC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2Vjb25kcyBUaGUgdGltZW91dCBpbiBzZWNvbmRzLlxuICAgICAqL1xuICAgIExlYW5wbHVtLnNldE5ldHdvcmtUaW1lb3V0ID0gZnVuY3Rpb24gKHNlY29uZHMpIHtcbiAgICAgICAgTGVhbnBsdW0uX2xwLnNldE5ldHdvcmtUaW1lb3V0KHNlY29uZHMpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uc2V0QXBwSWRGb3JEZXZlbG9wbWVudE1vZGUgPSBmdW5jdGlvbiAoYXBwSWQsIGFjY2Vzc0tleSkge1xuICAgICAgICBMZWFucGx1bS5fbHAuc2V0QXBwSWRGb3JEZXZlbG9wbWVudE1vZGUoYXBwSWQsIGFjY2Vzc0tleSk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5zZXRBcHBJZEZvclByb2R1Y3Rpb25Nb2RlID0gZnVuY3Rpb24gKGFwcElkLCBhY2Nlc3NLZXkpIHtcbiAgICAgICAgTGVhbnBsdW0uX2xwLnNldEFwcElkRm9yUHJvZHVjdGlvbk1vZGUoYXBwSWQsIGFjY2Vzc0tleSk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5zZXRTb2NrZXRIb3N0ID0gZnVuY3Rpb24gKGhvc3QpIHtcbiAgICAgICAgTGVhbnBsdW0uX2xwLnNldFNvY2tldEhvc3QoaG9zdCk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5zZXREZXZpY2VJZCA9IGZ1bmN0aW9uIChkZXZpY2VJZCkge1xuICAgICAgICBMZWFucGx1bS5fbHAuc2V0RGV2aWNlSWQoZGV2aWNlSWQpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uc2V0TG9jYWxlID0gZnVuY3Rpb24gKGxvY2FsZSkge1xuICAgICAgICBMZWFucGx1bS5fbHAuc2V0TG9jYWxlKGxvY2FsZSk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5zZXRBcHBWZXJzaW9uID0gZnVuY3Rpb24gKHZlcnNpb25OYW1lKSB7XG4gICAgICAgIExlYW5wbHVtLl9scC5zZXRBcHBWZXJzaW9uKHZlcnNpb25OYW1lKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnNldERldmljZU5hbWUgPSBmdW5jdGlvbiAoZGV2aWNlTmFtZSkge1xuICAgICAgICBMZWFucGx1bS5fbHAuc2V0RGV2aWNlTmFtZShkZXZpY2VOYW1lKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnNldERldmljZU1vZGVsID0gZnVuY3Rpb24gKGRldmljZU1vZGVsKSB7XG4gICAgICAgIExlYW5wbHVtLl9scC5zZXREZXZpY2VNb2RlbChkZXZpY2VNb2RlbCk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5zZXRSZXF1ZXN0QmF0Y2hpbmcgPSBmdW5jdGlvbiAoYmF0Y2hFbmFibGVkLCBjb29sZG93blNlY29uZHMpIHtcbiAgICAgICAgTGVhbnBsdW0uX2xwLnNldFJlcXVlc3RCYXRjaGluZyhiYXRjaEVuYWJsZWQsIGNvb2xkb3duU2Vjb25kcyk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5zZXRTeXN0ZW1OYW1lID0gZnVuY3Rpb24gKHN5c3RlbU5hbWUpIHtcbiAgICAgICAgTGVhbnBsdW0uX2xwLnNldFN5c3RlbU5hbWUoc3lzdGVtTmFtZSk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5zZXRTeXN0ZW1WZXJzaW9uID0gZnVuY3Rpb24gKHN5c3RlbVZlcnNpb24pIHtcbiAgICAgICAgTGVhbnBsdW0uX2xwLnNldFN5c3RlbVZlcnNpb24oc3lzdGVtVmVyc2lvbik7XG4gICAgfTtcbiAgICBMZWFucGx1bS5zZXRWYXJpYWJsZXMgPSBmdW5jdGlvbiAodmFyaWFibGVzKSB7XG4gICAgICAgIExlYW5wbHVtLl9scC5zZXRWYXJpYWJsZXModmFyaWFibGVzKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnNldFZhcmlhbnREZWJ1Z0luZm9FbmFibGVkID0gZnVuY3Rpb24gKHZhcmlhbnREZWJ1Z0luZm9FbmFibGVkKSB7XG4gICAgICAgIExlYW5wbHVtLl9scC5zZXRWYXJpYW50RGVidWdJbmZvRW5hYmxlZCh2YXJpYW50RGVidWdJbmZvRW5hYmxlZCk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5lbmFibGVSaWNoSW5BcHBNZXNzYWdlcyA9IGZ1bmN0aW9uIChlbmFibGVkKSB7XG4gICAgICAgIExlYW5wbHVtLl9scC5lbmFibGVSaWNoSW5BcHBNZXNzYWdlcyhlbmFibGVkKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnByb2Nlc3NNZXNzYWdlRXZlbnQgPSBmdW5jdGlvbiAobWVzc2FnZUlkLCBtZXNzYWdlKSB7XG4gICAgICAgIExlYW5wbHVtLl9scC5wcm9jZXNzTWVzc2FnZUV2ZW50KG1lc3NhZ2VJZCwgbWVzc2FnZSk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5nZXRWYXJpYW50RGVidWdJbmZvID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gTGVhbnBsdW0uX2xwLmdldFZhcmlhbnREZWJ1Z0luZm8oKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLmdldFZhcmlhYmxlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIExlYW5wbHVtLl9scC5nZXRWYXJpYWJsZXMoKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLmdldFZhcmlhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChfYSA9IExlYW5wbHVtLl9scCkuZ2V0VmFyaWFibGUuYXBwbHkoX2EsIGFyZ3MpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uZ2V0VmFyaWFudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBMZWFucGx1bS5fbHAuZ2V0VmFyaWFudHMoKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLmluYm94ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gTGVhbnBsdW0uX2xwLmluYm94KCk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5hZGRTdGFydFJlc3BvbnNlSGFuZGxlciA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIExlYW5wbHVtLl9scC5hZGRTdGFydFJlc3BvbnNlSGFuZGxlcihoYW5kbGVyKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnJlbW92ZVN0YXJ0UmVzcG9uc2VIYW5kbGVyID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgTGVhbnBsdW0uX2xwLnJlbW92ZVN0YXJ0UmVzcG9uc2VIYW5kbGVyKGhhbmRsZXIpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uYWRkVmFyaWFibGVzQ2hhbmdlZEhhbmRsZXIgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICBMZWFucGx1bS5fbHAuYWRkVmFyaWFibGVzQ2hhbmdlZEhhbmRsZXIoaGFuZGxlcik7XG4gICAgfTtcbiAgICBMZWFucGx1bS5yZW1vdmVWYXJpYWJsZXNDaGFuZ2VkSGFuZGxlciA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIExlYW5wbHVtLl9scC5yZW1vdmVWYXJpYWJsZXNDaGFuZ2VkSGFuZGxlcihoYW5kbGVyKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLmZvcmNlQ29udGVudFVwZGF0ZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICBMZWFucGx1bS5fbHAuZm9yY2VDb250ZW50VXBkYXRlKGNhbGxiYWNrKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnVzZVNlc3Npb25MZW5ndGggPSBmdW5jdGlvbiAoc2Vjb25kcykge1xuICAgICAgICBMZWFucGx1bS5fbHAudXNlU2Vzc2lvbkxlbmd0aChzZWNvbmRzKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnN0YXJ0ID0gZnVuY3Rpb24gKHVzZXJJZCwgdXNlckF0dHJpYnV0ZXMsIGNhbGxiYWNrKSB7XG4gICAgICAgIExlYW5wbHVtLl9scC5zdGFydCh1c2VySWQsIHVzZXJBdHRyaWJ1dGVzLCBjYWxsYmFjayk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5zdGFydEZyb21DYWNoZSA9IGZ1bmN0aW9uICh1c2VySWQsIHVzZXJBdHRyaWJ1dGVzLCBjYWxsYmFjaykge1xuICAgICAgICBMZWFucGx1bS5fbHAuc3RhcnRGcm9tQ2FjaGUodXNlcklkLCB1c2VyQXR0cmlidXRlcywgY2FsbGJhY2spO1xuICAgIH07XG4gICAgTGVhbnBsdW0uc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgTGVhbnBsdW0uX2xwLnN0b3AoKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnBhdXNlU2Vzc2lvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgTGVhbnBsdW0uX2xwLnBhdXNlU2Vzc2lvbigpO1xuICAgIH07XG4gICAgTGVhbnBsdW0ucmVzdW1lU2Vzc2lvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgTGVhbnBsdW0uX2xwLnJlc3VtZVNlc3Npb24oKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnBhdXNlU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIExlYW5wbHVtLl9scC5wYXVzZVN0YXRlKCk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5yZXN1bWVTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgTGVhbnBsdW0uX2xwLnJlc3VtZVN0YXRlKCk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5nZXRVc2VySWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9scC5nZXRVc2VySWQoKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnNldFVzZXJJZCA9IGZ1bmN0aW9uICh1c2VySWQpIHtcbiAgICAgICAgTGVhbnBsdW0uc2V0VXNlckF0dHJpYnV0ZXModXNlcklkKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnNldFVzZXJBdHRyaWJ1dGVzID0gZnVuY3Rpb24gKHVzZXJJZCwgdXNlckF0dHJpYnV0ZXMpIHtcbiAgICAgICAgTGVhbnBsdW0uX2xwLnNldFVzZXJBdHRyaWJ1dGVzKHVzZXJJZCwgdXNlckF0dHJpYnV0ZXMpO1xuICAgIH07XG4gICAgTGVhbnBsdW0udHJhY2sgPSBmdW5jdGlvbiAoZXZlbnQsIHZhbHVlLCBpbmZvLCBwYXJhbXMpIHtcbiAgICAgICAgTGVhbnBsdW0uX2xwLnRyYWNrKGV2ZW50LCB2YWx1ZSwgaW5mbywgcGFyYW1zKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLnRyYWNrUHVyY2hhc2UgPSBmdW5jdGlvbiAodmFsdWUsIGN1cnJlbmN5Q29kZSwgcGFyYW1zLCBldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQgPT09IHZvaWQgMCkgeyBldmVudCA9ICdQdXJjaGFzZSc7IH1cbiAgICAgICAgTGVhbnBsdW0uX2xwLnRyYWNrUHVyY2hhc2UodmFsdWUsIGN1cnJlbmN5Q29kZSwgcGFyYW1zLCBldmVudCk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5hZHZhbmNlVG8gPSBmdW5jdGlvbiAoc3RhdGUsIGluZm8sIHBhcmFtcykge1xuICAgICAgICBMZWFucGx1bS5fbHAuYWR2YW5jZVRvKHN0YXRlLCBpbmZvLCBwYXJhbXMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBpZiB3ZWIgcHVzaCBpcyBzdXBwb3J0ZWQgaW4gdGhlIGJyb3dzZXIuXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiBzdXBwb3J0ZWQsIGVsc2UgZmFsc2UuXG4gICAgICovXG4gICAgTGVhbnBsdW0uaXNXZWJQdXNoU3VwcG9ydGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gTGVhbnBsdW0uX2xwLmlzV2ViUHVzaFN1cHBvcnRlZCgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBpZiB3ZWIgcHVzaCBpcyBzdWJzY3JpYmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVzIGlmIHRydWUsIHJlamVjdHMgaWYgZmFsc2UuXG4gICAgICovXG4gICAgTGVhbnBsdW0uaXNXZWJQdXNoU3Vic2NyaWJlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIExlYW5wbHVtLl9scC5pc1dlYlB1c2hTdWJzY3JpYmVkKCk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5zZXRXZWJQdXNoT3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBMZWFucGx1bS5fbHAuc2V0V2ViUHVzaE9wdGlvbnMob3B0aW9ucyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciB0aGUgYnJvd3NlciBmb3Igd2ViIHB1c2guXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSAgIHNlcnZpY2VXb3JrZXJVcmwgVGhlIHVybCBvbiB5b3VyIHNlcnZlciB0aGF0IGhvc3RzIHRoZVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9zdy5taW4uanMgc2VydmljZSB3b3JrZXIganMgZmlsZS5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgICAgICAgICAgICBSZXNvbHZlcyBpZiByZWdpc3RyYXRpb24gc3VjY2Vzc2Z1bCxcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhlcndpc2UgZmFpbHMuXG4gICAgICovXG4gICAgTGVhbnBsdW0ucmVnaXN0ZXJGb3JXZWJQdXNoID0gZnVuY3Rpb24gKHNlcnZpY2VXb3JrZXJVcmwpIHtcbiAgICAgICAgcmV0dXJuIExlYW5wbHVtLl9scC5yZWdpc3RlckZvcldlYlB1c2goc2VydmljZVdvcmtlclVybCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBVbnJlZ2lzdGVycyB0aGUgYnJvd3NlciBmb3JtIHdlYiBwdXNoLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgICAgUmVzb2x2ZXMgb24gc3VjY2Vzcywgb3RoZXJ3aXNlIHJlamVjdHMuXG4gICAgICovXG4gICAgTGVhbnBsdW0udW5yZWdpc3RlckZyb21XZWJQdXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gTGVhbnBsdW0uX2xwLnVucmVnaXN0ZXJGcm9tV2ViUHVzaCgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2xlYXJzIGNhY2hlZCB2YWx1ZXMgZm9yIG1lc3NhZ2VzLCB2YXJpYWJsZXMgYW5kIHRlc3QgYXNzaWdubWVudHMuXG4gICAgICogVXNlIHNwYXJpbmdseSBhcyBpZiB0aGUgYXBwIGlzIHVwZGF0ZWQsIHlvdSdsbCBoYXZlIHRvIGRlYWwgd2l0aCBwb3RlbnRpYWxseVxuICAgICAqIGluY29uc2lzdGVudCBzdGF0ZSBvciB1c2VyIGV4cGVyaWVuY2UuXG4gICAgICovXG4gICAgTGVhbnBsdW0uY2xlYXJVc2VyQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgTGVhbnBsdW0uX2xwLmNsZWFyVXNlckNvbnRlbnQoKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLmRlZmluZUFjdGlvbiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIExlYW5wbHVtLl9scC5kZWZpbmVBY3Rpb24ob3B0aW9ucyk7XG4gICAgfTtcbiAgICBMZWFucGx1bS5hcHBseVF1ZXVlID0gZnVuY3Rpb24gKHF1ZXVlKSB7XG4gICAgICAgIExlYW5wbHVtLl9scC5hcHBseVF1ZXVlKHF1ZXVlKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLm9uID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgICAgICBMZWFucGx1bS5fbHAub24oZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICB9O1xuICAgIExlYW5wbHVtLm9mZiA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICAgICAgTGVhbnBsdW0uX2xwLm9mZihldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uZ2V0RmlsZVVybCA9IGZ1bmN0aW9uIChmaWxlbmFtZSkge1xuICAgICAgICByZXR1cm4gTGVhbnBsdW0uX2xwLmdldEZpbGVVcmwoZmlsZW5hbWUpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uX19kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9scCA9IG5ldyBMZWFucGx1bUludGVybmFsXzEuZGVmYXVsdCh3aW5kb3cpO1xuICAgIH07XG4gICAgTGVhbnBsdW0uX2xwID0gbmV3IExlYW5wbHVtSW50ZXJuYWxfMS5kZWZhdWx0KHdpbmRvdyk7XG4gICAgTGVhbnBsdW0uVkVSU0lPTiA9IENvbnN0YW50c18xLmRlZmF1bHQuU0RLX1ZFUlNJT047XG4gICAgcmV0dXJuIExlYW5wbHVtO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IExlYW5wbHVtO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5MZWFucGx1bUluYm94TWVzc2FnZSA9IHZvaWQgMDtcbnZhciBBcmdzQnVpbGRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0FyZ3NCdWlsZGVyXCIpKTtcbnZhciBDb25zdGFudHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9Db25zdGFudHNcIikpO1xudmFyIFN0b3JhZ2VNYW5hZ2VyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vU3RvcmFnZU1hbmFnZXJcIikpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbnZhciB2YWx1ZXMgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIG9ialtrZXldOyB9KTtcbn07XG52YXIgTGVhbnBsdW1JbmJveCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMZWFucGx1bUluYm94KGNyZWF0ZVJlcXVlc3QsIG9uQWN0aW9uKSB7XG4gICAgICAgIHRoaXMuY3JlYXRlUmVxdWVzdCA9IGNyZWF0ZVJlcXVlc3Q7XG4gICAgICAgIHRoaXMub25BY3Rpb24gPSBvbkFjdGlvbjtcbiAgICAgICAgdGhpcy5tZXNzYWdlTWFwID0ge307XG4gICAgICAgIHRoaXMuY2hhbmdlSGFuZGxlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5sb2FkKCk7XG4gICAgfVxuICAgIExlYW5wbHVtSW5ib3gucHJvdG90eXBlLmRvd25sb2FkTWVzc2FnZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuY3JlYXRlUmVxdWVzdCgnZ2V0TmV3c2ZlZWRNZXNzYWdlcycsIHVuZGVmaW5lZCwge1xuICAgICAgICAgICAgcXVldWVkOiB0cnVlLFxuICAgICAgICAgICAgc2VuZE5vdzogdHJ1ZSxcbiAgICAgICAgICAgIHJlc3BvbnNlOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciByZXNwb25zZSA9IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5yZXNwb25zZVswXTtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2UubmV3c2ZlZWRNZXNzYWdlcykge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5tZXNzYWdlTWFwID0gcmVzcG9uc2UubmV3c2ZlZWRNZXNzYWdlcztcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudHJpZ2dlckNoYW5nZUhhbmRsZXJzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBMZWFucGx1bUluYm94LnByb3RvdHlwZS5tYXJrQXNSZWFkID0gZnVuY3Rpb24gKG1lc3NhZ2VJZCkge1xuICAgICAgICB2YXIgbWVzc2FnZSA9IHRoaXMubWVzc2FnZU1hcFttZXNzYWdlSWRdO1xuICAgICAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW1lc3NhZ2UuaXNSZWFkKSB7XG4gICAgICAgICAgICBtZXNzYWdlLmlzUmVhZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJDaGFuZ2VIYW5kbGVycygpO1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJnc0J1aWxkZXJfMS5kZWZhdWx0KCk7XG4gICAgICAgICAgICBhcmdzLmFkZCgnbmV3c2ZlZWRNZXNzYWdlSWQnLCBtZXNzYWdlSWQpO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVSZXF1ZXN0KCdtYXJrTmV3c2ZlZWRNZXNzYWdlQXNSZWFkJywgYXJncywge30pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBMZWFucGx1bUluYm94LnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKG1lc3NhZ2VJZCkge1xuICAgICAgICB0aGlzLm1hcmtBc1JlYWQobWVzc2FnZUlkKTtcbiAgICAgICAgdmFyIGluYm94TWVzc2FnZSA9IHRoaXMubWVzc2FnZShtZXNzYWdlSWQpO1xuICAgICAgICB2YXIgaWQgPSBtZXNzYWdlSWQuc3BsaXQoJyMjJylbMF07XG4gICAgICAgIHZhciBvcGVuQWN0aW9uID0gKGluYm94TWVzc2FnZSA9PT0gbnVsbCB8fCBpbmJveE1lc3NhZ2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGluYm94TWVzc2FnZS5vcGVuQWN0aW9uKCkpIHx8IG51bGw7XG4gICAgICAgIHRoaXMub25BY3Rpb24oaWQsIG9wZW5BY3Rpb24pO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbmJveC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKG1lc3NhZ2VJZCkge1xuICAgICAgICB2YXIgbWVzc2FnZSA9IHRoaXMubWVzc2FnZU1hcFttZXNzYWdlSWRdO1xuICAgICAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgdGhpcy5tZXNzYWdlTWFwW21lc3NhZ2VJZF07XG4gICAgICAgIHRoaXMudHJpZ2dlckNoYW5nZUhhbmRsZXJzKCk7XG4gICAgICAgIHZhciBhcmdzID0gbmV3IEFyZ3NCdWlsZGVyXzEuZGVmYXVsdCgpO1xuICAgICAgICBhcmdzLmFkZCgnbmV3c2ZlZWRNZXNzYWdlSWQnLCBtZXNzYWdlSWQpO1xuICAgICAgICB0aGlzLmNyZWF0ZVJlcXVlc3QoJ2RlbGV0ZU5ld3NmZWVkTWVzc2FnZScsIGFyZ3MsIHt9KTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW5ib3gucHJvdG90eXBlLm9uQ2hhbmdlZCA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlSGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW5ib3gucHJvdG90eXBlLnRyaWdnZXJDaGFuZ2VIYW5kbGVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VIYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7IHJldHVybiBoYW5kbGVyKCk7IH0pO1xuICAgICAgICB0aGlzLnNhdmUoKTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW5ib3gucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIFN0b3JhZ2VNYW5hZ2VyXzEuZGVmYXVsdC5zYXZlKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLklOQk9YX01FU1NBR0VTLCBKU09OLnN0cmluZ2lmeSh0aGlzLm1lc3NhZ2VNYXApLCAnc2Vzc2lvbicpO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbmJveC5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gU3RvcmFnZU1hbmFnZXJfMS5kZWZhdWx0LmdldChDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5JTkJPWF9NRVNTQUdFUywgJ3Nlc3Npb24nKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZU1hcCA9IEpTT04ucGFyc2Uoc3RhdGUpIHx8IHt9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2VNYXAgPSB7fTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTGVhbnBsdW1JbmJveC5wcm90b3R5cGUuY291bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZXModGhpcy5tZXNzYWdlTWFwKS5sZW5ndGg7XG4gICAgfTtcbiAgICBMZWFucGx1bUluYm94LnByb3RvdHlwZS51bnJlYWRDb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlcyh0aGlzLm1lc3NhZ2VNYXApLmZpbHRlcihmdW5jdGlvbiAoeCkgeyByZXR1cm4gIXguaXNSZWFkOyB9KS5sZW5ndGg7XG4gICAgfTtcbiAgICBMZWFucGx1bUluYm94LnByb3RvdHlwZS5tZXNzYWdlcyA9IGZ1bmN0aW9uIChmaWx0ZXIpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpZCBpbiB0aGlzLm1lc3NhZ2VNYXApIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5tZXNzYWdlTWFwW2lkXTtcbiAgICAgICAgICAgIGlmIChmaWx0ZXIoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChMZWFucGx1bUluYm94TWVzc2FnZS5jcmVhdGUoaWQsIGRhdGEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgTGVhbnBsdW1JbmJveC5wcm90b3R5cGUuYWxsTWVzc2FnZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VzKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWU7IH0pO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbmJveC5wcm90b3R5cGUudW5yZWFkTWVzc2FnZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VzKGZ1bmN0aW9uICh4KSB7IHJldHVybiAheC5pc1JlYWQ7IH0pO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbmJveC5wcm90b3R5cGUubWVzc2FnZUlkcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMubWVzc2FnZU1hcCk7XG4gICAgfTtcbiAgICBMZWFucGx1bUluYm94LnByb3RvdHlwZS5tZXNzYWdlID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHZhciBtZXNzYWdlID0gdGhpcy5tZXNzYWdlTWFwW2lkXTtcbiAgICAgICAgaWYgKCFtZXNzYWdlKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTGVhbnBsdW1JbmJveE1lc3NhZ2UuY3JlYXRlKGlkLCBtZXNzYWdlKTtcbiAgICB9O1xuICAgIHJldHVybiBMZWFucGx1bUluYm94O1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IExlYW5wbHVtSW5ib3g7XG52YXIgTGVhbnBsdW1JbmJveE1lc3NhZ2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTGVhbnBsdW1JbmJveE1lc3NhZ2UoX2lkLCBfdGl0bGUsIF9zdWJ0aXRsZSwgX2RhdGEsIF90aW1lc3RhbXAsIF9pc1JlYWQsIF9pbWFnZVVybCwgX29wZW5BY3Rpb24pIHtcbiAgICAgICAgdGhpcy5faWQgPSBfaWQ7XG4gICAgICAgIHRoaXMuX3RpdGxlID0gX3RpdGxlO1xuICAgICAgICB0aGlzLl9zdWJ0aXRsZSA9IF9zdWJ0aXRsZTtcbiAgICAgICAgdGhpcy5fZGF0YSA9IF9kYXRhO1xuICAgICAgICB0aGlzLl90aW1lc3RhbXAgPSBfdGltZXN0YW1wO1xuICAgICAgICB0aGlzLl9pc1JlYWQgPSBfaXNSZWFkO1xuICAgICAgICB0aGlzLl9pbWFnZVVybCA9IF9pbWFnZVVybDtcbiAgICAgICAgdGhpcy5fb3BlbkFjdGlvbiA9IF9vcGVuQWN0aW9uO1xuICAgIH1cbiAgICBMZWFucGx1bUluYm94TWVzc2FnZS5jcmVhdGUgPSBmdW5jdGlvbiAoaWQsIG1lc3NhZ2VJbmZvKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2gsIF9qLCBfaywgX2w7XG4gICAgICAgIHZhciBwYXJlbnRDYW1wYWlnbklkID0gKF9hID0gbWVzc2FnZUluZm8ubWVzc2FnZURhdGEpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wYXJlbnRDYW1wYWlnbklkO1xuICAgICAgICB2YXIgYWN0aW9uID0gX19hc3NpZ24oX19hc3NpZ24oe30sIChfYyA9IChfYiA9IG1lc3NhZ2VJbmZvLm1lc3NhZ2VEYXRhKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IudmFycykgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jW0NvbnN0YW50c18xLmRlZmF1bHQuVkFMVUVTLkRFRkFVTFRfUFVTSF9BQ1RJT05dKSwgeyBwYXJlbnRDYW1wYWlnbklkOiBwYXJlbnRDYW1wYWlnbklkIH0pO1xuICAgICAgICByZXR1cm4gbmV3IExlYW5wbHVtSW5ib3hNZXNzYWdlKGlkLCAoX2UgPSAoX2QgPSBtZXNzYWdlSW5mby5tZXNzYWdlRGF0YSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLnZhcnMpID09PSBudWxsIHx8IF9lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZS5UaXRsZSwgKF9nID0gKF9mID0gbWVzc2FnZUluZm8ubWVzc2FnZURhdGEpID09PSBudWxsIHx8IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZi52YXJzKSA9PT0gbnVsbCB8fCBfZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2cuU3VidGl0bGUsIChfaiA9IChfaCA9IG1lc3NhZ2VJbmZvLm1lc3NhZ2VEYXRhKSA9PT0gbnVsbCB8fCBfaCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2gudmFycykgPT09IG51bGwgfHwgX2ogPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9qLkRhdGEsIG1lc3NhZ2VJbmZvLmRlbGl2ZXJ5VGltZXN0YW1wLCBtZXNzYWdlSW5mby5pc1JlYWQsIChfbCA9IChfayA9IG1lc3NhZ2VJbmZvLm1lc3NhZ2VEYXRhKSA9PT0gbnVsbCB8fCBfayA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2sudmFycykgPT09IG51bGwgfHwgX2wgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9sLkltYWdlLCBhY3Rpb24pO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbmJveE1lc3NhZ2UucHJvdG90eXBlLmlkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XG4gICAgfTtcbiAgICBMZWFucGx1bUluYm94TWVzc2FnZS5wcm90b3R5cGUudGl0bGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90aXRsZTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW5ib3hNZXNzYWdlLnByb3RvdHlwZS5zdWJ0aXRsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1YnRpdGxlO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbmJveE1lc3NhZ2UucHJvdG90eXBlLmRhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbmJveE1lc3NhZ2UucHJvdG90eXBlLnRpbWVzdGFtcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RpbWVzdGFtcDtcbiAgICB9O1xuICAgIExlYW5wbHVtSW5ib3hNZXNzYWdlLnByb3RvdHlwZS5pc1JlYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1JlYWQ7XG4gICAgfTtcbiAgICBMZWFucGx1bUluYm94TWVzc2FnZS5wcm90b3R5cGUuaW1hZ2VVcmwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbWFnZVVybDtcbiAgICB9O1xuICAgIExlYW5wbHVtSW5ib3hNZXNzYWdlLnByb3RvdHlwZS5vcGVuQWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3BlbkFjdGlvbjtcbiAgICB9O1xuICAgIHJldHVybiBMZWFucGx1bUluYm94TWVzc2FnZTtcbn0oKSk7XG5leHBvcnRzLkxlYW5wbHVtSW5ib3hNZXNzYWdlID0gTGVhbnBsdW1JbmJveE1lc3NhZ2U7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQXJnc0J1aWxkZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9BcmdzQnVpbGRlclwiKSk7XG52YXIgQnJvd3NlckRldGVjdG9yXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vQnJvd3NlckRldGVjdG9yXCIpKTtcbnZhciBDb25zdGFudHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9Db25zdGFudHNcIikpO1xudmFyIEludGVybmFsU3RhdGVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9JbnRlcm5hbFN0YXRlXCIpKTtcbnZhciBMZWFucGx1bUluYm94XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vTGVhbnBsdW1JbmJveFwiKSk7XG52YXIgTGVhbnBsdW1SZXF1ZXN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vTGVhbnBsdW1SZXF1ZXN0XCIpKTtcbnZhciBMZWFucGx1bVNvY2tldF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0xlYW5wbHVtU29ja2V0XCIpKTtcbnZhciBTdG9yYWdlTWFuYWdlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL1N0b3JhZ2VNYW5hZ2VyXCIpKTtcbnZhciBQdXNoTWFuYWdlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL1B1c2hNYW5hZ2VyXCIpKTtcbnZhciBNZXNzYWdlc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL01lc3NhZ2VzXCIpKTtcbnZhciBFdmVudEVtaXR0ZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9FdmVudEVtaXR0ZXJcIikpO1xudmFyIE1pZ3JhdGlvbk1hbmFnZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9NaWdyYXRpb25NYW5hZ2VyXCIpKTtcbnZhciBwdWJsaWNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzL3B1YmxpY1wiKTtcbnZhciBpbnRlcm5hbF8xID0gcmVxdWlyZShcIi4vdHlwZXMvaW50ZXJuYWxcIik7XG52YXIgVmFyQ2FjaGVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9WYXJDYWNoZVwiKSk7XG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG52YXIgU0VTU0lPTl9LRVkgPSBDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5TRVNTSU9OO1xudmFyIExlYW5wbHVtSW50ZXJuYWwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTGVhbnBsdW1JbnRlcm5hbCh3bmQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy53bmQgPSB3bmQ7XG4gICAgICAgIHRoaXMuX21pZ3JhdGlvbiA9IG5ldyBNaWdyYXRpb25NYW5hZ2VyXzEuZGVmYXVsdCh0aGlzLmNyZWF0ZVJlcXVlc3QuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudEVtaXR0ZXJfMS5kZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsU3RhdGUgPSBuZXcgSW50ZXJuYWxTdGF0ZV8xLmRlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5fbHBJbmJveCA9IG5ldyBMZWFucGx1bUluYm94XzEuZGVmYXVsdCh0aGlzLmNyZWF0ZVJlcXVlc3QuYmluZCh0aGlzKSwgdGhpcy5vbkluYm94QWN0aW9uLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLl9scFJlcXVlc3QgPSBuZXcgTGVhbnBsdW1SZXF1ZXN0XzEuZGVmYXVsdCh0aGlzLl9ldmVudHMpO1xuICAgICAgICB0aGlzLl92YXJDYWNoZSA9IG5ldyBWYXJDYWNoZV8xLmRlZmF1bHQodGhpcy5jcmVhdGVSZXF1ZXN0LmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLl9scFNvY2tldCA9IG5ldyBMZWFucGx1bVNvY2tldF8xLmRlZmF1bHQodGhpcy5fdmFyQ2FjaGUsIHRoaXMuY3JlYXRlUmVxdWVzdC5iaW5kKHRoaXMpLCB0aGlzLl9scFJlcXVlc3QuZ2V0TGFzdFJlc3BvbnNlLmJpbmQodGhpcy5fbHBSZXF1ZXN0KSwgdGhpcy5fZXZlbnRzKTtcbiAgICAgICAgdGhpcy5fcHVzaE1hbmFnZXIgPSBuZXcgUHVzaE1hbmFnZXJfMS5kZWZhdWx0KHRoaXMuX2V2ZW50cywgdGhpcy5jcmVhdGVSZXF1ZXN0LmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLl9tZXNzYWdlcyA9IG5ldyBNZXNzYWdlc18xLmRlZmF1bHQodGhpcy5fZXZlbnRzLCB0aGlzLmNyZWF0ZVJlcXVlc3QuYmluZCh0aGlzKSwgdGhpcy5nZXRGaWxlVXJsLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLl9icm93c2VyRGV0ZWN0b3IgPSBuZXcgQnJvd3NlckRldGVjdG9yXzEuZGVmYXVsdCh3bmQpO1xuICAgICAgICB0aGlzLl9ldmVudHMub24oJ25hdmlnYXRpb25DaGFuZ2UnLCBmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgICAgICB2YXIgcHJldmVudGVkID0gZmFsc2U7XG4gICAgICAgICAgICBfdGhpcy5fZXZlbnRzLmVtaXQoJ29wZW5VcmwnLCB7XG4gICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByZXZlbnRlZCA9IHRydWU7IH0sXG4gICAgICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICghcHJldmVudGVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMud25kLmxvY2F0aW9uLmFzc2lnbih1cmwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fZXZlbnRzLm9uKCdyZWdpc3RlckZvclB1c2gnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5yZWdpc3RlckZvcldlYlB1c2goKTsgfSk7XG4gICAgICAgIHRoaXMuX2V2ZW50cy5vbigndXBkYXRlRGV2U2VydmVySG9zdCcsIGZ1bmN0aW9uIChob3N0KSB7IHJldHVybiBfdGhpcy5zZXRTb2NrZXRIb3N0KGhvc3QpOyB9KTtcbiAgICAgICAgdGhpcy5fZXZlbnRzLm9uKCdtaWdyYXRlU3RhdGVSZWNlaXZlZCcsIGZ1bmN0aW9uIChzaGEpIHsgcmV0dXJuIF90aGlzLl9taWdyYXRpb24udmVyaWZ5U3RhdGUoc2hhKTsgfSk7XG4gICAgICAgIHRoaXMuX2V2ZW50cy5vbignd2ViUHVzaFN1YnNjcmliZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICB2YXIgc2VydmljZVdvcmtlclBhdGggPSAoX2EgPSBfdGhpcy5fd2ViUHVzaE9wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXJ2aWNlV29ya2VyVXJsO1xuICAgICAgICAgICAgdmFyIHBhdGggPSBzZXJ2aWNlV29ya2VyUGF0aCA/IHsgc2VydmljZVdvcmtlclBhdGg6IHNlcnZpY2VXb3JrZXJQYXRoIH0gOiB7fTtcbiAgICAgICAgICAgIF90aGlzLl9jdCAmJiBfdGhpcy5fY3Qubm90aWZpY2F0aW9ucy5wdXNoKF9fYXNzaWduKHsgdGl0bGVUZXh0OiAnJywgYm9keVRleHQ6ICcnLCBva0J1dHRvblRleHQ6ICcnLCByZWplY3RCdXR0b25UZXh0OiAnJyB9LCBwYXRoKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5zZXRBcGlQYXRoID0gZnVuY3Rpb24gKGFwaVBhdGgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9scFJlcXVlc3QuYXBpUGF0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xwUmVxdWVzdC5hcGlQYXRoID0gYXBpUGF0aDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG5ldHdvcmsgdGltZW91dC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2Vjb25kcyBUaGUgdGltZW91dCBpbiBzZWNvbmRzLlxuICAgICAqL1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLnNldE5ldHdvcmtUaW1lb3V0ID0gZnVuY3Rpb24gKHNlY29uZHMpIHtcbiAgICAgICAgdGhpcy5fbHBSZXF1ZXN0LnNldE5ldHdvcmtUaW1lb3V0KHNlY29uZHMpO1xuICAgICAgICB0aGlzLl9scFNvY2tldC5zZXROZXR3b3JrVGltZW91dChzZWNvbmRzKTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLnNldEFwcElkRm9yRGV2ZWxvcG1lbnRNb2RlID0gZnVuY3Rpb24gKGFwcElkLCBhY2Nlc3NLZXkpIHtcbiAgICAgICAgdGhpcy5fbHBSZXF1ZXN0LmFwcElkID0gYXBwSWQ7XG4gICAgICAgIHRoaXMuX2xwUmVxdWVzdC5jbGllbnRLZXkgPSBhY2Nlc3NLZXk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsU3RhdGUuZGV2TW9kZSA9IHRydWU7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5zZXRBcHBJZEZvclByb2R1Y3Rpb25Nb2RlID0gZnVuY3Rpb24gKGFwcElkLCBhY2Nlc3NLZXkpIHtcbiAgICAgICAgdGhpcy5fbHBSZXF1ZXN0LmFwcElkID0gYXBwSWQ7XG4gICAgICAgIHRoaXMuX2xwUmVxdWVzdC5jbGllbnRLZXkgPSBhY2Nlc3NLZXk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsU3RhdGUuZGV2TW9kZSA9IGZhbHNlO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUuc2V0U29ja2V0SG9zdCA9IGZ1bmN0aW9uIChob3N0KSB7XG4gICAgICAgIHRoaXMuX2xwU29ja2V0LnNldFNvY2tldEhvc3QoaG9zdCk7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5zZXREZXZpY2VJZCA9IGZ1bmN0aW9uIChkZXZpY2VJZCkge1xuICAgICAgICB0aGlzLl9scFJlcXVlc3QuZGV2aWNlSWQgPSBkZXZpY2VJZDtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLnNldExvY2FsZSA9IGZ1bmN0aW9uIChsb2NhbGUpIHtcbiAgICAgICAgdGhpcy5fbG9jYWxlID0gbG9jYWxlO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUuc2V0QXBwVmVyc2lvbiA9IGZ1bmN0aW9uICh2ZXJzaW9uTmFtZSkge1xuICAgICAgICB0aGlzLl9scFJlcXVlc3QudmVyc2lvbk5hbWUgPSB2ZXJzaW9uTmFtZTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLnNldERldmljZU5hbWUgPSBmdW5jdGlvbiAoZGV2aWNlTmFtZSkge1xuICAgICAgICB0aGlzLl9kZXZpY2VOYW1lID0gZGV2aWNlTmFtZTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLnNldERldmljZU1vZGVsID0gZnVuY3Rpb24gKGRldmljZU1vZGVsKSB7XG4gICAgICAgIHRoaXMuX2RldmljZU1vZGVsID0gZGV2aWNlTW9kZWw7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5zZXRSZXF1ZXN0QmF0Y2hpbmcgPSBmdW5jdGlvbiAoYmF0Y2hFbmFibGVkLCBjb29sZG93blNlY29uZHMpIHtcbiAgICAgICAgdGhpcy5fbHBSZXF1ZXN0LmJhdGNoRW5hYmxlZCA9IGJhdGNoRW5hYmxlZDtcbiAgICAgICAgdGhpcy5fbHBSZXF1ZXN0LmJhdGNoQ29vbGRvd24gPSBjb29sZG93blNlY29uZHM7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5zZXRTeXN0ZW1OYW1lID0gZnVuY3Rpb24gKHN5c3RlbU5hbWUpIHtcbiAgICAgICAgdGhpcy5fc3lzdGVtTmFtZSA9IHN5c3RlbU5hbWU7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5zZXRTeXN0ZW1WZXJzaW9uID0gZnVuY3Rpb24gKHN5c3RlbVZlcnNpb24pIHtcbiAgICAgICAgdGhpcy5fc3lzdGVtVmVyc2lvbiA9IHN5c3RlbVZlcnNpb247XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5zZXRWYXJpYWJsZXMgPSBmdW5jdGlvbiAodmFyaWFibGVzKSB7XG4gICAgICAgIHRoaXMuX3ZhckNhY2hlLnNldFZhcmlhYmxlcyh2YXJpYWJsZXMpO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUuc2V0VmFyaWFudERlYnVnSW5mb0VuYWJsZWQgPSBmdW5jdGlvbiAodmFyaWFudERlYnVnSW5mb0VuYWJsZWQpIHtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxTdGF0ZS52YXJpYW50RGVidWdJbmZvRW5hYmxlZCA9IHZhcmlhbnREZWJ1Z0luZm9FbmFibGVkO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUuZW5hYmxlUmljaEluQXBwTWVzc2FnZXMgPSBmdW5jdGlvbiAoZW5hYmxlZCkge1xuICAgICAgICB0aGlzLl9tZXNzYWdlcy5lbmFibGVSaWNoSW5BcHBNZXNzYWdlcyhlbmFibGVkKTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLnByb2Nlc3NNZXNzYWdlRXZlbnQgPSBmdW5jdGlvbiAobWVzc2FnZUlkLCBtZXNzYWdlKSB7XG4gICAgICAgIHRoaXMuX21lc3NhZ2VzLnByb2Nlc3NNZXNzYWdlRXZlbnQobWVzc2FnZUlkLCBtZXNzYWdlKTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLmdldFZhcmlhbnREZWJ1Z0luZm8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YXJDYWNoZS5nZXRWYXJpYW50RGVidWdJbmZvKCk7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5nZXRWYXJpYWJsZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YXJDYWNoZS5nZXRWYXJpYWJsZXMoKTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLmdldFZhcmlhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuX3ZhckNhY2hlKS5nZXRWYXJpYWJsZS5hcHBseShfYSwgYXJncyk7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5nZXRWYXJpYW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhckNhY2hlLnZhcmlhbnRzIHx8IFtdO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUuaW5ib3ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9scEluYm94O1xuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50cy5vbihldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgICAgICB0aGlzLl9ldmVudHMub2ZmKGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5vbkluYm94QWN0aW9uID0gZnVuY3Rpb24gKG1lc3NhZ2VJZCwgYWN0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX21lc3NhZ2VzLnRyYWNrTWVzc2FnZShtZXNzYWdlSWQsIHsgZXZlbnQ6ICdPcGVuJyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiBhY3Rpb24gJiYgX3RoaXMuX21lc3NhZ2VzLm9uQWN0aW9uKGFjdGlvbik7IH0pO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUuZGVmaW5lQWN0aW9uID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fdmFyQ2FjaGUucmVnaXN0ZXJBY3Rpb25EZWZpbml0aW9uKF9fYXNzaWduKHsga2luZDogcHVibGljXzEuTWVzc2FnZUtpbmQuVGVtcGxhdGUgfSwgb3B0aW9ucykpO1xuICAgIH07XG4gICAgLy8gVE9ETyhicmVha2luZyBjaGFuZ2UpOiByZXBsYWNlIHdpdGggZXZlbnRzIGFuZCByZW1vdmUgc3RhdGVmdWwgaGFuZGxlcnNcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5hZGRTdGFydFJlc3BvbnNlSGFuZGxlciA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuX2ludGVybmFsU3RhdGUuYWRkU3RhcnRSZXNwb25zZUhhbmRsZXIoaGFuZGxlcik7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5yZW1vdmVTdGFydFJlc3BvbnNlSGFuZGxlciA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuX2ludGVybmFsU3RhdGUucmVtb3ZlU3RhcnRSZXNwb25zZUhhbmRsZXIoaGFuZGxlcik7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5hZGRWYXJpYWJsZXNDaGFuZ2VkSGFuZGxlciA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuX3ZhckNhY2hlLmFkZFZhcmlhYmxlc0NoYW5nZWRIYW5kbGVyKGhhbmRsZXIpO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUucmVtb3ZlVmFyaWFibGVzQ2hhbmdlZEhhbmRsZXIgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICB0aGlzLl92YXJDYWNoZS5yZW1vdmVWYXJpYWJsZXNDaGFuZ2VkSGFuZGxlcihoYW5kbGVyKTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLmdldEZpbGVVcmwgPSBmdW5jdGlvbiAoZmlsZW5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xwUmVxdWVzdC5nZXRGaWxlVXJsKGZpbGVuYW1lKTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLmZvcmNlQ29udGVudFVwZGF0ZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgYXJncyA9IG5ldyBBcmdzQnVpbGRlcl8xLmRlZmF1bHQoKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5JTkNMVURFX0RFRkFVTFRTLCBmYWxzZSlcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuSU5DTFVERV9WQVJJQU5UX0RFQlVHX0lORk8sIHRoaXMuX2ludGVybmFsU3RhdGUudmFyaWFudERlYnVnSW5mb0VuYWJsZWQpO1xuICAgICAgICB0aGlzLmNyZWF0ZVJlcXVlc3QoQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLkdFVF9WQVJTLCBhcmdzLCB7XG4gICAgICAgICAgICBxdWV1ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgc2VuZE5vdzogdHJ1ZSxcbiAgICAgICAgICAgIHJlc3BvbnNlOiBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgZ2V0VmFyc1Jlc3BvbnNlID0gX3RoaXMuX2xwUmVxdWVzdC5nZXRMYXN0UmVzcG9uc2UocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIHZhciBpc1N1Y2Nlc3MgPSBfdGhpcy5fbHBSZXF1ZXN0LmlzUmVzcG9uc2VTdWNjZXNzKGdldFZhcnNSZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzU3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fdmFyQ2FjaGUuYXBwbHlEaWZmcyhnZXRWYXJzUmVzcG9uc2VbQ29uc3RhbnRzXzEuZGVmYXVsdC5LRVlTLlZBUlNdLCBnZXRWYXJzUmVzcG9uc2VbQ29uc3RhbnRzXzEuZGVmYXVsdC5LRVlTLlZBUklBTlRTXSwgZ2V0VmFyc1Jlc3BvbnNlW0NvbnN0YW50c18xLmRlZmF1bHQuS0VZUy5BQ1RJT05fREVGSU5JVElPTlNdKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3ZhckNhY2hlLnNldFZhcmlhbnREZWJ1Z0luZm8oZ2V0VmFyc1Jlc3BvbnNlW0NvbnN0YW50c18xLmRlZmF1bHQuS0VZUy5WQVJJQU5UX0RFQlVHX0lORk9dKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2V2ZW50cy5lbWl0KCdtZXNzYWdlc1JlY2VpdmVkJywgZ2V0VmFyc1Jlc3BvbnNlW0NvbnN0YW50c18xLmRlZmF1bHQuS0VZUy5NRVNTQUdFU10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soaXNTdWNjZXNzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLnVzZVNlc3Npb25MZW5ndGggPSBmdW5jdGlvbiAoc2Vjb25kcykge1xuICAgICAgICB0aGlzLl9zZXNzaW9uTGVuZ3RoID0gc2Vjb25kcztcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKHVzZXJJZCwgdXNlckF0dHJpYnV0ZXMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0eXBlb2YgdXNlcklkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IHVzZXJJZDtcbiAgICAgICAgICAgIHVzZXJBdHRyaWJ1dGVzID0ge307XG4gICAgICAgICAgICB1c2VySWQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB1c2VySWQgPT09ICdvYmplY3QnICYmIHVzZXJJZCAhPT0gbnVsbCAmJiB1c2VySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY2FsbGJhY2sgPSB1c2VyQXR0cmlidXRlcztcbiAgICAgICAgICAgIHVzZXJBdHRyaWJ1dGVzID0gdXNlcklkO1xuICAgICAgICAgICAgdXNlcklkID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdXNlckF0dHJpYnV0ZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gdXNlckF0dHJpYnV0ZXM7XG4gICAgICAgICAgICB1c2VyQXR0cmlidXRlcyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhhc0FjdGl2ZVNlc3Npb24oKSAmJiAhdGhpcy5faW50ZXJuYWxTdGF0ZS5kZXZNb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGFydEZyb21DYWNoZSh1c2VySWQsIHVzZXJBdHRyaWJ1dGVzLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbWlncmF0aW9uLmdldFN0YXRlKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICAgICAgaWYgKHN0YXRlID09PSBpbnRlcm5hbF8xLk1pZ3JhdGlvblN0YXRlLkRVUExJQ0FURSkge1xuICAgICAgICAgICAgICAgIF90aGlzLl9jdCA9IF90aGlzLl9taWdyYXRpb24uaW5pdENsZXZlclRhcCgpO1xuICAgICAgICAgICAgICAgIC8vIHNpbGVudGx5IHJlZ2lzdGVyIHN1YnNjcmlwdGlvbiBpbiBDVFxuICAgICAgICAgICAgICAgIF90aGlzLmlzV2ViUHVzaFN1YnNjcmliZWQoKS50aGVuKGZ1bmN0aW9uIChpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzU3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2V2ZW50cy5lbWl0KCd3ZWJQdXNoU3Vic2NyaWJlZCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzdGF0ZSA9PT0gaW50ZXJuYWxfMS5NaWdyYXRpb25TdGF0ZS5DTEVWRVJUQVApIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fY3QgPSBfdGhpcy5fbWlncmF0aW9uLmluaXRDbGV2ZXJUYXAoKTtcbiAgICAgICAgICAgICAgICBPYmplY3QudmFsdWVzKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTKVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICFbXG4gICAgICAgICAgICAgICAgICAgIENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLlVTRVJfSUQsXG4gICAgICAgICAgICAgICAgICAgIENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLkRFVklDRV9JRCxcbiAgICAgICAgICAgICAgICAgICAgQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuVE9LRU4sXG4gICAgICAgICAgICAgICAgXS5pbmNsdWRlcyhrZXkpOyB9KVxuICAgICAgICAgICAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQucmVtb3ZlKGtleSk7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuX2xwUmVxdWVzdC51c2VySWQgPSB1c2VySWQ7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5hZGRTdGFydFJlc3BvbnNlSGFuZGxlcihjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5fdmFyQ2FjaGUub25VcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3ZhckNhY2hlLnRyaWdnZXJWYXJpYWJsZXNDaGFuZ2VkSGFuZGxlcnMoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgYXJncyA9IG5ldyBBcmdzQnVpbGRlcl8xLmRlZmF1bHQoKVxuICAgICAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuVVNFUl9BVFRSSUJVVEVTLCBKU09OLnN0cmluZ2lmeSh1c2VyQXR0cmlidXRlcykpXG4gICAgICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5DT1VOVFJZLCBDb25zdGFudHNfMS5kZWZhdWx0LlZBTFVFUy5ERVRFQ1QpXG4gICAgICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5SRUdJT04sIENvbnN0YW50c18xLmRlZmF1bHQuVkFMVUVTLkRFVEVDVClcbiAgICAgICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLkNJVFksIENvbnN0YW50c18xLmRlZmF1bHQuVkFMVUVTLkRFVEVDVClcbiAgICAgICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLkxPQ0FUSU9OLCBDb25zdGFudHNfMS5kZWZhdWx0LlZBTFVFUy5ERVRFQ1QpXG4gICAgICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5TWVNURU1fTkFNRSwgX3RoaXMuX3N5c3RlbU5hbWUgfHwgX3RoaXMuX2Jyb3dzZXJEZXRlY3Rvci5PUylcbiAgICAgICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLlNZU1RFTV9WRVJTSU9OLCAoX3RoaXMuX3N5c3RlbVZlcnNpb24gfHwgJycpLnRvU3RyaW5nKCkpXG4gICAgICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5CUk9XU0VSX05BTUUsIF90aGlzLl9icm93c2VyRGV0ZWN0b3IuYnJvd3NlcilcbiAgICAgICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLkJST1dTRVJfVkVSU0lPTiwgX3RoaXMuX2Jyb3dzZXJEZXRlY3Rvci52ZXJzaW9uLnRvU3RyaW5nKCkpXG4gICAgICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5MT0NBTEUsIF90aGlzLl9sb2NhbGUgfHwgQ29uc3RhbnRzXzEuZGVmYXVsdC5WQUxVRVMuREVURUNUKVxuICAgICAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuREVWSUNFX05BTUUsIF90aGlzLl9kZXZpY2VOYW1lIHx8XG4gICAgICAgICAgICAgICAgXCJcIi5jb25jYXQoX3RoaXMuX2Jyb3dzZXJEZXRlY3Rvci5icm93c2VyLCBcIiBcIikuY29uY2F0KF90aGlzLl9icm93c2VyRGV0ZWN0b3IudmVyc2lvbikpXG4gICAgICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5ERVZJQ0VfTU9ERUwsIF90aGlzLl9kZXZpY2VNb2RlbCB8fCAnV2ViIEJyb3dzZXInKVxuICAgICAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuTkVXU0ZFRURfTUVTU0FHRVMsIF90aGlzLl9scEluYm94Lm1lc3NhZ2VJZHMoKSlcbiAgICAgICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLklOQ0xVREVfREVGQVVMVFMsIGZhbHNlKVxuICAgICAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuSU5DTFVERV9WQVJJQU5UX0RFQlVHX0lORk8sIF90aGlzLl9pbnRlcm5hbFN0YXRlLnZhcmlhbnREZWJ1Z0luZm9FbmFibGVkKTtcbiAgICAgICAgICAgIF90aGlzLmNyZWF0ZVJlcXVlc3QoQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLlNUQVJULCBhcmdzLCB7XG4gICAgICAgICAgICAgICAgcXVldWVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNlbmROb3c6IHRydWUsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2U6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5faW50ZXJuYWxTdGF0ZS5oYXNTdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0UmVzcG9uc2UgPSBfdGhpcy5fbHBSZXF1ZXN0LmdldExhc3RSZXNwb25zZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpc1N1Y2Nlc3MgPSBfdGhpcy5fbHBSZXF1ZXN0LmlzUmVzcG9uc2VTdWNjZXNzKHN0YXJ0UmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5faW50ZXJuYWxTdGF0ZS5zdGFydFN1Y2Nlc3NmdWwgPSBpc1N1Y2Nlc3M7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1N1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnVwZGF0ZVNlc3Npb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlcyA9IHN0YXJ0UmVzcG9uc2VbQ29uc3RhbnRzXzEuZGVmYXVsdC5LRVlTLk1FU1NBR0VTXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGFydFJlc3BvbnNlLmFjdGlvbkRlZmluaXRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZXMuYWN0aW9uRGVmaW5pdGlvbnMgPSBzdGFydFJlc3BvbnNlLmFjdGlvbkRlZmluaXRpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2V2ZW50cy5lbWl0KCdtZXNzYWdlc1JlY2VpdmVkJywgbWVzc2FnZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0UmVzcG9uc2VbQ29uc3RhbnRzXzEuZGVmYXVsdC5LRVlTLlNZTkNfSU5CT1hdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2xwSW5ib3guZG93bmxvYWRNZXNzYWdlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9pbnRlcm5hbFN0YXRlLmRldk1vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGF0ZXN0VmVyc2lvbiA9IHN0YXJ0UmVzcG9uc2VbQ29uc3RhbnRzXzEuZGVmYXVsdC5LRVlTLkxBVEVTVF9WRVJTSU9OXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF0ZXN0VmVyc2lvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkEgbmV3ZXIgdmVyc2lvbiBvZiB0aGUgTGVhbnBsdW0gU0RLLCBcIi5jb25jYXQobGF0ZXN0VmVyc2lvbiwgXCIsIGlzIGF2YWlsYWJsZS5cXG4gIFVzZSBcXFwibnBtIHVwZGF0ZSBsZWFucGx1bS1zZGtcXFwiIG9yIGdvIHRvIGh0dHBzOi8vZG9jcy5sZWFucGx1bS5jb20vcmVmZXJlbmNlI2phdmFzY3JpcHQtc2V0dXAgdG8gZG93bmxvYWQgaXQuXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29ubmVjdFNvY2tldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3ZhckNhY2hlLmFwcGx5RGlmZnMoc3RhcnRSZXNwb25zZVtDb25zdGFudHNfMS5kZWZhdWx0LktFWVMuVkFSU10sIHN0YXJ0UmVzcG9uc2VbQ29uc3RhbnRzXzEuZGVmYXVsdC5LRVlTLlZBUklBTlRTXSwgc3RhcnRSZXNwb25zZVtDb25zdGFudHNfMS5kZWZhdWx0LktFWVMuQUNUSU9OX0RFRklOSVRJT05TXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fdmFyQ2FjaGUuc2V0VmFyaWFudERlYnVnSW5mbyhzdGFydFJlc3BvbnNlW0NvbnN0YW50c18xLmRlZmF1bHQuS0VZUy5WQVJJQU5UX0RFQlVHX0lORk9dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl92YXJDYWNoZS50b2tlbiA9IHN0YXJ0UmVzcG9uc2VbQ29uc3RhbnRzXzEuZGVmYXVsdC5LRVlTLlRPS0VOXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl92YXJDYWNoZS5sb2FkRGlmZnMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fZXZlbnRzLmVtaXQoJ3N0YXJ0JywgeyBzdWNjZXNzOiBpc1N1Y2Nlc3MgfSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9pbnRlcm5hbFN0YXRlLnRyaWdnZXJTdGFydEhhbmRsZXJzKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLnN0YXJ0RnJvbUNhY2hlID0gZnVuY3Rpb24gKHVzZXJJZCwgdXNlckF0dHJpYnV0ZXMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdXNlcklkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IHVzZXJJZDtcbiAgICAgICAgICAgIHVzZXJBdHRyaWJ1dGVzID0ge307XG4gICAgICAgICAgICB1c2VySWQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB1c2VySWQgPT09ICdvYmplY3QnICYmIHVzZXJJZCAhPT0gbnVsbCAmJiB1c2VySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY2FsbGJhY2sgPSB1c2VyQXR0cmlidXRlcztcbiAgICAgICAgICAgIHVzZXJBdHRyaWJ1dGVzID0gdXNlcklkO1xuICAgICAgICAgICAgdXNlcklkID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdXNlckF0dHJpYnV0ZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gdXNlckF0dHJpYnV0ZXM7XG4gICAgICAgICAgICB1c2VyQXR0cmlidXRlcyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlU2Vzc2lvbigpO1xuICAgICAgICB0aGlzLl9scFJlcXVlc3QudXNlcklkID0gdXNlcklkO1xuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuYWRkU3RhcnRSZXNwb25zZUhhbmRsZXIoY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2ludGVybmFsU3RhdGUuaGFzU3RhcnRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX2ludGVybmFsU3RhdGUuc3RhcnRTdWNjZXNzZnVsID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuX2ludGVybmFsU3RhdGUuZGV2TW9kZSkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0U29ja2V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdmFyQ2FjaGUubG9hZERpZmZzKCk7XG4gICAgICAgIHRoaXMuX2V2ZW50cy5lbWl0KCdyZXN1bWUnKTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxTdGF0ZS50cmlnZ2VyU3RhcnRIYW5kbGVycygpO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jcmVhdGVSZXF1ZXN0KENvbnN0YW50c18xLmRlZmF1bHQuTUVUSE9EUy5TVE9QLCB1bmRlZmluZWQsIHtcbiAgICAgICAgICAgIHNlbmROb3c6IHRydWUsXG4gICAgICAgICAgICBxdWV1ZWQ6IHRydWUsXG4gICAgICAgICAgICByZXNwb25zZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIFN0b3JhZ2VNYW5hZ2VyXzEuZGVmYXVsdC5yZW1vdmUoU0VTU0lPTl9LRVkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5wYXVzZVNlc3Npb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY3JlYXRlUmVxdWVzdChDb25zdGFudHNfMS5kZWZhdWx0Lk1FVEhPRFMuUEFVU0VfU0VTU0lPTiwgdW5kZWZpbmVkLCB7XG4gICAgICAgICAgICBzZW5kTm93OiB0cnVlLFxuICAgICAgICAgICAgcXVldWVkOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLnJlc3VtZVNlc3Npb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50cy5lbWl0KCdyZXN1bWUnKTtcbiAgICAgICAgdGhpcy5jcmVhdGVSZXF1ZXN0KENvbnN0YW50c18xLmRlZmF1bHQuTUVUSE9EUy5SRVNVTUVfU0VTU0lPTiwgdW5kZWZpbmVkLCB7XG4gICAgICAgICAgICBzZW5kTm93OiB0cnVlLFxuICAgICAgICAgICAgcXVldWVkOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLnBhdXNlU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY3JlYXRlUmVxdWVzdChDb25zdGFudHNfMS5kZWZhdWx0Lk1FVEhPRFMuUEFVU0VfU1RBVEUsIHVuZGVmaW5lZCwge1xuICAgICAgICAgICAgcXVldWVkOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLnJlc3VtZVN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNyZWF0ZVJlcXVlc3QoQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLlJFU1VNRV9TVEFURSwgdW5kZWZpbmVkLCB7XG4gICAgICAgICAgICBxdWV1ZWQ6IHRydWUsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUuZ2V0VXNlcklkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbHBSZXF1ZXN0LnVzZXJJZDtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLnNldFVzZXJJZCA9IGZ1bmN0aW9uICh1c2VySWQpIHtcbiAgICAgICAgdGhpcy5zZXRVc2VyQXR0cmlidXRlcyh1c2VySWQpO1xuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUuc2V0VXNlckF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAodXNlcklkLCB1c2VyQXR0cmlidXRlcykge1xuICAgICAgICBpZiAodXNlckF0dHJpYnV0ZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB1c2VySWQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgdXNlckF0dHJpYnV0ZXMgPSB1c2VySWQ7XG4gICAgICAgICAgICAgICAgdXNlcklkID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHVzZXJJZCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnTGVhbnBsdW06IHNldFVzZXJBdHRyaWJ1dGVzIGV4cGVjdHMgYSBzdHJpbmcgb3IgYW4gJyArXG4gICAgICAgICAgICAgICAgICAgICdvYmplY3QnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJnc0J1aWxkZXJfMS5kZWZhdWx0KClcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuVVNFUl9BVFRSSUJVVEVTLCB1c2VyQXR0cmlidXRlcyA/IEpTT04uc3RyaW5naWZ5KHVzZXJBdHRyaWJ1dGVzKSA6IHVuZGVmaW5lZClcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuTkVXX1VTRVJfSUQsIHVzZXJJZCk7XG4gICAgICAgIHRoaXMuX2V2ZW50cy5lbWl0KCdzZXRVc2VyQXR0cmlidXRlJywgdXNlckF0dHJpYnV0ZXMpO1xuICAgICAgICB0aGlzLmNyZWF0ZVJlcXVlc3QoQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLlNFVF9VU0VSX0FUVFJJQlVURVMsIGFyZ3MsIHtcbiAgICAgICAgICAgIHF1ZXVlZDogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh1c2VySWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2xwUmVxdWVzdC51c2VySWQgPSB1c2VySWQ7XG4gICAgICAgICAgICBTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQuc2F2ZShDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5VU0VSX0lELCB0aGlzLl9scFJlcXVlc3QudXNlcklkKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUudHJhY2sgPSBmdW5jdGlvbiAoZXZlbnQsIHZhbHVlLCBpbmZvLCBwYXJhbXMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcGFyYW1zID0gdmFsdWU7XG4gICAgICAgICAgICBpbmZvID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcGFyYW1zID0gaW5mbztcbiAgICAgICAgICAgIGluZm8gPSB2YWx1ZTtcbiAgICAgICAgICAgIHZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBpbmZvID09PSAnb2JqZWN0JyAmJiBpbmZvICE9PSBudWxsICYmIGluZm8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcGFyYW1zID0gaW5mbztcbiAgICAgICAgICAgIGluZm8gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJnc0J1aWxkZXJfMS5kZWZhdWx0KClcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuRVZFTlQsIGV2ZW50KVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5WQUxVRSwgdmFsdWUgfHwgMC4wKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5JTkZPLCBpbmZvKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5QQVJBTVMsIEpTT04uc3RyaW5naWZ5KHBhcmFtcykpO1xuICAgICAgICB0aGlzLl9ldmVudHMuZW1pdCgndHJhY2snLCB7IGV2ZW50TmFtZTogZXZlbnQsIHBhcmFtczogcGFyYW1zIH0pO1xuICAgICAgICB0aGlzLmNyZWF0ZVJlcXVlc3QoQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLlRSQUNLLCBhcmdzLCB7XG4gICAgICAgICAgICBxdWV1ZWQ6IHRydWUsXG4gICAgICAgICAgICByZXNwb25zZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMudXBkYXRlU2Vzc2lvbigpOyB9LFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLnRyYWNrUHVyY2hhc2UgPSBmdW5jdGlvbiAodmFsdWUsIGN1cnJlbmN5Q29kZSwgcGFyYW1zLCBldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQgPT09IHZvaWQgMCkgeyBldmVudCA9ICdQdXJjaGFzZSc7IH1cbiAgICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJnc0J1aWxkZXJfMS5kZWZhdWx0KClcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuRVZFTlQsIGV2ZW50KVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5WQUxVRSwgdmFsdWUgfHwgMC4wKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5QQVJBTVMsIEpTT04uc3RyaW5naWZ5KHBhcmFtcykpO1xuICAgICAgICBpZiAoY3VycmVuY3lDb2RlKSB7XG4gICAgICAgICAgICBhcmdzLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5DVVJSRU5DWV9DT0RFLCBjdXJyZW5jeUNvZGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2V2ZW50cy5lbWl0KCd0cmFjaycsIHsgZXZlbnROYW1lOiBldmVudCB9KTtcbiAgICAgICAgdGhpcy5jcmVhdGVSZXF1ZXN0KENvbnN0YW50c18xLmRlZmF1bHQuTUVUSE9EUy5UUkFDSywgYXJncywge1xuICAgICAgICAgICAgcXVldWVkOiB0cnVlLFxuICAgICAgICAgICAgaXNQdXJjaGFzZTogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5hZHZhbmNlVG8gPSBmdW5jdGlvbiAoc3RhdGUsIGluZm8sIHBhcmFtcykge1xuICAgICAgICBpZiAodHlwZW9mIGluZm8gPT09ICdvYmplY3QnICYmIGluZm8gIT09IG51bGwgJiYgaW5mbyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwYXJhbXMgPSBpbmZvO1xuICAgICAgICAgICAgaW5mbyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYXJncyA9IG5ldyBBcmdzQnVpbGRlcl8xLmRlZmF1bHQoKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5TVEFURSwgc3RhdGUpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLklORk8sIGluZm8pXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLlBBUkFNUywgSlNPTi5zdHJpbmdpZnkocGFyYW1zKSk7XG4gICAgICAgIHRoaXMuX2V2ZW50cy5lbWl0KCdhZHZhbmNlU3RhdGUnLCB7IHN0YXRlOiBzdGF0ZSwgcGFyYW1zOiBwYXJhbXMgfSk7XG4gICAgICAgIHRoaXMuY3JlYXRlUmVxdWVzdChDb25zdGFudHNfMS5kZWZhdWx0Lk1FVEhPRFMuQURWQU5DRSwgYXJncywge1xuICAgICAgICAgICAgcXVldWVkOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgd2ViIHB1c2ggaXMgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyLlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IFRydWUgaWYgc3VwcG9ydGVkLCBlbHNlIGZhbHNlLlxuICAgICAqL1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLmlzV2ViUHVzaFN1cHBvcnRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3B1c2hNYW5hZ2VyLmlzV2ViUHVzaFN1cHBvcnRlZCgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBpZiB3ZWIgcHVzaCBpcyBzdWJzY3JpYmVkLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVzIGlmIHRydWUsIHJlamVjdHMgaWYgZmFsc2UuXG4gICAgICovXG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUuaXNXZWJQdXNoU3Vic2NyaWJlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgY2xpZW50VXJsID0gKChfYSA9IHRoaXMuX3dlYlB1c2hPcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2xpZW50VXJsKSB8fCAnJztcbiAgICAgICAgcmV0dXJuIHRoaXMuX3B1c2hNYW5hZ2VyLmlzV2ViUHVzaFN1YnNjcmliZWQoY2xpZW50VXJsKTtcbiAgICB9O1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLnNldFdlYlB1c2hPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fd2ViUHVzaE9wdGlvbnMgPSBfX2Fzc2lnbih7fSwgb3B0aW9ucyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciB0aGUgYnJvd3NlciBmb3Igd2ViIHB1c2guXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSAgIHNlcnZpY2VXb3JrZXJVcmwgVGhlIHVybCBvbiB5b3VyIHNlcnZlciB0aGF0IGhvc3RzIHRoZVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9zdy5taW4uanMgc2VydmljZSB3b3JrZXIganMgZmlsZS5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgICAgICAgICAgICBSZXNvbHZlcyBpZiByZWdpc3RyYXRpb24gc3VjY2Vzc2Z1bCxcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhlcndpc2UgZmFpbHMuXG4gICAgICovXG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUucmVnaXN0ZXJGb3JXZWJQdXNoID0gZnVuY3Rpb24gKHNlcnZpY2VXb3JrZXJVcmwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX3B1c2hNYW5hZ2VyLmlzV2ViUHVzaFN1cHBvcnRlZCgpKSB7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaWJlID0gZnVuY3Rpb24gKGlzU3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgICAgIGlmIChpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9wdXNoTWFuYWdlci5zdWJzY3JpYmVVc2VyKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLl93ZWJQdXNoT3B0aW9ucyB8fCB7fTtcbiAgICAgICAgICAgIHZhciB3b3JrZXJVcmwgPSBzZXJ2aWNlV29ya2VyVXJsIHx8IG9wdGlvbnMuc2VydmljZVdvcmtlclVybDtcbiAgICAgICAgICAgIHZhciBzY29wZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5zY29wZSA/IHsgc2NvcGU6IG9wdGlvbnMuc2NvcGUgfSA6IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcHVzaE1hbmFnZXIucmVnaXN0ZXIod29ya2VyVXJsLCBzY29wZSwgc3Vic2NyaWJlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnTGVhbnBsdW06IFdlYlB1c2ggaXMgbm90IHN1cHBvcnRlZC4nKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogVW5yZWdpc3RlcnMgdGhlIGJyb3dzZXIgZm9ybSB3ZWIgcHVzaC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgICAgIFJlc29sdmVzIG9uIHN1Y2Nlc3MsIG90aGVyd2lzZSByZWplY3RzLlxuICAgICAqL1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLnVucmVnaXN0ZXJGcm9tV2ViUHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgY2xpZW50VXJsID0gKChfYSA9IHRoaXMuX3dlYlB1c2hPcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2xpZW50VXJsKSB8fCAnJztcbiAgICAgICAgcmV0dXJuIHRoaXMuX3B1c2hNYW5hZ2VyLnVuc3Vic2NyaWJlVXNlcihjbGllbnRVcmwpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2xlYXJzIGNhY2hlZCB2YWx1ZXMgZm9yIG1lc3NhZ2VzLCB2YXJpYWJsZXMgYW5kIHRlc3QgYXNzaWdubWVudHMuXG4gICAgICogVXNlIHNwYXJpbmdseSBhcyBpZiB0aGUgYXBwIGlzIHVwZGF0ZWQsIHlvdSdsbCBoYXZlIHRvIGRlYWwgd2l0aCBwb3RlbnRpYWxseVxuICAgICAqIGluY29uc2lzdGVudCBzdGF0ZSBvciB1c2VyIGV4cGVyaWVuY2UuXG4gICAgICovXG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUuY2xlYXJVc2VyQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fdmFyQ2FjaGUuY2xlYXJVc2VyQ29udGVudCgpO1xuICAgIH07XG4gICAgLy8gdXNlZCBieSBHb29nbGUgVGFnIE1hbmFnZXIgdG8gYXBwbHkgY29tbWFuZHMgcXVldWVkIGR1cmluZyBhc3luYyBzY3JpcHQgbG9hZGluZ1xuICAgIExlYW5wbHVtSW50ZXJuYWwucHJvdG90eXBlLmFwcGx5UXVldWUgPSBmdW5jdGlvbiAocXVldWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcXVldWUuZm9yRWFjaChmdW5jdGlvbiAoaW52b2NhdGlvbikgeyByZXR1cm4gX3RoaXNbaW52b2NhdGlvbi5uYW1lXS5hcHBseShfdGhpcywgaW52b2NhdGlvbi5hcmdzKTsgfSk7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5jcmVhdGVSZXF1ZXN0ID0gZnVuY3Rpb24gKGFjdGlvbiwgYXJncywgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICB2YXIgc3VwcHJlc3MgPSB0aGlzLl9taWdyYXRpb24uZHVwbGljYXRlUmVxdWVzdChhY3Rpb24sIGFyZ3MsIG9wdGlvbnMpO1xuICAgICAgICBpZiAoIXN1cHByZXNzKSB7XG4gICAgICAgICAgICB0aGlzLl9scFJlcXVlc3QucmVxdWVzdChhY3Rpb24sIGFyZ3MsIF9fYXNzaWduKHsgZGV2TW9kZTogdGhpcy5faW50ZXJuYWxTdGF0ZS5kZXZNb2RlIH0sIG9wdGlvbnMpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTGVhbnBsdW1JbnRlcm5hbC5wcm90b3R5cGUuY29ubmVjdFNvY2tldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fbHBTb2NrZXQuY29ubmVjdCh7XG4gICAgICAgICAgICBhcHBJZDogdGhpcy5fbHBSZXF1ZXN0LmFwcElkLFxuICAgICAgICAgICAgZGV2aWNlSWQ6IHRoaXMuX2xwUmVxdWVzdC5kZXZpY2VJZCxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS5oYXNBY3RpdmVTZXNzaW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3Nlc3Npb25MZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY3VycmVudFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICB2YXIgbGFzdEFjdGl2ZSA9IHBhcnNlSW50KFN0b3JhZ2VNYW5hZ2VyXzEuZGVmYXVsdC5nZXQoU0VTU0lPTl9LRVkpKTtcbiAgICAgICAgaWYgKGlzTmFOKGxhc3RBY3RpdmUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnRUaW1lIC0gbGFzdEFjdGl2ZSA8IHRoaXMuX3Nlc3Npb25MZW5ndGggKiAxMDAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBMZWFucGx1bUludGVybmFsLnByb3RvdHlwZS51cGRhdGVTZXNzaW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQuc2F2ZShTRVNTSU9OX0tFWSwgU3RyaW5nKERhdGUubm93KCkpKTtcbiAgICB9O1xuICAgIHJldHVybiBMZWFucGx1bUludGVybmFsO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IExlYW5wbHVtSW50ZXJuYWw7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiAgQ29weXJpZ2h0IDIwMjAgTGVhbnBsdW0gSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEFyZ3NCdWlsZGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vQXJnc0J1aWxkZXJcIikpO1xudmFyIENvbnN0YW50c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0NvbnN0YW50c1wiKSk7XG52YXIgU3RvcmFnZU1hbmFnZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9TdG9yYWdlTWFuYWdlclwiKSk7XG52YXIgTmV0d29ya18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL05ldHdvcmtcIikpO1xudmFyIExlYW5wbHVtUmVxdWVzdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMZWFucGx1bVJlcXVlc3QoZXZlbnRzLCBuZXR3b3JrKSB7XG4gICAgICAgIGlmIChuZXR3b3JrID09PSB2b2lkIDApIHsgbmV0d29yayA9IG5ldyBOZXR3b3JrXzEuZGVmYXVsdCgpOyB9XG4gICAgICAgIHRoaXMuZXZlbnRzID0gZXZlbnRzO1xuICAgICAgICB0aGlzLm5ldHdvcmsgPSBuZXR3b3JrO1xuICAgICAgICB0aGlzLmNvb2xkb3duVGltZW91dCA9IG51bGw7XG4gICAgICAgIHRoaXMubGFzdFJlcXVlc3RUaW1lID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnVzZXJJZFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmFwaVBhdGggPSAnaHR0cHM6Ly9hcGkubGVhbnBsdW0uY29tL2FwaSc7XG4gICAgICAgIHRoaXMuYmF0Y2hDb29sZG93biA9IDU7XG4gICAgICAgIHRoaXMuYmF0Y2hFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5sb2FkSG9zdENvbmZpZygpO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTGVhbnBsdW1SZXF1ZXN0LnByb3RvdHlwZSwgXCJ1c2VySWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICByZXR1cm4gKF9iID0gKF9hID0gdGhpcy51c2VySWRWYWx1ZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdGhpcy5sb2FkTG9jYWwoQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuVVNFUl9JRCkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHRoaXMuZGV2aWNlSWQ7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHVzZXJJZCkge1xuICAgICAgICAgICAgdGhpcy51c2VySWRWYWx1ZSA9IHVzZXJJZDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIExlYW5wbHVtUmVxdWVzdC5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIChhY3Rpb24sIHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zIHx8IG5ldyBBcmdzQnVpbGRlcl8xLmRlZmF1bHQoKTtcbiAgICAgICAgLy8gR2V0IG9yIGNyZWF0ZSBkZXZpY2UgSUQgYW5kIHVzZXIgSUQuXG4gICAgICAgIGlmICghdGhpcy5kZXZpY2VJZCkge1xuICAgICAgICAgICAgdGhpcy5kZXZpY2VJZCA9IHRoaXMubG9hZExvY2FsKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLkRFVklDRV9JRCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmRldmljZUlkKSB7XG4gICAgICAgICAgICB2YXIgaWQgPSAnJztcbiAgICAgICAgICAgIHZhciBwb3NzaWJsZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSc7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZCArPSBwb3NzaWJsZS5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcG9zc2libGUubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRldmljZUlkID0gaWQ7XG4gICAgICAgICAgICB0aGlzLnNhdmVMb2NhbChDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5ERVZJQ0VfSUQsIGlkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNhdmVMb2NhbChDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5VU0VSX0lELCB0aGlzLnVzZXJJZCk7XG4gICAgICAgIHZhciBhcmdzQnVpbGRlciA9IHBhcmFtc1xuICAgICAgICAgICAgLmF0dGFjaEFwaUtleXModGhpcy5hcHBJZCwgdGhpcy5jbGllbnRLZXkpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLlNES19WRVJTSU9OLCBDb25zdGFudHNfMS5kZWZhdWx0LlNES19WRVJTSU9OKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5ERVZJQ0VfSUQsIHRoaXMuZGV2aWNlSWQpXG4gICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLlVTRVJfSUQsIHRoaXMudXNlcklkKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5BQ1RJT04sIGFjdGlvbilcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuVkVSU0lPTl9OQU1FLCB0aGlzLnZlcnNpb25OYW1lKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5ERVZfTU9ERSwgb3B0aW9ucy5kZXZNb2RlKVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5USU1FLCAobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKS50b1N0cmluZygpKTtcbiAgICAgICAgdmFyIHN1Y2Nlc3MgPSBvcHRpb25zLnN1Y2Nlc3MgfHwgb3B0aW9ucy5yZXNwb25zZTtcbiAgICAgICAgdmFyIGVycm9yID0gb3B0aW9ucy5lcnJvciB8fCBvcHRpb25zLnJlc3BvbnNlO1xuICAgICAgICBpZiAoIXRoaXMuYXBwSWQgfHwgIXRoaXMuY2xpZW50S2V5KSB7XG4gICAgICAgICAgICB2YXIgZXJyID0gJ0xlYW5wbHVtIEFwcCBJRCBhbmQgY2xpZW50IGtleSBhcmUgbm90IHNldC4gTWFrZSBzdXJlIHlvdSAnICtcbiAgICAgICAgICAgICAgICAnYXJlIGNhbGxpbmcgc2V0QXBwSWRGb3JEZXZlbG9wbWVudE1vZGUgb3Igc2V0QXBwSWRGb3JQcm9kdWN0aW9uTW9kZSAnICtcbiAgICAgICAgICAgICAgICAnYmVmb3JlIGlzc3VpbmcgQVBJIGNhbGxzLic7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1zLmJvZHkoKSkge1xuICAgICAgICAgICAgdGhpcy5zZW5kUmVxdWVzdChcIj9cIi5jb25jYXQoYXJnc0J1aWxkZXIuYnVpbGQoKSksIHBhcmFtcy5ib2R5KCksIHN1Y2Nlc3MsIGVycm9yLCBvcHRpb25zLnF1ZXVlZCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNlbmROb3cgPSBvcHRpb25zLmRldk1vZGUgfHwgb3B0aW9ucy5zZW5kTm93IHx8ICF0aGlzLmJhdGNoRW5hYmxlZDtcbiAgICAgICAgdmFyIHNlbmRVbnNlbnRSZXF1ZXN0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXF1ZXN0c1RvU2VuZCA9IF90aGlzLnBvcFVuc2VudFJlcXVlc3RzKCk7XG4gICAgICAgICAgICBpZiAocmVxdWVzdHNUb1NlbmQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHZhciByZXF1ZXN0RGF0YSA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgJ2RhdGEnOiByZXF1ZXN0c1RvU2VuZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB2YXIgbXVsdGlSZXF1ZXN0QXJncyA9IG5ldyBBcmdzQnVpbGRlcl8xLmRlZmF1bHQoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0YWNoQXBpS2V5cyhfdGhpcy5hcHBJZCwgX3RoaXMuY2xpZW50S2V5KVxuICAgICAgICAgICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLlNES19WRVJTSU9OLCBDb25zdGFudHNfMS5kZWZhdWx0LlNES19WRVJTSU9OKVxuICAgICAgICAgICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLkFDVElPTiwgQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLk1VTFRJKVxuICAgICAgICAgICAgICAgICAgICAuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLlRJTUUsIChuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDApLnRvU3RyaW5nKCkudG9TdHJpbmcoKSlcbiAgICAgICAgICAgICAgICAgICAgLmJ1aWxkKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2VuZFJlcXVlc3QoXCI/XCIuY29uY2F0KG11bHRpUmVxdWVzdEFyZ3MpLCByZXF1ZXN0RGF0YSwgc3VjY2VzcywgZXJyb3IsIG9wdGlvbnMucXVldWVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gRGVhbCB3aXRoIGNvb2xkb3duLlxuICAgICAgICBpZiAoIXNlbmROb3cgJiYgdGhpcy5iYXRjaENvb2xkb3duKSB7XG4gICAgICAgICAgICB2YXIgbm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmxhc3RSZXF1ZXN0VGltZSB8fCBub3cgLSB0aGlzLmxhc3RSZXF1ZXN0VGltZSA+PSB0aGlzLmJhdGNoQ29vbGRvd24pIHtcbiAgICAgICAgICAgICAgICBzZW5kTm93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RSZXF1ZXN0VGltZSA9IG5vdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCF0aGlzLmNvb2xkb3duVGltZW91dCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29vbGRvd25UaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNvb2xkb3duVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmxhc3RSZXF1ZXN0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMDtcbiAgICAgICAgICAgICAgICAgICAgc2VuZFVuc2VudFJlcXVlc3RzKCk7XG4gICAgICAgICAgICAgICAgfSwgKHRoaXMuYmF0Y2hDb29sZG93biAtIChub3cgLSB0aGlzLmxhc3RSZXF1ZXN0VGltZSkpICogMTAwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zYXZlUmVxdWVzdEZvckxhdGVyKGFyZ3NCdWlsZGVyLmJ1aWxkRGljdCgpKTtcbiAgICAgICAgaWYgKHNlbmROb3cpIHtcbiAgICAgICAgICAgIHNlbmRVbnNlbnRSZXF1ZXN0cygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBMZWFucGx1bVJlcXVlc3QucHJvdG90eXBlLmdldEZpbGVVcmwgPSBmdW5jdGlvbiAoZmlsZW5hbWUpIHtcbiAgICAgICAgaWYgKCFmaWxlbmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIGlmICgvXmh0dHBzPzovLnRlc3QoZmlsZW5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmlsZW5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJnc0J1aWxkZXJfMS5kZWZhdWx0KClcbiAgICAgICAgICAgIC5hdHRhY2hBcGlLZXlzKHRoaXMuYXBwSWQsIHRoaXMuY2xpZW50S2V5KVxuICAgICAgICAgICAgLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5TREtfVkVSU0lPTiwgQ29uc3RhbnRzXzEuZGVmYXVsdC5TREtfVkVSU0lPTilcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuQUNUSU9OLCAnZG93bmxvYWRGaWxlJylcbiAgICAgICAgICAgIC5hZGQoJ2ZpbGVuYW1lJywgZmlsZW5hbWUpO1xuICAgICAgICByZXR1cm4gXCJcIi5jb25jYXQodGhpcy5hcGlQYXRoLCBcIj9cIikuY29uY2F0KGFyZ3MuYnVpbGQoKSk7XG4gICAgfTtcbiAgICBMZWFucGx1bVJlcXVlc3QucHJvdG90eXBlLnNldE5ldHdvcmtUaW1lb3V0ID0gZnVuY3Rpb24gKHNlY29uZHMpIHtcbiAgICAgICAgdGhpcy5uZXR3b3JrLnNldE5ldHdvcmtUaW1lb3V0KHNlY29uZHMpO1xuICAgIH07XG4gICAgTGVhbnBsdW1SZXF1ZXN0LnByb3RvdHlwZS5nZXRMYXN0UmVzcG9uc2UgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIHZhciBjb3VudCA9IChfYiA9IChfYSA9IHJlc3BvbnNlID09PSBudWxsIHx8IHJlc3BvbnNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXNwb25zZS5yZXNwb25zZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMDtcbiAgICAgICAgcmV0dXJuIChjb3VudCA+IDApID8gKF9jID0gcmVzcG9uc2UgPT09IG51bGwgfHwgcmVzcG9uc2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlc3BvbnNlLnJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2NbY291bnQgLSAxXSA6IG51bGw7XG4gICAgfTtcbiAgICBMZWFucGx1bVJlcXVlc3QucHJvdG90eXBlLmdldEZpcnN0UmVzcG9uc2UgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIHZhciBjb3VudCA9IChfYiA9IChfYSA9IHJlc3BvbnNlID09PSBudWxsIHx8IHJlc3BvbnNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXNwb25zZS5yZXNwb25zZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMDtcbiAgICAgICAgcmV0dXJuIChjb3VudCA+IDApID8gKF9jID0gcmVzcG9uc2UgPT09IG51bGwgfHwgcmVzcG9uc2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlc3BvbnNlLnJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2NbMF0gOiBudWxsO1xuICAgIH07XG4gICAgTGVhbnBsdW1SZXF1ZXN0LnByb3RvdHlwZS5pc1Jlc3BvbnNlU3VjY2VzcyA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbihyZXNwb25zZSA9PT0gbnVsbCB8fCByZXNwb25zZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVzcG9uc2Uuc3VjY2Vzcyk7XG4gICAgfTtcbiAgICBMZWFucGx1bVJlcXVlc3QucHJvdG90eXBlLnNhdmVSZXF1ZXN0Rm9yTGF0ZXIgPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICB2YXIgY291bnQgPSB0aGlzLmxvYWRMb2NhbChDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5DT1VOVCkgfHwgMDtcbiAgICAgICAgdmFyIGl0ZW1LZXkgPSBDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5JVEVNICsgY291bnQ7XG4gICAgICAgIHRoaXMuc2F2ZUxvY2FsKGl0ZW1LZXksIEpTT04uc3RyaW5naWZ5KGFyZ3MpKTtcbiAgICAgICAgY291bnQrKztcbiAgICAgICAgdGhpcy5zYXZlTG9jYWwoQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuQ09VTlQsIGNvdW50KTtcbiAgICB9O1xuICAgIExlYW5wbHVtUmVxdWVzdC5wcm90b3R5cGUuc2VuZFJlcXVlc3QgPSBmdW5jdGlvbiAocXVlcnksIGRhdGEsIHN1Y2Nlc3MsIGVycm9yLCBxdWV1ZWQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5uZXR3b3JrLmFqYXgoJ1BPU1QnLCBcIlwiLmNvbmNhdCh0aGlzLmFwaVBhdGgpLmNvbmNhdChxdWVyeSksIGRhdGEsIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgdmFyIG1ldGhvZFJlc3BvbnNlID0gX3RoaXMuZ2V0Rmlyc3RSZXNwb25zZShyZXNwb25zZSk7XG4gICAgICAgICAgICB2YXIgc2hhMjU2ID0gKChfYSA9IHJlc3BvbnNlLm1pZ3JhdGVTdGF0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNoYTI1NikgfHwgbWV0aG9kUmVzcG9uc2Uuc2hhMjU2O1xuICAgICAgICAgICAgX3RoaXMuZXZlbnRzLmVtaXQoJ21pZ3JhdGVTdGF0ZVJlY2VpdmVkJywgc2hhMjU2KTtcbiAgICAgICAgICAgIGlmICghbWV0aG9kUmVzcG9uc2Uuc3VjY2VzcyAmJiBtZXRob2RSZXNwb25zZS5hcGlIb3N0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGFwaUhvc3QgPSBtZXRob2RSZXNwb25zZS5hcGlIb3N0LCBhcGlQYXRoID0gbWV0aG9kUmVzcG9uc2UuYXBpUGF0aCwgZGV2U2VydmVySG9zdCA9IG1ldGhvZFJlc3BvbnNlLmRldlNlcnZlckhvc3Q7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2F2ZUxvY2FsKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLkhPU1RfQ09ORklHLCBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgIGFwaUhvc3Q6IGFwaUhvc3QsXG4gICAgICAgICAgICAgICAgICAgIGFwaVBhdGg6IGFwaVBhdGgsXG4gICAgICAgICAgICAgICAgICAgIGRldlNlcnZlckhvc3Q6IGRldlNlcnZlckhvc3QsXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIF90aGlzLmFwaVBhdGggPSBcImh0dHBzOi8vXCIuY29uY2F0KGFwaUhvc3QsIFwiL1wiKS5jb25jYXQoYXBpUGF0aCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2VuZFJlcXVlc3QocXVlcnksIGRhdGEsIHN1Y2Nlc3MsIGVycm9yLCBxdWV1ZWQpO1xuICAgICAgICAgICAgICAgIF90aGlzLmV2ZW50cy5lbWl0KCd1cGRhdGVEZXZTZXJ2ZXJIb3N0JywgZGV2U2VydmVySG9zdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgc3VjY2VzcyhyZXNwb25zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGVycm9yLCBxdWV1ZWQpO1xuICAgIH07XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBMZWFucGx1bVJlcXVlc3QucHJvdG90eXBlLnBvcFVuc2VudFJlcXVlc3RzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcmVxdWVzdERhdGEgPSBbXTtcbiAgICAgICAgdmFyIGNvdW50ID0gdGhpcy5sb2FkTG9jYWwoQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuQ09VTlQpIHx8IDA7XG4gICAgICAgIHRoaXMucmVtb3ZlTG9jYWwoQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuQ09VTlQpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtS2V5ID0gQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuSVRFTSArIGk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJlcXVlc3REYXRhLnB1c2goSlNPTi5wYXJzZSh0aGlzLmxvYWRMb2NhbChpdGVtS2V5KSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGlnbm9yZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBEbyBub3RoaW5nLlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZW1vdmVMb2NhbChpdGVtS2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVxdWVzdERhdGE7XG4gICAgfTtcbiAgICBMZWFucGx1bVJlcXVlc3QucHJvdG90eXBlLmxvYWRIb3N0Q29uZmlnID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaG9zdENvbmZpZyA9IEpTT04ucGFyc2UodGhpcy5sb2FkTG9jYWwoQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuSE9TVF9DT05GSUcpIHx8ICdudWxsJyk7XG4gICAgICAgIGlmIChob3N0Q29uZmlnKSB7XG4gICAgICAgICAgICB2YXIgYXBpSG9zdCA9IGhvc3RDb25maWcuYXBpSG9zdCwgYXBpUGF0aCA9IGhvc3RDb25maWcuYXBpUGF0aCwgZGV2U2VydmVySG9zdCA9IGhvc3RDb25maWcuZGV2U2VydmVySG9zdDtcbiAgICAgICAgICAgIHRoaXMuYXBpUGF0aCA9IFwiaHR0cHM6Ly9cIi5jb25jYXQoYXBpSG9zdCwgXCIvXCIpLmNvbmNhdChhcGlQYXRoKTtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzLmVtaXQoJ3VwZGF0ZURldlNlcnZlckhvc3QnLCBkZXZTZXJ2ZXJIb3N0KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTGVhbnBsdW1SZXF1ZXN0LnByb3RvdHlwZS5sb2FkTG9jYWwgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQuZ2V0KGtleSk7XG4gICAgfTtcbiAgICBMZWFucGx1bVJlcXVlc3QucHJvdG90eXBlLnNhdmVMb2NhbCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIFN0b3JhZ2VNYW5hZ2VyXzEuZGVmYXVsdC5zYXZlKGtleSwgdmFsdWUpO1xuICAgIH07XG4gICAgTGVhbnBsdW1SZXF1ZXN0LnByb3RvdHlwZS5yZW1vdmVMb2NhbCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgU3RvcmFnZU1hbmFnZXJfMS5kZWZhdWx0LnJlbW92ZShrZXkpO1xuICAgIH07XG4gICAgcmV0dXJuIExlYW5wbHVtUmVxdWVzdDtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBMZWFucGx1bVJlcXVlc3Q7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKlxuICogIENvcHlyaWdodCAyMDIwIExlYW5wbHVtIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGxvZGFzaF9pc2VxdWFsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImxvZGFzaC5pc2VxdWFsXCIpKTtcbnZhciBBcmdzQnVpbGRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0FyZ3NCdWlsZGVyXCIpKTtcbnZhciBDb25zdGFudHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9Db25zdGFudHNcIikpO1xudmFyIFNvY2tldElvQ2xpZW50XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vU29ja2V0SW9DbGllbnRcIikpO1xudmFyIExlYW5wbHVtU29ja2V0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExlYW5wbHVtU29ja2V0KGNhY2hlLCBjcmVhdGVSZXF1ZXN0LCBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGdldExhc3RSZXNwb25zZSwgZXZlbnRzKSB7XG4gICAgICAgIHRoaXMuY2FjaGUgPSBjYWNoZTtcbiAgICAgICAgdGhpcy5jcmVhdGVSZXF1ZXN0ID0gY3JlYXRlUmVxdWVzdDtcbiAgICAgICAgdGhpcy5nZXRMYXN0UmVzcG9uc2UgPSBnZXRMYXN0UmVzcG9uc2U7XG4gICAgICAgIHRoaXMuZXZlbnRzID0gZXZlbnRzO1xuICAgICAgICB0aGlzLm5ldHdvcmtUaW1lb3V0U2Vjb25kcyA9IDEwO1xuICAgICAgICB0aGlzLnNvY2tldENsaWVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuc29ja2V0SG9zdCA9ICdkZXYubGVhbnBsdW0uY29tJztcbiAgICAgICAgdGhpcy5hdXRoID0gbnVsbDtcbiAgICB9XG4gICAgTGVhbnBsdW1Tb2NrZXQucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAoYXV0aCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIVdlYlNvY2tldCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1lvdXIgYnJvd3NlciBkb2VzblxcJ3Qgc3VwcG9ydCBXZWJTb2NrZXRzLicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXV0aCA9IGF1dGg7XG4gICAgICAgIHZhciBhdXRoU2VudCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNvY2tldENsaWVudCA9IG5ldyBTb2NrZXRJb0NsaWVudF8xLmRlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5zb2NrZXRDbGllbnQuc2V0TmV0d29ya1RpbWVvdXQodGhpcy5uZXR3b3JrVGltZW91dFNlY29uZHMpO1xuICAgICAgICB0aGlzLnNvY2tldENsaWVudC5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBpZiAoIWF1dGhTZW50KSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0xlYW5wbHVtOiBDb25uZWN0ZWQgdG8gZGV2ZWxvcG1lbnQgc2VydmVyLicpO1xuICAgICAgICAgICAgICAgIF90aGlzLnNvY2tldENsaWVudC5zZW5kKCdhdXRoJywgKF9hID0ge30sXG4gICAgICAgICAgICAgICAgICAgIF9hW0NvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLkFQUF9JRF0gPSBhdXRoLmFwcElkLFxuICAgICAgICAgICAgICAgICAgICBfYVtDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5ERVZJQ0VfSURdID0gYXV0aC5kZXZpY2VJZCxcbiAgICAgICAgICAgICAgICAgICAgX2EpKTtcbiAgICAgICAgICAgICAgICBhdXRoU2VudCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc29ja2V0Q2xpZW50Lm9uZXJyb3IgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdMZWFucGx1bTogU29ja2V0IGVycm9yJywgZXZlbnQpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNvY2tldENsaWVudC5vbm1lc3NhZ2UgPSB0aGlzLm9uTWVzc2FnZVJlY2VpdmVkLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc29ja2V0Q2xpZW50Lm9uY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnTGVhbnBsdW06IERpc2Nvbm5lY3RlZCBmcm9tIGRldmVsb3BtZW50IHNlcnZlci4nKTtcbiAgICAgICAgICAgIGF1dGhTZW50ID0gZmFsc2U7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc29ja2V0Q2xpZW50LmNvbm5lY3QodGhpcy5zb2NrZXRIb3N0KTtcbiAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5zb2NrZXRDbGllbnQuY29ubmVjdGVkICYmICFfdGhpcy5zb2NrZXRDbGllbnQuY29ubmVjdGluZykge1xuICAgICAgICAgICAgICAgIF90aGlzLnNvY2tldENsaWVudC5jb25uZWN0KF90aGlzLnNvY2tldEhvc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCA1MDAwKTtcbiAgICB9O1xuICAgIExlYW5wbHVtU29ja2V0LnByb3RvdHlwZS5zZXRTb2NrZXRIb3N0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc29ja2V0SG9zdCA9IHZhbHVlO1xuICAgICAgICBpZiAodGhpcy5zb2NrZXRDbGllbnQuY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLnNvY2tldENsaWVudC5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3QodGhpcy5hdXRoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbmV0d29yayB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSBzZWNvbmRzIFRoZSB0aW1lb3V0IGluIHNlY29uZHMuXG4gICAgICovXG4gICAgTGVhbnBsdW1Tb2NrZXQucHJvdG90eXBlLnNldE5ldHdvcmtUaW1lb3V0ID0gZnVuY3Rpb24gKHNlY29uZHMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLm5ldHdvcmtUaW1lb3V0U2Vjb25kcyA9IHNlY29uZHM7XG4gICAgICAgIChfYSA9IHRoaXMuc29ja2V0Q2xpZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0TmV0d29ya1RpbWVvdXQoc2Vjb25kcyk7XG4gICAgfTtcbiAgICBMZWFucGx1bVNvY2tldC5wcm90b3R5cGUub25NZXNzYWdlUmVjZWl2ZWQgPSBmdW5jdGlvbiAoZXZlbnQsIGFyZ3MpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKGV2ZW50ID09PSAndXBkYXRlVmFycycpIHtcbiAgICAgICAgICAgIHZhciBhcmdzXzEgPSBuZXcgQXJnc0J1aWxkZXJfMS5kZWZhdWx0KCkuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLklOQ0xVREVfREVGQVVMVFMsIGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlUmVxdWVzdChDb25zdGFudHNfMS5kZWZhdWx0Lk1FVEhPRFMuR0VUX1ZBUlMsIGFyZ3NfMSwge1xuICAgICAgICAgICAgICAgIHF1ZXVlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2VuZE5vdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICByZXNwb25zZTogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBnZXRWYXJzUmVzcG9uc2UgPSBfdGhpcy5nZXRMYXN0UmVzcG9uc2UocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVzID0gZ2V0VmFyc1Jlc3BvbnNlW0NvbnN0YW50c18xLmRlZmF1bHQuS0VZUy5WQVJTXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhcmlhbnRzID0gZ2V0VmFyc1Jlc3BvbnNlW0NvbnN0YW50c18xLmRlZmF1bHQuS0VZUy5WQVJJQU5UU107XG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpb25EZWZpbml0aW9ucyA9IGdldFZhcnNSZXNwb25zZVtDb25zdGFudHNfMS5kZWZhdWx0LktFWVMuQUNUSU9OX0RFRklOSVRJT05TXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoMCwgbG9kYXNoX2lzZXF1YWxfMS5kZWZhdWx0KSh2YWx1ZXMsIF90aGlzLmNhY2hlLmRpZmZzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY2FjaGUuYXBwbHlEaWZmcyh2YWx1ZXMsIHZhcmlhbnRzLCBhY3Rpb25EZWZpbml0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXZlbnQgPT09ICdnZXRWYXJpYWJsZXMnKSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlLnNlbmRWYXJpYWJsZXMoKTtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0Q2xpZW50LnNlbmQoJ2dldENvbnRlbnRSZXNwb25zZScsIHtcbiAgICAgICAgICAgICAgICAndXBkYXRlZCc6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChldmVudCA9PT0gJ2dldEFjdGlvbnMnKSB7XG4gICAgICAgICAgICB2YXIgdXBkYXRlZCA9IHRoaXMuY2FjaGUuc2VuZEFjdGlvbnMoKTtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0Q2xpZW50LnNlbmQoJ2dldENvbnRlbnRSZXNwb25zZScsIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVkOiB1cGRhdGVkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXZlbnQgPT09ICdyZWdpc3RlckRldmljZScpIHtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gYXJnc1swXTtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hbGVydFxuICAgICAgICAgICAgYWxlcnQoXCJZb3VyIGRldmljZSBoYXMgYmVlbiByZWdpc3RlcmVkIHRvIFwiLmNvbmNhdChtZXNzYWdlLmVtYWlsLCBcIi5cIikpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGV2ZW50ID09PSAndHJpZ2dlcicpIHtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gYXJnc1swXTtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzLmVtaXQoJ3ByZXZpZXdSZXF1ZXN0JywgbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBMZWFucGx1bVNvY2tldDtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBMZWFucGx1bVNvY2tldDtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBDb25zdGFudHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9Db25zdGFudHNcIikpO1xudmFyIEFyZ3NCdWlsZGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vQXJnc0J1aWxkZXJcIikpO1xudmFyIE5ldHdvcmtfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9OZXR3b3JrXCIpKTtcbnZhciBsb2Rhc2hfaXNlcXVhbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJsb2Rhc2guaXNlcXVhbFwiKSk7XG52YXIgU3RvcmFnZU1hbmFnZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9TdG9yYWdlTWFuYWdlclwiKSk7XG52YXIgVmFsdWVUcmFuc2Zvcm1zXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vVmFsdWVUcmFuc2Zvcm1zXCIpKTtcbnZhciBPY2N1cnJlbmNlVHJhY2tlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPY2N1cnJlbmNlVHJhY2tlcigpIHtcbiAgICAgICAgdGhpcy5zZXNzaW9uID0ge307XG4gICAgICAgIHRoaXMudHJpZ2dlcnMgPSB7fTtcbiAgICAgICAgdGhpcy5vY2N1cnJlbmNlcyA9IHt9O1xuICAgIH1cbiAgICBPY2N1cnJlbmNlVHJhY2tlci5wcm90b3R5cGUucmVjb3JkT2NjdXJyZW5jZSA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB2YXIgc2Vzc2lvbk9jY3VycmVuY2VzID0gKHRoaXMuc2Vzc2lvbltpZF0gfHwgMCkgKyAxO1xuICAgICAgICB0aGlzLnNlc3Npb25baWRdID0gc2Vzc2lvbk9jY3VycmVuY2VzO1xuICAgICAgICB2YXIgb2NjdXJyZW5jZXMgPSAodGhpcy5vY2N1cnJlbmNlc1tpZF0gfHwgW10pO1xuICAgICAgICBvY2N1cnJlbmNlcy5wdXNoKERhdGUubm93KCkpO1xuICAgICAgICB0aGlzLm9jY3VycmVuY2VzW2lkXSA9IG9jY3VycmVuY2VzO1xuICAgICAgICB0aGlzLnNhdmUoKTtcbiAgICB9O1xuICAgIE9jY3VycmVuY2VUcmFja2VyLnByb3RvdHlwZS5yZWNvcmRUcmlnZ2VyT2NjdXJyZW5jZSA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB2YXIgdHJpZ2dlck9jY3VycmVuY2VzID0gdGhpcy50cmlnZ2Vyc1tpZF0gfHwgW107XG4gICAgICAgIHRyaWdnZXJPY2N1cnJlbmNlcy5wdXNoKERhdGUubm93KCkpO1xuICAgICAgICB0aGlzLnRyaWdnZXJzW2lkXSA9IHRyaWdnZXJPY2N1cnJlbmNlcztcbiAgICAgICAgdGhpcy5zYXZlKCk7XG4gICAgICAgIHJldHVybiB0cmlnZ2VyT2NjdXJyZW5jZXMubGVuZ3RoO1xuICAgIH07XG4gICAgT2NjdXJyZW5jZVRyYWNrZXIucHJvdG90eXBlLmdldFNlc3Npb25PY2N1cnJhbmNlQ291bnQgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2Vzc2lvbltpZF0gfHwgMDtcbiAgICB9O1xuICAgIE9jY3VycmVuY2VUcmFja2VyLnByb3RvdHlwZS5nZXRPY2N1cnJlbmNlcyA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vY2N1cnJlbmNlc1tpZF0gfHwgW107XG4gICAgfTtcbiAgICBPY2N1cnJlbmNlVHJhY2tlci5wcm90b3R5cGUuY2xlYXJTZXNzaW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnNlc3Npb24gPSB7fTtcbiAgICB9O1xuICAgIE9jY3VycmVuY2VUcmFja2VyLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY2FjaGUgPSBTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQuZ2V0KENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLk1FU1NBR0VfT0NDVVJSRU5DRVMpO1xuICAgICAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgICAgIHZhciBqc29uID0gbWF5YmVKU09OKGNhY2hlKTtcbiAgICAgICAgICAgIGlmIChqc29uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXNzaW9uID0ganNvbi5zZXNzaW9uO1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcnMgPSBqc29uLnRyaWdnZXJzO1xuICAgICAgICAgICAgICAgIHRoaXMub2NjdXJyZW5jZXMgPSBqc29uLm9jY3VycmVuY2VzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBPY2N1cnJlbmNlVHJhY2tlci5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGtleSA9IENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLk1FU1NBR0VfT0NDVVJSRU5DRVM7XG4gICAgICAgIFN0b3JhZ2VNYW5hZ2VyXzEuZGVmYXVsdC5zYXZlKGtleSwgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgc2Vzc2lvbjogdGhpcy5zZXNzaW9uLFxuICAgICAgICAgICAgdHJpZ2dlcnM6IHRoaXMudHJpZ2dlcnMsXG4gICAgICAgICAgICBvY2N1cnJlbmNlczogdGhpcy5vY2N1cnJlbmNlcyxcbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgcmV0dXJuIE9jY3VycmVuY2VUcmFja2VyO1xufSgpKTtcbnZhciB2ZXJiVG9JbnRlcnZhbCA9IGZ1bmN0aW9uICh2ZXJiKSB7XG4gICAgdmFyIFNFQ09ORCA9IDEwMDA7XG4gICAgdmFyIE1JTlVURSA9IDYwICogU0VDT05EO1xuICAgIHZhciBIT1VSID0gNjAgKiBNSU5VVEU7XG4gICAgdmFyIERBWSA9IDI0ICogSE9VUjtcbiAgICBzd2l0Y2ggKHZlcmIpIHtcbiAgICAgICAgY2FzZSAnbGltaXRTZWNvbmQnOiByZXR1cm4gU0VDT05EO1xuICAgICAgICBjYXNlICdsaW1pdE1pbnV0ZSc6IHJldHVybiBNSU5VVEU7XG4gICAgICAgIGNhc2UgJ2xpbWl0SG91cic6IHJldHVybiBIT1VSO1xuICAgICAgICBjYXNlICdsaW1pdERheSc6IHJldHVybiBEQVk7XG4gICAgfVxufTtcbnZhciBtYXliZUpTT04gPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59O1xudmFyIE1lc3NhZ2VzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1lc3NhZ2VzKGV2ZW50cywgY3JlYXRlUmVxdWVzdCwgZ2V0RmlsZVVybCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmV2ZW50cyA9IGV2ZW50cztcbiAgICAgICAgdGhpcy5jcmVhdGVSZXF1ZXN0ID0gY3JlYXRlUmVxdWVzdDtcbiAgICAgICAgdGhpcy5nZXRGaWxlVXJsID0gZ2V0RmlsZVVybDtcbiAgICAgICAgdGhpcy5fbWVzc2FnZUNhY2hlID0ge307XG4gICAgICAgIHRoaXMub2NjdXJyZW5jZVRyYWNrZXIgPSBuZXcgT2NjdXJyZW5jZVRyYWNrZXIoKTtcbiAgICAgICAgdGhpcy5fc2hvd1JpY2hJQU0gPSBmYWxzZTtcbiAgICAgICAgZXZlbnRzLm9uKCdwcmV2aWV3UmVxdWVzdCcsIHRoaXMub25NZXNzYWdlUHJldmlldy5iaW5kKHRoaXMpKTtcbiAgICAgICAgZXZlbnRzLm9uKCdtZXNzYWdlc1JlY2VpdmVkJywgdGhpcy5vbk1lc3NhZ2VzUmVjZWl2ZWQuYmluZCh0aGlzKSk7XG4gICAgICAgIGV2ZW50cy5vbignc3RhcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5vY2N1cnJlbmNlVHJhY2tlci5sb2FkKCk7XG4gICAgICAgICAgICBfdGhpcy5vY2N1cnJlbmNlVHJhY2tlci5jbGVhclNlc3Npb24oKTtcbiAgICAgICAgICAgIF90aGlzLm9uVHJpZ2dlcih7IHRyaWdnZXI6ICdzdGFydCcgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBldmVudHMub24oJ3Jlc3VtZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5NRVNTQUdFX0NBQ0hFO1xuICAgICAgICAgICAgdmFyIGNhY2hlID0gbWF5YmVKU09OKFN0b3JhZ2VNYW5hZ2VyXzEuZGVmYXVsdC5nZXQoa2V5KSk7XG4gICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUNhY2hlID0gY2FjaGUgfHwgX3RoaXMuX21lc3NhZ2VDYWNoZTtcbiAgICAgICAgICAgIF90aGlzLm9jY3VycmVuY2VUcmFja2VyLmxvYWQoKTtcbiAgICAgICAgICAgIF90aGlzLm9uVHJpZ2dlcih7IHRyaWdnZXI6ICdyZXN1bWUnIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgZXZlbnRzLm9uKCd0cmFjaycsIGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgICBfdGhpcy5vblRyaWdnZXIoe1xuICAgICAgICAgICAgICAgIHRyaWdnZXI6ICdldmVudCcsXG4gICAgICAgICAgICAgICAgZXZlbnROYW1lOiBhcmdzLmV2ZW50TmFtZSxcbiAgICAgICAgICAgICAgICBwYXJhbXM6IGFyZ3MucGFyYW1zIHx8IHt9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBldmVudHMub24oJ2FkdmFuY2VTdGF0ZScsIGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMub25UcmlnZ2VyKHtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyOiAnc3RhdGUnLFxuICAgICAgICAgICAgICAgIHN0YXRlOiBhcmdzLnN0YXRlLFxuICAgICAgICAgICAgICAgIHBhcmFtczogYXJncy5wYXJhbXMgfHwge30sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGV2ZW50cy5vbignc2V0VXNlckF0dHJpYnV0ZScsIGZ1bmN0aW9uIChhdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMub25UcmlnZ2VyKHsgdHJpZ2dlcjogJ3VzZXJBdHRyaWJ1dGUnLCBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgTWVzc2FnZXMucHJvdG90eXBlLmVuYWJsZVJpY2hJbkFwcE1lc3NhZ2VzID0gZnVuY3Rpb24gKGVuYWJsZWQpIHtcbiAgICAgICAgdGhpcy5fc2hvd1JpY2hJQU0gPSBlbmFibGVkO1xuICAgIH07XG4gICAgTWVzc2FnZXMucHJvdG90eXBlLm9uVHJpZ2dlciA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBtZXNzYWdlcyA9IHRoaXMuZ2V0TWVzc2FnZXMoKTtcbiAgICAgICAgdmFyIG1lc3NhZ2VJZHMgPSBPYmplY3Qua2V5cyhtZXNzYWdlcyk7XG4gICAgICAgIG1lc3NhZ2VJZHNcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGlkKSB7IHJldHVybiBfdGhpcy5zaG91bGRTaG93TWVzc2FnZShpZCwgbWVzc2FnZXNbaWRdLCBjb250ZXh0KTsgfSlcbiAgICAgICAgICAgIC5zbGljZSgwLCAxKSAvLyBUT0RPOiBjaG9vc2UgcmFuZG9tbHlcbiAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gX3RoaXMuc2hvd01lc3NhZ2UoaWQsIG1lc3NhZ2VzW2lkXSk7IH0pO1xuICAgIH07XG4gICAgTWVzc2FnZXMucHJvdG90eXBlLm9uTWVzc2FnZVByZXZpZXcgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICB2YXIgdmFycyA9IG1lc3NhZ2UuYWN0aW9uO1xuICAgICAgICB2YXIgY29udGV4dCA9IHtcbiAgICAgICAgICAgIHRyYWNrOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnRJbmZvID0gZXZlbnQgPyBcImV2ZW50ICdcIi5jb25jYXQoZXZlbnQsIFwiJ1wiKSA6ICdpbXByZXNzaW9uJztcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlRyYWNraW5nIFwiLmNvbmNhdChldmVudEluZm8sIFwiIGZvciBcIikuY29uY2F0KG1lc3NhZ2UubWVzc2FnZUlkKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcnVuQWN0aW9uTmFtZWQ6IGZ1bmN0aW9uIChhY3Rpb25OYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKFwiUnVubmluZyB1bnRyYWNrZWQgYWN0aW9uICdcIi5jb25jYXQoYWN0aW9uTmFtZSwgXCInXCIpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBydW5UcmFja2VkQWN0aW9uTmFtZWQ6IGZ1bmN0aW9uIChhY3Rpb25OYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKFwiUnVubmluZyB0cmFja2VkIGFjdGlvbiAnXCIuY29uY2F0KGFjdGlvbk5hbWUsIFwiJ1wiKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmhhbmRsZU1lc3NhZ2Uoe1xuICAgICAgICAgICAgaXNQcmV2aWV3OiB0cnVlLFxuICAgICAgICAgICAgbWVzc2FnZTogdGhpcy5hZGREZWZhdWx0cyhfX2Fzc2lnbih7IG1lc3NhZ2VJZDogbWVzc2FnZS5tZXNzYWdlSWQgfSwgdmFycykpLFxuICAgICAgICAgICAgY29udGV4dDogY29udGV4dCxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBNZXNzYWdlcy5wcm90b3R5cGUub25NZXNzYWdlc1JlY2VpdmVkID0gZnVuY3Rpb24gKHJlY2VpdmVkTWVzc2FnZXMpIHtcbiAgICAgICAgdmFyIG1lc3NhZ2VzID0gcmVjZWl2ZWRNZXNzYWdlcyB8fCB7fTtcbiAgICAgICAgdGhpcy5fbWVzc2FnZUNhY2hlID0gbWVzc2FnZXM7XG4gICAgICAgIFN0b3JhZ2VNYW5hZ2VyXzEuZGVmYXVsdC5zYXZlKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLk1FU1NBR0VfQ0FDSEUsIEpTT04uc3RyaW5naWZ5KG1lc3NhZ2VzKSk7XG4gICAgfTtcbiAgICBNZXNzYWdlcy5wcm90b3R5cGUuc2hvdWxkU2hvd01lc3NhZ2UgPSBmdW5jdGlvbiAoaWQsIG1lc3NhZ2UsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgIHZhciBtYXRjaGVzVHJpZ2dlciA9IHRoaXMubWF0Y2hlc1RyaWdnZXIobWVzc2FnZS53aGVuVHJpZ2dlcnMsIGNvbnRleHQpO1xuICAgICAgICB2YXIgbWF0Y2hlc1VubGVzcyA9IHRoaXMubWF0Y2hlc1RyaWdnZXIobWVzc2FnZS51bmxlc3NUcmlnZ2VycywgY29udGV4dCk7XG4gICAgICAgIGlmICghbWF0Y2hlc1RyaWdnZXIgfHwgbWF0Y2hlc1VubGVzcykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0cmlnZ2Vyc0NvdW50ID0gdGhpcy5vY2N1cnJlbmNlVHJhY2tlci5yZWNvcmRUcmlnZ2VyT2NjdXJyZW5jZShpZCk7XG4gICAgICAgIGlmICghdGhpcy5tYXRjaGVzTGltaXRzKGlkLCBtZXNzYWdlLndoZW5MaW1pdHMsIHRyaWdnZXJzQ291bnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc3RhcnRUaW1lICYmIG1lc3NhZ2UuZW5kVGltZSkge1xuICAgICAgICAgICAgdmFyIG91dHNpZGVBY3RpdmVQZXJpb2QgPSBub3cgPCBtZXNzYWdlLnN0YXJ0VGltZSB8fCBtZXNzYWdlLmVuZFRpbWUgPCBub3c7XG4gICAgICAgICAgICBpZiAob3V0c2lkZUFjdGl2ZVBlcmlvZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIE1lc3NhZ2VzLnByb3RvdHlwZS5zaG93TWVzc2FnZSA9IGZ1bmN0aW9uIChpZCwgbWVzc2FnZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgdmFycyA9IHRoaXMuYWRkRGVmYXVsdHMoX19hc3NpZ24oe30sIG1lc3NhZ2UudmFycykpO1xuICAgICAgICB2YXIgY29udGV4dCA9IHtcbiAgICAgICAgICAgIHRyYWNrOiBmdW5jdGlvbiAoZXZlbnQsIHZhbHVlLCBpbmZvLCBwYXJhbXMpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5vY2N1cnJlbmNlVHJhY2tlci5yZWNvcmRPY2N1cnJlbmNlKGlkKTtcbiAgICAgICAgICAgICAgICBfdGhpcy50cmFja01lc3NhZ2UoaWQsIHsgZXZlbnQ6IGV2ZW50LCB2YWx1ZTogdmFsdWUsIGluZm86IGluZm8sIHBhcmFtczogcGFyYW1zIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJ1bkFjdGlvbk5hbWVkOiBmdW5jdGlvbiAoYWN0aW9uTmFtZSkgeyByZXR1cm4gX3RoaXMub25BY3Rpb24odmFyc1thY3Rpb25OYW1lXSwgaWQpOyB9LFxuICAgICAgICAgICAgcnVuVHJhY2tlZEFjdGlvbk5hbWVkOiBmdW5jdGlvbiAoYWN0aW9uTmFtZSkge1xuICAgICAgICAgICAgICAgIHZhciBldmVudCA9IGFjdGlvbk5hbWUucmVwbGFjZSgvIGFjdGlvbiQvLCAnJyk7XG4gICAgICAgICAgICAgICAgX3RoaXMudHJhY2tNZXNzYWdlKGlkLCB7IGV2ZW50OiBldmVudCB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5vbkFjdGlvbih2YXJzW2FjdGlvbk5hbWVdLCBpZCk7IH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVNZXNzYWdlKHtcbiAgICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgICAgICBtZXNzYWdlOiBfX2Fzc2lnbih7IG1lc3NhZ2VJZDogaWQgfSwgdmFycyksXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgTWVzc2FnZXMucHJvdG90eXBlLnByb2Nlc3NNZXNzYWdlRXZlbnQgPSBmdW5jdGlvbiAobWVzc2FnZUlkLCBldmVudFVybCkge1xuICAgICAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJscC1tZXNzYWdlLVwiLmNvbmNhdChtZXNzYWdlSWQpKTtcbiAgICAgICAgaWYgKCFpZnJhbWUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdtZXNzYWdlIGNsb3NlZCwgc2tpcHBpbmcgZXZlbnQgcHJvY2Vzc2luZycpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfYSA9IGV2ZW50VXJsLnJlcGxhY2UoL15odHRwOlxcL1xcL2xlYW5wbHVtXFwvLywgJycpLnNwbGl0KCc/JyksIGV2ZW50ID0gX2FbMF0sIF9iID0gX2FbMV0sIHF1ZXJ5ID0gX2IgPT09IHZvaWQgMCA/ICcnIDogX2I7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHZhciBwYXJhbXMgPSBxdWVyeS5zcGxpdCgnJicpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwYXJhbSkge1xuICAgICAgICAgICAgdmFyIF9hID0gcGFyYW0uc3BsaXQoJz0nKSwga2V5ID0gX2FbMF0sIHZhbHVlID0gX2FbMV07XG4gICAgICAgICAgICBhY2Nba2V5XSA9IGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LCB7fSk7XG4gICAgICAgIHZhciBfYyA9IGlmcmFtZS5tZXRhZGF0YSwgbWVzc2FnZSA9IF9jLm1lc3NhZ2UsIGNvbnRleHQgPSBfYy5jb250ZXh0O1xuICAgICAgICBzd2l0Y2ggKGV2ZW50KSB7XG4gICAgICAgICAgICBjYXNlICdsb2FkRmluaXNoZWQnOlxuICAgICAgICAgICAgICAgIGlmcmFtZS5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgICAgICAgICAgICAgIGlmcmFtZS5zdHlsZS5sZWZ0ID0gJzAnO1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlWydIVE1MIEhlaWdodCddID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSBtZXNzYWdlWydIVE1MIFdpZHRoJ107XG4gICAgICAgICAgICAgICAgICAgIGlmcmFtZS5zdHlsZS5oZWlnaHQgPSBcIlwiLmNvbmNhdChtZXNzYWdlWydIVE1MIEhlaWdodCddLCBcInB4XCIpO1xuICAgICAgICAgICAgICAgICAgICBpZnJhbWUuc3R5bGUud2lkdGggPSB3aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgaWZyYW1lLnN0eWxlLmxlZnQgPSBcImNhbGMoKDEwMCUgLSBcIi5jb25jYXQod2lkdGgsIFwiKSAvIDIpXCIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYW5jaG9yUHJvcCA9IG1lc3NhZ2VbJ0hUTUwgQWxpZ24nXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWx0UHJvcCA9IGFuY2hvclByb3AgPT09ICd0b3AnID8gJ2JvdHRvbScgOiAndG9wJztcbiAgICAgICAgICAgICAgICAgICAgaWZyYW1lLnN0eWxlW2FuY2hvclByb3BdID0gJzAnO1xuICAgICAgICAgICAgICAgICAgICBpZnJhbWUuc3R5bGVbYWx0UHJvcF0gPSAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmcmFtZS5zdHlsZS50b3AgPSAnMCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmcmFtZS5jb250ZW50V2luZG93LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgY29udGV4dC50cmFjaygpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndHJhY2snOlxuICAgICAgICAgICAgICAgIGNvbnRleHQudHJhY2socGFyYW1zLmV2ZW50LCBwYXJzZUZsb2F0KHBhcmFtcy52YWx1ZSksIHBhcmFtcy5pbmZvLCBtYXliZUpTT04ocGFyYW1zLnBhcmFtZXRlcnMpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3J1bkFjdGlvbic6XG4gICAgICAgICAgICBjYXNlICdydW5UcmFja2VkQWN0aW9uJzpcbiAgICAgICAgICAgICAgICBjb250ZXh0W1wiXCIuY29uY2F0KGV2ZW50LCBcIk5hbWVkXCIpXShwYXJhbXMuYWN0aW9uKTtcbiAgICAgICAgICAgIC8vIGZhbGwgdGhyb3VnaCBhbmQgY2xvc2VcbiAgICAgICAgICAgIGNhc2UgJ2Nsb3NlJzpcbiAgICAgICAgICAgICAgICBpZnJhbWUubWV0YWRhdGEgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmcmFtZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1lc3NhZ2VzLnByb3RvdHlwZS5oYW5kbGVNZXNzYWdlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX3Nob3dSaWNoSUFNICYmIG9wdGlvbnMubWVzc2FnZS5fX25hbWVfXyA9PT0gJ0hUTUwnKSB7XG4gICAgICAgICAgICB0aGlzLnJlc29sdmVGaWxlcyhvcHRpb25zLm1lc3NhZ2UpO1xuICAgICAgICAgICAgdmFyIHRlbXBsYXRlTmFtZSA9IG9wdGlvbnMubWVzc2FnZVsnVGVtcGxhdGUnXSB8fCAnJztcbiAgICAgICAgICAgIG5ldyBOZXR3b3JrXzEuZGVmYXVsdCgpLmFqYXgoJ2dldCcsIHRlbXBsYXRlTmFtZS5yZXBsYWNlKCctMTAuaHRtbCcsICctMTEuaHRtbCcpLCAnJywgZnVuY3Rpb24gKHRlbXBsYXRlKSB7IHJldHVybiBfdGhpcy5yZW5kZXJSaWNoSW5BcHBNZXNzYWdlKHRlbXBsYXRlLCBvcHRpb25zKTsgfSwgZnVuY3Rpb24gKCkgeyB9LCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50cy5lbWl0KCdzaG93TWVzc2FnZScsIHRoaXMucmVzb2x2ZUZpZWxkcyhvcHRpb25zKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1lc3NhZ2VzLnByb3RvdHlwZS5yZW5kZXJSaWNoSW5BcHBNZXNzYWdlID0gZnVuY3Rpb24gKHRlbXBsYXRlLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBtZXNzYWdlSWQgPSBvcHRpb25zLm1lc3NhZ2UubWVzc2FnZUlkO1xuICAgICAgICB2YXIgdmFycyA9IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMubWVzc2FnZSk7XG4gICAgICAgIHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICAgICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgnaWQnLCBcImxwLW1lc3NhZ2UtXCIuY29uY2F0KG1lc3NhZ2VJZCkpO1xuICAgICAgICBpZnJhbWUuc2V0QXR0cmlidXRlKCd0aXRsZScsICdQb3B1cCcpO1xuICAgICAgICBpZnJhbWUuc2V0QXR0cmlidXRlKCdhcmlhLW1vZGFsJywgJ3RydWUnKTtcbiAgICAgICAgaWZyYW1lLnN0eWxlLmNzc1RleHQgPSBbXG4gICAgICAgICAgICAnYm9yZGVyLXdpZHRoOiAwJyxcbiAgICAgICAgICAgICdwb3NpdGlvbjogZml4ZWQnLFxuICAgICAgICAgICAgJ3RvcDogLTEwMCUnLFxuICAgICAgICAgICAgJ2xlZnQ6IC0xMDAlJyxcbiAgICAgICAgICAgICd3aWR0aDogMTAwJScsXG4gICAgICAgICAgICAnaGVpZ2h0OiAxMDAlJyxcbiAgICAgICAgICAgICd2aXNpYmlsaXR5OiBoaWRkZW4nLFxuICAgICAgICAgICAgJ3otaW5kZXg6IDEwMDAwMCcsXG4gICAgICAgIF0uam9pbignOycpO1xuICAgICAgICBkb2N1bWVudC5ib2R5Lmluc2VydEJlZm9yZShpZnJhbWUsIGRvY3VtZW50LmJvZHkuZmlyc3RDaGlsZCk7XG4gICAgICAgIC8vIHBhc3MgbWVzc2FnZSBpbmZvXG4gICAgICAgIGlmcmFtZS5tZXRhZGF0YSA9IG9wdGlvbnM7XG4gICAgICAgIGlmcmFtZS5jb250ZW50V2luZG93Lm1lc3NhZ2VJZCA9IG1lc3NhZ2VJZDtcbiAgICAgICAgdmFyIGNvbnRlbnQgPSB0ZW1wbGF0ZVxuICAgICAgICAgICAgLnJlcGxhY2UoJyMjVmFycyMjJywgdmFycylcbiAgICAgICAgICAgIC5yZXBsYWNlKCc8Ym9keT4nLCBcIjxib2R5PjxzY3JpcHQ+d2luZG93Lm1lc3NhZ2VJZD0nXCIuY29uY2F0KG1lc3NhZ2VJZCwgXCInPC9zY3JpcHQ+XCIpKTtcbiAgICAgICAgaWYgKCdzcmNkb2MnIGluIGlmcmFtZSkge1xuICAgICAgICAgICAgaWZyYW1lLnNyY2RvYyA9IGNvbnRlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgZG9jID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gICAgICAgICAgICBkb2Mub3BlbigpO1xuICAgICAgICAgICAgZG9jLndyaXRlKGNvbnRlbnQpO1xuICAgICAgICAgICAgZG9jLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1lc3NhZ2VzLnByb3RvdHlwZS50cmFja01lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZUlkLCB0cmFja09wdGlvbnMsIHJlc3BvbnNlKSB7XG4gICAgICAgIGlmICh0cmFja09wdGlvbnMgPT09IHZvaWQgMCkgeyB0cmFja09wdGlvbnMgPSB7IGV2ZW50OiBudWxsIH07IH1cbiAgICAgICAgaWYgKHJlc3BvbnNlID09PSB2b2lkIDApIHsgcmVzcG9uc2UgPSBmdW5jdGlvbiAoKSB7IH07IH1cbiAgICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJnc0J1aWxkZXJfMS5kZWZhdWx0KClcbiAgICAgICAgICAgIC5hZGQoQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuTUVTU0FHRV9JRCwgbWVzc2FnZUlkKTtcbiAgICAgICAgdmFyIGRlZmluZWQgPSBmdW5jdGlvbiAoeCkgeyByZXR1cm4gdHlwZW9mIHggIT09ICd1bmRlZmluZWQnOyB9O1xuICAgICAgICBpZiAodHJhY2tPcHRpb25zLmV2ZW50KSB7XG4gICAgICAgICAgICBhcmdzLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5FVkVOVCwgdHJhY2tPcHRpb25zLmV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVmaW5lZCh0cmFja09wdGlvbnMudmFsdWUpKSB7XG4gICAgICAgICAgICBhcmdzLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5WQUxVRSwgdHJhY2tPcHRpb25zLnZhbHVlIHx8IDAuMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlZmluZWQodHJhY2tPcHRpb25zLmluZm8pKSB7XG4gICAgICAgICAgICBhcmdzLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5JTkZPLCB0cmFja09wdGlvbnMuaW5mbyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlZmluZWQodHJhY2tPcHRpb25zLnBhcmFtcykpIHtcbiAgICAgICAgICAgIGFyZ3MuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLlBBUkFNUywgSlNPTi5zdHJpbmdpZnkodHJhY2tPcHRpb25zLnBhcmFtcykpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3JlYXRlUmVxdWVzdChDb25zdGFudHNfMS5kZWZhdWx0Lk1FVEhPRFMuVFJBQ0ssIGFyZ3MsIHtcbiAgICAgICAgICAgIHF1ZXVlZDogdHJ1ZSxcbiAgICAgICAgICAgIHNlbmROb3c6IHRydWUsXG4gICAgICAgICAgICByZXNwb25zZTogcmVzcG9uc2UsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgTWVzc2FnZXMucHJvdG90eXBlLm9uQWN0aW9uID0gZnVuY3Rpb24gKGFjdGlvbiwgcGFyZW50TWVzc2FnZUlkKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChwYXJlbnRNZXNzYWdlSWQgPT09IHZvaWQgMCkgeyBwYXJlbnRNZXNzYWdlSWQgPSAnJzsgfVxuICAgICAgICBpZiAoIWFjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtZXNzYWdlcyA9IHRoaXMuX21lc3NhZ2VDYWNoZTtcbiAgICAgICAgaWYgKGFjdGlvbi5fX25hbWVfXyA9PT0gJ0NoYWluIHRvIEV4aXN0aW5nIE1lc3NhZ2UnKSB7XG4gICAgICAgICAgICB2YXIgY2hhaW5lZE1lc3NhZ2VJZF8xID0gYWN0aW9uWydDaGFpbmVkIG1lc3NhZ2UnXTtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlXzEgPSBtZXNzYWdlc1tjaGFpbmVkTWVzc2FnZUlkXzFdO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2VfMS5hY3Rpb24gPT09ICdPcGVuIFVSTCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyYWNrTWVzc2FnZShjaGFpbmVkTWVzc2FnZUlkXzEsIHsgZXZlbnQ6ICdWaWV3JyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5vbkFjdGlvbihtZXNzYWdlXzEudmFycywgY2hhaW5lZE1lc3NhZ2VJZF8xKTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChtZXNzYWdlXzEuYWN0aW9uID09PSAnUmVnaXN0ZXIgRm9yIFB1c2gnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudHMuZW1pdCgncmVnaXN0ZXJGb3JQdXNoJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dNZXNzYWdlKGNoYWluZWRNZXNzYWdlSWRfMSwgbWVzc2FnZV8xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBoYW5kbGUgYXBwIGZ1bmN0aW9uXG4gICAgICAgIHZhciBwcm9jZXNzQWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG5hbWUgPSBhY3Rpb24uX19uYW1lX187XG4gICAgICAgICAgICBpZiAoYWN0aW9uLl9fbmFtZV9fID09PSAnT3BlbiBVUkwnKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZXZlbnRzLmVtaXQoJ25hdmlnYXRpb25DaGFuZ2UnLCBhY3Rpb24uVVJMKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFjdGlvbi5fX25hbWVfXyA9PT0gJ1JlZ2lzdGVyIEZvciBQdXNoJykge1xuICAgICAgICAgICAgICAgIF90aGlzLmV2ZW50cy5lbWl0KCdyZWdpc3RlckZvclB1c2gnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgICAgICAvLyBlbWJlZGRlZCBjaGFpbmVkIG1lc3NhZ2VcbiAgICAgICAgICAgICAgICBfdGhpcy5zaG93TWVzc2FnZShwYXJlbnRNZXNzYWdlSWQsIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUlkOiBwYXJlbnRNZXNzYWdlSWQsXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdmFyczogYWN0aW9uLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHZhciBtZXNzYWdlSWQgPSB0aGlzLm1lc3NhZ2VJZEZyb21BY3Rpb24oYWN0aW9uKTtcbiAgICAgICAgaWYgKG1lc3NhZ2VJZCkge1xuICAgICAgICAgICAgdGhpcy50cmFja01lc3NhZ2UobWVzc2FnZUlkLCB7IGV2ZW50OiBudWxsIH0sIHByb2Nlc3NBY3Rpb24pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcHJvY2Vzc0FjdGlvbigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNZXNzYWdlcy5wcm90b3R5cGUuZ2V0TWVzc2FnZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tZXNzYWdlQ2FjaGUgfHwge307XG4gICAgfTtcbiAgICBNZXNzYWdlcy5wcm90b3R5cGUuYWRkRGVmYXVsdHMgPSBmdW5jdGlvbiAodmFycykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgZGVmaW5pdGlvbnMgPSB0aGlzLmdldE1lc3NhZ2VzKCkuYWN0aW9uRGVmaW5pdGlvbnMgfHwge307XG4gICAgICAgIHZhciBkZWZpbml0aW9uID0gZGVmaW5pdGlvbnNbdmFycy5fX25hbWVfX107XG4gICAgICAgIHZhciBraW5kcyA9IGRlZmluaXRpb24gPT09IG51bGwgfHwgZGVmaW5pdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVmaW5pdGlvbi5raW5kcztcbiAgICAgICAgaWYgKCFkZWZpbml0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFycztcbiAgICAgICAgfVxuICAgICAgICB2YXIgdXNlRGVmYXVsdHMgPSBmdW5jdGlvbiAob2JqLCBkZWZhdWx0VmFsdWVzLCBwYXRoKSB7XG4gICAgICAgICAgICBpZiAocGF0aCA9PT0gdm9pZCAwKSB7IHBhdGggPSAnJzsgfVxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IE9iamVjdC5rZXlzKGRlZmF1bHRWYWx1ZXMpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gZGVmYXVsdFZhbHVlc1trZXldO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIG9ialtrZXldID0gdXNlRGVmYXVsdHMob2JqW2tleV0gfHwge30sIHZhbHVlLCBcIlwiLmNvbmNhdChwYXRoKS5jb25jYXQoa2V5LCBcIi5cIikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2Ygb2JqW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChraW5kc1tcIlwiLmNvbmNhdChwYXRoKS5jb25jYXQoa2V5KV0gPT09ICdGSUxFJykge1xuICAgICAgICAgICAgICAgICAgICBvYmpba2V5XSA9IF90aGlzLmdldEZpbGVVcmwob2JqW2tleV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB1c2VEZWZhdWx0cyhfX2Fzc2lnbih7fSwgdmFycyksIGRlZmluaXRpb24udmFsdWVzKTtcbiAgICB9O1xuICAgIE1lc3NhZ2VzLnByb3RvdHlwZS5yZXNvbHZlRmlsZXMgPSBmdW5jdGlvbiAodmFycykge1xuICAgICAgICB2YXIgZmlsZVByZWZpeCA9IC9eX19maWxlX18vO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdmFycykge1xuICAgICAgICAgICAgaWYgKGZpbGVQcmVmaXgudGVzdChrZXkpKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBrZXkucmVwbGFjZShmaWxlUHJlZml4LCAnJyk7XG4gICAgICAgICAgICAgICAgdmFyc1tuYW1lXSA9IHRoaXMuZ2V0RmlsZVVybCh2YXJzW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhcnNba2V5XSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICB2YXJzW2tleV0gPSB0aGlzLnJlc29sdmVGaWxlcyh2YXJzW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YXJzO1xuICAgIH07XG4gICAgTWVzc2FnZXMucHJvdG90eXBlLnJlc29sdmVGaWVsZHMgPSBmdW5jdGlvbiAodmFycykge1xuICAgICAgICB2YXIgY29sb3JTdWZmaXggPSAvXFxiY29sb3IvaTtcbiAgICAgICAgdmFyIGZpbGVQcmVmaXggPSAvXl9fZmlsZV9fLztcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHZhcnMpIHtcbiAgICAgICAgICAgIGlmIChmaWxlUHJlZml4LnRlc3Qoa2V5KSkge1xuICAgICAgICAgICAgICAgIHZhciBuYW1lID0ga2V5LnJlcGxhY2UoZmlsZVByZWZpeCwgJycpO1xuICAgICAgICAgICAgICAgIHZhcnNbbmFtZSArICcgVVJMJ10gPSB0aGlzLmdldEZpbGVVcmwodmFyc1trZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbG9yU3VmZml4LnRlc3Qoa2V5KSkge1xuICAgICAgICAgICAgICAgIHZhcnNba2V5XSA9IFZhbHVlVHJhbnNmb3Jtc18xLmRlZmF1bHQuZGVjb2RlQ29sb3IodmFyc1trZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YXJzW2tleV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgdmFyc1trZXldID0gdGhpcy5yZXNvbHZlRmllbGRzKHZhcnNba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhcnM7XG4gICAgfTtcbiAgICBNZXNzYWdlcy5wcm90b3R5cGUubWVzc2FnZUlkRnJvbUFjdGlvbiA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgdmFyIG1lc3NhZ2VzID0gdGhpcy5fbWVzc2FnZUNhY2hlO1xuICAgICAgICB2YXIgdmFycyA9IF9fYXNzaWduKHt9LCBhY3Rpb24pO1xuICAgICAgICBkZWxldGUgdmFyc1sncGFyZW50Q2FtcGFpZ25JZCddO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gT2JqZWN0LmtleXMobWVzc2FnZXMpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGlkID0gX2FbX2ldO1xuICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBtZXNzYWdlc1tpZF07XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5wYXJlbnRDYW1wYWlnbklkICE9PSBhY3Rpb24ucGFyZW50Q2FtcGFpZ25JZCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCgwLCBsb2Rhc2hfaXNlcXVhbF8xLmRlZmF1bHQpKG1lc3NhZ2UudmFycywgdmFycykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1lc3NhZ2VzLnByb3RvdHlwZS5tYXRjaGVzVHJpZ2dlciA9IGZ1bmN0aW9uICh3aGVuVHJpZ2dlcnMsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKCF3aGVuVHJpZ2dlcnMpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaWdub3JlQ2FzZUVxdWFscyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICBpZiAoYiA9PT0gdm9pZCAwKSB7IGIgPSAnJzsgfVxuICAgICAgICAgICAgcmV0dXJuIGEudG9TdHJpbmcoKS5sb2NhbGVDb21wYXJlKGIudG9TdHJpbmcoKSwgdW5kZWZpbmVkLCB7IHNlbnNpdGl2aXR5OiAnYWNjZW50JyB9KSA9PT0gMDtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIG1hdGNoZXNUcmlnZ2VycyA9IGZ1bmN0aW9uIChjb250ZXh0Tm91biwgcGFyYW1zLCB0cmlnZ2VyKSB7XG4gICAgICAgICAgICB2YXIgbWF0Y2hlc05vdW4gPSBjb250ZXh0Tm91biA9PT0gdHJpZ2dlci5ub3VuO1xuICAgICAgICAgICAgaWYgKHRyaWdnZXIudmVyYiA9PT0gJ3RyaWdnZXJzJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVzTm91bjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRyaWdnZXIudmVyYiA9PT0gJ3RyaWdnZXJzV2l0aFBhcmFtZXRlcicpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSB0cmlnZ2VyLm9iamVjdHMsIHBhcmFtZXRlciA9IF9hWzBdLCB2YWx1ZSA9IF9hWzFdO1xuICAgICAgICAgICAgICAgIHZhciBjb250YWluc1BhcmFtID0gcGFyYW1ldGVyIGluIHBhcmFtcztcbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2hlc1BhcmFtID0gY29udGFpbnNQYXJhbSAmJiBpZ25vcmVDYXNlRXF1YWxzKHZhbHVlLCBwYXJhbXNbcGFyYW1ldGVyXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXNOb3VuICYmIG1hdGNoZXNQYXJhbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHdoZW5UcmlnZ2Vycy5jaGlsZHJlbi5zb21lKGZ1bmN0aW9uICh0cmlnZ2VyKSB7XG4gICAgICAgICAgICB2YXIgc3ViamVjdCA9IHRyaWdnZXIuc3ViamVjdDtcbiAgICAgICAgICAgIHN3aXRjaCAoY29udGV4dC50cmlnZ2VyKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3RhcnQnOiByZXR1cm4gc3ViamVjdCA9PT0gJ3N0YXJ0JyB8fCBzdWJqZWN0ID09PSAncmVzdW1lJztcbiAgICAgICAgICAgICAgICBjYXNlICdyZXN1bWUnOiByZXR1cm4gc3ViamVjdCA9PT0gJ3Jlc3VtZSc7XG4gICAgICAgICAgICAgICAgY2FzZSAnZXZlbnQnOlxuICAgICAgICAgICAgICAgICAgICBpZiAoc3ViamVjdCAhPT0gJ2V2ZW50Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVzVHJpZ2dlcnMoY29udGV4dC5ldmVudE5hbWUsIGNvbnRleHQucGFyYW1zLCB0cmlnZ2VyKTtcbiAgICAgICAgICAgICAgICBjYXNlICd1c2VyQXR0cmlidXRlJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YmplY3QgIT09ICd1c2VyQXR0cmlidXRlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250YWluc0F0dHJpYnV0ZSA9IHRyaWdnZXIubm91biBpbiBjb250ZXh0LmF0dHJpYnV0ZXM7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmlnZ2VyLnZlcmIgPT09ICdjaGFuZ2VzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5zQXR0cmlidXRlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRyaWdnZXIudmVyYiA9PT0gJ2NoYW5nZXNUbycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY29udGFpbnNBdHRyaWJ1dGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udGV4dFZhbHVlXzEgPSBjb250ZXh0LmF0dHJpYnV0ZXNbdHJpZ2dlci5ub3VuXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cmlnZ2VyLm9iamVjdHMuc29tZShmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgJiYgY29udGV4dFZhbHVlXzEgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSAmJiBjb250ZXh0VmFsdWVfMSAmJiBpZ25vcmVDYXNlRXF1YWxzKHZhbHVlLCBjb250ZXh0VmFsdWVfMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdzdGF0ZSc6XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJqZWN0ICE9PSAnc3RhdGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXNUcmlnZ2Vycyhjb250ZXh0LnN0YXRlLCBjb250ZXh0LnBhcmFtcywgdHJpZ2dlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgTWVzc2FnZXMucHJvdG90eXBlLm1hdGNoZXNMaW1pdHMgPSBmdW5jdGlvbiAoaWQsIHdoZW5MaW1pdHMsIHRyaWdnZXJPY2N1cnJlbmNlcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXdoZW5MaW1pdHMpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3aGVuTGltaXRzLmNoaWxkcmVuLmV2ZXJ5KGZ1bmN0aW9uIChsaW1pdCkge1xuICAgICAgICAgICAgdmFyIHN1YmplY3QgPSBsaW1pdC5zdWJqZWN0LCB2ZXJiID0gbGltaXQudmVyYjtcbiAgICAgICAgICAgIHZhciBub3VuID0gcGFyc2VJbnQobGltaXQubm91bi50b1N0cmluZygpKTtcbiAgICAgICAgICAgIGlmIChzdWJqZWN0ID09PSAndGltZXMnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZlcmIgPT09ICdsaW1pdFNlc3Npb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZXNzaW9uT2NjdXJyZW5jZXMgPSBfdGhpcy5vY2N1cnJlbmNlVHJhY2tlci5nZXRTZXNzaW9uT2NjdXJyYW5jZUNvdW50KGlkKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlc3Npb25PY2N1cnJlbmNlcyArIDEgPT09IG5vdW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHZlcmIgPT09ICdsaW1pdFVzZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvY2N1cnJlbmNlcyA9IF90aGlzLm9jY3VycmVuY2VUcmFja2VyLmdldE9jY3VycmVuY2VzKGlkKS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvY2N1cnJlbmNlcyArIDEgPD0gbm91bjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFggaW4gWSAoc2Vjb25kc3xtaW51dGVzfGRheXN8aG91cnMpXG4gICAgICAgICAgICAgICAgICAgIHZhciBwZXJJbnRlcnZhbCA9IHBhcnNlSW50KGxpbWl0Lm9iamVjdHNbMF0udG9TdHJpbmcoKSkgfHwgMTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVTbG90ID0gdmVyYlRvSW50ZXJ2YWwodmVyYikgKiBwZXJJbnRlcnZhbDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9jY3VycmVuY2VzID0gX3RoaXMub2NjdXJyZW5jZVRyYWNrZXIuZ2V0T2NjdXJyZW5jZXMoaWQpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY291bnQgPSBvY2N1cnJlbmNlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb3VudCA8IG5vdW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNsaWNlID0gb2NjdXJyZW5jZXMuc2xpY2UoY291bnQgLSBub3VuLCBjb3VudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayB0aGUgdGltZSBvZiB0aGUgZmlyc3Qgb2YgdGhlIGxhc3QgTiBvY2N1cnJlbmNlc1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNsaWNlWzBdIDwgRGF0ZS5ub3coKSAtIHRpbWVTbG90O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc3ViamVjdCA9PT0gJ29uTnRoT2NjdXJyZW5jZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJpZ2dlck9jY3VycmVuY2VzID09PSBub3VuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc3ViamVjdCA9PT0gJ2V2ZXJ5TnRoT2NjdXJyZW5jZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRyaWdnZXJPY2N1cnJlbmNlcyAlIG5vdW4pID09PSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBNZXNzYWdlcztcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBNZXNzYWdlcztcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JZGVudGl0eU1hbmFnZXIgPSBleHBvcnRzLklkZW50aXR5U3RhdGUgPSB2b2lkIDA7XG52YXIgY2xldmVydGFwX3dlYl9zZGtfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiY2xldmVydGFwLXdlYi1zZGtcIikpO1xudmFyIGludGVybmFsXzEgPSByZXF1aXJlKFwiLi90eXBlcy9pbnRlcm5hbFwiKTtcbnZhciBTdG9yYWdlTWFuYWdlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL1N0b3JhZ2VNYW5hZ2VyXCIpKTtcbnZhciBDb25zdGFudHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9Db25zdGFudHNcIikpO1xudmFyIEFyZ3NCdWlsZGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vQXJnc0J1aWxkZXJcIikpO1xudmFyIG5vb3AgPSBmdW5jdGlvbiAoKSB7IH07XG52YXIgdG9NaWdyYXRpb25TdGF0ZSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICBzd2l0Y2ggKG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9iai5zZGspIHtcbiAgICAgICAgY2FzZSAnbHAnOlxuICAgICAgICAgICAgcmV0dXJuIGludGVybmFsXzEuTWlncmF0aW9uU3RhdGUuTEVBTlBMVU07XG4gICAgICAgIGNhc2UgJ2xwK2N0JzpcbiAgICAgICAgICAgIHJldHVybiBpbnRlcm5hbF8xLk1pZ3JhdGlvblN0YXRlLkRVUExJQ0FURTtcbiAgICAgICAgY2FzZSAnY3QnOlxuICAgICAgICAgICAgcmV0dXJuIGludGVybmFsXzEuTWlncmF0aW9uU3RhdGUuQ0xFVkVSVEFQO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGludGVybmFsXzEuTWlncmF0aW9uU3RhdGUuVU5LTk9XTjtcbiAgICB9XG59O1xudmFyIE1pZ3JhdGlvbk1hbmFnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWlncmF0aW9uTWFuYWdlcihjcmVhdGVSZXF1ZXN0KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5jcmVhdGVSZXF1ZXN0ID0gY3JlYXRlUmVxdWVzdDtcbiAgICAgICAgdGhpcy5yZXNwb25zZSA9IG51bGw7XG4gICAgICAgIHZhciBzYXZlZFJlc3BvbnNlID0gU3RvcmFnZU1hbmFnZXJfMS5kZWZhdWx0LmdldChDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5NSUdSQVRJT05fU1RBVEUpO1xuICAgICAgICB2YXIgZGV2aWNlSWQgPSBTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQuZ2V0KENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLkRFVklDRV9JRCk7XG4gICAgICAgIHZhciB1c2VySWQgPSAoX2EgPSBTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQuZ2V0KENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLlVTRVJfSUQpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBkZXZpY2VJZDtcbiAgICAgICAgdGhpcy5pZGVudGl0eSA9IG5ldyBJZGVudGl0eU1hbmFnZXIodXNlcklkLCBkZXZpY2VJZCk7XG4gICAgICAgIGlmIChzYXZlZFJlc3BvbnNlKSB7XG4gICAgICAgICAgICB0aGlzLnJlc3BvbnNlID0gSlNPTi5wYXJzZShzYXZlZFJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBNaWdyYXRpb25NYW5hZ2VyLnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICBpZiAoY2FsbGJhY2sgPT09IHZvaWQgMCkgeyBjYWxsYmFjayA9IG5vb3A7IH1cbiAgICAgICAgdmFyIHJlc3BvbnNlID0gdGhpcy5yZXNwb25zZTtcbiAgICAgICAgdmFyIHN0YXRlID0gdG9NaWdyYXRpb25TdGF0ZSh0aGlzLnJlc3BvbnNlKTtcbiAgICAgICAgaWYgKHJlc3BvbnNlICYmIHN0YXRlICE9PSBpbnRlcm5hbF8xLk1pZ3JhdGlvblN0YXRlLlVOS05PV04pIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKHN0YXRlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdldE1pZ3JhdGlvblN0YXRlKGNhbGxiYWNrKTtcbiAgICB9O1xuICAgIE1pZ3JhdGlvbk1hbmFnZXIucHJvdG90eXBlLnZlcmlmeVN0YXRlID0gZnVuY3Rpb24gKHNoYSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICgoKF9hID0gdGhpcy5yZXNwb25zZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNoYTI1NikgIT09IHNoYSkge1xuICAgICAgICAgICAgdGhpcy5nZXRNaWdyYXRpb25TdGF0ZShub29wKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWlncmF0aW9uTWFuYWdlci5wcm90b3R5cGUuaW5pdENsZXZlclRhcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgY29uZmlnID0gKF9hID0gdGhpcy5yZXNwb25zZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmN0O1xuICAgICAgICBpZiAoIWNvbmZpZykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNsZXZlcnRhcF93ZWJfc2RrXzEuZGVmYXVsdC5pbml0KGNvbmZpZy5hY2NvdW50SWQsIGNvbmZpZy5yZWdpb25Db2RlKTtcbiAgICAgICAgcmV0dXJuIGNsZXZlcnRhcF93ZWJfc2RrXzEuZGVmYXVsdDtcbiAgICB9O1xuICAgIE1pZ3JhdGlvbk1hbmFnZXIucHJvdG90eXBlLmR1cGxpY2F0ZVJlcXVlc3QgPSBmdW5jdGlvbiAoYWN0aW9uLCBhcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IHRvTWlncmF0aW9uU3RhdGUodGhpcy5yZXNwb25zZSk7XG4gICAgICAgIGlmIChzdGF0ZSA9PT0gaW50ZXJuYWxfMS5NaWdyYXRpb25TdGF0ZS5MRUFOUExVTSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0ZSA9PT0gaW50ZXJuYWxfMS5NaWdyYXRpb25TdGF0ZS5EVVBMSUNBVEUpIHtcbiAgICAgICAgICAgIGFyZ3MuYWRkKENvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLkNULCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYXJnc0RpY3QgPSAoYXJncyA9PT0gbnVsbCB8fCBhcmdzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcmdzLmJ1aWxkRGljdCgpKSB8fCB7fTtcbiAgICAgICAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLlNUQVJUOlxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pZGVudGl0eS5pc0Fub255bW91cykge1xuICAgICAgICAgICAgICAgICAgICBjbGV2ZXJ0YXBfd2ViX3Nka18xLmRlZmF1bHQub25Vc2VyTG9naW4ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBTaXRlOiB0aGlzLmlkZW50aXR5LnByb2ZpbGUsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLlRSQUNLOlxuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRQdXNoKGFyZ3NEaWN0LCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLkFEVkFOQ0U6XG4gICAgICAgICAgICAgICAgYXJnc0RpY3QuZXZlbnQgPSBcInN0YXRlX1wiLmNvbmNhdChhcmdzRGljdC5zdGF0ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudFB1c2goYXJnc0RpY3QsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBDb25zdGFudHNfMS5kZWZhdWx0Lk1FVEhPRFMuU0VUX1VTRVJfQVRUUklCVVRFUzpcbiAgICAgICAgICAgICAgICB0aGlzLnByb2ZpbGVQdXNoKGFyZ3NEaWN0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhdGUgPT09IGludGVybmFsXzEuTWlncmF0aW9uU3RhdGUuQ0xFVkVSVEFQO1xuICAgIH07XG4gICAgTWlncmF0aW9uTWFuYWdlci5wcm90b3R5cGUucHJvZmlsZVB1c2ggPSBmdW5jdGlvbiAoYXJnc0RpY3QpIHtcbiAgICAgICAgdmFyIHVzZXJJZCA9IGFyZ3NEaWN0W0NvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLk5FV19VU0VSX0lEXTtcbiAgICAgICAgdmFyIGF0dHJzID0gdGhpcy5tYXBBdHRyaWJ1dGVzKHRoaXMuY29udmVydEFycmF5cyhKU09OLnBhcnNlKGFyZ3NEaWN0LnVzZXJBdHRyaWJ1dGVzIHx8ICd7fScpKSk7XG4gICAgICAgIGlmICh1c2VySWQpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXR0cnMsIHsgSWRlbnRpdHk6IHVzZXJJZCB9KTtcbiAgICAgICAgICAgIGNsZXZlcnRhcF93ZWJfc2RrXzEuZGVmYXVsdC5vblVzZXJMb2dpbi5wdXNoKHsgU2l0ZTogYXR0cnMgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjbGV2ZXJ0YXBfd2ViX3Nka18xLmRlZmF1bHQucHJvZmlsZS5wdXNoKGF0dHJzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWlncmF0aW9uTWFuYWdlci5wcm90b3R5cGUuZXZlbnRQdXNoID0gZnVuY3Rpb24gKGFyZ3NEaWN0LCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBpc0VuZ2FnZW1lbnRFdmVudCA9IGFyZ3NEaWN0W0NvbnN0YW50c18xLmRlZmF1bHQuUEFSQU1TLk1FU1NBR0VfSURdO1xuICAgICAgICB2YXIgZXZlbnROYW1lID0gb3B0aW9ucy5pc1B1cmNoYXNlID8gJ0NoYXJnZWQnIDogYXJnc0RpY3QuZXZlbnQ7XG4gICAgICAgIGlmIChldmVudE5hbWUgJiYgIWlzRW5nYWdlbWVudEV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgZXZlbnRQYXJhbXMgPSB7fTtcbiAgICAgICAgICAgIGlmIChhcmdzRGljdC5wYXJhbXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gdGhpcy5jb252ZXJ0QXJyYXlzKEpTT04ucGFyc2UoYXJnc0RpY3QucGFyYW1zKSk7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihldmVudFBhcmFtcywgcGFyYW1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhcmdzRGljdC52YWx1ZSkge1xuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oZXZlbnRQYXJhbXMsIHsgdmFsdWU6IGFyZ3NEaWN0LnZhbHVlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFyZ3NEaWN0LmluZm8pIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGV2ZW50UGFyYW1zLCB7IGluZm86IGFyZ3NEaWN0LmluZm8gfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5pc1B1cmNoYXNlICYmIGFyZ3NEaWN0LmN1cnJlbmN5Q29kZSkge1xuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oZXZlbnRQYXJhbXMsIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVuY3lDb2RlOiBhcmdzRGljdC5jdXJyZW5jeUNvZGUsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjbGV2ZXJ0YXBfd2ViX3Nka18xLmRlZmF1bHQuZXZlbnQucHVzaChldmVudE5hbWUsIGV2ZW50UGFyYW1zKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWlncmF0aW9uTWFuYWdlci5wcm90b3R5cGUuY29udmVydEFycmF5cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyciA9IG9ialtrZXldO1xuICAgICAgICAgICAgICAgIGFjY1trZXldID0gXCJbXCIuY29uY2F0KGFyci5qb2luKCcsJyksIFwiXVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGFjY1trZXldID0gb2JqW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LCB7fSk7XG4gICAgfTtcbiAgICBNaWdyYXRpb25NYW5hZ2VyLnByb3RvdHlwZS5tYXBBdHRyaWJ1dGVzID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB2YXIgbWFwcGluZyA9IChfYiA9IChfYSA9IHRoaXMucmVzcG9uc2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jdCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmF0dHJpYnV0ZU1hcHBpbmdzO1xuICAgICAgICBpZiAoIW1hcHBpbmcpXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgICAgICAgICBpZiAobWFwcGluZ1trZXldKSB7XG4gICAgICAgICAgICAgICAgYWNjW21hcHBpbmdba2V5XV0gPSBvYmpba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGFjY1trZXldID0gb2JqW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LCB7fSk7XG4gICAgfTtcbiAgICBNaWdyYXRpb25NYW5hZ2VyLnByb3RvdHlwZS5nZXRNaWdyYXRpb25TdGF0ZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmNyZWF0ZVJlcXVlc3QoJ2dldE1pZ3JhdGVTdGF0ZScsIG5ldyBBcmdzQnVpbGRlcl8xLmRlZmF1bHQoKSwge1xuICAgICAgICAgICAgc2VuZE5vdzogdHJ1ZSxcbiAgICAgICAgICAgIHJlc3BvbnNlOiBmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSAoX2EgPSByID09PSBudWxsIHx8IHIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHIucmVzcG9uc2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVswXTtcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSB0b01pZ3JhdGlvblN0YXRlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUgJiYgc3RhdGUgIT09IGludGVybmFsXzEuTWlncmF0aW9uU3RhdGUuVU5LTk9XTikge1xuICAgICAgICAgICAgICAgICAgICBTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQuc2F2ZShDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5NSUdSQVRJT05fU1RBVEUsIEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlKSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHN0YXRlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIE1pZ3JhdGlvbk1hbmFnZXI7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gTWlncmF0aW9uTWFuYWdlcjtcbnZhciBJZGVudGl0eVN0YXRlO1xuKGZ1bmN0aW9uIChJZGVudGl0eVN0YXRlKSB7XG4gICAgSWRlbnRpdHlTdGF0ZVtcIkFOT05ZTU9VU1wiXSA9IFwiYW5vbnltb3VzXCI7XG4gICAgSWRlbnRpdHlTdGF0ZVtcIklERU5USUZJRURcIl0gPSBcImlkZW50aWZpZWRcIjtcbn0pKElkZW50aXR5U3RhdGUgPSBleHBvcnRzLklkZW50aXR5U3RhdGUgfHwgKGV4cG9ydHMuSWRlbnRpdHlTdGF0ZSA9IHt9KSk7XG52YXIgSWRlbnRpdHlNYW5hZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIElkZW50aXR5TWFuYWdlcih1c2VySWQsIGRldmljZUlkKSB7XG4gICAgICAgIHRoaXMudXNlcklkID0gdXNlcklkO1xuICAgICAgICB0aGlzLmRldmljZUlkID0gZGV2aWNlSWQ7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBJZGVudGl0eVN0YXRlLkFOT05ZTU9VUztcbiAgICAgICAgdGhpcy5pZGVudGlmeSgpO1xuICAgIH1cbiAgICBJZGVudGl0eU1hbmFnZXIucHJvdG90eXBlLnNldFVzZXJJZCA9IGZ1bmN0aW9uICh1c2VySWQpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IElkZW50aXR5U3RhdGUuQU5PTllNT1VTKSB7XG4gICAgICAgICAgICB0aGlzLmFub255bW91c0xvZ2luVXNlcklkID0gdXNlcklkO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IElkZW50aXR5U3RhdGUuSURFTlRJRklFRDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVzZXJJZCA9IHVzZXJJZDtcbiAgICB9O1xuICAgIElkZW50aXR5TWFuYWdlci5wcm90b3R5cGUuaWRlbnRpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzQW5vbnltb3VzKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gSWRlbnRpdHlTdGF0ZS5BTk9OWU1PVVM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlkZW50aWZ5Tm9uQW5vbnltb3VzKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElkZW50aXR5TWFuYWdlci5wcm90b3R5cGUuaWRlbnRpZnlOb25Bbm9ueW1vdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlID09PSBJZGVudGl0eVN0YXRlLkFOT05ZTU9VUykge1xuICAgICAgICAgICAgdGhpcy5hbm9ueW1vdXNMb2dpblVzZXJJZCA9IHRoaXMudXNlcklkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGUgPSBJZGVudGl0eVN0YXRlLklERU5USUZJRUQ7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSWRlbnRpdHlNYW5hZ2VyLnByb3RvdHlwZSwgXCJjbGV2ZXJUYXBJRFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMudXNlcklkICE9PSB0aGlzLmFub255bW91c0xvZ2luVXNlcklkICYmICF0aGlzLmlzQW5vbnltb3VzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHRoaXMuZGV2aWNlSWQsIFwiX1wiKS5jb25jYXQodGhpcy51c2VySWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGV2aWNlSWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSWRlbnRpdHlNYW5hZ2VyLnByb3RvdHlwZSwgXCJwcm9maWxlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4geyBJZGVudGl0eTogdGhpcy51c2VySWQgfTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJZGVudGl0eU1hbmFnZXIucHJvdG90eXBlLCBcImlzQW5vbnltb3VzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy51c2VySWQgPT09IHRoaXMuZGV2aWNlSWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gSWRlbnRpdHlNYW5hZ2VyO1xufSgpKTtcbmV4cG9ydHMuSWRlbnRpdHlNYW5hZ2VyID0gSWRlbnRpdHlNYW5hZ2VyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEFqYXggZnVuY3Rpb25zIGZyb206XG4gKlxuICogUGFyc2UgSmF2YVNjcmlwdCBTREtcbiAqIFZlcnNpb246IDEuMS41XG4gKiBCdWlsdDogTW9uIE9jdCAwMSAyMDEyIDE3OjU3OjEzXG4gKiBodHRwOi8vcGFyc2UuY29tXG4gKlxuICogQ29weXJpZ2h0IDIwMTIgUGFyc2UsIEluYy5cbiAqIFRoZSBQYXJzZSBKYXZhU2NyaXB0IFNESyBpcyBmcmVlbHkgZGlzdHJpYnV0YWJsZSB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HXG4gKiBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSXG4gKiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBOZXR3b3JrID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE5ldHdvcmsoKSB7XG4gICAgICAgIHRoaXMubmV0d29ya1RpbWVvdXRTZWNvbmRzID0gMTA7XG4gICAgICAgIHRoaXMucmVxdWVzdFF1ZXVlID0gW107XG4gICAgICAgIHRoaXMucnVubmluZ1JlcXVlc3QgPSBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbmV0d29yayB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzZWNvbmRzIFRoZSB0aW1lb3V0IGluIHNlY29uZHMuXG4gICAgICovXG4gICAgTmV0d29yay5wcm90b3R5cGUuc2V0TmV0d29ya1RpbWVvdXQgPSBmdW5jdGlvbiAoc2Vjb25kcykge1xuICAgICAgICB0aGlzLm5ldHdvcmtUaW1lb3V0U2Vjb25kcyA9IHNlY29uZHM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNYWtlIGFuIGFqYXggcmVxdWVzdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kIFRoZSBodHRwIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSB1cmwgdG8gb3Blbi5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheUJ1ZmZlcnxCbG9ifERvY3VtZW50fEZvcm1EYXRhfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHNlbnQgaW4gYm9keS5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdWNjZXNzIEEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIHN1Y2Nlc3MuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gZXJyb3IgQSBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgb24gZXJyb3IuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBxdWV1ZWQgV2hldGhlciB0aGUgcmVxdWVzdCBzaG91bGQgYmUgcXVldWVkIG9yIGltbWVkaWF0ZWx5IHNlbnQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcGxhaW5UZXh0XSBXaGV0aGVyIHRoZSByZXNwb25zZSBzaG91bGQgYmUgcmV0dXJuZWQgYXMgcGxhaW4gdGV4dCBvciBqc29uLlxuICAgICAqIEByZXR1cm4geyp9XG4gICAgICovXG4gICAgTmV0d29yay5wcm90b3R5cGUuYWpheCA9IGZ1bmN0aW9uIChtZXRob2QsIHVybCwgZGF0YSwgc3VjY2VzcywgZXJyb3IsIHF1ZXVlZCwgcGxhaW5UZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChxdWV1ZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJ1bm5pbmdSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVucXVldWVSZXF1ZXN0KGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJ1bm5pbmdSZXF1ZXN0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIFhEb21haW5SZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaWYgKGxvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cDonICYmIHVybC5pbmRleE9mKCdodHRwczonKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHVybCA9IFwiaHR0cDpcIi5jb25jYXQodXJsLnN1YnN0cmluZyg2KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hamF4SUU4KG1ldGhvZCwgdXJsLCBkYXRhLCBzdWNjZXNzLCBlcnJvciwgcXVldWVkLCBwbGFpblRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBoYW5kbGVkID0gZmFsc2U7XG4gICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgICAgIGlmIChoYW5kbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGFuZGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlXzE7XG4gICAgICAgICAgICAgICAgdmFyIHBhcnNlRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAocGxhaW5UZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlXzEgPSB4aHIucmVzcG9uc2VUZXh0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlXzEgPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IobnVsbCwgeGhyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghcGFyc2VFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDMwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyhyZXNwb25zZV8xLCB4aHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yKHJlc3BvbnNlXzEsIHhocik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHF1ZXVlZCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5ydW5uaW5nUmVxdWVzdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5kZXF1ZXVlUmVxdWVzdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgeGhyLm9wZW4obWV0aG9kLCB1cmwsIHRydWUpO1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ3RleHQvcGxhaW4nKTsgLy8gQXZvaWQgcHJlLWZsaWdodC5cbiAgICAgICAgeGhyLnNlbmQoZGF0YSk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFoYW5kbGVkKSB7XG4gICAgICAgICAgICAgICAgeGhyLmFib3J0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMubmV0d29ya1RpbWVvdXRTZWNvbmRzICogMTAwMCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNYWtlIGFuIGFqYXggcmVxdWVzdCBmb3IgSUU4LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2QgVGhlIGh0dHAgbWV0aG9kLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIHVybCB0byBvcGVuLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfEFycmF5QnVmZmVyfEJsb2J8RG9jdW1lbnR8Rm9ybURhdGF9IGRhdGEgVGhlIGRhdGEgdG8gYmUgc2VudCBpbiBib2R5LlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1Y2Nlc3MgQSBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgb24gc3VjY2Vzcy5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBlcnJvciBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBvbiBlcnJvci5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHF1ZXVlZCBXaGV0aGVyIHRoZSByZXF1ZXN0IHNob3VsZCBiZSBxdWV1ZWQgb3IgaW1tZWRpYXRlbHkgc2VudC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHBsYWluVGV4dCBXaGV0aGVyIHRoZSByZXNwb25zZSBzaG91bGQgYmUgcmV0dXJuZWQgYXMgcGxhaW4gdGV4dCBvciBqc29uLlxuICAgICAqL1xuICAgIE5ldHdvcmsucHJvdG90eXBlLmFqYXhJRTggPSBmdW5jdGlvbiAobWV0aG9kLCB1cmwsIGRhdGEsIHN1Y2Nlc3MsIGVycm9yLCBxdWV1ZWQsIHBsYWluVGV4dCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgeGRyID0gbmV3IFhEb21haW5SZXF1ZXN0KCk7XG4gICAgICAgIHhkci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICB2YXIgcGFyc2VFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHBsYWluVGV4dCkge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlID0geGRyLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gSlNPTi5wYXJzZSh4ZHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcihudWxsLCB4ZHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFwYXJzZUVycm9yKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzKHJlc3BvbnNlLCB4ZHIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocXVldWVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucnVubmluZ1JlcXVlc3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBfdGhpcy5kZXF1ZXVlUmVxdWVzdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB4ZHIub25lcnJvciA9IHhkci5vbnRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IobnVsbCwgeGRyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgIGlmIChxdWV1ZWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5ydW5uaW5nUmVxdWVzdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIF90aGlzLmRlcXVldWVSZXF1ZXN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHhkci5vbnByb2dyZXNzID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgICAgICB4ZHIub3BlbihtZXRob2QsIHVybCk7XG4gICAgICAgIHhkci50aW1lb3V0ID0gdGhpcy5uZXR3b3JrVGltZW91dFNlY29uZHMgKiAxMDAwO1xuICAgICAgICB4ZHIuc2VuZChkYXRhKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIHJlcXVlc3QgdG8gdGhlIHJlcXVlc3QgcXVldWUuXG4gICAgICogQHBhcmFtIHJlcXVlc3RBcmd1bWVudHMgVGhlIHJlcXVlc3QgYXJndW1lbnRzIGZyb20gdGhlIGluaXRpYWwgbWV0aG9kIGNhbGwuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBOZXR3b3JrLnByb3RvdHlwZS5lbnF1ZXVlUmVxdWVzdCA9IGZ1bmN0aW9uIChyZXF1ZXN0QXJndW1lbnRzKSB7XG4gICAgICAgIHRoaXMucmVxdWVzdFF1ZXVlLnB1c2gocmVxdWVzdEFyZ3VtZW50cyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSByZXF1ZXN0IGZyb20gdGhlIHJlcXVlc3QgcXVldWUuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBOZXR3b3JrLnByb3RvdHlwZS5kZXF1ZXVlUmVxdWVzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSB0aGlzLnJlcXVlc3RRdWV1ZS5zaGlmdCgpO1xuICAgICAgICBpZiAoYXJncykge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1zcHJlYWRcbiAgICAgICAgICAgIHRoaXMuYWpheC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE5ldHdvcms7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gTmV0d29yaztcbiIsIlwidXNlIHN0cmljdFwiO1xuLypcbiAqICBDb3B5cmlnaHQgMjAyMCBMZWFucGx1bSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdDpcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgd2hpbGUgKGcgJiYgKGcgPSAwLCBvcFswXSAmJiAoXyA9IDApKSwgXykgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICAgIH1cbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQXJnc0J1aWxkZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9BcmdzQnVpbGRlclwiKSk7XG52YXIgQ29uc3RhbnRzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vQ29uc3RhbnRzXCIpKTtcbnZhciBTdG9yYWdlTWFuYWdlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL1N0b3JhZ2VNYW5hZ2VyXCIpKTtcbnZhciBBUFBMSUNBVElPTl9TRVJWRVJfUFVCTElDX0tFWSA9ICdCSW5XUHBXbnRmUjM5cmdYU1AwNHBxZG1FZERHYTUwejZ6cWJNdnh5eEpDd3pYSXVTcFNoOEM4ODgtQ2ZKODJXRUxsN1hlOGNqQW5mQ3QtM3ZLMENpNjgnO1xuLyoqXG4gKiBQdXNoIE1hbmFnZXIgaGFuZGxlcyB0aGUgcmVnaXN0cmF0aW9uIGFuZCBzdWJzY3JpcHRpb24gZm9yIHdlYiBwdXNoLlxuICovXG52YXIgUHVzaE1hbmFnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUHVzaE1hbmFnZXIoZXZlbnRzLCBjcmVhdGVSZXF1ZXN0KSB7XG4gICAgICAgIHRoaXMuZXZlbnRzID0gZXZlbnRzO1xuICAgICAgICB0aGlzLmNyZWF0ZVJlcXVlc3QgPSBjcmVhdGVSZXF1ZXN0O1xuICAgICAgICB0aGlzLnNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24gPSBudWxsO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUHVzaE1hbmFnZXIucHJvdG90eXBlLCBcInNlcnZpY2VXb3JrZXJcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnNlcnZpY2VXb3JrZXI7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCB3ZWIgcHVzaCBpcyBzdXBwb3J0ZWQgaW4gdGhlIGJyb3dzZXIuXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiBzdXBwb3J0ZWQsIGVsc2UgZmFsc2UuXG4gICAgICovXG4gICAgUHVzaE1hbmFnZXIucHJvdG90eXBlLmlzV2ViUHVzaFN1cHBvcnRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4oKHdpbmRvdyA9PT0gbnVsbCB8fCB3aW5kb3cgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHdpbmRvdy5uYXZpZ2F0b3IpICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICdzZXJ2aWNlV29ya2VyJyBpbiB3aW5kb3cubmF2aWdhdG9yICYmXG4gICAgICAgICAgICAnUHVzaE1hbmFnZXInIGluIHdpbmRvdyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCB0aGUgYnJvd3NlciBpcyBzdWJzY3JpYmVkIHRvIHdlYiBwdXNoIG5vdGlmaWNhdGlvbnMuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gVHJ1ZSBpZiBzdWJzY3JpYmVkLCBlbHNlIGZhbHNlLlxuICAgICAqL1xuICAgIFB1c2hNYW5hZ2VyLnByb3RvdHlwZS5pc1dlYlB1c2hTdWJzY3JpYmVkID0gZnVuY3Rpb24gKGNsaWVudFVybCkge1xuICAgICAgICBpZiAoY2xpZW50VXJsID09PSB2b2lkIDApIHsgY2xpZW50VXJsID0gJyc7IH1cbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIFByb21pc2UsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZWdpc3RyYXRpb24sIHN1YnNjcmlwdGlvbiwgaXNTdWJzY3JpYmVkO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzV2ViUHVzaFN1cHBvcnRlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZhbHNlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZ2V0U2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbihjbGllbnRVcmwpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVnaXN0cmF0aW9uID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZWdpc3RyYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVnaXN0cmF0aW9uLnB1c2hNYW5hZ2VyLmdldFN1YnNjcmlwdGlvbigpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNTdWJzY3JpYmVkID0gc3Vic2NyaXB0aW9uICE9PSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzU3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTmV3U3Vic2NyaXB0aW9uT25TZXJ2ZXIoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBpc1N1YnNjcmliZWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGZvciBXZWJQdXNoLlxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gICBzZXJ2aWNlV29ya2VyVXJsIFRoZSB1cmwgdGhhdCBzZXJ2ZXMgdGhlIHNlcnZpY2Ugd29ya2VyIG9uIHlvdXIgZG9tYWluLlxuICAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYWxsYmFjayAgICAgICAgIFRoZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgd2l0aCByZXN1bHQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gVHJ1ZSBpZiBzdWJzY3JpYmVkLCBlbHNlIGZhbHNlLlxuICAgICAqL1xuICAgIFB1c2hNYW5hZ2VyLnByb3RvdHlwZS5yZWdpc3RlciA9IGZ1bmN0aW9uIChzZXJ2aWNlV29ya2VyVXJsLCBzY29wZSwgY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIFByb21pc2UsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSwgc3Vic2NyaXB0aW9uLCBpc1N1YnNjcmliZWQsIGVycm9yXzE7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNXZWJQdXNoU3VwcG9ydGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnTGVhbnBsdW06IFB1c2ggbWVzc2FnaW5nIGlzIG5vdCBzdXBwb3J0ZWQuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGNhbGxiYWNrKGZhbHNlKV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbMSwgNCwgLCA1XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnNlcnZpY2VXb3JrZXIucmVnaXN0ZXIoc2VydmljZVdvcmtlclVybCB8fCAnL3N3Lm1pbi5qcycsIHNjb3BlKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24gPSBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24ucHVzaE1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc1N1YnNjcmliZWQgPSBzdWJzY3JpcHRpb24gIT09IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVOZXdTdWJzY3JpcHRpb25PblNlcnZlcihzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGNhbGxiYWNrKGlzU3Vic2NyaWJlZCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcl8xID0gX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0xlYW5wbHVtOiBTZXJ2aWNlIFdvcmtlciBFcnJvcjogJywgZXJyb3JfMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgY2FsbGJhY2soZmFsc2UpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlIHRoZSB1c2VyIChicm93c2VyKSB0byBwdXNoLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVzIGlmIHN1YnNjcmlwdGlvbiBzdWNjZXNzZnVsLCBvdGhlcndpc2UgcmVqZWN0cy5cbiAgICAgKi9cbiAgICBQdXNoTWFuYWdlci5wcm90b3R5cGUuc3Vic2NyaWJlVXNlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIFByb21pc2UsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcHBsaWNhdGlvblNlcnZlcktleSwgc3Vic2NyaXB0aW9uLCBlcnJvcl8yO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwbGljYXRpb25TZXJ2ZXJLZXkgPSB0aGlzLnVybEI2NFRvVWludDhBcnJheShBUFBMSUNBVElPTl9TRVJWRVJfUFVCTElDX0tFWSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMSwgMywgLCA0XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24ucHVzaE1hbmFnZXIuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlclZpc2libGVPbmx5OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBsaWNhdGlvblNlcnZlcktleTogYXBwbGljYXRpb25TZXJ2ZXJLZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVOZXdTdWJzY3JpcHRpb25PblNlcnZlcihzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yXzIgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJMZWFucGx1bTogRmFpbGVkIHRvIHN1YnNjcmliZSB0aGUgdXNlcjogXCIuY29uY2F0KGVycm9yXzIpKTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qLywgdHJ1ZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVW5zdWJzY3JpYmUgdGhlIHVzZXIoYnJvd3NlcikgZnJvbSBwdXNoLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc29sdmVzIGlmIHVuc3Vic2NyaWJlZCwgb3RoZXJ3aXNlIHJlamVjdHMuXG4gICAgICovXG4gICAgUHVzaE1hbmFnZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlVXNlciA9IGZ1bmN0aW9uIChjbGllbnRVcmwpIHtcbiAgICAgICAgaWYgKGNsaWVudFVybCA9PT0gdm9pZCAwKSB7IGNsaWVudFVybCA9ICcnOyB9XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCBQcm9taXNlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaWJlZCwgc3Vic2NyaXB0aW9uLCBlcnJvcl8zO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmlzV2ViUHVzaFN1YnNjcmliZWQoY2xpZW50VXJsKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZWQgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN1YnNjcmliZWQpIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAyO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzIsIDUsICwgNl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5zZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uLnB1c2hNYW5hZ2VyLmdldFN1YnNjcmlwdGlvbigpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yXzMgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJMZWFucGx1bTogRXJyb3IgdW5zdWJzY3JpYmluZzogXCIuY29uY2F0KGVycm9yXzMpKTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OiByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHRoZSBzZXJ2aWNlIHdvcmtlciByZWdpc3RyYXRpb24gb2JqZWN0IGZyb20gYnJvd3Nlci5cbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9IFJldHVybnMgdGhlIHJlZ2lzdHJhdGlvbiBvciBudWxsLlxuICAgICAqL1xuICAgIFB1c2hNYW5hZ2VyLnByb3RvdHlwZS5nZXRTZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uID0gZnVuY3Rpb24gKGNsaWVudFVybCkge1xuICAgICAgICBpZiAoY2xpZW50VXJsID09PSB2b2lkIDApIHsgY2xpZW50VXJsID0gJyc7IH1cbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIFByb21pc2UsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghIXRoaXMuc2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbikgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnNlcnZpY2VXb3JrZXIuZ2V0UmVnaXN0cmF0aW9uKGNsaWVudFVybCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uID0gX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAyO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLnNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb25dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEVuY29kZXMgYSBiYXNlNjQgVVJMIHN0cmluZyB0byBhbiBVaW50OCBhcnJheS5cbiAgICAgKi9cbiAgICBQdXNoTWFuYWdlci5wcm90b3R5cGUudXJsQjY0VG9VaW50OEFycmF5ID0gZnVuY3Rpb24gKGJhc2U2NFN0cmluZykge1xuICAgICAgICB2YXIgcGFkZGluZyA9ICc9Jy5yZXBlYXQoKDQgLSBiYXNlNjRTdHJpbmcubGVuZ3RoICUgNCkgJSA0KTtcbiAgICAgICAgdmFyIGJhc2U2NCA9IChiYXNlNjRTdHJpbmcgKyBwYWRkaW5nKS5yZXBsYWNlKC8tL2csICcrJykucmVwbGFjZSgvXy9nLCAnLycpO1xuICAgICAgICB2YXIgcmF3RGF0YSA9IHRoaXMuZGVjb2RlRGF0YShiYXNlNjQpO1xuICAgICAgICB2YXIgb3V0cHV0QXJyYXkgPSBuZXcgVWludDhBcnJheShyYXdEYXRhLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmF3RGF0YS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgb3V0cHV0QXJyYXlbaV0gPSByYXdEYXRhLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dEFycmF5O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2VuZCBhIG5ldyBzdWJzY3JpcHRpb24gb2JqZWN0IHRvIHRoZSBMZWFucGx1bSBzZXJ2ZXIuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHN1YnNjcmlwdGlvbiBUaGUgc3Vic2NyaXB0aW9uLlxuICAgICAqL1xuICAgIFB1c2hNYW5hZ2VyLnByb3RvdHlwZS51cGRhdGVOZXdTdWJzY3JpcHRpb25PblNlcnZlciA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdmFyIHByZXBhcmVkU3Vic2NyaXB0aW9uID0gdGhpcy5wcmVwYXJlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICB2YXIgcHJlcGFyZWRTdWJzY3JpcHRpb25TdHJpbmcgPSBKU09OLnN0cmluZ2lmeShwcmVwYXJlZFN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICB2YXIgZXhpc3RpbmdTdWJzY3JpcHRpb25TdHJpbmcgPSBTdG9yYWdlTWFuYWdlcl8xLmRlZmF1bHQuZ2V0KENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLlBVU0hfU1VCU0NSSVBUSU9OKTtcbiAgICAgICAgICAgIGlmIChleGlzdGluZ1N1YnNjcmlwdGlvblN0cmluZyAhPT0gcHJlcGFyZWRTdWJzY3JpcHRpb25TdHJpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50cy5lbWl0KCd3ZWJQdXNoU3Vic2NyaWJlZCcpO1xuICAgICAgICAgICAgICAgIFN0b3JhZ2VNYW5hZ2VyXzEuZGVmYXVsdC5zYXZlKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLlBVU0hfU1VCU0NSSVBUSU9OLCBwcmVwYXJlZFN1YnNjcmlwdGlvblN0cmluZyk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdWJzY3JpcHRpb24ocHJlcGFyZWRTdWJzY3JpcHRpb25TdHJpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBQdXNoTWFuYWdlci5wcm90b3R5cGUucHJlcGFyZVN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgdmFyIGtleSA9ICgnZ2V0S2V5JyBpbiBzdWJzY3JpcHRpb24pID8gc3Vic2NyaXB0aW9uLmdldEtleSgncDI1NmRoJykgOiBbXTtcbiAgICAgICAgdmFyIGF1dGggPSAoJ2dldEtleScgaW4gc3Vic2NyaXB0aW9uKSA/IHN1YnNjcmlwdGlvbi5nZXRLZXkoJ2F1dGgnKSA6IFtdO1xuICAgICAgICB2YXIga2V5QXNjaWkgPSB0aGlzLmVuY29kZURhdGEoU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheShrZXkpKSk7XG4gICAgICAgIHZhciBhdXRoQXNjaWkgPSB0aGlzLmVuY29kZURhdGEoU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheShhdXRoKSkpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZW5kcG9pbnQ6IHN1YnNjcmlwdGlvbi5lbmRwb2ludCxcbiAgICAgICAgICAgIGtleToga2V5QXNjaWksXG4gICAgICAgICAgICBhdXRoOiBhdXRoQXNjaWksXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZW5kIHRoZSBzdWJzY3JpcHRpb24gdG8gdGhlIExlYW5wbHVtIHNlcnZlci5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3Vic2NyaXB0aW9uIFRoZSBzdWJzY3JpcHRpb24gc3RyaW5nLlxuICAgICAqL1xuICAgIFB1c2hNYW5hZ2VyLnByb3RvdHlwZS5zZXRTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIGlmIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gbmV3IEFyZ3NCdWlsZGVyXzEuZGVmYXVsdCgpLmFkZChDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5XRUJfUFVTSF9TVUJTQ1JJUFRJT04sIHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVJlcXVlc3QoQ29uc3RhbnRzXzEuZGVmYXVsdC5NRVRIT0RTLlNFVF9ERVZJQ0VfQVRUUklCVVRFUywgYXJncywge1xuICAgICAgICAgICAgICAgIHF1ZXVlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2VuZE5vdzogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBQdXNoTWFuYWdlci5wcm90b3R5cGUuZW5jb2RlRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cuYnRvYShkYXRhKTtcbiAgICB9O1xuICAgIFB1c2hNYW5hZ2VyLnByb3RvdHlwZS5kZWNvZGVEYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5hdG9iKGRhdGEpO1xuICAgIH07XG4gICAgcmV0dXJuIFB1c2hNYW5hZ2VyO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFB1c2hNYW5hZ2VyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogIENvcHlyaWdodCAyMDIwIExlYW5wbHVtIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0OlxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIE5ldHdvcmtfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9OZXR3b3JrXCIpKTtcbi8qKlxuICogU29ja2V0LmlvIDEuMCBjbGllbnQgY2xhc3MuXG4gKi9cbnZhciBTb2NrZXRJb0NsaWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhIG5ldyBTb2NrZXRJb0NsaWVudCwgbm90IGNvbm5lY3RlZCBieSBkZWZhdWx0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFNvY2tldElvQ2xpZW50KCkge1xuICAgICAgICB0aGlzLm5ldHdvcmsgPSBuZXcgTmV0d29ya18xLmRlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY29ubmVjdGluZyA9IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb25uZWN0cyB0byB0aGUgZ2l2ZW4gc29ja2V0SG9zdC5cbiAgICAgKiBAcGFyYW0gc29ja2V0SG9zdCBUaGUgaG9zdCB0byBjb25uZWN0IHRvLlxuICAgICAqL1xuICAgIFNvY2tldElvQ2xpZW50LnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKHNvY2tldEhvc3QpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5jb25uZWN0aW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5uZXR3b3JrLmFqYXgoJ1BPU1QnLCBcImh0dHBzOi8vXCIuY29uY2F0KHNvY2tldEhvc3QsIFwiL3NvY2tldC5pby8xXCIpLCAnJywgZnVuY3Rpb24gKGxpbmUpIHtcbiAgICAgICAgICAgIHZhciBwYXJ0cyA9IGxpbmUuc3BsaXQoJzonKTtcbiAgICAgICAgICAgIHZhciBzZXNzaW9uID0gcGFydHNbMF07XG4gICAgICAgICAgICB2YXIgaGVhcnRiZWF0ID0gcGFyc2VJbnQocGFydHNbMV0pIC8gMiAqIDEwMDA7XG4gICAgICAgICAgICBfdGhpcy5zb2NrZXQgPSBuZXcgV2ViU29ja2V0KFwid3NzOi8vXCIuY29uY2F0KHNvY2tldEhvc3QsIFwiL3NvY2tldC5pby8xL3dlYnNvY2tldC9cIikuY29uY2F0KHNlc3Npb24pKTtcbiAgICAgICAgICAgIHZhciBoZWFydGJlYXRJbnRlcnZhbCA9IG51bGw7XG4gICAgICAgICAgICBfdGhpcy5zb2NrZXQub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmNvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgX3RoaXMuY29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5vbm9wZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub25vcGVuKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGhlYXJ0YmVhdEludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zb2NrZXQuc2VuZCgnMjo6OicpO1xuICAgICAgICAgICAgICAgIH0sIGhlYXJ0YmVhdCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgX3RoaXMuc29ja2V0Lm9uY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChoZWFydGJlYXRJbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLm9uY2xvc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub25jbG9zZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpcy5zb2NrZXQub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2VQYXJ0cyA9IGV2ZW50LmRhdGEuc3BsaXQoJzonKTtcbiAgICAgICAgICAgICAgICB2YXIgY29kZSA9IHBhcnNlSW50KG1lc3NhZ2VQYXJ0c1swXSk7XG4gICAgICAgICAgICAgICAgaWYgKGNvZGUgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc29ja2V0LnNlbmQoJzI6OicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjb2RlID09PSA1KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlSWQgPSBtZXNzYWdlUGFydHNbMV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gSlNPTi5wYXJzZShtZXNzYWdlUGFydHMuc2xpY2UoMykuam9pbignOicpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2VFdmVudCA9IGRhdGEubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBkYXRhLmFyZ3M7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNvY2tldC5zZW5kKFwiNjo6OlwiLmNvbmNhdChtZXNzYWdlSWQpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMub25tZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5vbm1lc3NhZ2UobWVzc2FnZUV2ZW50LCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjb2RlID09PSA3KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU29ja2V0IGVycm9yOiBcIi5jb25jYXQoZXZlbnQuZGF0YSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpcy5zb2NrZXQub25lcnJvciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnNvY2tldC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5vbmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9uZXJyb3IoZXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sIG51bGwsIGZhbHNlLCB0cnVlIC8vIG51bGwsIHF1ZXVlZCwgcGxhaW5UZXh0XG4gICAgICAgICk7XG4gICAgfTtcbiAgICBTb2NrZXRJb0NsaWVudC5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zb2NrZXQuY2xvc2UoKTtcbiAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb25uZWN0aW5nID0gZmFsc2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZW5kcyBnaXZlbiBldmVudCB3aXRoIGFyZ3VtZW50cyB0byB0aGUgc2VydmVyLlxuICAgICAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIGV2ZW50LlxuICAgICAqIEBwYXJhbSBhcmdzIEFyZ3VtZW50cyB0byBzZW5kLlxuICAgICAqL1xuICAgIFNvY2tldElvQ2xpZW50LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKG5hbWUsIGFyZ3MpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0xlYW5wbHVtOiBTb2NrZXQgaXMgbm90IGNvbm5lY3RlZC4nKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYXJnc0pzb24gPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgYXJnczogYXJncyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc29ja2V0LnNlbmQoXCI1Ojo6XCIuY29uY2F0KGFyZ3NKc29uKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBuZXR3b3JrIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIFRoZSB0aW1lb3V0IGluIHNlY29uZHMuXG4gICAgICovXG4gICAgU29ja2V0SW9DbGllbnQucHJvdG90eXBlLnNldE5ldHdvcmtUaW1lb3V0ID0gZnVuY3Rpb24gKHNlY29uZHMpIHtcbiAgICAgICAgdGhpcy5uZXR3b3JrLnNldE5ldHdvcmtUaW1lb3V0KHNlY29uZHMpO1xuICAgIH07XG4gICAgcmV0dXJuIFNvY2tldElvQ2xpZW50O1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFNvY2tldElvQ2xpZW50O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICpcbiAqICBDb3B5cmlnaHQgMjAyMCBMZWFucGx1bSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZVxuICpcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHN0b3JhZ2VFbmFibGVkID0ge1xuICAgIGxvY2FsOiB0cnVlLFxuICAgIHNlc3Npb246IHRydWUsXG59O1xudmFyIGFsdGVybmF0ZVN0b3JhZ2UgPSB7XG4gICAgbG9jYWw6IHt9LFxuICAgIHNlc3Npb246IHt9LFxufTtcbnZhciBTdG9yYWdlTWFuYWdlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdG9yYWdlTWFuYWdlcigpIHtcbiAgICB9XG4gICAgU3RvcmFnZU1hbmFnZXIuZ2V0ID0gZnVuY3Rpb24gKGtleSwgdHlwZSkge1xuICAgICAgICBpZiAodHlwZSA9PT0gdm9pZCAwKSB7IHR5cGUgPSAnbG9jYWwnOyB9XG4gICAgICAgIGlmICghc3RvcmFnZUVuYWJsZWRbdHlwZV0pIHtcbiAgICAgICAgICAgIHJldHVybiBhbHRlcm5hdGVTdG9yYWdlW3R5cGVdW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnbG9jYWwnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgc3RvcmFnZUVuYWJsZWRbdHlwZV0gPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBhbHRlcm5hdGVTdG9yYWdlW3R5cGVdW2tleV07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN0b3JhZ2VNYW5hZ2VyLnNhdmUgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgdHlwZSkge1xuICAgICAgICBpZiAodHlwZSA9PT0gdm9pZCAwKSB7IHR5cGUgPSAnbG9jYWwnOyB9XG4gICAgICAgIGlmICghc3RvcmFnZUVuYWJsZWRbdHlwZV0pIHtcbiAgICAgICAgICAgIGFsdGVybmF0ZVN0b3JhZ2VbdHlwZV1ba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2xvY2FsJykge1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZVtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBzdG9yYWdlRW5hYmxlZFt0eXBlXSA9IGZhbHNlO1xuICAgICAgICAgICAgYWx0ZXJuYXRlU3RvcmFnZVt0eXBlXVtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN0b3JhZ2VNYW5hZ2VyLnJlbW92ZSA9IGZ1bmN0aW9uIChrZXksIHR5cGUpIHtcbiAgICAgICAgaWYgKHR5cGUgPT09IHZvaWQgMCkgeyB0eXBlID0gJ2xvY2FsJzsgfVxuICAgICAgICBpZiAoIXN0b3JhZ2VFbmFibGVkW3R5cGVdKSB7XG4gICAgICAgICAgICBkZWxldGUgYWx0ZXJuYXRlU3RvcmFnZVt0eXBlXVtrZXldO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2xvY2FsJykge1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHN0b3JhZ2VFbmFibGVkW3R5cGVdID0gZmFsc2U7XG4gICAgICAgICAgICBkZWxldGUgYWx0ZXJuYXRlU3RvcmFnZVt0eXBlXVtrZXldO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU3RvcmFnZU1hbmFnZXI7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gU3RvcmFnZU1hbmFnZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBWYWx1ZVRyYW5zZm9ybXMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVmFsdWVUcmFuc2Zvcm1zKCkge1xuICAgIH1cbiAgICBWYWx1ZVRyYW5zZm9ybXMuZGVjb2RlQ29sb3IgPSBmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgICAgdmFyIGIgPSBjb2xvciAmIDB4ZmY7XG4gICAgICAgIGNvbG9yID4+PSA4O1xuICAgICAgICB2YXIgZyA9IGNvbG9yICYgMHhmZjtcbiAgICAgICAgY29sb3IgPj49IDg7XG4gICAgICAgIHZhciByID0gY29sb3IgJiAweGZmO1xuICAgICAgICBjb2xvciA+Pj0gODtcbiAgICAgICAgdmFyIGEgPSAoY29sb3IgJiAweGZmKSAvIDI1NTtcbiAgICAgICAgcmV0dXJuIFwicmdiYShcIi5jb25jYXQociwgXCIsXCIpLmNvbmNhdChnLCBcIixcIikuY29uY2F0KGIsIFwiLFwiKS5jb25jYXQoYSwgXCIpXCIpO1xuICAgIH07XG4gICAgVmFsdWVUcmFuc2Zvcm1zLmVuY29kZUNvbG9yID0gZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY29sb3IgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICByZXR1cm4gY29sb3I7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmdiYSAtPiBudW1iZXJcbiAgICAgICAgdmFyIHJnYmFSZSA9IC9ecmdiYVxcKChcXGQrKSwoXFxkKyksKFxcZCspLChcXGQrKFxcLlxcZCspPylcXCkkLztcbiAgICAgICAgdmFyIHJnYmEgPSByZ2JhUmUuZXhlYyhjb2xvcik7XG4gICAgICAgIGlmIChyZ2JhKSB7XG4gICAgICAgICAgICB2YXIgYSA9IHBhcnNlSW50KHJnYmFbNF0sIDEwKSAqIDI1NTtcbiAgICAgICAgICAgIHZhciByID0gcGFyc2VJbnQocmdiYVsxXSwgMTApICYgMHhmZjtcbiAgICAgICAgICAgIHZhciBnID0gcGFyc2VJbnQocmdiYVsyXSwgMTApICYgMHhmZjtcbiAgICAgICAgICAgIHZhciBiID0gcGFyc2VJbnQocmdiYVszXSwgMTApICYgMHhmZjtcbiAgICAgICAgICAgIHJldHVybiAoYSA8PCAyNCkgKyAociA8PCAxNikgKyAoZyA8PCA4KSArIGI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaGV4IC0+IG51bWJlclxuICAgICAgICB2YXIgaGV4UmUgPSAvXiMoWzAtOWEtZl17Mn0pKFswLTlhLWZdezJ9KShbMC05YS1mXXsyfSkkL2k7XG4gICAgICAgIHZhciBoZXggPSBoZXhSZS5leGVjKGNvbG9yKTtcbiAgICAgICAgaWYgKGhleCkge1xuICAgICAgICAgICAgdmFyIHIgPSBwYXJzZUludChoZXhbMV0sIDE2KSAmIDB4ZmY7XG4gICAgICAgICAgICB2YXIgZyA9IHBhcnNlSW50KGhleFsyXSwgMTYpICYgMHhmZjtcbiAgICAgICAgICAgIHZhciBiID0gcGFyc2VJbnQoaGV4WzNdLCAxNikgJiAweGZmO1xuICAgICAgICAgICAgcmV0dXJuICgyNTUgPDwgMjQpICsgKHIgPDwgMTYpICsgKGcgPDwgOCkgKyBiO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBwYXJzZSBjb2xvciBcXFwiXCIuY29uY2F0KGNvbG9yLCBcIlxcXCJcIikpO1xuICAgIH07XG4gICAgcmV0dXJuIFZhbHVlVHJhbnNmb3Jtcztcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBWYWx1ZVRyYW5zZm9ybXM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiAgQ29weXJpZ2h0IDIwMjAgTGVhbnBsdW0gSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEFyZ3NCdWlsZGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vQXJnc0J1aWxkZXJcIikpO1xudmFyIENvbnN0YW50c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0NvbnN0YW50c1wiKSk7XG52YXIgU3RvcmFnZU1hbmFnZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9TdG9yYWdlTWFuYWdlclwiKSk7XG52YXIgVmFsdWVUcmFuc2Zvcm1zXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vVmFsdWVUcmFuc2Zvcm1zXCIpKTtcbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbi8vIHRyYW5zZm9ybXMgdGhlIHNlcnZlciByZXNwb25zZSB0byB0aGUgZm9ybWF0IGV4cGVjdGVkIGJ5IHNldFZhcnNcbi8vIC0gbG93ZXJjYXNlIGtpbmRzXG4vLyAtIGFjdGlvbnMgYXMgZW1wdHkgc3RyaW5nc1xuZnVuY3Rpb24gdG9TZXRWYXJzRm9ybWF0KG8pIHtcbiAgICBpZiAoIW8pXG4gICAgICAgIHJldHVybiBvO1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgYWN0aW9uKSB7XG4gICAgICAgIGFjY1thY3Rpb25dID0gX19hc3NpZ24oe30sIG9bYWN0aW9uXSk7XG4gICAgICAgIHZhciBraW5kcyA9IG9bYWN0aW9uXS5raW5kcztcbiAgICAgICAgaWYgKGtpbmRzKSB7XG4gICAgICAgICAgICBhY2NbYWN0aW9uXS5raW5kcyA9IE9iamVjdC5rZXlzKGtpbmRzKVxuICAgICAgICAgICAgICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGssIGt4KSB7XG4gICAgICAgICAgICAgICAgdmFyIGtpbmQgPSBraW5kc1treF0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICBrW2t4XSA9IGtpbmQ7XG4gICAgICAgICAgICAgICAgaWYgKGtpbmQgPT09ICdhY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjY1thY3Rpb25dLnZhbHVlc1treF0gPSAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGs7XG4gICAgICAgICAgICB9LCB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG59XG52YXIgVmFyQ2FjaGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVmFyQ2FjaGUoY3JlYXRlUmVxdWVzdCkge1xuICAgICAgICB0aGlzLmNyZWF0ZVJlcXVlc3QgPSBjcmVhdGVSZXF1ZXN0O1xuICAgICAgICB0aGlzLmFjdGlvbkRlZmluaXRpb25zID0ge307XG4gICAgICAgIHRoaXMuaGFzUmVjZWl2ZWREaWZmcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLm1lcmdlZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy52YXJpYWJsZXMgPSBudWxsO1xuICAgICAgICB0aGlzLnZhcmlhYmxlc0NoYW5nZWRIYW5kbGVycyA9IFtdO1xuICAgICAgICB0aGlzLnZhcmlhbnREZWJ1Z0luZm8gPSB7fTtcbiAgICAgICAgdGhpcy5kaWZmcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy50b2tlbiA9ICcnO1xuICAgICAgICB0aGlzLnZhcmlhbnRzID0gW107XG4gICAgfVxuICAgIFZhckNhY2hlLnByb3RvdHlwZS5hcHBseURpZmZzID0gZnVuY3Rpb24gKGRpZmZzLCB2YXJpYW50cywgYWN0aW9uRGVmaW5pdGlvbnMpIHtcbiAgICAgICAgdGhpcy5kaWZmcyA9IGRpZmZzO1xuICAgICAgICB0aGlzLnZhcmlhbnRzID0gdmFyaWFudHM7XG4gICAgICAgIHRoaXMuYWN0aW9uRGVmaW5pdGlvbnMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5hY3Rpb25EZWZpbml0aW9ucyksIHRvU2V0VmFyc0Zvcm1hdChhY3Rpb25EZWZpbml0aW9ucykpO1xuICAgICAgICB0aGlzLmhhc1JlY2VpdmVkRGlmZnMgPSB0cnVlO1xuICAgICAgICB0aGlzLm1lcmdlZCA9IG1lcmdlSGVscGVyKHRoaXMudmFyaWFibGVzLCBkaWZmcyk7XG4gICAgICAgIHRoaXMuc2F2ZURpZmZzKCk7XG4gICAgICAgIGlmICh0aGlzLm9uVXBkYXRlKSB7XG4gICAgICAgICAgICB0aGlzLm9uVXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFZhckNhY2hlLnByb3RvdHlwZS5sb2FkRGlmZnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmFwcGx5RGlmZnMoSlNPTi5wYXJzZSh0aGlzLmxvYWRMb2NhbChDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5WQVJJQUJMRVMpIHx8IG51bGwpLCBKU09OLnBhcnNlKHRoaXMubG9hZExvY2FsKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLlZBUklBTlRTKSB8fCBudWxsKSwgSlNPTi5wYXJzZSh0aGlzLmxvYWRMb2NhbChDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5BQ1RJT05fREVGSU5JVElPTlMpIHx8IG51bGwpKTtcbiAgICAgICAgICAgIHRoaXMudG9rZW4gPSB0aGlzLmxvYWRMb2NhbChDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5UT0tFTik7XG4gICAgICAgICAgICB0aGlzLnZhcmlhbnREZWJ1Z0luZm8gPSB0aGlzLmxvYWRMb2NhbChDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5WQVJJQU5UX0RFQlVHX0lORk8pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkxlYW5wbHVtOiBJbnZhbGlkIGRpZmZzOiBcIi5jb25jYXQoZSkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBWYXJDYWNoZS5wcm90b3R5cGUuc2F2ZURpZmZzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnNhdmVMb2NhbChDb25zdGFudHNfMS5kZWZhdWx0LkRFRkFVTFRfS0VZUy5WQVJJQUJMRVMsIEpTT04uc3RyaW5naWZ5KHRoaXMuZGlmZnMgfHwge30pKTtcbiAgICAgICAgdGhpcy5zYXZlTG9jYWwoQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuVkFSSUFOVFMsIEpTT04uc3RyaW5naWZ5KHRoaXMudmFyaWFudHMgfHwgW10pKTtcbiAgICAgICAgdGhpcy5zYXZlTG9jYWwoQ29uc3RhbnRzXzEuZGVmYXVsdC5ERUZBVUxUX0tFWVMuQUNUSU9OX0RFRklOSVRJT05TLCBKU09OLnN0cmluZ2lmeSh0aGlzLmFjdGlvbkRlZmluaXRpb25zIHx8IHt9KSk7XG4gICAgICAgIHRoaXMuc2F2ZUxvY2FsKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLlZBUklBTlRfREVCVUdfSU5GTywgSlNPTi5zdHJpbmdpZnkodGhpcy52YXJpYW50RGVidWdJbmZvIHx8IHt9KSk7XG4gICAgICAgIHRoaXMuc2F2ZUxvY2FsKENvbnN0YW50c18xLmRlZmF1bHQuREVGQVVMVF9LRVlTLlRPS0VOLCB0aGlzLnRva2VuKTtcbiAgICB9O1xuICAgIFZhckNhY2hlLnByb3RvdHlwZS5nZXRWYXJpYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuZ2V0VmFyaWFibGVzKCk7XG4gICAgICAgIGlmIChjdXJyZW50KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudFthcmdzW2ldXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3VycmVudDtcbiAgICB9O1xuICAgIFZhckNhY2hlLnByb3RvdHlwZS5nZXRWYXJpYWJsZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lcmdlZCAhPT0gdW5kZWZpbmVkID8gdGhpcy5tZXJnZWQgOiB0aGlzLnZhcmlhYmxlcztcbiAgICB9O1xuICAgIFZhckNhY2hlLnByb3RvdHlwZS5zZXRWYXJpYWJsZXMgPSBmdW5jdGlvbiAodmFyaWFibGVzKSB7XG4gICAgICAgIHRoaXMudmFyaWFibGVzID0gdmFyaWFibGVzO1xuICAgIH07XG4gICAgVmFyQ2FjaGUucHJvdG90eXBlLmFkZFZhcmlhYmxlc0NoYW5nZWRIYW5kbGVyID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy52YXJpYWJsZXNDaGFuZ2VkSGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICAgICAgaWYgKHRoaXMuaGFzUmVjZWl2ZWREaWZmcykge1xuICAgICAgICAgICAgaGFuZGxlcigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBWYXJDYWNoZS5wcm90b3R5cGUucmVtb3ZlVmFyaWFibGVzQ2hhbmdlZEhhbmRsZXIgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICB2YXIgaWR4ID0gdGhpcy52YXJpYWJsZXNDaGFuZ2VkSGFuZGxlcnMuaW5kZXhPZihoYW5kbGVyKTtcbiAgICAgICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnZhcmlhYmxlc0NoYW5nZWRIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVmFyQ2FjaGUucHJvdG90eXBlLnRyaWdnZXJWYXJpYWJsZXNDaGFuZ2VkSGFuZGxlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy52YXJpYWJsZXNDaGFuZ2VkSGFuZGxlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMudmFyaWFibGVzQ2hhbmdlZEhhbmRsZXJzW2ldKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFZhckNhY2hlLnByb3RvdHlwZS5nZXRWYXJpYW50RGVidWdJbmZvID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YXJpYW50RGVidWdJbmZvO1xuICAgIH07XG4gICAgVmFyQ2FjaGUucHJvdG90eXBlLnNldFZhcmlhbnREZWJ1Z0luZm8gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YXJpYW50RGVidWdJbmZvID0gdmFsdWU7XG4gICAgfTtcbiAgICBWYXJDYWNoZS5wcm90b3R5cGUuc2VuZEFjdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCFPYmplY3Qua2V5cyh0aGlzLmFjdGlvbkRlZmluaXRpb25zKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFZhcnMoKF9hID0ge30sXG4gICAgICAgICAgICBfYVtDb25zdGFudHNfMS5kZWZhdWx0LlBBUkFNUy5BQ1RJT05fREVGSU5JVElPTlNdID0gdGhpcy5hY3Rpb25EZWZpbml0aW9ucyxcbiAgICAgICAgICAgIF9hKSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgVmFyQ2FjaGUucHJvdG90eXBlLnNlbmRWYXJpYWJsZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5zZXRWYXJzKChfYSA9IHt9LFxuICAgICAgICAgICAgX2FbQ29uc3RhbnRzXzEuZGVmYXVsdC5QQVJBTVMuVkFSSUFCTEVTXSA9IHRoaXMudmFyaWFibGVzLFxuICAgICAgICAgICAgX2EpKTtcbiAgICB9O1xuICAgIFZhckNhY2hlLnByb3RvdHlwZS5zZXRWYXJzID0gZnVuY3Rpb24gKGJvZHkpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJnc0J1aWxkZXJfMS5kZWZhdWx0KCkuYm9keShKU09OLnN0cmluZ2lmeShib2R5KSk7XG4gICAgICAgIHRoaXMuY3JlYXRlUmVxdWVzdChDb25zdGFudHNfMS5kZWZhdWx0Lk1FVEhPRFMuU0VUX1ZBUlMsIGFyZ3MsIHtcbiAgICAgICAgICAgIHNlbmROb3c6IHRydWUsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgVmFyQ2FjaGUucHJvdG90eXBlLmNsZWFyVXNlckNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZGlmZnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudmFyaWFibGVzID0gbnVsbDtcbiAgICAgICAgdGhpcy52YXJpYW50cyA9IFtdO1xuICAgICAgICB0aGlzLnZhcmlhbnREZWJ1Z0luZm8gPSB7fTtcbiAgICAgICAgdGhpcy5tZXJnZWQgPSB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBWYXJDYWNoZS5wcm90b3R5cGUucmVnaXN0ZXJBY3Rpb25EZWZpbml0aW9uID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5hY3Rpb25EZWZpbml0aW9uc1tvcHRpb25zLm5hbWVdID0gb3B0aW9uc1RvRGVmaW5pdGlvbnMob3B0aW9ucyk7XG4gICAgfTtcbiAgICBWYXJDYWNoZS5wcm90b3R5cGUubG9hZExvY2FsID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gU3RvcmFnZU1hbmFnZXJfMS5kZWZhdWx0LmdldChrZXkpO1xuICAgIH07XG4gICAgVmFyQ2FjaGUucHJvdG90eXBlLnNhdmVMb2NhbCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIFN0b3JhZ2VNYW5hZ2VyXzEuZGVmYXVsdC5zYXZlKGtleSwgdmFsdWUpO1xuICAgIH07XG4gICAgcmV0dXJuIFZhckNhY2hlO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFZhckNhY2hlO1xuZnVuY3Rpb24gYXJndW1lbnRUcmVlKGFyZ3MpIHtcbiAgICByZXR1cm4gYXJncy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgeCkge1xuICAgICAgICBpZiAoeC52YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICBhY2NbeC5uYW1lXSA9IGFyZ3VtZW50VHJlZSh4LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh4LnR5cGUgPT09ICdhY3Rpb24nKSB7XG4gICAgICAgICAgICBhY2NbeC5uYW1lXSA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHgudHlwZSA9PT0gJ2NvbG9yJykge1xuICAgICAgICAgICAgYWNjW3gubmFtZV0gPSBWYWx1ZVRyYW5zZm9ybXNfMS5kZWZhdWx0LmVuY29kZUNvbG9yKHgudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYWNjW3gubmFtZV0gPSB4LnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xufVxuZnVuY3Rpb24gYXJndW1lbnRLaW5kcyhhcmdzLCBwcmVmaXgpIHtcbiAgICBpZiAocHJlZml4ID09PSB2b2lkIDApIHsgcHJlZml4ID0gJyc7IH1cbiAgICByZXR1cm4gYXJncy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgeCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBwcm9wTmFtZSA9IFwiXCIuY29uY2F0KHByZWZpeCkuY29uY2F0KHgubmFtZSk7XG4gICAgICAgIGlmICh4LnZhbHVlIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIGFjYyA9IF9fYXNzaWduKChfYSA9IHt9LCBfYVtwcm9wTmFtZV0gPSAnZ3JvdXAnLCBfYSksIGFyZ3VtZW50S2luZHMoeC52YWx1ZSwgXCJcIi5jb25jYXQocHJvcE5hbWUsIFwiLlwiKSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYWNjW3Byb3BOYW1lXSA9IHgudHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xufVxuZnVuY3Rpb24gb3B0aW9uc1RvRGVmaW5pdGlvbnMob3B0aW9ucykge1xuICAgIHZhciBkZWZpbml0aW9ucyA9IHtcbiAgICAgICAga2luZDogb3B0aW9ucy5raW5kIHx8IDMsXG4gICAgICAgIG9wdGlvbnM6IG51bGwsXG4gICAgICAgIHZhbHVlczogYXJndW1lbnRUcmVlKG9wdGlvbnMuYXJncyksXG4gICAgICAgIGtpbmRzOiBhcmd1bWVudEtpbmRzKG9wdGlvbnMuYXJncyksXG4gICAgfTtcbiAgICByZXR1cm4gZGVmaW5pdGlvbnM7XG59XG5mdW5jdGlvbiBtZXJnZUhlbHBlcih2YXJzLCBkaWZmKSB7XG4gICAgaWYgKHR5cGVvZiBkaWZmID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgZGlmZiA9PT0gJ2Jvb2xlYW4nIHx8IHR5cGVvZiBkaWZmID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gZGlmZjtcbiAgICB9XG4gICAgaWYgKGRpZmYgPT09IG51bGwgfHwgZGlmZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB2YXJzO1xuICAgIH1cbiAgICB2YXIgb2JqSXRlcmF0b3IgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBpdGVyYXRlKGYpIHtcbiAgICAgICAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGYob2JqW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBhdHRyIGluIG9iaikge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHNlZW1zIHRvIGJlIGJlc3QgcHJhY3RpY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy83MDcxXG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVmbGVjdFxuICAgICAgICAgICAgICAgICAgICBpZiAoe30uaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGF0dHIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmKGF0dHIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH07XG4gICAgdmFyIHZhcnNJdGVyYXRvciA9IG9iakl0ZXJhdG9yKHZhcnMpO1xuICAgIHZhciBkaWZmSXRlcmF0b3IgPSBvYmpJdGVyYXRvcihkaWZmKTtcbiAgICAvLyBJbmZlciB0aGF0IHRoZSBkaWZmcyBpcyBhbiBhcnJheSBpZiB0aGUgdmFycyB2YWx1ZSBkb2Vzbid0IGV4aXN0IHRvIHRlbGwgdXMgdGhlIHR5cGUuXG4gICAgdmFyIGlzQXJyYXkgPSBmYWxzZTtcbiAgICBpZiAodmFycyA9PT0gbnVsbCkge1xuICAgICAgICBpZiAoIShkaWZmIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgICAgICBpc0FycmF5ID0gbnVsbDtcbiAgICAgICAgICAgIGZvciAodmFyIGF0dHJpYnV0ZSBpbiBkaWZmKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFkaWZmLmhhc093blByb3BlcnR5KGF0dHJpYnV0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpc0FycmF5ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzQXJyYXkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoISh0eXBlb2YgYXR0cmlidXRlID09PSAnc3RyaW5nJykpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNBcnJheSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZS5sZW5ndGggPCAzIHx8IGF0dHJpYnV0ZS5jaGFyQXQoMCkgIT09ICdbJyB8fFxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGUuY2hhckF0KGF0dHJpYnV0ZS5sZW5ndGggLSAxKSAhPT0gJ10nKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzQXJyYXkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIE1lcmdlIGFycmF5cy5cbiAgICBpZiAodmFycyBpbnN0YW5jZW9mIEFycmF5IHx8IGlzQXJyYXkpIHtcbiAgICAgICAgdmFyIG1lcmdlZF8xID0gW107XG4gICAgICAgIHZhcnNJdGVyYXRvcihmdW5jdGlvbiAoYXR0cikge1xuICAgICAgICAgICAgbWVyZ2VkXzEucHVzaChhdHRyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGRpZmZJdGVyYXRvcihmdW5jdGlvbiAodmFyU3Vic2NyaXB0KSB7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0ID0gcGFyc2VJbnQodmFyU3Vic2NyaXB0LnN1YnN0cmluZygxLCB2YXJTdWJzY3JpcHQubGVuZ3RoIC0gMSkpO1xuICAgICAgICAgICAgdmFyIGRpZmZWYWx1ZSA9IGRpZmZbdmFyU3Vic2NyaXB0XTtcbiAgICAgICAgICAgIHdoaWxlIChzdWJzY3JpcHQgPj0gbWVyZ2VkXzEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgbWVyZ2VkXzEucHVzaChudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1lcmdlZF8xW3N1YnNjcmlwdF0gPSBtZXJnZUhlbHBlcihtZXJnZWRfMVtzdWJzY3JpcHRdLCBkaWZmVmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1lcmdlZF8xO1xuICAgIH1cbiAgICAvLyBNZXJnZSBkaWN0aW9uYXJpZXMuXG4gICAgdmFyIG1lcmdlZCA9IHt9O1xuICAgIHZhcnNJdGVyYXRvcihmdW5jdGlvbiAoYXR0cikge1xuICAgICAgICBpZiAoZGlmZlthdHRyXSA9PT0gbnVsbCB8fCBkaWZmW2F0dHJdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG1lcmdlZFthdHRyXSA9IHZhcnNbYXR0cl07XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBkaWZmSXRlcmF0b3IoZnVuY3Rpb24gKGF0dHIpIHtcbiAgICAgICAgbWVyZ2VkW2F0dHJdID0gbWVyZ2VIZWxwZXIodmFycyA9PT0gbnVsbCA/IG51bGwgOiB2YXJzW2F0dHJdIHx8IHt9LCBkaWZmW2F0dHJdKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbWVyZ2VkO1xufVxuIiwiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlcyAqL1xudmFyIExlYW5wbHVtID0gcmVxdWlyZSgnLi4vTGVhbnBsdW0udHMnKTtcbm1vZHVsZS5leHBvcnRzID0gTGVhbnBsdW0uZGVmYXVsdDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NaWdyYXRpb25TdGF0ZSA9IHZvaWQgMDtcbnZhciBNaWdyYXRpb25TdGF0ZTtcbihmdW5jdGlvbiAoTWlncmF0aW9uU3RhdGUpIHtcbiAgICBNaWdyYXRpb25TdGF0ZVtcIlVOS05PV05cIl0gPSBcInVua25vd25cIjtcbiAgICBNaWdyYXRpb25TdGF0ZVtcIkxFQU5QTFVNXCJdID0gXCJscFwiO1xuICAgIE1pZ3JhdGlvblN0YXRlW1wiRFVQTElDQVRFXCJdID0gXCJscCtjdFwiO1xuICAgIE1pZ3JhdGlvblN0YXRlW1wiQ0xFVkVSVEFQXCJdID0gXCJjdFwiO1xufSkoTWlncmF0aW9uU3RhdGUgPSBleHBvcnRzLk1pZ3JhdGlvblN0YXRlIHx8IChleHBvcnRzLk1pZ3JhdGlvblN0YXRlID0ge30pKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NZXNzYWdlS2luZCA9IGV4cG9ydHMuQWN0aW9uUGFyYW1ldGVyVHlwZSA9IHZvaWQgMDtcbnZhciBBY3Rpb25QYXJhbWV0ZXJUeXBlO1xuKGZ1bmN0aW9uIChBY3Rpb25QYXJhbWV0ZXJUeXBlKSB7XG4gICAgQWN0aW9uUGFyYW1ldGVyVHlwZVtcIkludGVnZXJcIl0gPSBcImludGVnZXJcIjtcbiAgICBBY3Rpb25QYXJhbWV0ZXJUeXBlW1wiQ29sb3JcIl0gPSBcImNvbG9yXCI7XG4gICAgQWN0aW9uUGFyYW1ldGVyVHlwZVtcIkZsb2F0XCJdID0gXCJmbG9hdFwiO1xuICAgIEFjdGlvblBhcmFtZXRlclR5cGVbXCJEZWNpbWFsXCJdID0gXCJkZWNpbWFsXCI7XG4gICAgQWN0aW9uUGFyYW1ldGVyVHlwZVtcIk51bWJlclwiXSA9IFwibnVtYmVyXCI7XG4gICAgQWN0aW9uUGFyYW1ldGVyVHlwZVtcIkJvb2xlYW5cIl0gPSBcImJvb2xcIjtcbiAgICBBY3Rpb25QYXJhbWV0ZXJUeXBlW1wiU3RyaW5nXCJdID0gXCJzdHJpbmdcIjtcbiAgICBBY3Rpb25QYXJhbWV0ZXJUeXBlW1wiVGV4dFwiXSA9IFwidGV4dFwiO1xuICAgIEFjdGlvblBhcmFtZXRlclR5cGVbXCJIVE1MXCJdID0gXCJodG1sXCI7XG4gICAgQWN0aW9uUGFyYW1ldGVyVHlwZVtcIkZpbGVcIl0gPSBcImZpbGVcIjtcbiAgICBBY3Rpb25QYXJhbWV0ZXJUeXBlW1wiTGlzdFwiXSA9IFwibGlzdFwiO1xuICAgIEFjdGlvblBhcmFtZXRlclR5cGVbXCJHcm91cFwiXSA9IFwiZ3JvdXBcIjtcbiAgICBBY3Rpb25QYXJhbWV0ZXJUeXBlW1wiQWN0aW9uXCJdID0gXCJhY3Rpb25cIjtcbiAgICBBY3Rpb25QYXJhbWV0ZXJUeXBlW1wiVW5rbm93blwiXSA9IFwiXCI7XG59KShBY3Rpb25QYXJhbWV0ZXJUeXBlID0gZXhwb3J0cy5BY3Rpb25QYXJhbWV0ZXJUeXBlIHx8IChleHBvcnRzLkFjdGlvblBhcmFtZXRlclR5cGUgPSB7fSkpO1xuO1xudmFyIE1lc3NhZ2VLaW5kO1xuKGZ1bmN0aW9uIChNZXNzYWdlS2luZCkge1xuICAgIE1lc3NhZ2VLaW5kW01lc3NhZ2VLaW5kW1wiQWN0aW9uXCJdID0gMl0gPSBcIkFjdGlvblwiO1xuICAgIE1lc3NhZ2VLaW5kW01lc3NhZ2VLaW5kW1wiVGVtcGxhdGVcIl0gPSAzXSA9IFwiVGVtcGxhdGVcIjtcbn0pKE1lc3NhZ2VLaW5kID0gZXhwb3J0cy5NZXNzYWdlS2luZCB8fCAoZXhwb3J0cy5NZXNzYWdlS2luZCA9IHt9KSk7XG47XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHRsb2FkZWQ6IGZhbHNlLFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubm1kID0gKG1vZHVsZSkgPT4ge1xuXHRtb2R1bGUucGF0aHMgPSBbXTtcblx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRyZXR1cm4gbW9kdWxlO1xufTsiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oODA0KTtcbiJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJzZWxmIiwiX3R5cGVvZiIsIm9iaiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZDIiLCJhcmd1bWVudHMiLCJzb3VyY2UiLCJmb3JFYWNoIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJfc2V0UHJvdG90eXBlT2YiLCJfZ2V0UHJvdG90eXBlT2YiLCJvIiwic2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsInAiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsInNoYW0iLCJQcm94eSIsIkRhdGUiLCJ0b1N0cmluZyIsImNhbGwiLCJlIiwiX2NvbnN0cnVjdCIsIlBhcmVudCIsImFyZ3MiLCJDbGFzcyIsImEiLCJGdW5jdGlvbiIsImJpbmQiLCJfd3JhcE5hdGl2ZVN1cGVyIiwiX2NhY2hlIiwiTWFwIiwidW5kZWZpbmVkIiwiZm4iLCJpbmRleE9mIiwiaGFzIiwiZ2V0Iiwic2V0IiwiV3JhcHBlciIsInRoaXMiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiUmVmZXJlbmNlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIl9jcmVhdGVTdXBlciIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwicmVzdWx0IiwiU3VwZXIiLCJOZXdUYXJnZXQiLCJfYXJyYXlMaWtlVG9BcnJheSIsImFyciIsImxlbiIsImFycjIiLCJBcnJheSIsIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIiwiYWxsb3dBcnJheUxpa2UiLCJpdCIsImlzQXJyYXkiLCJtaW5MZW4iLCJuIiwic2xpY2UiLCJuYW1lIiwiZnJvbSIsInRlc3QiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJGIiwicyIsImRvbmUiLCJmIiwiZXJyIiwibm9ybWFsQ29tcGxldGlvbiIsImRpZEVyciIsInN0ZXAiLCJuZXh0IiwicmV0dXJuIiwiaWQiLCJfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleSIsIl9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSIsInJlY2VpdmVyIiwicHJpdmF0ZUtleSIsImhhc093blByb3BlcnR5IiwiX2dsb2JhbENoYXJnZWRJZCIsIlRBUkdFVF9ET01BSU4iLCJUQVJHRVRfUFJPVE9DT0wiLCJfYWNjb3VudElkIiwiX3JlZ2lvbiIsIl90YXJnZXREb21haW4iLCJfZGNTZGt2ZXJzaW9uIiwiQWNjb3VudCIsInJlZ2lvbiIsInRhcmdldERvbWFpbiIsImFjY291bnRJZCIsImRjU0RLVmVyc2lvbiIsImNvbmNhdCIsImZpbmFsVGFyZ2V0RG9tYWluIiwidW5zdXBwb3J0ZWRLZXlDaGFyUmVnZXgiLCJSZWdFeHAiLCJ1bnN1cHBvcnRlZFZhbHVlQ2hhclJlZ2V4Iiwic2luZ2xlUXVvdGVSZWdleCIsIkNMRUFSIiwiQ0hBUkdFRF9JRCIsIkNIQVJHRURJRF9DT09LSUVfTkFNRSIsIkdDT09LSUVfTkFNRSIsIktDT09LSUVfTkFNRSIsIkNBTVBfQ09PS0lFX05BTUUiLCJFVl9DT09LSUUiLCJNRVRBX0NPT0tJRSIsIlBSX0NPT0tJRSIsIkFSUF9DT09LSUUiLCJMQ09PS0lFX05BTUUiLCJHTE9CQUwiLCJESVNQTEFZIiwiT1BUT1VUX0tFWSIsIlVTRUlQX0tFWSIsIkxSVV9DQUNIRSIsIklTX09VTCIsIkVWVF9QVVNIIiwiQ09PS0lFX0VYUElSWSIsIkdST1VQX1NVQlNDUklQVElPTl9SRVFVRVNUX0lEIiwiY2F0ZWdvcnlMb25nS2V5IiwiV1pSS19QUkVGSVgiLCJXWlJLX0lEIiwiTk9USUZJQ0FUSU9OX1ZJRVdFRCIsIk5PVElGSUNBVElPTl9DTElDS0VEIiwiRklSRV9QVVNIX1VOUkVHSVNURVJFRCIsIlBVU0hfU1VCU0NSSVBUSU9OX0RBVEEiLCJDT01NQU5EX0lOQ1JFTUVOVCIsIkNPTU1BTkRfREVDUkVNRU5UIiwiQ09NTUFORF9TRVQiLCJDT01NQU5EX0FERCIsIkNPTU1BTkRfUkVNT1ZFIiwiQ09NTUFORF9ERUxFVEUiLCJTWVNURU1fRVZFTlRTIiwiaXNTdHJpbmciLCJpbnB1dCIsIlN0cmluZyIsImlzT2JqZWN0IiwiaXNEYXRlT2JqZWN0IiwiaXNPYmplY3RFbXB0eSIsInByb3AiLCJpc0NvbnZlcnRpYmxlVG9OdW1iZXIiLCJpc05hTiIsInBhcnNlRmxvYXQiLCJpc0Zpbml0ZSIsImlzTnVtYmVyIiwiaXNWYWx1ZVZhbGlkIiwicmVtb3ZlVW5zdXBwb3J0ZWRDaGFycyIsImxvZ2dlciIsInZhbCIsInNhbml0aXplIiwic3Vic3RyaW5nIiwicmVwb3J0RXJyb3IiLCJzYW5pdGl6ZWRWYWwiLCJzYW5pdGl6ZWRLZXkiLCJyZWdleCIsInJlcGxhY2UiLCJnZXRUb2RheSIsInRvZGF5IiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERheSIsImdldE5vdyIsIk1hdGgiLCJmbG9vciIsImdldFRpbWUiLCJjb252ZXJ0VG9XWlJLRGF0ZSIsImRhdGVPYmoiLCJyb3VuZCIsInNldERhdGUiLCJkdCIsImlzRGF0ZVZhbGlkIiwiZGF0ZSIsIm1hdGNoZXMiLCJleGVjIiwiZCIsIm0iLCJ5IiwiY29tcG9zZWREYXRlIiwiZ2V0RGF0ZSIsIlN0b3JhZ2VNYW5hZ2VyIiwiX2lzTG9jYWxTdG9yYWdlU3VwcG9ydGVkIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwiZ2V0SXRlbSIsInBhcnNlIiwicmVtb3ZlSXRlbSIsImRvbWFpbiIsImNvb2tpZVN0ciIsImRvY3VtZW50IiwiY29va2llIiwic2Vjb25kcyIsImV4cGlyZXMiLCJkb21haW5TdHIiLCJzZXRUaW1lIiwidG9HTVRTdHJpbmciLCJlbmNvZGVVUklDb21wb25lbnQiLCJuYW1lRVEiLCJjYSIsInNwbGl0IiwiaWR4IiwiYyIsImNoYXJBdCIsImRlY29kZVVSSUNvbXBvbmVudCIsIndpbmRvdyIsInByb3BlcnR5Iiwic2F2ZSIsImNyZWF0ZUNvb2tpZSIsImxvY2F0aW9uIiwiaG9zdG5hbWUiLCIkY3QiLCJnbG9iYWxDYWNoZSIsInJlYWQiLCJyZWFkQ29va2llIiwidHJpbSIsImJyb2FkRG9tYWluIiwiZG9tYWluUGFydHMiLCJ0ZXN0QnJvYWREb21haW4iLCJ0ZXN0Q29va2llTmFtZSIsInJlbW92ZUNvb2tpZSIsIm1ldGFPYmoiLCJyZWFkRnJvbUxTb3JDb29raWUiLCJ3enJrTWV0YU9iaiIsInNhdmVUb0xTb3JDb29raWUiLCJnZXRNZXRhUHJvcCIsInNldE1ldGFQcm9wIiwiayIsImZsYWciLCJyZXFObyIsImJhY2t1cEFyciIsInEiLCJkZWJ1ZyIsInJlc3BObyIsImJhY2t1cE1hcCIsImdjb29raWUiLCJSRVFfTiIsIlJFU1BfTiIsImdsb2JhbFByb2ZpbGVNYXAiLCJnbG9iYWxFdmVudHNNYXAiLCJibG9ja1JlcXVlc3QiLCJpc09wdEluUmVxdWVzdCIsIndlYlB1c2hFbmFibGVkIiwiY2FtcGFpZ25EaXZNYXAiLCJjdXJyZW50U2Vzc2lvbklkIiwid2l6X2NvdW50ZXIiLCJub3RpZkFwaSIsIm5vdGlmRW5hYmxlZEZyb21BcGkiLCJ1bnN1Ykdyb3VwcyIsInVwZGF0ZWRDYXRlZ29yeUxvbmciLCJpc1ByaXZhY3lBcnJQdXNoZWQiLCJwcml2YWN5QXJyYXkiLCJfa2V5T3JkZXIiLCJfZGVsZXRlRnJvbU9iamVjdCIsIkxSVUNhY2hlIiwibWF4IiwiX2RlbGV0ZUZyb21PYmplY3QyIiwibHJ1Q2FjaGUiLCJ0ZW1wTHJ1Q2FjaGUiLCJlbnRyeSIsImNhY2hlIiwiaXRlbSIsInNhdmVDYWNoZVRvTFMiLCJhbGxLZXlzIiwib2JqVG9BcnJheSIsImluZGV4IiwidGVtcCIsImtleXNBcnIiLCJrZXlzTGVuZ3RoIiwiaW5kZXhUb0RlbGV0ZSIsIm5ld0NhY2hlIiwic3BsaWNlIiwiX2xvZ2dlciIsIl9yZXF1ZXN0IiwiX2RldmljZSIsIl9zZXNzaW9uIiwiQ2xldmVyVGFwQVBJIiwiX3JlZiIsInJlcXVlc3QiLCJkZXZpY2UiLCJzZXNzaW9uIiwiZ2xvYmFsIiwicmVzdW1lIiwicmVzcE51bWJlciIsIm9wdE91dFJlc3BvbnNlIiwicmVtb3ZlQmFja3VwIiwiaXNPVUxJblByb2dyZXNzIiwiZ2V0QW5kQ2xlYXJNZXRhUHJvcCIsImtJZEZyb21MUyIsImxhc3RLIiwiZ2V0U2Vjb25kTGFzdEtleSIsImxhc3RHVUlEIiwidW5yZWdpc3RlclRva2VuRm9yR3VpZCIsImNyZWF0ZUJyb2FkQ29va2llIiwibWFuYWdlU2Vzc2lvbiIsImdldFNlc3Npb25Db29raWVPYmplY3QiLCJ0Iiwic2V0U2Vzc2lvbkNvb2tpZU9iamVjdCIsInByb2Nlc3NpbmdCYWNrdXAiLCJwcm9jZXNzQmFja3VwRXZlbnRzIiwiX2xvZ2dlciQxIiwiRGV2aWNlTWFuYWdlciIsImdldEd1aWQiLCJndWlkIiwiZXJyb3IiLCJEQVRBX05PVF9TRU5UX1RFWFQiLCJDTEVWRVJUQVBfRVJST1JfUFJFRklYIiwiRU1CRURfRVJST1IiLCJFVkVOVF9FUlJPUiIsIkdFTkRFUl9FUlJPUiIsIkVNUExPWUVEX0VSUk9SIiwiTUFSUklFRF9FUlJPUiIsIkVEVUNBVElPTl9FUlJPUiIsIkFHRV9FUlJPUiIsIkRPQl9FUlJPUiIsIkVOVU1fRk9STUFUX0VSUk9SIiwiUEhPTkVfRk9STUFUX0VSUk9SIiwiaXNFdmVudFN0cnVjdHVyZUZsYXQiLCJldmVudE9iaiIsImlzQ2hhcmdlZEV2ZW50U3RydWN0dXJlVmFsaWQiLCJjaGFyZ2VkT2JqIiwiaXRlbUtleSIsImNoYXJnZWRJZCIsIl9sb2dnZXIkMiIsIl9vbGRWYWx1ZXMiLCJfcmVxdWVzdCQxIiwiX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlIiwiX3Byb2Nlc3NFdmVudEFycmF5IiwiRXZlbnRIYW5kbGVyIiwiX0FycmF5IiwiX3N1cGVyIiwidmFsdWVzIiwiX3RoaXMiLCJpc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZSIsIl9wcm9jZXNzRXZlbnRBcnJheTIiLCJfbGVuIiwiZXZlbnRzQXJyIiwiX2tleSIsImV2dE5hbWUiLCJldnRPYmoiLCJyZXNwT2JqIiwiZmlyc3RUaW1lIiwibGFzdFRpbWUiLCJjb3VudCIsImV2ZW50TmFtZSIsInNoaWZ0IiwiaW5jbHVkZXMiLCJldnREYXRhIiwidW5zaGlmdCIsInByb2Nlc3NFdmVudCIsImdldFVSTFBhcmFtcyIsInVybCIsInVybFBhcmFtcyIsIm1hdGNoIiwidXJpIiwicGwiLCJzZWFyY2giLCJkZWNvZGUiLCJyZXBsYWNlbWVudCIsImFkZFRvVVJMIiwidiIsImdldEhvc3ROYW1lIiwiY29tcHJlc3NEYXRhIiwiZGF0YU9iamVjdCIsImNvbXByZXNzVG9CYXNlNjQiLCJfa2V5U3RyIiwiZnJvbUNoYXJDb2RlIiwiZ2V0S2V5U3RyIiwiY2hyMSIsImNocjIiLCJjaHIzIiwiZW5jMSIsImVuYzIiLCJlbmMzIiwiZW5jNCIsIm91dHB1dCIsInVuY29tcHJlc3NlZCIsImlpIiwiY29udGV4dF9kaWN0aW9uYXJ5IiwiY29udGV4dF9kaWN0aW9uYXJ5VG9DcmVhdGUiLCJjb250ZXh0X2MiLCJjb250ZXh0X3djIiwiY29udGV4dF93IiwiY29udGV4dF9lbmxhcmdlSW4iLCJjb250ZXh0X2RpY3RTaXplIiwiY29udGV4dF9udW1CaXRzIiwiY29udGV4dF9kYXRhX3N0cmluZyIsImNvbnRleHRfZGF0YV92YWwiLCJjb250ZXh0X2RhdGFfcG9zaXRpb24iLCJjaGFyQ29kZUF0IiwicG93IiwiY29tcHJlc3MiLCJOYU4iLCJfZmlyZVJlcXVlc3QiLCJfZHJvcFJlcXVlc3REdWVUb09wdE91dCIsIl9hZGRVc2VJUFRvUmVxdWVzdCIsIl9hZGRBUlBUb1JlcXVlc3QiLCJSZXF1ZXN0RGlzcGF0Y2hlciIsInNraXBBUlAiLCJzZW5kT1VMRmxhZyIsInRyaWVzIiwiX3dpbmRvdyRjbGV2ZXJ0YXAiLCJfd2luZG93JHdpenJvY2tldCIsInNldFRpbWVvdXQiLCJjbGV2ZXJ0YXAiLCJ3aXpyb2NrZXQiLCJwbHVnaW4iLCJjdENiU2NyaXB0cyIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiYXN5bmMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImFwcGVuZENoaWxkIiwicGFnZUxvYWRVcmwiLCJ1c2VJUCIsInNraXBSZXNBUlAiLCJfYXJwIiwiZ2V0Q2FtcGFpZ25PYmplY3QiLCJjYW1wT2JqIiwic2F2ZUNhbXBhaWduT2JqZWN0IiwiY2FtcGFpZ25PYmoiLCJnZXRDYW1wYWlnbk9iakZvckxjIiwicmVzdWx0T2JqIiwiZ2xvYmFsT2JqIiwiZGFpbHlPYmoiLCJjYW1wYWlnbklkQXJyYXkiLCJkYWlseUMiLCJ0b3RhbEMiLCJjYW1wYWlnbklkIiwiZWxlbWVudCIsInRvZGF5QyIsInRjIiwid21wIiwidGxjIiwiaXNQcm9maWxlVmFsaWQiLCJwcm9maWxlT2JqIiwidmFsaWQiLCJwcm9maWxlS2V5IiwicHJvZmlsZVZhbCIsIkFnZSIsIlBob25lIiwicHJvY2Vzc0ZCVXNlck9iaiIsInVzZXIiLCJwcm9maWxlRGF0YSIsIk5hbWUiLCJGQklEIiwiZ2VuZGVyIiwiR2VuZGVyIiwicmVsYXRpb25zaGlwX3N0YXR1cyIsIk1hcnJpZWQiLCJlZHUiLCJlZHVBcnIiLCJjb2xsZWdlIiwiaGlnaHNjaG9vbCIsIl9lZHUiLCJ0eXBlIiwiZ2V0SGlnaGVzdEVkdWNhdGlvbiIsImVkdWNhdGlvbiIsIkVkdWNhdGlvbiIsIndvcmsiLCJFbXBsb3llZCIsImVtYWlsIiwiRW1haWwiLCJiaXJ0aGRheSIsIm1tZGR5eSIsIkRPQiIsInByb2Nlc3NHUGx1c1VzZXJPYmoiLCJfcmVmMiIsImRpc3BsYXlOYW1lIiwiR1BJRCIsImltYWdlIiwiaXNEZWZhdWx0IiwiUGhvdG8iLCJlbWFpbHMiLCJlbWFpbElkeCIsImVtYWlsT2JqIiwib3JnYW5pemF0aW9ucyIsInl5eXltbWRkIiwicmVsYXRpb25zaGlwU3RhdHVzIiwiYWRkVG9Mb2NhbFByb2ZpbGVNYXAiLCJvdmVycmlkZSIsIl9jdXN0b20iLCJjbG9zZUlmcmFtZSIsImRpdklkSWdub3JlZCIsInNlc3Npb25DYW1wYWlnbk9iaiIsImRpdklkIiwiZ2V0RWxlbWVudEJ5SWQiLCJzdHlsZSIsImRpc3BsYXkiLCJzZXRFbnVtIiwiZW51bVZhbCIsImhhbmRsZUVtYWlsU3Vic2NyaXB0aW9uIiwic3Vic2NyaXB0aW9uIiwicmVFbmNvZGVkIiwiZmV0Y2hHcm91cHMiLCJhY2NvdW50IiwidXJsUGFyYW1zQXNJcyIsImhyZWYiLCJlbmNvZGVkRW1haWxJZCIsImVuY29kZWRQcm9maWxlUHJvcHMiLCJlbWFpbFVSTCIsImZpcmVSZXF1ZXN0IiwiX2xvZ2dlciQzIiwiX3JlcXVlc3QkMiIsIl9hY2NvdW50IiwiX29sZFZhbHVlcyQxIiwiX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlJDEiLCJfcHJvY2Vzc1Byb2ZpbGVBcnJheSIsIlByb2ZpbGVIYW5kbGVyIiwiX3Byb2Nlc3NQcm9maWxlQXJyYXkyIiwicHJvZmlsZXNBcnIiLCJwcm9wTmFtZSIsImNvbW1hbmQiLCJfJGN0JGdsb2JhbFByb2ZpbGVNYXAiLCJjb25zb2xlIiwidHoiLCJwcm9maWxlIiwiYWRkU3lzdGVtRGF0YVRvUHJvZmlsZU9iamVjdCIsImFkZEZsYWdzIiwiY29tcHJlc3NlZERhdGEiLCJkYXRhUG9zdFVSTCIsInNhdmVBbmRGaXJlUmVxdWVzdCIsImFycmF5VmFsIiwiYXJyYXkiLCJ0b0xvd2VyQ2FzZSIsInNlbmRNdWx0aVZhbHVlRGF0YSIsInByb3BLZXkiLCJwcm9wVmFsIiwicHJvZmlsZUFyciIsIm91dGVyT2JqIiwiU2l0ZSIsIkZhY2Vib29rIiwiRmJQcm9maWxlT2JqIiwiR1BsdXNQcm9maWxlT2JqIiwiYWRkU3lzdGVtRGF0YVRvT2JqZWN0IiwiX3JlcXVlc3QkMyIsIl9sb2dnZXIkNCIsIl9hY2NvdW50JDEiLCJfc2Vzc2lvbiQxIiwiX29sZFZhbHVlcyQyIiwiX2RldmljZSQxIiwiX3Byb2Nlc3NPVUwiLCJfaGFuZGxlQ29va2llRnJvbUNhY2hlIiwiX2RlbGV0ZVVzZXIiLCJfcHJvY2Vzc0xvZ2luQXJyYXkiLCJVc2VyTG9naW5IYW5kbGVyIiwiX3Byb2Nlc3NMb2dpbkFycmF5MiIsIl9kZWxldGVVc2VyMiIsIl9oYW5kbGVDb29raWVGcm9tQ2FjaGUyIiwiX3Byb2Nlc3NPVUwyIiwiX3RoaXMyIiwiYWRkVG9LIiwiaWRzIiwia0lkIiwiZyIsImFub255bW91c1VzZXIiLCJmb3VuZEluQ2FjaGUiLCJnZXRMYXN0S2V5IiwiZ0Zyb21DYWNoZSIsImNsZWFyIiwiSWRlbnRpdHkiLCJjb29raWVOYW1lIiwibG9naW5BcnIiLCJwb3AiLCJzZXRJbnN0YW50RGVsZXRlRmxhZ0luSyIsIkNUV2ViUGVyc29uYWxpc2F0aW9uQmFubmVyIiwiX0hUTUxFbGVtZW50IiwiX2RldGFpbHMiLCJzaGFkb3ciLCJhdHRhY2hTaGFkb3ciLCJtb2RlIiwiaW5uZXJIVE1MIiwiZ2V0QmFubmVyQ29udGVudCIsInRyYWNrQ2xpY2siLCJhZGRFdmVudExpc3RlbmVyIiwib25DbGlja1VybCIsImRldGFpbHMiLCJvbkNsaWNrIiwib3BlbiIsInBhcmVudCIsInJlbmRlck5vdGlmaWNhdGlvbkNsaWNrZWQiLCJtc2dJZCIsInBpdm90SWQiLCJyZW5kZXJOb3RpZmljYXRpb25WaWV3ZWQiLCJkaXZIZWlnaHQiLCJjc3MiLCJkZXNrdG9wSW1hZ2VVUkwiLCJtb2JpbGVJbWFnZVVSTCIsImh0bWwiLCJyZW5kZXJCYW5uZXIiLCJIVE1MRWxlbWVudCIsIkNUV2ViUGVyc29uYWxpc2F0aW9uQ2Fyb3VzZWwiLCJfdGFyZ2V0IiwiX2Nhcm91c2VsIiwic2xpZGVzIiwicHJldmlvdXNseVNlbGVjdGVkSXRlbSIsInNlbGVjdGVkSXRlbSIsImF1dG9TbGlkZSIsInN0b3BBdXRvU2xpZGVUaW1lb3V0IiwiY3VzdG9tRWxlbWVudHMiLCJnZXRTdHlsZXMiLCJjYXJvdXNlbCIsImdldENhcm91c2VsQ29udGVudCIsInNob3dOYXZCdG5zIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwibmF2QnRuc0h0bWwiLCJzaG93TmF2QXJyb3dzIiwibGVmdE5hdkFycm93SHRtbCIsInJpZ2h0TmF2QXJyb3dIdG1sIiwic2V0dXBDbGljayIsInVwZGF0ZVNlbGVjdGVkSXRlbSIsInN0YXJ0QXV0b1NsaWRlIiwic2V0dXBPbkhvdmVyIiwid3pya19pZCIsInd6cmtfcGl2b3QiLCJldmVudCIsImV2ZW50SUQiLCJzdGFydHNXaXRoIiwic2VsZWN0ZWQiLCJlbmRzV2l0aCIsImdvVG9OZXh0IiwiZ29Ub1ByZXYiLCJ3enJrX3NsaWRlTm8iLCJfdGhpczMiLCJjbGVhckludGVydmFsIiwiY2xlYXJUaW1lb3V0IiwiZGV0YWlsIiwiYmFubmVyIiwiY2xhc3NMaXN0IiwiYWRkIiwibmF2QnRuc0NzcyIsIm5hdkFycm93c0NzcyIsInByZXZJdGVtIiwicHJldkJ1dHRvbiIsInJlbW92ZSIsImJ1dHRvbiIsIl90aGlzNCIsInNldEludGVydmFsIiwic2xpZGVyVGltZSIsImdvVG8iLCJwcmV2IiwiY3VyIiwicmVuZGVyQ2Fyb3VzZWwiLCJfdHIiLCJtc2ciLCJleGl0aW50ZW50T2JqIiwiaXNXZWJQb3BVcFNwYW1Db250cm9sRGlzYWJsZWQiLCJfd2l6Q291bnRlciIsImRvQ2FtcEhvdXNlS2VlcGluZyIsInRhcmdldGluZ01zZ0pzb24iLCJpbmNyQ291bnQiLCJleGNsdWRlRnJvbUZyZXFDYXBzIiwiY3VycmVudENvdW50IiwidG90YWxDb3VudCIsInNlc3Npb25TdG9yYWdlIiwid21jIiwiY2FtcGFpZ25TZXNzaW9uTGltaXQiLCJjYW1wYWlnbkRhaWx5TGltaXQiLCJjYW1wYWlnblRvdGFsTGltaXQiLCJ0b3RhbERhaWx5TGltaXQiLCJ0b3RhbFNlc3Npb25MaW1pdCIsImVmYyIsInBhcnNlSW50IiwibWRjIiwidGRjIiwiX3Nlc3Npb25PYmoiLCJzZXNzaW9uSWQiLCJjYW1wYWlnblNlc3Npb25Db3VudCIsInRvdGFsU2Vzc2lvbkNvdW50IiwiY2FtcGFpZ25EYWlseUNvdW50IiwidG90YWxEYWlseUNvdW50IiwiY2FtcGFpZ25Ub3RhbENvdW50IiwiZGVsYXkiLCJzZXNzaW9uT2JqIiwibmV3Q2FtcE9iaiIsImdldENvb2tpZVBhcmFtcyIsInNjb29raWVPYmoiLCJpbnZva2VFeHRlcm5hbEpzIiwianNGdW5jIiwiZnVuYyIsImt2Iiwic2V0dXBDbGlja1VybCIsImNvbnRlbnREaXYiLCJpc0xlZ2FjeSIsImluY3JlbWVudEltcHJlc3Npb24iLCJjdGFFbGVtZW50IiwianNDVEFFbGVtZW50cyIsImlzUHJldmlldyIsInByZXZpZXciLCJvbmNsaWNrIiwic2V0dXBDbGlja0V2ZW50IiwicmVuZGVyRm9vdGVyTm90aWZpY2F0aW9uIiwiZGlzcGxheU9iaiIsInd0YXJnZXRfdHlwZSIsIm1zZ0NvbnRlbnQiLCJpbmFPYmoiLCJrdlBhaXJzRXZlbnQiLCJDdXN0b21FdmVudCIsImRpc3BhdGNoRXZlbnQiLCJfZGl2SWQiLCJiYW5uZXJFbCIsImNvbnRhaW5lckVsIiwicmVuZGVyUGVyc29uYWxpc2F0aW9uQmFubmVyIiwiX2RpdklkMiIsImNvbnRhaW5lciIsInJlbmRlclBlcnNvbmFsaXNhdGlvbkNhcm91c2VsIiwibGF5b3V0Iiwic2hvd0V4aXRJbnRlbnQiLCJpc0Jhbm5lciIsIm1zZ0RpdiIsInZpZXdIZWlnaHQiLCJpbm5lckhlaWdodCIsInZpZXdXaWR0aCIsImlubmVyV2lkdGgiLCJsZWdhY3kiLCJpRnJhbWVTdHlsZSIsImNvbnRlbnRIZWlnaHQiLCJyaWdodCIsImJvdHRvbVBvc2l0aW9uIiwid2lkdGgiLCJ3aWR0aFBlcmN0IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwicHJvdG8iLCJib2R5IiwiaWZyYW1lIiwiYm9yZGVyUmFkaXVzIiwiYnIiLCJmcmFtZWJvcmRlciIsIm1hcmdpbmhlaWdodCIsIm1hcmdpbndpZHRoIiwic2Nyb2xsaW5nIiwicG9pbnRlckNzcyIsImJnQ29sb3IiLCJ0ZXh0Q29sb3IiLCJidG5CZyIsImxlZnRUZCIsImJ0Q29sb3IiLCJ0aGVtZSIsInRpdGxlVGV4dCIsInRpdGxlIiwiZGVzY3JpcHRpb25UZXh0IiwiZGVzY3JpcHRpb24iLCJpbWFnZVRkIiwiaW1hZ2VVcmwiLCJkb2MiLCJjb250ZW50V2luZG93IiwiY29udGVudERvY3VtZW50Iiwid3JpdGUiLCJhcHBlbmRTY3JpcHRGb3JDdXN0b21FdmVudCIsImNsb3NlIiwiYWRqdXN0SUZyYW1lSGVpZ2h0Iiwic2Nyb2xsSGVpZ2h0IiwibWFyZ2luIiwiaGVpZ2h0IiwidWEiLCJvbmxvYWQiLCJpbkRvYyIsIl90aW1lciIsInJlYWR5U3RhdGUiLCJzY3JpcHQiLCJfY2FsbEJhY2tDYWxsZWQiLCJzaG93Rm9vdGVyTm90aWZpY2F0aW9uIiwibm90aWZpY2F0aW9uQ2FsbGJhY2siLCJyYWlzZU5vdGlmaWNhdGlvbkNsaWNrZWQiLCJyYWlzZU5vdGlmaWNhdGlvblZpZXdlZCIsInBvcHVwQ3VycmVudFd6cmtJZCIsInBvcHVwQ2FsbGJhY2tzIiwicG9wdXBDYWxsYmFjayIsIl9pbmFPYmoiLCJtc2dDVGt2Iiwid3pya1ByZWZpeEtleSIsInd6cmtKc29uIiwicmFpc2VQb3B1cE5vdGlmaWNhdGlvbkNsaWNrZWQiLCJub3RpZmljYXRpb25EYXRhIiwiZXZlbnREYXRhIiwiX3N0ZXAiLCJfaXRlcmF0b3IiLCJ3enJrUHJlZml4T2JqIiwidGFyZ2V0T2JqIiwiY2xpZW50WSIsIm9wYWNpdHlEaXYiLCJjdGFUZXh0IiwiaW5hcHBfbm90aWZzIiwidGFyZ2V0Tm90aWYiLCJvbm1vdXNlbGVhdmUiLCJldnByIiwiZXZlbnRzTWFwIiwiZXZlbnRzIiwicHJvZmlsZU1hcCIsInN5bmNFeHBpcnkiLCJleHBpcmVzX2luIiwibm93IiwibmV3RXZ0TWFwIiwib2xkRXZ0T2JqIiwibmV3RXZ0T2JqIiwibWVyZ2VFdmVudE1hcCIsImFycCIsImpzb25NYXAiLCJpc09VTEFSUCIsImFycEZyb21TdG9yYWdlIiwiaW5hcHBfc3RhbGUiLCJfaXNQZXJzb25hbGlzYXRpb25BY3RpdmUkMiIsIlVzZXIiLCJ2aXNpdENvdW50IiwicHJldlNlc3Npb24iLCJsb2dMZXZlbHMiLCJfbG9nTGV2ZWwiLCJfbG9nIiwiX2lzTGVnYWN5RGVidWciLCJMb2dnZXIiLCJsb2dMZXZlbCIsIl9nZXRfaXNMZWdhY3lEZWJ1ZyIsIl9sb2cyIiwid3pya0Vycm9yIiwibWVzc2FnZSIsImNvZGUiLCJsZXZlbCIsInRzIiwiV1pSS19EIiwiX2xvZ2dlciQ1IiwiX3Nlc3Npb25JZCIsIl9pc1BlcnNvbmFsaXNhdGlvbkFjdGl2ZSQzIiwiU2Vzc2lvbk1hbmFnZXIiLCJzY29va2llU3RyIiwiU0NPT0tJRV9FWFBfVElNRV9JTl9TRUNTIiwib2JqU3RyIiwiY3VycmVudFNlc3Npb25JbkxTIiwic2Vzc2lvbkNvdW50Iiwic2Vzc2lvblN0YXJ0Iiwic2VxTm8iLCJyZXF1ZXN0VGltZSIsIl9sb2dnZXIkNiIsIl9hY2NvdW50JDIiLCJfZGV2aWNlJDIiLCJfc2Vzc2lvbiQyIiwiX2lzUGVyc29uYWxpc2F0aW9uQWN0aXZlJDQiLCJfY2xlYXJDb29raWUiLCJfYWRkVG9Mb2NhbEV2ZW50TWFwIiwiUmVxdWVzdE1hbmFnZXIiLCJfYWRkVG9Mb2NhbEV2ZW50TWFwMiIsImJhY2t1cEV2ZW50IiwiZmlyZWQiLCJpZ25vcmVUcmltIiwid3pya19lcnJvciIsInBnIiwicmMiLCJsYXN0U3luY1RpbWUiLCJleHBpcnlTZWNvbmRzIiwiZHN5bmMiLCJnaXZlbkdVSUQiLCJwYXlsb2FkIiwiYWN0aW9uIiwicmVnaXN0ZXJUb2tlbiIsIm5vd1RzIiwiZXZ0RGV0YWlsIiwiX3JlcXVlc3QkNCIsIl9hY2NvdW50JDMiLCJfb2xkVmFsdWVzJDMiLCJfbG9nZ2VyJDciLCJfcHJvY2Vzc1ByaXZhY3lBcnJheSIsIlByaXZhY3kiLCJfcHJvY2Vzc1ByaXZhY3lBcnJheTIiLCJwcml2YWN5QXJyIiwiXyRjdCRwcml2YWN5QXJyYXkiLCJwcml2YWN5T2JqIiwicmVkdWNlIiwiY3VyciIsIm9wdE91dCIsInNob3VsZFVzZUlQIiwiX29sZFZhbHVlcyQ0IiwiX2xvZ2dlciQ4IiwiX3JlcXVlc3QkNSIsIl9hY2NvdW50JDQiLCJfd2l6QWxlcnRKU1BhdGgiLCJfZmNtUHVibGljS2V5IiwiX3NldFVwV2ViUHVzaCIsIl9zZXRVcFdlYlB1c2hOb3RpZmljYXRpb25zIiwiX3NldEFwcGxpY2F0aW9uU2VydmVyS2V5IiwiX3NldFVwU2FmYXJpTm90aWZpY2F0aW9ucyIsIl9zZXRVcENocm9tZUZpcmVmb3hOb3RpZmljYXRpb25zIiwiX2FkZFdpekFsZXJ0SlMiLCJfcmVtb3ZlV2l6QWxlcnRKUyIsIl9oYW5kbGVOb3RpZmljYXRpb25SZWdpc3RyYXRpb24iLCJOb3RpZmljYXRpb25IYW5kbGVyIiwiX2hhbmRsZU5vdGlmaWNhdGlvblJlZ2lzdHJhdGlvbjIiLCJfcmVtb3ZlV2l6QWxlcnRKUzIiLCJfYWRkV2l6QWxlcnRKUzIiLCJfc2V0VXBDaHJvbWVGaXJlZm94Tm90aWZpY2F0aW9uczIiLCJfc2V0VXBTYWZhcmlOb3RpZmljYXRpb25zMiIsIl9zZXRBcHBsaWNhdGlvblNlcnZlcktleTIiLCJfc2V0VXBXZWJQdXNoTm90aWZpY2F0aW9uczIiLCJfc2V0VXBXZWJQdXNoMiIsImRpc3BsYXlBcmdzIiwiZW5hYmxlZCIsImFwcGxpY2F0aW9uU2VydmVyS2V5Iiwic3Vic2NyaXB0aW9uQ2FsbGJhY2siLCJzZXJ2aWNlV29ya2VyUGF0aCIsImFwbnNXZWJQdXNoSWQiLCJhcG5zU2VydmljZVVybCIsInNhZmFyaSIsInB1c2hOb3RpZmljYXRpb24iLCJyZXF1ZXN0UGVybWlzc2lvbiIsInBlcm1pc3Npb24iLCJzdWJzY3JpcHRpb25EYXRhIiwiZW5kcG9pbnQiLCJkZXZpY2VUb2tlbiIsImJyb3dzZXIiLCJpbmZvIiwicmVnaXN0cmF0aW9uU2NvcGUiLCJzZXJ2aWNlV29ya2VyIiwicmVnaXN0ZXIiLCJ0aGVuIiwicmVnaXN0cmF0aW9uIiwiX193enJrX2FjY291bnRfaWQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNjb3BlIiwicmVhZHkiLCJnZXRSZWdpc3RyYXRpb25zIiwic2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbiIsInN1YnNjcmliZU9iaiIsInVzZXJWaXNpYmxlT25seSIsImJhc2U2NFN0cmluZyIsImJhc2U2NCIsInJlcGVhdCIsInJhd0RhdGEiLCJhdG9iIiwicHJvY2Vzc2VkRGF0YSIsIlVpbnQ4QXJyYXkiLCJ1cmxCYXNlNjRUb1VpbnQ4QXJyYXkiLCJwdXNoTWFuYWdlciIsInN1YnNjcmliZSIsImNhdGNoIiwiZ2V0U3Vic2NyaXB0aW9uIiwidW5zdWJzY3JpYmUiLCJzdWNjZXNzZnVsIiwic2NyaXB0VGFnIiwiYm9keVRleHQiLCJva0J1dHRvblRleHQiLCJyZWplY3RCdXR0b25UZXh0Iiwib2tCdXR0b25Db2xvciIsInNraXBEaWFsb2ciLCJhc2tBZ2FpblRpbWVJblNlY29uZHMiLCJva0NhbGxiYWNrIiwicmVqZWN0Q2FsbGJhY2siLCJoaWRlUG93ZXJlZEJ5Q1QiLCJodHRwc1BvcHVwUGF0aCIsImh0dHBzSWZyYW1lUGF0aCIsImFwbnNXZWJQdXNoU2VydmljZVVybCIsIm5vdGlmT2JqIiwiaXNIVFRQIiwicHJvdG9jb2wiLCJjaHJvbWVBZ2VudCIsImZpcmVmb3hBZ2VudCIsInNhZmFyaUFnZW50IiwiTm90aWZpY2F0aW9uIiwiaHR0cHNJZnJhbWUiLCJzdGF0ZSIsInd6cmtQZXJtaXNzaW9uUG9wdXAiLCJ3aXpBbGVydCIsImNvbmZpcm1CdXR0b25UZXh0IiwiY29uZmlybUJ1dHRvbkNvbG9yIiwiX2xvZ2dlciQ5IiwiX2FwaSIsIl9vbmxvYWRjYWxsZWQiLCJfZGV2aWNlJDMiLCJfc2Vzc2lvbiQzIiwiX2FjY291bnQkNSIsIl9yZXF1ZXN0JDYiLCJfaXNTcGEiLCJfcHJldmlvdXNVcmwiLCJfYm91bmRDaGVja1BhZ2VDaGFuZ2VkIiwiX2lzV2ViUG9wVXBTcGFtQ29udHJvbERpc2FibGVkIiwiX3Byb2Nlc3NPbGRWYWx1ZXMiLCJfY2hlY2tQYWdlQ2hhbmdlZCIsIl9waW5nUmVxdWVzdCIsIl9pc1BpbmdDb250aW51b3VzIiwiX292ZXJyaWRlRFN5bmNGbGFnIiwiQ2xldmVyVGFwIiwiX2NsZXZlcnRhcCRhY2NvdW50IiwiX2NsZXZlcnRhcCRhY2NvdW50MiIsIl9jbGV2ZXJ0YXAkYWNjb3VudDMiLCJfY2xldmVydGFwJGFjY291bnQ0IiwiX292ZXJyaWRlRFN5bmNGbGFnMiIsIl9pc1BpbmdDb250aW51b3VzMiIsIl9waW5nUmVxdWVzdDIiLCJfY2hlY2tQYWdlQ2hhbmdlZDIiLCJfcHJvY2Vzc09sZFZhbHVlczIiLCJlbmFibGVQZXJzb25hbGl6YXRpb24iLCJvblVzZXJMb2dpbiIsInByaXZhY3kiLCJub3RpZmljYXRpb25zIiwic3BhIiwiZGlzbWlzc1NwYW1Db250cm9sIiwiZ2V0VGltZUVsYXBzZWQiLCJnZXRQYWdlQ291bnQiLCJsb2dvdXQiLCJnZXRDbGV2ZXJUYXBJRCIsImdldEFjY291bnRJRCIsImdldFNDRG9tYWluIiwic2V0U0NTREtWZXJzaW9uIiwidmVyIiwic2NTREtWZXJzaW9uIiwiYWYiLCJzY3YiLCJwcm9jZXNzTm90aWZpY2F0aW9uRXZlbnQiLCJldmVudERldGFpbCIsInNldExvZ0xldmVsIiwibCIsIk51bWJlciIsImhhbmRsZUluY3JlbWVudFZhbHVlIiwiX2hhbmRsZUluY3JlbWVudERlY3JlbWVudFZhbHVlIiwiaGFuZGxlRGVjcmVtZW50VmFsdWUiLCJzZXRNdWx0aVZhbHVlc0ZvcktleSIsIl9oYW5kbGVNdWx0aVZhbHVlU2V0IiwiYWRkTXVsdGlWYWx1ZUZvcktleSIsIl9oYW5kbGVNdWx0aVZhbHVlQWRkIiwiYWRkTXVsdGlWYWx1ZXNGb3JLZXkiLCJyZW1vdmVNdWx0aVZhbHVlRm9yS2V5IiwiX2hhbmRsZU11bHRpVmFsdWVSZW1vdmUiLCJyZW1vdmVNdWx0aVZhbHVlc0ZvcktleSIsInJlbW92ZVZhbHVlRm9yS2V5IiwiX2hhbmRsZU11bHRpVmFsdWVEZWxldGUiLCJfaGFuZGxlRW1haWxTdWJzY3JpcHRpb24iLCJhcGkiLCJlbmFibGVXZWJQdXNoIiwiX2VuYWJsZVdlYlB1c2giLCJ0ciIsImlzX29ubG9hZGNhbGxlZCIsInN1YkVtYWlsIiwiZ2V0RW1haWwiLCJ3aXRoR3JvdXBzIiwidW5TdWJFbWFpbCIsInVuc3ViRW1haWxHcm91cHMiLCJlbGVtZW50cyIsImlzVW5zdWJzY3JpYmVkIiwiY2hlY2tlZCIsInNldFN1YnNjcmlwdGlvbkdyb3VwcyIsImdldFN1YnNjcmlwdGlvbkdyb3VwcyIsImNoYW5nZVN1YnNjcmlwdGlvbkdyb3VwcyIsInVwZGF0ZWRHcm91cHMiLCJzZXRVcGRhdGVkQ2F0ZWdvcnlMb25nIiwiJENMVFBfV1IiLCIkV1pSS19XUiIsImluaXQiLCJpc1NwYSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJTQ09PS0lFX1BSRUZJWCIsImN1cnJMb2NhdGlvbiIsInd6cmtfZXgiLCJwYWdlQ2hhbmdlZCIsInBnQ291bnQiLCJyZWZlcnJlckRvbWFpbiIsImdldERvbWFpbiIsInJlZmVycmVyIiwibWF4TGVuIiwidXRtU291cmNlIiwidXRtX3NvdXJjZSIsInd6cmtfc291cmNlIiwidXMiLCJ1dG1NZWRpdW0iLCJ1dG1fbWVkaXVtIiwid3pya19tZWRpdW0iLCJ1bSIsInV0bUNhbXBhaWduIiwidXRtX2NhbXBhaWduIiwid3pya19jYW1wYWlnbiIsInVjIiwid20iLCJjcGciLCJsaWIiLCJjYWxsYmFjayIsInd6cmtfZCIsInBpbmciLCJIQVNIX1VOREVGSU5FRCIsIk1BWF9TQUZFX0lOVEVHRVIiLCJhcmdzVGFnIiwiYXJyYXlUYWciLCJib29sVGFnIiwiZGF0ZVRhZyIsImVycm9yVGFnIiwiZnVuY1RhZyIsIm1hcFRhZyIsIm51bWJlclRhZyIsIm9iamVjdFRhZyIsInByb21pc2VUYWciLCJyZWdleHBUYWciLCJzZXRUYWciLCJzdHJpbmdUYWciLCJ3ZWFrTWFwVGFnIiwiYXJyYXlCdWZmZXJUYWciLCJkYXRhVmlld1RhZyIsInJlSXNIb3N0Q3RvciIsInJlSXNVaW50IiwidHlwZWRBcnJheVRhZ3MiLCJmcmVlR2xvYmFsIiwiZnJlZVNlbGYiLCJmcmVlRXhwb3J0cyIsIm5vZGVUeXBlIiwiZnJlZU1vZHVsZSIsIm1vZHVsZUV4cG9ydHMiLCJmcmVlUHJvY2VzcyIsInByb2Nlc3MiLCJub2RlVXRpbCIsImJpbmRpbmciLCJub2RlSXNUeXBlZEFycmF5IiwiaXNUeXBlZEFycmF5IiwiYXJyYXlTb21lIiwicHJlZGljYXRlIiwibWFwVG9BcnJheSIsIm1hcCIsInNpemUiLCJzZXRUb0FycmF5IiwidWlkIiwidHJhbnNmb3JtIiwiYXJyYXlQcm90byIsImZ1bmNQcm90byIsIm9iamVjdFByb3RvIiwiY29yZUpzRGF0YSIsImZ1bmNUb1N0cmluZyIsIm1hc2tTcmNLZXkiLCJJRV9QUk9UTyIsIm5hdGl2ZU9iamVjdFRvU3RyaW5nIiwicmVJc05hdGl2ZSIsIkJ1ZmZlciIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwic3ltVG9TdHJpbmdUYWciLCJ0b1N0cmluZ1RhZyIsIm5hdGl2ZUdldFN5bWJvbHMiLCJuYXRpdmVJc0J1ZmZlciIsImlzQnVmZmVyIiwibmF0aXZlS2V5cyIsImFyZyIsIkRhdGFWaWV3IiwiZ2V0TmF0aXZlIiwiU2V0IiwiV2Vha01hcCIsIm5hdGl2ZUNyZWF0ZSIsImRhdGFWaWV3Q3RvclN0cmluZyIsInRvU291cmNlIiwibWFwQ3RvclN0cmluZyIsInByb21pc2VDdG9yU3RyaW5nIiwic2V0Q3RvclN0cmluZyIsIndlYWtNYXBDdG9yU3RyaW5nIiwic3ltYm9sUHJvdG8iLCJzeW1ib2xWYWx1ZU9mIiwidmFsdWVPZiIsIkhhc2giLCJlbnRyaWVzIiwiTGlzdENhY2hlIiwiTWFwQ2FjaGUiLCJTZXRDYWNoZSIsIl9fZGF0YV9fIiwiU3RhY2siLCJhc3NvY0luZGV4T2YiLCJlcSIsImJhc2VHZXRUYWciLCJpc093biIsInRhZyIsInVubWFza2VkIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJiYXNlSXNBcmd1bWVudHMiLCJpc09iamVjdExpa2UiLCJiYXNlSXNFcXVhbCIsIm90aGVyIiwiYml0bWFzayIsImN1c3RvbWl6ZXIiLCJzdGFjayIsImVxdWFsRnVuYyIsIm9iaklzQXJyIiwib3RoSXNBcnIiLCJvYmpUYWciLCJnZXRUYWciLCJvdGhUYWciLCJvYmpJc09iaiIsIm90aElzT2JqIiwiaXNTYW1lVGFnIiwiZXF1YWxBcnJheXMiLCJieXRlTGVuZ3RoIiwiYnl0ZU9mZnNldCIsImJ1ZmZlciIsImNvbnZlcnQiLCJpc1BhcnRpYWwiLCJzdGFja2VkIiwiZXF1YWxCeVRhZyIsIm9iaklzV3JhcHBlZCIsIm90aElzV3JhcHBlZCIsIm9ialVud3JhcHBlZCIsIm90aFVud3JhcHBlZCIsIm9ialByb3BzIiwiZ2V0QWxsS2V5cyIsIm9iakxlbmd0aCIsInNraXBDdG9yIiwib2JqVmFsdWUiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib2JqQ3RvciIsIm90aEN0b3IiLCJlcXVhbE9iamVjdHMiLCJiYXNlSXNFcXVhbERlZXAiLCJhcnJMZW5ndGgiLCJvdGhMZW5ndGgiLCJzZWVuIiwiYXJyVmFsdWUiLCJvdGhJbmRleCIsImtleXNGdW5jIiwic3ltYm9sc0Z1bmMiLCJvZmZzZXQiLCJhcnJheVB1c2giLCJiYXNlR2V0QWxsS2V5cyIsImdldFN5bWJvbHMiLCJnZXRNYXBEYXRhIiwiZ2V0VmFsdWUiLCJpc01hc2tlZCIsImlzRnVuY3Rpb24iLCJiYXNlSXNOYXRpdmUiLCJwYWlycyIsIkxBUkdFX0FSUkFZX1NJWkUiLCJyZXNJbmRleCIsInN5bWJvbCIsImFycmF5RmlsdGVyIiwiaXNJbmRleCIsIkFycmF5QnVmZmVyIiwiQ3RvciIsImN0b3JTdHJpbmciLCJpc0FyZ3VtZW50cyIsImlzTGVuZ3RoIiwiYmFzZVVuYXJ5IiwiaW5oZXJpdGVkIiwiaXNBcnIiLCJpc0FyZyIsImlzQnVmZiIsImlzVHlwZSIsInNraXBJbmRleGVzIiwiaXRlcmF0ZWUiLCJiYXNlVGltZXMiLCJhcnJheUxpa2VLZXlzIiwiYmFzZUtleXMiLCJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiQ29uc3RhbnRzXzEiLCJBcmdzQnVpbGRlciIsImFyZ1N0cmluZyIsImFyZ1ZhbHVlcyIsIl9ib2R5IiwiYXR0YWNoQXBpS2V5cyIsImFwcElkIiwiY2xpZW50S2V5IiwiZGVmYXVsdCIsIlBBUkFNUyIsIkFQUF9JRCIsIkNMSUVOVCIsIkNMSUVOVF9LRVkiLCJidWlsZCIsImJ1aWxkRGljdCIsIkJyb3dzZXJEZXRlY3RvciIsInduZCIsInNlYXJjaFN0cmluZyIsImdldEJyb3dzZXJEYXRhIiwidmVyc2lvbiIsInNlYXJjaFZlcnNpb24iLCJhcHBWZXJzaW9uIiwiT1MiLCJnZXRPU0RhdGEiLCJkYXRhU3RyaW5nIiwic3RyaW5nIiwiZGF0YVByb3AiLCJ2ZXJzaW9uU2VhcmNoU3RyaW5nIiwidmVyc2lvblNlYXJjaCIsImlkZW50aXR5Iiwic3ViU3RyaW5nIiwidmVuZG9yIiwib3BlcmEiLCJwbGF0Zm9ybSIsIk1FVEhPRFMiLCJTVEFSVCIsIlNUT1AiLCJBRFZBTkNFIiwiVFJBQ0siLCJQQVVTRV9TRVNTSU9OIiwiUkVTVU1FX1NFU1NJT04iLCJQQVVTRV9TVEFURSIsIlJFU1VNRV9TVEFURSIsIkRPV05MT0FEX0ZJTEUiLCJNVUxUSSIsIlNFVF9WQVJTIiwiR0VUX1ZBUlMiLCJTRVRfVVNFUl9BVFRSSUJVVEVTIiwiU0VUX0RFVklDRV9BVFRSSUJVVEVTIiwiVVBMT0FEX0ZJTEUiLCJSRUdJU1RFUl9ERVZJQ0UiLCJTREtfVkVSU0lPTiIsIkFDVElPTiIsIkNUIiwiQ1VSUkVOQ1lfQ09ERSIsIkRFVklDRV9JRCIsIlVTRVJfSUQiLCJORVdfVVNFUl9JRCIsIkRFVl9NT0RFIiwiVkVSU0lPTl9OQU1FIiwiU1lTVEVNX05BTUUiLCJTWVNURU1fVkVSU0lPTiIsIkJST1dTRVJfTkFNRSIsIkJST1dTRVJfVkVSU0lPTiIsIkRFVklDRV9OQU1FIiwiREVWSUNFX01PREVMIiwiVVNFUl9BVFRSSUJVVEVTIiwiTE9DQUxFIiwiQ09VTlRSWSIsIlJFR0lPTiIsIkNJVFkiLCJMT0NBVElPTiIsIlNUQVRFIiwiSU5GTyIsIkVWRU5UIiwiVkFMVUUiLCJGSUxFTkFNRSIsIlRJTUUiLCJEQVRBIiwiVkFSUyIsIkZJTEUiLCJTSVpFIiwiVkFSSUFUSU9OIiwiSEFTSCIsIkVNQUlMIiwiVkFSSUFCTEVTIiwiQUNUSU9OX0RFRklOSVRJT05TIiwiSU5DTFVERV9ERUZBVUxUUyIsIklOQ0xVREVfVkFSSUFOVF9ERUJVR19JTkZPIiwiTkVXU0ZFRURfTUVTU0FHRVMiLCJNRVNTQUdFX0lEIiwiV0VCX1BVU0hfU1VCU0NSSVBUSU9OIiwiS0VZUyIsIklTX1JFR0lTVEVSRUQiLCJMQVRFU1RfVkVSU0lPTiIsIlNZTkNfSU5CT1giLCJNRVNTQUdFUyIsIlZBUklBTlRTIiwiVkFSSUFOVF9ERUJVR19JTkZPIiwiVE9LRU4iLCJERUZBVUxUX0tFWVMiLCJDT1VOVCIsIklURU0iLCJIT1NUX0NPTkZJRyIsIklOQk9YX01FU1NBR0VTIiwiU0VTU0lPTiIsIk1FU1NBR0VfT0NDVVJSRU5DRVMiLCJNRVNTQUdFX0NBQ0hFIiwiTUlHUkFUSU9OX1NUQVRFIiwiUFVTSF9TVUJTQ1JJUFRJT04iLCJWQUxVRVMiLCJERVRFQ1QiLCJERUZBVUxUX1BVU0hfQUNUSU9OIiwiRXZlbnRFbWl0dGVyIiwiaGFuZGxlcnMiLCJvbiIsIm9mZiIsIngiLCJlbWl0IiwiaGFuZGxlciIsIkludGVybmFsU3RhdGUiLCJzdGFydEhhbmRsZXJzIiwiZGV2TW9kZSIsImhhc1N0YXJ0ZWQiLCJzdGFydFN1Y2Nlc3NmdWwiLCJ2YXJpYW50RGVidWdJbmZvRW5hYmxlZCIsImFkZFN0YXJ0UmVzcG9uc2VIYW5kbGVyIiwicmVtb3ZlU3RhcnRSZXNwb25zZUhhbmRsZXIiLCJ0cmlnZ2VyU3RhcnRIYW5kbGVycyIsIkxlYW5wbHVtSW50ZXJuYWxfMSIsIkxlYW5wbHVtIiwic2V0QXBpUGF0aCIsImFwaVBhdGgiLCJfbHAiLCJzZXRFbWFpbCIsInNldE5ldHdvcmtUaW1lb3V0Iiwic2V0QXBwSWRGb3JEZXZlbG9wbWVudE1vZGUiLCJhY2Nlc3NLZXkiLCJzZXRBcHBJZEZvclByb2R1Y3Rpb25Nb2RlIiwic2V0U29ja2V0SG9zdCIsImhvc3QiLCJzZXREZXZpY2VJZCIsImRldmljZUlkIiwic2V0TG9jYWxlIiwibG9jYWxlIiwic2V0QXBwVmVyc2lvbiIsInZlcnNpb25OYW1lIiwic2V0RGV2aWNlTmFtZSIsImRldmljZU5hbWUiLCJzZXREZXZpY2VNb2RlbCIsImRldmljZU1vZGVsIiwic2V0UmVxdWVzdEJhdGNoaW5nIiwiYmF0Y2hFbmFibGVkIiwiY29vbGRvd25TZWNvbmRzIiwic2V0U3lzdGVtTmFtZSIsInN5c3RlbU5hbWUiLCJzZXRTeXN0ZW1WZXJzaW9uIiwic3lzdGVtVmVyc2lvbiIsInNldFZhcmlhYmxlcyIsInZhcmlhYmxlcyIsInNldFZhcmlhbnREZWJ1Z0luZm9FbmFibGVkIiwiZW5hYmxlUmljaEluQXBwTWVzc2FnZXMiLCJwcm9jZXNzTWVzc2FnZUV2ZW50IiwibWVzc2FnZUlkIiwiZ2V0VmFyaWFudERlYnVnSW5mbyIsImdldFZhcmlhYmxlcyIsImdldFZhcmlhYmxlIiwiX2EiLCJfaSIsImdldFZhcmlhbnRzIiwiaW5ib3giLCJhZGRWYXJpYWJsZXNDaGFuZ2VkSGFuZGxlciIsInJlbW92ZVZhcmlhYmxlc0NoYW5nZWRIYW5kbGVyIiwiZm9yY2VDb250ZW50VXBkYXRlIiwidXNlU2Vzc2lvbkxlbmd0aCIsInN0YXJ0IiwidXNlcklkIiwidXNlckF0dHJpYnV0ZXMiLCJzdGFydEZyb21DYWNoZSIsInN0b3AiLCJwYXVzZVNlc3Npb24iLCJyZXN1bWVTZXNzaW9uIiwicGF1c2VTdGF0ZSIsInJlc3VtZVN0YXRlIiwiZ2V0VXNlcklkIiwic2V0VXNlcklkIiwic2V0VXNlckF0dHJpYnV0ZXMiLCJ0cmFjayIsInBhcmFtcyIsInRyYWNrUHVyY2hhc2UiLCJjdXJyZW5jeUNvZGUiLCJhZHZhbmNlVG8iLCJpc1dlYlB1c2hTdXBwb3J0ZWQiLCJpc1dlYlB1c2hTdWJzY3JpYmVkIiwic2V0V2ViUHVzaE9wdGlvbnMiLCJvcHRpb25zIiwicmVnaXN0ZXJGb3JXZWJQdXNoIiwic2VydmljZVdvcmtlclVybCIsInVucmVnaXN0ZXJGcm9tV2ViUHVzaCIsImNsZWFyVXNlckNvbnRlbnQiLCJkZWZpbmVBY3Rpb24iLCJhcHBseVF1ZXVlIiwicXVldWUiLCJnZXRGaWxlVXJsIiwiZmlsZW5hbWUiLCJfX2Rlc3Ryb3kiLCJWRVJTSU9OIiwiX19hc3NpZ24iLCJhc3NpZ24iLCJMZWFucGx1bUluYm94TWVzc2FnZSIsIkFyZ3NCdWlsZGVyXzEiLCJTdG9yYWdlTWFuYWdlcl8xIiwiTGVhbnBsdW1JbmJveCIsImNyZWF0ZVJlcXVlc3QiLCJvbkFjdGlvbiIsIm1lc3NhZ2VNYXAiLCJjaGFuZ2VIYW5kbGVycyIsImxvYWQiLCJkb3dubG9hZE1lc3NhZ2VzIiwicXVldWVkIiwic2VuZE5vdyIsInJlc3BvbnNlIiwibmV3c2ZlZWRNZXNzYWdlcyIsInRyaWdnZXJDaGFuZ2VIYW5kbGVycyIsIm1hcmtBc1JlYWQiLCJpc1JlYWQiLCJpbmJveE1lc3NhZ2UiLCJvcGVuQWN0aW9uIiwib25DaGFuZ2VkIiwidW5yZWFkQ291bnQiLCJtZXNzYWdlcyIsImFsbE1lc3NhZ2VzIiwidW5yZWFkTWVzc2FnZXMiLCJtZXNzYWdlSWRzIiwiX2lkIiwiX3RpdGxlIiwiX3N1YnRpdGxlIiwiX2RhdGEiLCJfdGltZXN0YW1wIiwiX2lzUmVhZCIsIl9pbWFnZVVybCIsIl9vcGVuQWN0aW9uIiwibWVzc2FnZUluZm8iLCJfYiIsIl9jIiwiX2QiLCJfZSIsIl9mIiwiX2ciLCJfaCIsIl9qIiwiX2siLCJfbCIsInBhcmVudENhbXBhaWduSWQiLCJtZXNzYWdlRGF0YSIsInZhcnMiLCJUaXRsZSIsIlN1YnRpdGxlIiwiRGF0YSIsImRlbGl2ZXJ5VGltZXN0YW1wIiwiSW1hZ2UiLCJzdWJ0aXRsZSIsInRpbWVzdGFtcCIsIkJyb3dzZXJEZXRlY3Rvcl8xIiwiSW50ZXJuYWxTdGF0ZV8xIiwiTGVhbnBsdW1JbmJveF8xIiwiTGVhbnBsdW1SZXF1ZXN0XzEiLCJMZWFucGx1bVNvY2tldF8xIiwiUHVzaE1hbmFnZXJfMSIsIk1lc3NhZ2VzXzEiLCJFdmVudEVtaXR0ZXJfMSIsIk1pZ3JhdGlvbk1hbmFnZXJfMSIsInB1YmxpY18xIiwiaW50ZXJuYWxfMSIsIlZhckNhY2hlXzEiLCJTRVNTSU9OX0tFWSIsIkxlYW5wbHVtSW50ZXJuYWwiLCJfbWlncmF0aW9uIiwiX2V2ZW50cyIsIl9pbnRlcm5hbFN0YXRlIiwiX2xwSW5ib3giLCJvbkluYm94QWN0aW9uIiwiX2xwUmVxdWVzdCIsIl92YXJDYWNoZSIsIl9scFNvY2tldCIsImdldExhc3RSZXNwb25zZSIsIl9wdXNoTWFuYWdlciIsIl9tZXNzYWdlcyIsIl9icm93c2VyRGV0ZWN0b3IiLCJwcmV2ZW50ZWQiLCJwcmV2ZW50RGVmYXVsdCIsInNoYSIsInZlcmlmeVN0YXRlIiwiX3dlYlB1c2hPcHRpb25zIiwicGF0aCIsIl9jdCIsIl9sb2NhbGUiLCJfZGV2aWNlTmFtZSIsIl9kZXZpY2VNb2RlbCIsImJhdGNoQ29vbGRvd24iLCJfc3lzdGVtTmFtZSIsIl9zeXN0ZW1WZXJzaW9uIiwidmFyaWFudHMiLCJ0cmFja01lc3NhZ2UiLCJyZWdpc3RlckFjdGlvbkRlZmluaXRpb24iLCJraW5kIiwiTWVzc2FnZUtpbmQiLCJUZW1wbGF0ZSIsImdldFZhcnNSZXNwb25zZSIsImlzU3VjY2VzcyIsImlzUmVzcG9uc2VTdWNjZXNzIiwiYXBwbHlEaWZmcyIsInNldFZhcmlhbnREZWJ1Z0luZm8iLCJfc2Vzc2lvbkxlbmd0aCIsImhhc0FjdGl2ZVNlc3Npb24iLCJnZXRTdGF0ZSIsIk1pZ3JhdGlvblN0YXRlIiwiRFVQTElDQVRFIiwiaW5pdENsZXZlclRhcCIsImlzU3Vic2NyaWJlZCIsIkNMRVZFUlRBUCIsIm9uVXBkYXRlIiwidHJpZ2dlclZhcmlhYmxlc0NoYW5nZWRIYW5kbGVycyIsInN0YXJ0UmVzcG9uc2UiLCJ1cGRhdGVTZXNzaW9uIiwiYWN0aW9uRGVmaW5pdGlvbnMiLCJsYXRlc3RWZXJzaW9uIiwibG9nIiwiY29ubmVjdFNvY2tldCIsInRva2VuIiwibG9hZERpZmZzIiwic3VjY2VzcyIsImlzUHVyY2hhc2UiLCJjbGllbnRVcmwiLCJ3b3JrZXJVcmwiLCJzdWJzY3JpYmVVc2VyIiwicmVqZWN0IiwidW5zdWJzY3JpYmVVc2VyIiwiaW52b2NhdGlvbiIsImR1cGxpY2F0ZVJlcXVlc3QiLCJjb25uZWN0IiwiY3VycmVudFRpbWUiLCJsYXN0QWN0aXZlIiwiTmV0d29ya18xIiwiTGVhbnBsdW1SZXF1ZXN0IiwibmV0d29yayIsImNvb2xkb3duVGltZW91dCIsImxhc3RSZXF1ZXN0VGltZSIsInVzZXJJZFZhbHVlIiwibG9hZEhvc3RDb25maWciLCJsb2FkTG9jYWwiLCJwb3NzaWJsZSIsInJhbmRvbSIsInNhdmVMb2NhbCIsImFyZ3NCdWlsZGVyIiwic2VuZFJlcXVlc3QiLCJzZW5kVW5zZW50UmVxdWVzdHMiLCJyZXF1ZXN0c1RvU2VuZCIsInBvcFVuc2VudFJlcXVlc3RzIiwicmVxdWVzdERhdGEiLCJtdWx0aVJlcXVlc3RBcmdzIiwic2F2ZVJlcXVlc3RGb3JMYXRlciIsImdldEZpcnN0UmVzcG9uc2UiLCJCb29sZWFuIiwicXVlcnkiLCJhamF4IiwibWV0aG9kUmVzcG9uc2UiLCJzaGEyNTYiLCJtaWdyYXRlU3RhdGUiLCJhcGlIb3N0IiwiZGV2U2VydmVySG9zdCIsInJlbW92ZUxvY2FsIiwiaWdub3JlZCIsImhvc3RDb25maWciLCJsb2Rhc2hfaXNlcXVhbF8xIiwiU29ja2V0SW9DbGllbnRfMSIsIkxlYW5wbHVtU29ja2V0IiwibmV0d29ya1RpbWVvdXRTZWNvbmRzIiwic29ja2V0Q2xpZW50Iiwic29ja2V0SG9zdCIsImF1dGgiLCJXZWJTb2NrZXQiLCJhdXRoU2VudCIsIm9ub3BlbiIsInNlbmQiLCJvbmVycm9yIiwib25tZXNzYWdlIiwib25NZXNzYWdlUmVjZWl2ZWQiLCJvbmNsb3NlIiwiY29ubmVjdGVkIiwiY29ubmVjdGluZyIsImRpc2Nvbm5lY3QiLCJhcmdzXzEiLCJkaWZmcyIsInNlbmRWYXJpYWJsZXMiLCJ1cGRhdGVkIiwic2VuZEFjdGlvbnMiLCJhbGVydCIsIlZhbHVlVHJhbnNmb3Jtc18xIiwiT2NjdXJyZW5jZVRyYWNrZXIiLCJ0cmlnZ2VycyIsIm9jY3VycmVuY2VzIiwicmVjb3JkT2NjdXJyZW5jZSIsInNlc3Npb25PY2N1cnJlbmNlcyIsInJlY29yZFRyaWdnZXJPY2N1cnJlbmNlIiwidHJpZ2dlck9jY3VycmVuY2VzIiwiZ2V0U2Vzc2lvbk9jY3VycmFuY2VDb3VudCIsImdldE9jY3VycmVuY2VzIiwiY2xlYXJTZXNzaW9uIiwianNvbiIsIm1heWJlSlNPTiIsInN0ciIsIk1lc3NhZ2VzIiwiX21lc3NhZ2VDYWNoZSIsIm9jY3VycmVuY2VUcmFja2VyIiwiX3Nob3dSaWNoSUFNIiwib25NZXNzYWdlUHJldmlldyIsIm9uTWVzc2FnZXNSZWNlaXZlZCIsIm9uVHJpZ2dlciIsInRyaWdnZXIiLCJhdHRyaWJ1dGVzIiwiY29udGV4dCIsImdldE1lc3NhZ2VzIiwic2hvdWxkU2hvd01lc3NhZ2UiLCJzaG93TWVzc2FnZSIsImV2ZW50SW5mbyIsInJ1bkFjdGlvbk5hbWVkIiwiYWN0aW9uTmFtZSIsInJ1blRyYWNrZWRBY3Rpb25OYW1lZCIsImhhbmRsZU1lc3NhZ2UiLCJhZGREZWZhdWx0cyIsInJlY2VpdmVkTWVzc2FnZXMiLCJtYXRjaGVzVHJpZ2dlciIsIndoZW5UcmlnZ2VycyIsIm1hdGNoZXNVbmxlc3MiLCJ1bmxlc3NUcmlnZ2VycyIsInRyaWdnZXJzQ291bnQiLCJtYXRjaGVzTGltaXRzIiwid2hlbkxpbWl0cyIsInN0YXJ0VGltZSIsImVuZFRpbWUiLCJldmVudFVybCIsImFjYyIsInBhcmFtIiwibWV0YWRhdGEiLCJ2aXNpYmlsaXR5IiwibGVmdCIsImFuY2hvclByb3AiLCJhbHRQcm9wIiwidG9wIiwiZm9jdXMiLCJwYXJhbWV0ZXJzIiwiX19uYW1lX18iLCJyZXNvbHZlRmlsZXMiLCJ0ZW1wbGF0ZU5hbWUiLCJ0ZW1wbGF0ZSIsInJlbmRlclJpY2hJbkFwcE1lc3NhZ2UiLCJyZXNvbHZlRmllbGRzIiwiY3NzVGV4dCIsImpvaW4iLCJpbnNlcnRCZWZvcmUiLCJmaXJzdENoaWxkIiwiY29udGVudCIsInNyY2RvYyIsInRyYWNrT3B0aW9ucyIsImRlZmluZWQiLCJwYXJlbnRNZXNzYWdlSWQiLCJwcm9jZXNzQWN0aW9uIiwiVVJMIiwibWVzc2FnZUlkRnJvbUFjdGlvbiIsImNoYWluZWRNZXNzYWdlSWRfMSIsIm1lc3NhZ2VfMSIsImRlZmluaXRpb24iLCJraW5kcyIsInVzZURlZmF1bHRzIiwiZGVmYXVsdFZhbHVlcyIsImZpbGVQcmVmaXgiLCJjb2xvclN1ZmZpeCIsImRlY29kZUNvbG9yIiwiaWdub3JlQ2FzZUVxdWFscyIsImIiLCJsb2NhbGVDb21wYXJlIiwic2Vuc2l0aXZpdHkiLCJtYXRjaGVzVHJpZ2dlcnMiLCJjb250ZXh0Tm91biIsIm1hdGNoZXNOb3VuIiwibm91biIsInZlcmIiLCJvYmplY3RzIiwicGFyYW1ldGVyIiwibWF0Y2hlc1BhcmFtIiwiY2hpbGRyZW4iLCJzb21lIiwic3ViamVjdCIsImNvbnRhaW5zQXR0cmlidXRlIiwiY29udGV4dFZhbHVlXzEiLCJldmVyeSIsImxpbWl0IiwicGVySW50ZXJ2YWwiLCJ0aW1lU2xvdCIsInZlcmJUb0ludGVydmFsIiwiSWRlbnRpdHlNYW5hZ2VyIiwiSWRlbnRpdHlTdGF0ZSIsImNsZXZlcnRhcF93ZWJfc2RrXzEiLCJub29wIiwidG9NaWdyYXRpb25TdGF0ZSIsInNkayIsIkxFQU5QTFVNIiwiVU5LTk9XTiIsIk1pZ3JhdGlvbk1hbmFnZXIiLCJzYXZlZFJlc3BvbnNlIiwiZ2V0TWlncmF0aW9uU3RhdGUiLCJjb25maWciLCJjdCIsInJlZ2lvbkNvZGUiLCJhcmdzRGljdCIsImlzQW5vbnltb3VzIiwiZXZlbnRQdXNoIiwicHJvZmlsZVB1c2giLCJhdHRycyIsIm1hcEF0dHJpYnV0ZXMiLCJjb252ZXJ0QXJyYXlzIiwiaXNFbmdhZ2VtZW50RXZlbnQiLCJldmVudFBhcmFtcyIsIm1hcHBpbmciLCJhdHRyaWJ1dGVNYXBwaW5ncyIsInIiLCJBTk9OWU1PVVMiLCJpZGVudGlmeSIsImFub255bW91c0xvZ2luVXNlcklkIiwiSURFTlRJRklFRCIsImlkZW50aWZ5Tm9uQW5vbnltb3VzIiwiTmV0d29yayIsInJlcXVlc3RRdWV1ZSIsInJ1bm5pbmdSZXF1ZXN0IiwibWV0aG9kIiwicGxhaW5UZXh0IiwiZW5xdWV1ZVJlcXVlc3QiLCJYRG9tYWluUmVxdWVzdCIsImFqYXhJRTgiLCJoYW5kbGVkIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZV8xIiwicGFyc2VFcnJvciIsInJlc3BvbnNlVGV4dCIsInN0YXR1cyIsImRlcXVldWVSZXF1ZXN0Iiwic2V0UmVxdWVzdEhlYWRlciIsImFib3J0IiwieGRyIiwib250aW1lb3V0Iiwib25wcm9ncmVzcyIsInRpbWVvdXQiLCJyZXF1ZXN0QXJndW1lbnRzIiwiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJfX2dlbmVyYXRvciIsIl8iLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwib3AiLCJQdXNoTWFuYWdlciIsImdldFNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24iLCJ1cGRhdGVOZXdTdWJzY3JpcHRpb25PblNlcnZlciIsImVycm9yXzEiLCJlcnJvcl8yIiwidXJsQjY0VG9VaW50OEFycmF5IiwiRXJyb3IiLCJlcnJvcl8zIiwiZ2V0UmVnaXN0cmF0aW9uIiwiZGVjb2RlRGF0YSIsIm91dHB1dEFycmF5IiwicHJlcGFyZWRTdWJzY3JpcHRpb24iLCJwcmVwYXJlU3Vic2NyaXB0aW9uIiwicHJlcGFyZWRTdWJzY3JpcHRpb25TdHJpbmciLCJzZXRTdWJzY3JpcHRpb24iLCJnZXRLZXkiLCJrZXlBc2NpaSIsImVuY29kZURhdGEiLCJhdXRoQXNjaWkiLCJidG9hIiwiU29ja2V0SW9DbGllbnQiLCJsaW5lIiwicGFydHMiLCJoZWFydGJlYXQiLCJzb2NrZXQiLCJoZWFydGJlYXRJbnRlcnZhbCIsIm1lc3NhZ2VQYXJ0cyIsIm1lc3NhZ2VFdmVudCIsImFyZ3NKc29uIiwic3RvcmFnZUVuYWJsZWQiLCJsb2NhbCIsImFsdGVybmF0ZVN0b3JhZ2UiLCJWYWx1ZVRyYW5zZm9ybXMiLCJjb2xvciIsImVuY29kZUNvbG9yIiwicmdiYSIsImhleCIsIlZhckNhY2hlIiwiaGFzUmVjZWl2ZWREaWZmcyIsIm1lcmdlZCIsInZhcmlhYmxlc0NoYW5nZWRIYW5kbGVycyIsInZhcmlhbnREZWJ1Z0luZm8iLCJreCIsIm1lcmdlSGVscGVyIiwic2F2ZURpZmZzIiwiY3VycmVudCIsInNldFZhcnMiLCJhcmd1bWVudFRyZWUiLCJhcmd1bWVudEtpbmRzIiwib3B0aW9uc1RvRGVmaW5pdGlvbnMiLCJwcmVmaXgiLCJkaWZmIiwib2JqSXRlcmF0b3IiLCJhdHRyIiwidmFyc0l0ZXJhdG9yIiwiZGlmZkl0ZXJhdG9yIiwiYXR0cmlidXRlIiwibWVyZ2VkXzEiLCJ2YXJTdWJzY3JpcHQiLCJzdWJzY3JpcHQiLCJkaWZmVmFsdWUiLCJBY3Rpb25QYXJhbWV0ZXJUeXBlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwibG9hZGVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdsb2JhbFRoaXMiLCJubWQiLCJwYXRocyJdLCJzb3VyY2VSb290IjoiIn0=